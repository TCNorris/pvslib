(continuous_linear
 (linear_cont_TCC1 0
  (linear_cont_TCC1-1 nil 3430729650
   ("" (skosimp*)
    (("" (lemma "connected_domain")
      (("" (inst?) (("" (inst - "y!1") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((connected_domain formula-decl nil continuous_linear nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (T formal-subtype-decl nil continuous_linear nil)
    (T_pred const-decl "[real -> boolean]" continuous_linear nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (linear_cont assuming "linear_functions[T].linear_functions"
    "connected_domain: ASSUMPTION FORALL (x, y: linear_functions.T), (z: reals.real): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), linear_functions.T_pred(z))")))
 (linear_cont_TCC2 0
  (linear_cont_TCC2-1 nil 3430729650
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil continuous_linear nil)) nil
   (linear_cont assuming "linear_functions[T].linear_functions"
    "not_one_element: ASSUMPTION FORALL (x: linear_functions.T): EXISTS (y: linear_functions.T): x /= y")))
 (linear_cont 0
  (linear_cont-3 nil 3258280425
   ("" (skosimp*)
    (("" (expand "linear?")
      (("" (skosimp*)
        (("" (replace -1 * lr)
          (("" (hide -1)
            (("" (expand "continuous?")
              (("" (skosimp*)
                (("" (lemma "identity_continuous[T]")
                  (("" (inst -1 "x0!1")
                    (("" (lemma "scal_continuous[T]")
                      (("" (inst -1 "I[T]" "m!1" "x0!1")
                        (("" (assert)
                          (("" (hide -2)
                            (("" (lemma "sum_continuous[T]")
                              ((""
                                (inst -1 "m!1 * I[T]" "const_fun(k!1)" "x0!1")
                                (("" (assert)
                                  (("" (split -1)
                                    (("1" (expand "*")
                                      (("1"
                                        (expand "const_fun")
                                        (("1"
                                          (expand "+ ")
                                          (("1"
                                            (expand "I")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (rewrite "const_continuous[T]") nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (linear? const-decl "bool" linear_functions nil)
    (continuous? const-decl "bool" continuous_functions nil)
    (T formal-subtype-decl nil continuous_linear nil)
    (T_pred const-decl "[real -> boolean]" continuous_linear nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (identity_continuous formula-decl nil continuous_functions nil)
    (scal_continuous formula-decl nil continuous_functions nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (id_fun_continuous name-judgement "continuous_fun" continuous_functions
     nil)
    (sum_continuous formula-decl nil continuous_functions nil)
    (const_fun_continuous application-judgement "continuous_fun"
     continuous_functions nil)
    (scal_fun_continuous application-judgement "continuous_fun"
     continuous_functions nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (const_continuous formula-decl nil continuous_functions nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (I const-decl "(bijective?[T, T])" identity nil))
   nil)
  (linear_cont-2 nil 3257796697
   ("" (skosimp*)
    (("" (replace -1)
      (("" (hide -1)
        (("" (expand "continuous?")
          (("" (skosimp*)
            (("" (lemma "identity_continuous[T]")
              (("" (inst -1 "x0!1")
                (("" (lemma "scal_continuous[T]")
                  (("" (inst -1 "I[T]" "m!1" "x0!1")
                    (("" (assert)
                      (("" (hide -2)
                        (("" (lemma "sum_continuous[T]")
                          (("" (inst -1 "m!1 * I[T]" "const_fun(c!1)" "x0!1")
                            (("" (assert)
                              (("" (split -1)
                                (("1" (expand "*")
                                  (("1" (expand "const_fun")
                                    (("1" (expand "+ ")
                                      (("1"
                                        (expand "I")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (rewrite "const_continuous[T]") nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((identity_continuous formula-decl nil continuous_functions nil)
    (scal_continuous formula-decl nil continuous_functions nil)
    (sum_continuous formula-decl nil continuous_functions nil)
    (const_continuous formula-decl nil continuous_functions nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals))
   nil)
  (linear_cont-1 nil 3257796139
   ("" (skosimp*)
    (("" (replace -1)
      (("" (hide -1)
        (("" (expand "continuous?")
          (("" (skosimp*)
            (("" (lemma "identity_continuous[T]")
              (("" (inst -1 "x0!1")
                (("" (lemma "scal_continuous[T]")
                  (("" (inst -1 "I[T]" "m!1" "x0!1")
                    (("" (assert)
                      (("" (hide -2)
                        (("" (lemma "sum_continuous[T]")
                          (("" (inst -1 "m!1 * I[T]" "const_fun(b!1)" "x0!1")
                            (("" (assert)
                              (("" (split -1)
                                (("1" (expand "*")
                                  (("1" (expand "const_fun")
                                    (("1" (expand "+ ")
                                      (("1"
                                        (expand "I")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (rewrite "const_continuous[T]") nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((identity_continuous formula-decl nil continuous_functions nil)
    (scal_continuous formula-decl nil continuous_functions nil)
    (sum_continuous formula-decl nil continuous_functions nil)
    (const_continuous formula-decl nil continuous_functions nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals))
   shostak))
 (cont_in_linear 0
  (cont_in_linear-2 "" 3790089996
   ("" (skosimp*)
    (("" (expand "continuous_in?")
      (("" (skosimp*)
        (("" (rewrite continuity_def)
          (("" (expand "convergence")
            (("" (expand "convergence")
              (("" (expand "fullset")
                (("" (expand "linear_on?")
                  (("" (skosimp*)
                    (("" (prop)
                      (("1" (expand "adh")
                        (("1" (skosimp*)
                          (("1" (inst + "min(x!1+e!1/2,(x!1+b!1)/2)")
                            (("1" (hide -1) (("1" (grind) nil nil)) nil)
                             ("2" (expand "min")
                              (("2" (ground)
                                (("1" (lemma "connected_domain")
                                  (("1" (inst?)
                                    (("1" (inst -1 "a!1" "b!1")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (lemma "connected_domain")
                                  (("2" (inst?)
                                    (("2" (inst -1 "a!1" "b!1")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (case-replace "m!1 = 0")
                          (("1"
                            (inst +
                             "min(epsilon!1,min(abs(x!1-a!1),abs(b!1-x!1)))")
                            (("1" (skosimp*)
                              (("1" (inst-cp -3 "x!1")
                                (("1" (inst - "x!2")
                                  (("1" (assert)
                                    (("1" (split -3)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (replace -3)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "abs")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide -1 -3 2)
                                            (("2"
                                              (case
                                               "abs(x!2 - x!1) < abs(x!1 - a!1)")
                                              (("1"
                                                (hide -2)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (expand "min")
                                                (("2"
                                                  (lift-if)
                                                  (("2" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (case
                                         "abs(x!2 - x!1) < abs(b!1 - x!1)")
                                        (("1"
                                          (hide -3)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (hide 3)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil)
                           ("2"
                            (inst +
                             "min(epsilon!1/abs(m!1),min(abs(x!1-a!1),abs(b!1-x!1)))")
                            (("1" (skosimp*)
                              (("1" (inst-cp - "x!1")
                                (("1" (inst - "x!2")
                                  (("1" (assert)
                                    (("1" (split -2)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case-replace
                                                   "m!1 * x!2 - m!1 * x!1 = m!1 * (x!2 - x!1)")
                                                  (("1"
                                                    (rewrite "abs_mult")
                                                    (("1"
                                                      (case
                                                       "abs(x!2 - x!1) < epsilon!1 / abs(m!1)")
                                                      (("1"
                                                        (hide -3)
                                                        (("1"
                                                          (cross-mult -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but (-2 1))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (ground)
                                        (("2"
                                          (case
                                           "abs(x!2 - x!1) <
                                     abs(x!1 - a!1)")
                                          (("1"
                                            (hide -2 3)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (hide 4)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (case
                                         "abs(x!2 - x!1) <      abs(b!1 - x!1)")
                                        (("1"
                                          (hide -1 3)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (hide 4)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "epsilon!1 / abs(m!1) > 0")
                              (("1"
                                (name-replace "EOM" "epsilon!1 / abs(m!1)")
                                (("1" (grind) nil nil)) nil)
                               ("2" (hide 2) (("2" (cross-mult 1) nil nil))
                                nil)
                               ("3" (hide 2) (("3" (grind) nil nil)) nil))
                              nil)
                             ("3" (hide -1)
                              (("3" (lemma "abs_eq_0")
                                (("3" (inst?) (("3" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_in? const-decl "bool" continuous_linear nil)
    (continuity_def formula-decl nil continuous_functions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" continuous_linear nil)
    (T formal-subtype-decl nil continuous_linear nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (linear_on? const-decl "bool" linear_functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (a!1 skolem-const-decl "T" continuous_linear nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (epsilon!1 skolem-const-decl "posreal" continuous_linear nil)
    (abs_0 formula-decl nil abs_lems reals) (< const-decl "bool" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (m!1 skolem-const-decl "real" continuous_linear nil)
    (abs_mult formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (EOM skolem-const-decl "nzreal" continuous_linear nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (abs_nat formula-decl nil abs_lems reals)
    (abs_eq_0 formula-decl nil abs_lems reals)
    (adh const-decl "setof[real]" convergence_functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (connected_domain formula-decl nil continuous_linear nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e!1 skolem-const-decl "posreal" continuous_linear nil)
    (x!1 skolem-const-decl "T" continuous_linear nil)
    (b!1 skolem-const-decl "T" continuous_linear nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (fullset const-decl "set" sets nil)
    (convergence const-decl "bool" lim_of_functions nil))
   shostak)
  (cont_in_linear-1 nil 3258990857
   ("" (skosimp*)
    (("" (expand "continuous_in?")
      (("" (skosimp*)
        (("" (rewrite continuity_def)
          (("" (expand "convergence")
            (("" (expand "convergence")
              (("" (expand "fullset")
                (("" (expand "linear_on?")
                  (("" (skosimp*)
                    (("" (prop)
                      (("1" (expand "adh")
                        (("1" (skosimp*)
                          (("1" (inst + "min(x!1+e!1/2,(x!1+b!1)/2)")
                            (("1" (hide -1) (("1" (grind) nil nil)) nil)
                             ("2" (expand "min")
                              (("2" (ground)
                                (("1" (lemma "connected_domain")
                                  (("1" (inst?)
                                    (("1" (inst -1 "a!1" "b!1")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (lemma "connected_domain")
                                  (("2" (inst?)
                                    (("2" (inst -1 "a!1" "b!1")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (case-replace "m!1 = 0")
                          (("1"
                            (inst +
                             "min(epsilon!1,min(abs(x!1-a!1),abs(b!1-x!1)))")
                            (("1" (skosimp*)
                              (("1" (inst-cp -3 "x!1")
                                (("1" (inst - "x!2")
                                  (("1" (assert)
                                    (("1" (split -3)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (replace -3)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "abs")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide -1 -3 2)
                                            (("2"
                                              (case
                                               "abs(x!2 - x!1) < abs(x!1 - a!1)")
                                              (("1"
                                                (hide -2)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (expand "min")
                                                (("2"
                                                  (lift-if)
                                                  (("2" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (case
                                         "abs(x!2 - x!1) < abs(b!1 - x!1)")
                                        (("1"
                                          (hide -3)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (hide 3)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil)
                           ("2"
                            (inst +
                             "min(epsilon!1/abs(m!1),min(abs(x!1-a!1),abs(b!1-x!1)))")
                            (("1" (skosimp*)
                              (("1" (inst-cp - "x!1")
                                (("1" (inst - "x!2")
                                  (("1" (assert)
                                    (("1" (split -2)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case-replace
                                                   "m!1 * x!2 - m!1 * x!1 = m!1 * (x!2 - x!1)")
                                                  (("1"
                                                    (rewrite "abs_mult")
                                                    (("1"
                                                      (case
                                                       "abs(x!2 - x!1) < epsilon!1 / abs(m!1)")
                                                      (("1"
                                                        (hide -3)
                                                        (("1"
                                                          (cross-mult -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but (-2 1))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (ground)
                                        (("2"
                                          (case
                                           "abs(x!2 - x!1) <
                                     abs(x!1 - a!1)")
                                          (("1"
                                            (hide -2 3)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (hide 4)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (case
                                         "abs(x!2 - x!1) <      abs(b!1 - x!1)")
                                        (("1"
                                          (hide -1 3)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (hide 4)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "epsilon!1 / abs(m!1) > 0")
                              (("1"
                                (name-replace "EOM" "epsilon!1 / abs(m!1)")
                                (("1" (grind) nil nil)) nil)
                               ("2" (hide 2)
                                (("2" (cross-mult 1) (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("3" (hide 2) (("3" (grind) nil nil)) nil))
                              nil)
                             ("3" (hide -1)
                              (("3" (lemma "abs_eq_0")
                                (("3" (inst?) (("3" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuity_def formula-decl nil continuous_functions nil)
    (convergence const-decl "bool" convergence_functions nil)
    (linear_on? const-decl "bool" linear_functions nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (abs_0 formula-decl nil abs_lems reals)
    (abs_eq_0 formula-decl nil abs_lems reals)
    (abs_nat formula-decl nil abs_lems reals)
    (convergence const-decl "bool" lim_of_functions nil))
   nil))
 (unary_minus_dist 0
  (unary_minus_dist-1 nil 3258987029
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (piecewise 0
  (piecewise-4 "" 3790090005
   ("" (skosimp*)
    (("" (assert)
      (("" (rewrite continuity_def)
        (("" (expand "convergence")
          (("" (expand "fullset")
            (("" (expand "linear_on?")
              (("" (skosimp*)
                (("" (expand "convergence")
                  (("" (prop)
                    (("1" (expand "adh")
                      (("1" (skosimp*)
                        (("1" (inst + "b!1")
                          (("1" (expand "abs") (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (case "m!1 = 0 AND m!2 = 0")
                        (("1" (flatten)
                          (("1" (replace -1)
                            (("1" (replace -2)
                              (("1" (assert)
                                (("1"
                                  (inst + "min(abs(b!1-a!1),abs(c!1-b!1))")
                                  (("1" (skosimp*)
                                    (("1" (lift-if)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (hide -9)
                                          (("1"
                                            (inst-cp - "x!1")
                                            (("1"
                                              (inst - "b!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -8)
                                                  (("1"
                                                    (split -9)
                                                    (("1"
                                                      (replace -1)
                                                      (("1" (assert) nil nil))
                                                      nil)
                                                     ("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -7)
                                          (("2"
                                            (inst-cp - "x!1")
                                            (("2"
                                              (inst - "b!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -4 * rl)
                                                  (("2"
                                                    (replace -7)
                                                    (("2"
                                                      (split -8)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand "abs")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 3)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (name "Mabc" "min(abs(b!1-a!1),abs(c!1-b!1))")
                          (("2" (case-replace "m!1 = 0")
                            (("1" (assert)
                              (("1" (hide -1)
                                (("1" (inst + "min(epsilon!1/abs(m!2), Mabc)")
                                  (("1" (skosimp*)
                                    (("1" (lift-if)
                                      (("1"
                                        (case "x!1 <= b!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -2 * rl)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (hide -7)
                                                (("1"
                                                  (inst-cp - "x!1")
                                                  (("1"
                                                    (inst - "b!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -6)
                                                        (("1"
                                                          (split -7)
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand "abs")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (hide -6)
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (replace -2)
                                                (("2"
                                                  (inst-cp - "x!1")
                                                  (("2"
                                                    (inst - "b!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -5)
                                                        (("2"
                                                          (split -6)
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case-replace
                                                                 "m!2 * x!1 - m!2 * b!1 = m!2 * (x!1 - b!1)")
                                                                (("1"
                                                                  (rewrite
                                                                   "abs_mult")
                                                                  (("1"
                                                                    (div-by
                                                                     3
                                                                     "abs(m!2)")
                                                                    (("1"
                                                                      (grind
                                                                       :exclude
                                                                       "abs")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 4)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (case "epsilon!1 / abs(m!2) > 0")
                                    (("1" (grind) nil nil)
                                     ("2" (case "abs(m!2) = 0")
                                      (("1"
                                        (expand "abs" -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if)
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (mult-by 2 "abs(m!2)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3" (expand "abs" 1)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (ground)
                                          (("1"
                                            (lift-if)
                                            (("1" (ground) nil nil))
                                            nil)
                                           ("2"
                                            (lift-if)
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (expand "abs" 1)
                                    (("3" (lift-if) (("3" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2" (case-replace "m!2 = 0")
                                (("1" (hide -1)
                                  (("1"
                                    (inst + "min(epsilon!1/abs(m!1), Mabc)")
                                    (("1" (skosimp*)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (case "x!1 <= b!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -2 * rl)
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (hide -7)
                                                    (("1"
                                                      (inst-cp - "x!1")
                                                      (("1"
                                                        (inst - "b!1")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (split -6)
                                                            (("1"
                                                              (replace -1)
                                                              (("1"
                                                                (split -7)
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case-replace
                                                                       "m!1 * x!1 - m!1 * b!1 = m!1 * (x!1 - b!1)")
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (rewrite
                                                                           "abs_mult")
                                                                          (("1"
                                                                            (div-by
                                                                             2
                                                                             "abs(m!1)")
                                                                            (("1"
                                                                              (grind
                                                                               :exclude
                                                                               "abs")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 3)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (replace -1 * rl)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (hide -5)
                                                    (("2"
                                                      (replace -2)
                                                      (("2"
                                                        (inst-cp - "x!1")
                                                        (("2"
                                                          (inst - "b!1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replace -5)
                                                              (("2"
                                                                (split -6)
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (expand
                                                                     "abs")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 4)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (case "epsilon!1 / abs(m!1) > 0")
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (case "abs(m!1) = 0")
                                          (("1"
                                            (expand "abs")
                                            (("1"
                                              (lift-if)
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil)
                                           ("2" (cross-mult 2) nil nil))
                                          nil))
                                        nil)
                                       ("3" (assert) nil nil))
                                      nil)
                                     ("3" (expand "abs" 1)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (expand "abs")
                                            (("3"
                                              (lift-if)
                                              (("3" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert)
                                  (("2"
                                    (case-replace
                                     "abs(m!1) > 0 AND abs(m!2) > 0")
                                    (("1" (flatten)
                                      (("1"
                                        (name
                                         "MEPS"
                                         "min(epsilon!1/abs(m!1),epsilon!1/abs(m!2))")
                                        (("1"
                                          (inst + "min(MEPS,Mabc)")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (case "x!1 <= b!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -11)
                                                    (("1"
                                                      (inst-cp - "x!1")
                                                      (("1"
                                                        (inst - "b!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace -10)
                                                            (("1"
                                                              (split -11)
                                                              (("1"
                                                                (replace -1)
                                                                (("1"
                                                                  (case-replace
                                                                   "m!1 * x!1 - m!1 * b!1 = m!1 * (x!1 - b!1)")
                                                                  (("1"
                                                                    (rewrite
                                                                     "abs_mult")
                                                                    (("1"
                                                                      (div-by
                                                                       3
                                                                       "abs(m!1)")
                                                                      (("1"
                                                                        (case-replace
                                                                         "abs((x!1 - b!1)) < MEPS")
                                                                        (("1"
                                                                          (replace
                                                                           -5
                                                                           *
                                                                           rl)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-1
                                                                              1
                                                                              2
                                                                              3))
                                                                            (("1"
                                                                              (expand
                                                                               "min")
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           4)
                                                                          (("2"
                                                                            (hide
                                                                             -7)
                                                                            (("2"
                                                                              (grind
                                                                               :exclude
                                                                               "abs")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide 4)
                                                                  (("2"
                                                                    (hide -2)
                                                                    (("2"
                                                                      (hide
                                                                       -2
                                                                       -3)
                                                                      (("2"
                                                                        (replace
                                                                         -2
                                                                         *
                                                                         rl)
                                                                        (("2"
                                                                          (hide
                                                                           -2)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -9)
                                                    (("2"
                                                      (replace -6)
                                                      (("2"
                                                        (hide -6)
                                                        (("2"
                                                          (inst-cp - "x!1")
                                                          (("2"
                                                            (inst - "b!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split -9)
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (hide -1)
                                                                    (("1"
                                                                      (replace
                                                                       -8)
                                                                      (("1"
                                                                        (hide
                                                                         -8)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case-replace
                                                                             "m!2 * x!1 - m!2 * b!1 = m!2 * (x!1 - b!1)")
                                                                            (("1"
                                                                              (rewrite
                                                                               "abs_mult")
                                                                              (("1"
                                                                                (div-by
                                                                                 4
                                                                                 "abs(m!2)")
                                                                                (("1"
                                                                                  (hide
                                                                                   -1
                                                                                   -3
                                                                                   -5)
                                                                                  (("1"
                                                                                    (grind
                                                                                     :exclude
                                                                                     "abs")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 5)
                                                                  (("2"
                                                                    (hide -1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "MEPS > 0 AND Mabc > 0")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "min" 1)
                                                (("1"
                                                  (lift-if)
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (split +)
                                                (("1"
                                                  (case-replace
                                                   "epsilon!1 / abs(m!1) > 0 AND epsilon!1 / abs(m!2) > 0 ")
                                                  (("1"
                                                    (hide -3)
                                                    (("1"
                                                      (hide -4)
                                                      (("1"
                                                        (grind :exclude "abs")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (prop)
                                                    (("1"
                                                      (case "abs(m!1) > 0")
                                                      (("1"
                                                        (cross-mult 1)
                                                        nil
                                                        nil)
                                                       ("2" (propax) nil nil))
                                                      nil)
                                                     ("2"
                                                      (cross-mult 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "abs" -2)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (hide -2 -8 -9)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -2 -8 -9)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (expand "abs" 1)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (ground)
                                          (("1"
                                            (lift-if)
                                            (("1" (ground) nil nil))
                                            nil)
                                           ("2"
                                            (lift-if)
                                            (("2" (ground) nil nil))
                                            nil)
                                           ("3"
                                            (lift-if)
                                            (("3" (ground) nil nil))
                                            nil)
                                           ("4"
                                            (lift-if)
                                            (("4" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (linear_on? const-decl "bool" linear_functions nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (/= const-decl "boolean" notequal nil)
    (m!2 skolem-const-decl "real" continuous_linear nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (epsilon!1 skolem-const-decl "posreal" continuous_linear nil)
    (Mabc skolem-const-decl
     "{z: nonneg_real | z <= abs(b!1 - a!1) AND z <= abs(c!1 - b!1)}"
     continuous_linear nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (abs_mult formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (< const-decl "bool" reals nil)
    (MEPS skolem-const-decl
     "{z: nzreal | z <= epsilon!1 / abs(m!1) AND z <= epsilon!1 / abs(m!2)}"
     continuous_linear nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nzreal_min application-judgement "{z: nzreal | z <= x AND z <= y}"
     real_defs nil)
    (m!1 skolem-const-decl "real" continuous_linear nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (abs_0 formula-decl nil abs_lems reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (unary_minus_dist formula-decl nil continuous_linear nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (c!1 skolem-const-decl "T" continuous_linear nil)
    (a!1 skolem-const-decl "T" continuous_linear nil)
    (b!1 skolem-const-decl "T" continuous_linear nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (> const-decl "bool" reals nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (fullset const-decl "set" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (T formal-subtype-decl nil continuous_linear nil)
    (T_pred const-decl "[real -> boolean]" continuous_linear nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (continuity_def formula-decl nil continuous_functions nil))
   shostak)
  (piecewise-3 nil 3258287121
   ("" (skosimp*)
    (("" (assert)
      (("" (rewrite continuity_def)
        (("" (expand "convergence")
          (("" (expand "fullset")
            (("" (expand "linear_on?")
              (("" (skosimp*)
                (("" (expand "convergence")
                  (("" (prop)
                    (("1" (expand "adh")
                      (("1" (skosimp*)
                        (("1" (inst + "b!1")
                          (("1" (expand "abs") (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (case "m!1 = 0 AND m!2 = 0")
                        (("1" (flatten)
                          (("1" (replace -1)
                            (("1" (replace -2)
                              (("1" (assert)
                                (("1"
                                  (inst + "min(abs(b!1-a!1),abs(c!1-b!1))")
                                  (("1" (skosimp*)
                                    (("1" (lift-if)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (hide -9)
                                          (("1"
                                            (inst-cp - "x!1")
                                            (("1"
                                              (inst - "b!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -8)
                                                  (("1"
                                                    (split -9)
                                                    (("1"
                                                      (replace -1)
                                                      (("1" (assert) nil nil))
                                                      nil)
                                                     ("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -7)
                                          (("2"
                                            (inst-cp - "x!1")
                                            (("2"
                                              (inst - "b!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -4 * rl)
                                                  (("2"
                                                    (replace -7)
                                                    (("2"
                                                      (split -8)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand "abs")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 3)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (name "Mabc" "min(abs(b!1-a!1),abs(c!1-b!1))")
                          (("2" (case-replace "m!1 = 0")
                            (("1" (assert)
                              (("1" (hide -1)
                                (("1" (inst + "min(epsilon!1/abs(m!2), Mabc)")
                                  (("1" (skosimp*)
                                    (("1" (lift-if)
                                      (("1"
                                        (case "x!1 <= b!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -2 * rl)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (hide -7)
                                                (("1"
                                                  (inst-cp - "x!1")
                                                  (("1"
                                                    (inst - "b!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -6)
                                                        (("1"
                                                          (split -7)
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand "abs")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (hide -6)
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (replace -2)
                                                (("2"
                                                  (inst-cp - "x!1")
                                                  (("2"
                                                    (inst - "b!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -5)
                                                        (("2"
                                                          (split -6)
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case-replace
                                                                 "m!2 * x!1 - m!2 * b!1 = m!2 * (x!1 - b!1)")
                                                                (("1"
                                                                  (rewrite
                                                                   "abs_mult")
                                                                  (("1"
                                                                    (div-by
                                                                     3
                                                                     "abs(m!2)")
                                                                    (("1"
                                                                      (grind
                                                                       :exclude
                                                                       "abs")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 4)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (case "epsilon!1 / abs(m!2) > 0")
                                    (("1" (grind) nil nil)
                                     ("2" (case "abs(m!2) = 0")
                                      (("1"
                                        (expand "abs" -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if)
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (mult-by 2 "abs(m!2)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3" (expand "abs" 1)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (ground)
                                          (("1"
                                            (lift-if)
                                            (("1" (ground) nil nil))
                                            nil)
                                           ("2"
                                            (lift-if)
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (expand "abs" 1)
                                    (("3" (lift-if) (("3" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2" (case-replace "m!2 = 0")
                                (("1" (hide -1)
                                  (("1"
                                    (inst + "min(epsilon!1/abs(m!1), Mabc)")
                                    (("1" (skosimp*)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (case "x!1 <= b!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -2 * rl)
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (hide -7)
                                                    (("1"
                                                      (inst-cp - "x!1")
                                                      (("1"
                                                        (inst - "b!1")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (split -6)
                                                            (("1"
                                                              (replace -1)
                                                              (("1"
                                                                (split -7)
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case-replace
                                                                       "m!1 * x!1 - m!1 * b!1 = m!1 * (x!1 - b!1)")
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (rewrite
                                                                           "abs_mult")
                                                                          (("1"
                                                                            (div-by
                                                                             2
                                                                             "abs(m!1)")
                                                                            (("1"
                                                                              (grind
                                                                               :exclude
                                                                               "abs")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 3)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (replace -1 * rl)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (hide -5)
                                                    (("2"
                                                      (replace -2)
                                                      (("2"
                                                        (inst-cp - "x!1")
                                                        (("2"
                                                          (inst - "b!1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replace -5)
                                                              (("2"
                                                                (split -6)
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (expand
                                                                     "abs")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 4)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (case "epsilon!1 / abs(m!1) > 0")
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (case "abs(m!1) = 0")
                                          (("1"
                                            (expand "abs")
                                            (("1"
                                              (lift-if)
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (cross-mult 2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (assert) nil nil))
                                      nil)
                                     ("3" (expand "abs" 1)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (expand "abs")
                                            (("3"
                                              (lift-if)
                                              (("3" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert)
                                  (("2"
                                    (case-replace
                                     "abs(m!1) > 0 AND abs(m!2) > 0")
                                    (("1" (flatten)
                                      (("1"
                                        (name
                                         "MEPS"
                                         "min(epsilon!1/abs(m!1),epsilon!1/abs(m!2))")
                                        (("1"
                                          (inst + "min(MEPS,Mabc)")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (case "x!1 <= b!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -11)
                                                    (("1"
                                                      (inst-cp - "x!1")
                                                      (("1"
                                                        (inst - "b!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace -10)
                                                            (("1"
                                                              (split -11)
                                                              (("1"
                                                                (replace -1)
                                                                (("1"
                                                                  (case-replace
                                                                   "m!1 * x!1 - m!1 * b!1 = m!1 * (x!1 - b!1)")
                                                                  (("1"
                                                                    (rewrite
                                                                     "abs_mult")
                                                                    (("1"
                                                                      (div-by
                                                                       3
                                                                       "abs(m!1)")
                                                                      (("1"
                                                                        (case-replace
                                                                         "abs((x!1 - b!1)) < MEPS")
                                                                        (("1"
                                                                          (replace
                                                                           -5
                                                                           *
                                                                           rl)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-1
                                                                              1
                                                                              2
                                                                              3))
                                                                            (("1"
                                                                              (expand
                                                                               "min")
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           4)
                                                                          (("2"
                                                                            (hide
                                                                             -7)
                                                                            (("2"
                                                                              (grind
                                                                               :exclude
                                                                               "abs")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide 4)
                                                                    (("2"
                                                                      (hide
                                                                       -2)
                                                                      (("2"
                                                                        (hide
                                                                         -2
                                                                         -3)
                                                                        (("2"
                                                                          (replace
                                                                           -2
                                                                           *
                                                                           rl)
                                                                          (("2"
                                                                            (hide
                                                                             -2)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -9)
                                                    (("2"
                                                      (replace -6)
                                                      (("2"
                                                        (hide -6)
                                                        (("2"
                                                          (inst-cp - "x!1")
                                                          (("2"
                                                            (inst - "b!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split -9)
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (hide -1)
                                                                    (("1"
                                                                      (replace
                                                                       -8)
                                                                      (("1"
                                                                        (hide
                                                                         -8)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case-replace
                                                                             "m!2 * x!1 - m!2 * b!1 = m!2 * (x!1 - b!1)")
                                                                            (("1"
                                                                              (rewrite
                                                                               "abs_mult")
                                                                              (("1"
                                                                                (div-by
                                                                                 4
                                                                                 "abs(m!2)")
                                                                                (("1"
                                                                                  (hide
                                                                                   -1
                                                                                   -3
                                                                                   -5)
                                                                                  (("1"
                                                                                    (grind
                                                                                     :exclude
                                                                                     "abs")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 5)
                                                                  (("2"
                                                                    (hide -1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "MEPS > 0 AND Mabc > 0")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "min" 1)
                                                (("1"
                                                  (lift-if)
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (split +)
                                                (("1"
                                                  (case-replace
                                                   "epsilon!1 / abs(m!1) > 0 AND epsilon!1 / abs(m!2) > 0 ")
                                                  (("1"
                                                    (hide -3)
                                                    (("1"
                                                      (hide -4)
                                                      (("1"
                                                        (grind :exclude "abs")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (prop)
                                                    (("1"
                                                      (case "abs(m!1) > 0")
                                                      (("1"
                                                        (cross-mult 1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2" (propax) nil nil))
                                                      nil)
                                                     ("2"
                                                      (cross-mult 1)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "abs" -2)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (hide -2 -8 -9)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -2 -8 -9)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (expand "abs" 1)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (ground)
                                          (("1"
                                            (lift-if)
                                            (("1" (ground) nil nil))
                                            nil)
                                           ("2"
                                            (lift-if)
                                            (("2" (ground) nil nil))
                                            nil)
                                           ("3"
                                            (lift-if)
                                            (("3" (ground) nil nil))
                                            nil)
                                           ("4"
                                            (lift-if)
                                            (("4" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergence const-decl "bool" lim_of_functions nil)
    (linear_on? const-decl "bool" linear_functions nil)
    (convergence const-decl "bool" convergence_functions nil)
    (abs_0 formula-decl nil abs_lems reals)
    (adh const-decl "setof[real]" convergence_functions nil)
    (continuity_def formula-decl nil continuous_functions nil))
   nil)
  (piecewise-2 nil 3258136168
   ("" (skosimp*)
    (("" (expand "continuous?")
      (("" (expand "convergence")
        (("" (expand "fullset")
          (("" (expand "linear_on?")
            (("" (skosimp*)
              (("" (expand "convergence")
                (("" (prop)
                  (("1" (postpone) nil nil)
                   ("2" (skosimp*)
                    (("2" (case "m!1 = 0 AND m!2 = 0")
                      (("1" (flatten)
                        (("1" (replace -1)
                          (("1" (replace -2)
                            (("1" (assert)
                              (("1" (inst + "abs(b!1-a!1)")
                                (("1" (skosimp*)
                                  (("1" (lift-if)
                                    (("1" (ground)
                                      (("1"
                                        (hide -9)
                                        (("1"
                                          (inst-cp - "x!1")
                                          (("1"
                                            (inst - "b!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -8)
                                                (("1"
                                                  (split -9)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "abs")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -7)
                                        (("2"
                                          (inst-cp - "x!1")
                                          (("2"
                                            (inst - "b!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -4 * rl)
                                                (("2"
                                                  (replace -7)
                                                  (("2"
                                                    (split -8)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (expand "abs")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 3)
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (piecewise-1 nil 3258134941
   ("" (skosimp*)
    (("" (expand "continuous?")
      (("" (expand "convergence")
        (("" (expand "fullset")
          (("" (expand "linear_on?")
            (("" (skosimp*)
              (("" (expand "convergence")
                (("" (prop)
                  (("1" (postpone) nil nil)
                   ("2" (skosimp*)
                    (("2" (case "m!1 = 0 AND m!2 = 0")
                      (("1" (postpone) nil nil)
                       ("2" (inst + "min(epsilon!1/max(m!1,m!2),b!1-a!1)")
                        (("1" (skosimp*)
                          (("1" (case "x!1 <= b!1")
                            (("1" (hide -4 -6)
                              (("1" (inst-cp -3 "x!1")
                                (("1" (inst-cp -5 "x!1")
                                  (("1" (inst -3 "b!1")
                                    (("1" (inst -5 "b!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case "a!1 <= x!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -6)
                                              (("1"
                                                (hide -6)
                                                (("1"
                                                  (replace -6)
                                                  (("1"
                                                    (hide -6)
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (hide -4)
                                                        (("1"
                                                          (replace -4)
                                                          (("1"
                                                            (hide -4)
                                                            (("1"
                                                              (case-replace
                                                               "m!1 * x!1 + c!2 - (m!1 * b!1 + c!2) = m!1*(x!1-b!1)")
                                                              (("1"
                                                                (rewrite
                                                                 "abs_mult")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil) ("3" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cont_piece 0
  (cont_piece-1 nil 3258298500
   ("" (skosimp*)
    (("" (rewrite continuity_def)
      (("" (rewrite continuity_def)
        (("" (expand "convergence")
          (("" (expand "fullset")
            (("" (expand "convergence")
              (("" (flatten)
                (("" (prop)
                  (("" (skosimp*)
                    (("" (inst -5 "epsilon!1")
                      (("" (assert)
                        (("" (skosimp*)
                          (("" (inst + "min(delta!1,min(x!1 -a!1,b!1-x!1))")
                            (("1" (skosimp*)
                              (("1" (inst-cp - "x!1")
                                (("1" (inst - "x!2")
                                  (("1" (inst - "x!2")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2" (hide -5 -6 2) (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuity_def formula-decl nil continuous_functions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" continuous_linear nil)
    (T formal-subtype-decl nil continuous_linear nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (b!1 skolem-const-decl "T" continuous_linear nil)
    (a!1 skolem-const-decl "T" continuous_linear nil)
    (x!1 skolem-const-decl "T" continuous_linear nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (delta!1 skolem-const-decl "posreal" continuous_linear nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unary_minus_dist formula-decl nil continuous_linear nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fullset const-decl "set" sets nil))
   shostak))
 (top_TCC1 0
  (top_TCC1-2 "" 3790090006 ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil) (extend const-decl "R" extend nil)
    (fullset const-decl "set" sets nil)
    (T formal-subtype-decl nil continuous_linear nil)
    (T_pred const-decl "[real -> boolean]" continuous_linear nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak
   (top subtype
    "extend[real, T, booleans.bool, booleans.FALSE].extend(sets[T].fullset)"
    "(sets[real].nonempty?)"))
  (top_TCC1-1 nil 3259053981
   ("" (skosimp*)
    (("" (grind) (("" (inst -1 "a!1") (("" (assert) nil nil)) nil)) nil)) nil)
   nil shostak
   (top subtype
    "extend[real, T, booleans.bool, booleans.FALSE].extend(sets[T].fullset)"
    "(sets[real].nonempty?)")))
 (top_lem 0
  (top_lem-2 "" 3790090006
   ("" (skosimp*)
    (("" (expand "top")
      (("" (assert)
        (("" (typepred "lub(extend[real, T, bool, FALSE](fullset[T]))")
          (("" (expand "least_upper_bound?")
            (("" (flatten)
              (("" (expand "upper_bound?")
                (("" (inst?)
                  (("" (expand "extend")
                    (("" (expand "fullset") (("" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((top const-decl "real" continuous_linear nil)
    (fullset const-decl "set" sets nil) (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (T formal-subtype-decl nil continuous_linear nil)
    (T_pred const-decl "[real -> boolean]" continuous_linear nil)
    (lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (x!1 skolem-const-decl "T" continuous_linear nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak)
  (top_lem-1 nil 3259053673
   ("" (skosimp*)
    (("" (expand "top")
      (("" (assert)
        (("" (typepred "lub(extend[real, T, bool, FALSE](fullset[T]))")
          (("1" (expand "least_upper_bound?")
            (("1" (flatten)
              (("1" (expand "upper_bound?")
                (("1" (inst?)
                  (("1" (expand "extend")
                    (("1" (expand "fullset") (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "nonempty?")
            (("2" (expand "empty?")
              (("2" (expand "member")
                (("2" (inst - "a!1")
                  (("2" (expand "extend")
                    (("2" (expand "fullset") (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (top_least 0
  (top_least-2 "" 3790090007
   ("" (skosimp*)
    (("" (expand "top")
      (("" (assert)
        (("" (lift-if)
          (("" (ground)
            (("1" (typepred "lub(extend[real, T, bool, FALSE](fullset[T]))")
              (("1" (expand "least_upper_bound?")
                (("1" (flatten)
                  (("1" (inst - "y!1") (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (expand "upper_bound?")
              (("2" (inst -1 "a!1")
                (("2" (expand "extend")
                  (("2" (expand "fullset") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((top const-decl "real" continuous_linear nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs nil)
    (T_pred const-decl "[real -> boolean]" continuous_linear nil)
    (T formal-subtype-decl nil continuous_linear nil)
    (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil)
    (fullset const-decl "set" sets nil)
    (a!1 skolem-const-decl "T" continuous_linear nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak)
  (top_least-1 nil 3259056520
   ("" (skosimp*)
    (("" (expand "top")
      (("" (assert)
        (("" (lift-if)
          (("" (ground)
            (("1" (typepred "lub(extend[real, T, bool, FALSE](fullset[T]))")
              (("1" (expand "least_upper_bound?")
                (("1" (flatten)
                  (("1" (inst - "y!1") (("1" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (expand "nonempty?")
                (("2" (expand "empty?")
                  (("2" (expand "member")
                    (("2" (inst -1 "a!1")
                      (("2" (expand "extend")
                        (("2" (expand "fullset") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "upper_bound?")
              (("2" (inst -1 "a!1")
                (("2" (expand "extend")
                  (("2" (expand "fullset") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (bot_lem 0
  (bot_lem-2 "" 3790090007
   ("" (skosimp*)
    (("" (expand "bot")
      (("" (assert)
        (("" (typepred "glb(extend[real, T, bool, FALSE](fullset[T]))")
          (("" (expand "greatest_lower_bound?")
            (("" (flatten)
              (("" (expand "lower_bound?")
                (("" (inst?)
                  (("" (expand "extend")
                    (("" (expand "fullset") (("" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bot const-decl "real" continuous_linear nil)
    (fullset const-decl "set" sets nil) (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (T formal-subtype-decl nil continuous_linear nil)
    (T_pred const-decl "[real -> boolean]" continuous_linear nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}" bounded_real_defs
     nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (x!1 skolem-const-decl "T" continuous_linear nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak)
  (bot_lem-1 nil 3259057334
   ("" (skosimp*)
    (("" (expand "bot")
      (("" (assert)
        (("" (typepred "glb(extend[real, T, bool, FALSE](fullset[T]))")
          (("1" (expand "greatest_lower_bound?")
            (("1" (flatten)
              (("1" (expand "lower_bound?")
                (("1" (inst?)
                  (("1" (expand "extend")
                    (("1" (expand "fullset") (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "nonempty?")
            (("2" (expand "empty?")
              (("2" (expand "member")
                (("2" (inst - "a!1")
                  (("2" (expand "extend")
                    (("2" (expand "fullset") (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (bot_least 0
  (bot_least-2 "" 3790090007
   ("" (skosimp*)
    (("" (expand "bot")
      (("" (assert)
        (("" (lift-if)
          (("" (prop)
            (("1" (typepred "glb(extend[real, T, bool, FALSE](fullset[T]))")
              (("1" (expand "greatest_lower_bound?")
                (("1" (flatten)
                  (("1" (inst - "y!1") (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (expand "lower_bound?")
              (("2" (inst?)
                (("2" (expand "extend")
                  (("2" (expand "fullset") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bot const-decl "real" continuous_linear nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}" bounded_real_defs
     nil)
    (T_pred const-decl "[real -> boolean]" continuous_linear nil)
    (T formal-subtype-decl nil continuous_linear nil)
    (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil)
    (fullset const-decl "set" sets nil)
    (a!1 skolem-const-decl "T" continuous_linear nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak)
  (bot_least-1 nil 3259057455
   ("" (skosimp*)
    (("" (expand "bot")
      (("" (assert)
        (("" (lift-if)
          (("" (prop)
            (("1" (typepred "glb(extend[real, T, bool, FALSE](fullset[T]))")
              (("1" (expand "greatest_lower_bound?")
                (("1" (flatten)
                  (("1" (inst - "y!1") (("1" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (assert)
                (("2" (expand "nonempty?")
                  (("2" (expand "empty?")
                    (("2" (expand "member")
                      (("2" (inst - "a!1")
                        (("2" (assert)
                          (("2" (expand "extend")
                            (("2" (expand "fullset") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "lower_bound?")
              (("2" (inst?)
                (("2" (expand "extend")
                  (("2" (expand "fullset") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cont_upto_lub 0
  (cont_upto_lub-3 "" 3790090008
   ("" (stop-rewrite "abs_0")
    (("" (skosimp*)
      (("" (rewrite continuity_def)
        (("" (expand "convergence")
          (("" (expand "fullset")
            (("" (expand "convergence")
              (("" (prop)
                (("1" (expand "adh")
                  (("1" (skosimp*)
                    (("1"
                      (inst +
                       "IF x!1 - a!1 < e!1 THEN a!1 ELSE x!1 - e!1/2 ENDIF")
                      (("1" (lift-if)
                        (("1" (expand "abs")
                          (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
                        nil)
                       ("2" (flatten)
                        (("2" (lemma "connected_domain")
                          (("2" (inst -1 "a!1" "x!1" "_")
                            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (expand "linear_on?")
                    (("2" (skosimp*)
                      (("2"
                        (inst + "IF m!1 = 0 THEN min(epsilon!1,x!1-a!1)
                                        ELSE min(epsilon!1/abs(m!1),x!1-a!1)
                                        ENDIF")
                        (("1" (skosimp*)
                          (("1" (inst-cp - "x!1")
                            (("1" (inst - "x!2")
                              (("1" (assert)
                                (("1" (split -6)
                                  (("1" (split -7)
                                    (("1" (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case-replace
                                                 "m!1 * x!2 - m!1 * x!1 = m!1 * (x!2 - x!1)")
                                                (("1"
                                                  (rewrite "abs_mult")
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (case
                                                           "abs(x!2 - x!1) < epsilon!1 / abs(m!1)")
                                                          (("1"
                                                            (cross-mult -1)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand "min")
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (lemma "top_lem")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "fullset")
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2" (hide -4 -5) (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("3" (hide 2)
                                    (("3" (lemma "top_lem")
                                      (("3"
                                        (inst?)
                                        (("3"
                                          (expand "fullset")
                                          (("3" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide -3 -5)
                            (("2" (assert)
                              (("2"
                                (case "min(epsilon!1 / abs(m!1), x!1 - a!1) > 0")
                                (("1" (assert) nil nil)
                                 ("2" (hide 3)
                                  (("2" (grind)
                                    (("1" (cross-mult 2) nil nil)
                                     ("2" (cross-mult 3) nil nil)
                                     ("3" (cross-mult 2) nil nil)
                                     ("4" (cross-mult 3) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "abs")
                          (("3" (ground)
                            (("3" (lift-if) (("3" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (flatten)
                          (("4" (hide -4 -5 -6) (("4" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergence const-decl "bool" lim_of_functions nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (e!1 skolem-const-decl "posreal" continuous_linear nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (a!1 skolem-const-decl "T" continuous_linear nil)
    (x!1 skolem-const-decl "T" continuous_linear nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (unary_minus_dist formula-decl nil continuous_linear nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (connected_domain formula-decl nil continuous_linear nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (linear_on? const-decl "bool" linear_functions nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (set type-eq-decl nil sets nil) (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (top const-decl "real" continuous_linear nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (top_lem formula-decl nil continuous_linear nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs_nat formula-decl nil abs_lems reals)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (abs_mult formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (m!1 skolem-const-decl "real" continuous_linear nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (epsilon!1 skolem-const-decl "posreal" continuous_linear nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fullset const-decl "set" sets nil)
    (T formal-subtype-decl nil continuous_linear nil)
    (T_pred const-decl "[real -> boolean]" continuous_linear nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (continuity_def formula-decl nil continuous_functions nil))
   shostak)
  (cont_upto_lub-2 nil 3259056967
   ("" (stop-rewrite "abs_0")
    (("" (skosimp*)
      (("" (rewrite continuity_def)
        (("" (expand "convergence")
          (("" (expand "fullset")
            (("" (expand "convergence")
              (("" (prop)
                (("1" (expand "adh")
                  (("1" (skosimp*)
                    (("1"
                      (inst +
                       "IF x!1 - a!1 < e!1 THEN a!1 ELSE x!1 - e!1/2 ENDIF")
                      (("1" (lift-if)
                        (("1" (expand "abs")
                          (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
                        nil)
                       ("2" (flatten)
                        (("2" (lemma "connected_domain")
                          (("2" (inst -1 "a!1" "x!1" "_")
                            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (expand "linear_on?")
                    (("2" (skosimp*)
                      (("2"
                        (inst + "IF m!1 = 0 THEN min(epsilon!1,x!1-a!1)
                                        ELSE min(epsilon!1/abs(m!1),x!1-a!1)
                                        ENDIF")
                        (("1" (skosimp*)
                          (("1" (inst-cp - "x!1")
                            (("1" (inst - "x!2")
                              (("1" (assert)
                                (("1" (split -6)
                                  (("1" (split -7)
                                    (("1" (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case-replace
                                                 "m!1 * x!2 - m!1 * x!1 = m!1 * (x!2 - x!1)")
                                                (("1"
                                                  (rewrite "abs_mult")
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (case
                                                           "abs(x!2 - x!1) < epsilon!1 / abs(m!1)")
                                                          (("1"
                                                            (cross-mult -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand "min")
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (lemma "top_lem")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "fullset")
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2" (hide -4 -5) (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("3" (hide 2)
                                    (("3" (lemma "top_lem")
                                      (("3"
                                        (inst?)
                                        (("3"
                                          (expand "fullset")
                                          (("3" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide -3 -5)
                            (("2" (assert)
                              (("2"
                                (case "min(epsilon!1 / abs(m!1), x!1 - a!1) > 0")
                                (("1" (assert) nil nil)
                                 ("2" (hide 3)
                                  (("2" (grind)
                                    (("1" (cross-mult 2)
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (cross-mult 3)
                                      (("2" (assert) nil nil)) nil)
                                     ("3" (cross-mult 2)
                                      (("3" (assert) nil nil)) nil)
                                     ("4" (cross-mult 3)
                                      (("4" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "abs")
                          (("3" (ground)
                            (("3" (lift-if) (("3" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (flatten)
                          (("4" (hide -4 -5 -6) (("4" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergence const-decl "bool" lim_of_functions nil)
    (convergence const-decl "bool" convergence_functions nil)
    (abs_nat formula-decl nil abs_lems reals)
    (linear_on? const-decl "bool" linear_functions nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (continuity_def formula-decl nil continuous_functions nil))
   nil)
  (cont_upto_lub-1 nil 3258990896
   ("" (skosimp*)
    (("" (hide -4)
      (("" (expand "continuous?")
        (("" (expand "convergence")
          (("" (expand "fullset")
            (("" (expand "convergence")
              (("" (prop)
                (("1" (expand "adh")
                  (("1" (skosimp*)
                    (("1"
                      (inst +
                       "IF x!1 - a!1 < e!1 THEN a!1 ELSE x!1 - e!1/2 ENDIF")
                      (("1" (lift-if)
                        (("1" (expand "abs")
                          (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
                        nil)
                       ("2" (flatten)
                        (("2" (lemma "connected_domain")
                          (("2" (inst -1 "a!1" "x!1" "_")
                            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (expand "linear_on?")
                    (("2" (skosimp*)
                      (("2"
                        (inst + "IF m!1 = 0 THEN min(epsilon!1,x!1-a!1)
                        ELSE min(epsilon!1/abs(m!1),x!1-a!1)
                        ENDIF")
                        (("1" (skosimp*)
                          (("1" (inst-cp - "x!1")
                            (("1" (inst - "x!2")
                              (("1" (assert)
                                (("1" (split -5)
                                  (("1" (split -6)
                                    (("1" (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case-replace
                                                 "m!1 * x!2 - m!1 * x!1 = m!1 * (x!2 - x!1)")
                                                (("1"
                                                  (rewrite "abs_mult")
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (rewrite "abs_0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "abs(x!2 - x!1) < epsilon!1 / abs(m!1)")
                                                          (("1"
                                                            (cross-mult -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand "min")
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (typepred
                                         "lub(extend[real, T, bool, FALSE]({x: T | TRUE}))")
                                        (("1"
                                          (expand "least_upper_bound?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "upper_bound?")
                                              (("1"
                                                (inst -1 "x!1")
                                                (("1"
                                                  (expand "extend")
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (inst -1 "x!1")
                                                (("2"
                                                  (expand "extend")
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2" (hide -4 -5) (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("3" (hide 2)
                                    (("3"
                                      (typepred
                                       "lub(extend[real, T, bool, FALSE]({x: T | TRUE}))")
                                      (("1"
                                        (expand "least_upper_bound?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "upper_bound?")
                                            (("1"
                                              (inst -1 "x!2")
                                              (("1"
                                                (expand "extend")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (inst -1 "x!1")
                                                (("2"
                                                  (expand "extend")
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide -3 -4)
                            (("2" (grind)
                              (("1" (cross-mult 3) (("1" (assert) nil nil))
                                nil)
                               ("2" (cross-mult 4) (("2" (assert) nil nil))
                                nil)
                               ("3" (cross-mult 3) (("3" (assert) nil nil))
                                nil)
                               ("4" (cross-mult 4) (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (flatten)
                          (("3" (expand "abs")
                            (("3" (lift-if) (("3" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (flatten)
                          (("4" (hide -4 -5) (("4" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((adh const-decl "setof[real]" convergence_functions nil)
    (abs_0 formula-decl nil abs_lems reals)
    (convergence const-decl "bool" convergence_functions nil))
   nil))
 (cont_downto_glb 0
  (cont_downto_glb-2 "" 3790090009
   ("" (skosimp*)
    (("" (rewrite continuity_def)
      (("" (hide -4)
        (("" (expand "convergence")
          (("" (expand "fullset")
            (("" (expand "convergence")
              (("" (prop)
                (("1" (expand "adh")
                  (("1" (skosimp*)
                    (("1"
                      (inst +
                       "IF a!1 - x!1 < e!1 THEN a!1 ELSE x!1 + e!1/2 ENDIF")
                      (("1" (lift-if)
                        (("1" (expand "abs")
                          (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
                        nil)
                       ("2" (flatten)
                        (("2" (lemma "connected_domain")
                          (("2" (inst -1 "x!1" "a!1" "_")
                            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (expand "linear_on?")
                    (("2" (skosimp*)
                      (("2"
                        (inst + "IF m!1 = 0 THEN min(epsilon!1,a!1-x!1)
                                                ELSE min(epsilon!1/abs(m!1),a!1-x!1)
                                                ENDIF")
                        (("1" (skosimp*)
                          (("1" (inst-cp - "x!1")
                            (("1" (inst - "x!2")
                              (("1" (assert)
                                (("1" (split -5)
                                  (("1" (split -6)
                                    (("1" (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case-replace
                                                 "m!1 * x!2 - m!1 * x!1 = m!1 * (x!2 - x!1)")
                                                (("1"
                                                  (rewrite "abs_mult")
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (case
                                                           "abs(x!2 - x!1) < epsilon!1 / abs(m!1)")
                                                          (("1"
                                                            (cross-mult -1)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide 3)
                                                            (("2"
                                                              (expand "min")
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (lemma "bot_lem")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "fullset")
                                            (("2" (inst?) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (lemma "bot_lem")
                                    (("2" (expand "fullset")
                                      (("2" (inst?) nil nil)) nil))
                                    nil)
                                   ("3" (hide -4 -5 2) (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide -3 -4)
                            (("2"
                              (case "min(epsilon!1 / abs(m!1), a!1 - x!1) > 0")
                              (("1" (assert) nil nil)
                               ("2" (hide 3)
                                (("2" (grind)
                                  (("1" (cross-mult 2) nil nil)
                                   ("2" (cross-mult 3) nil nil))
                                  nil))
                                nil)
                               ("3" (hide 3)
                                (("3" (expand "abs")
                                  (("3" (lift-if) (("3" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (flatten)
                          (("3" (expand "abs" -1)
                            (("3" (lift-if) (("3" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (flatten)
                          (("4" (hide -4 -5) (("4" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuity_def formula-decl nil continuous_functions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" continuous_linear nil)
    (T formal-subtype-decl nil continuous_linear nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (e!1 skolem-const-decl "posreal" continuous_linear nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (x!1 skolem-const-decl "T" continuous_linear nil)
    (a!1 skolem-const-decl "T" continuous_linear nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (unary_minus_dist formula-decl nil continuous_linear nil)
    (connected_domain formula-decl nil continuous_linear nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (linear_on? const-decl "bool" linear_functions nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (bot_lem formula-decl nil continuous_linear nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs_nat formula-decl nil abs_lems reals)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (abs_mult formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (m!1 skolem-const-decl "real" continuous_linear nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (epsilon!1 skolem-const-decl "posreal" continuous_linear nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (fullset const-decl "set" sets nil))
   shostak)
  (cont_downto_glb-1 nil 3258990926
   ("" (skosimp*)
    (("" (rewrite continuity_def)
      (("" (hide -4)
        (("" (expand "convergence")
          (("" (expand "fullset")
            (("" (expand "convergence")
              (("" (prop)
                (("1" (expand "adh")
                  (("1" (skosimp*)
                    (("1"
                      (inst +
                       "IF a!1 - x!1 < e!1 THEN a!1 ELSE x!1 + e!1/2 ENDIF")
                      (("1" (lift-if)
                        (("1" (expand "abs")
                          (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
                        nil)
                       ("2" (flatten)
                        (("2" (lemma "connected_domain")
                          (("2" (inst -1 "x!1" "a!1" "_")
                            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (expand "linear_on?")
                    (("2" (skosimp*)
                      (("2"
                        (inst + "IF m!1 = 0 THEN min(epsilon!1,a!1-x!1)
                                                ELSE min(epsilon!1/abs(m!1),a!1-x!1)
                                                ENDIF")
                        (("1" (skosimp*)
                          (("1" (inst-cp - "x!1")
                            (("1" (inst - "x!2")
                              (("1" (assert)
                                (("1" (split -5)
                                  (("1" (split -6)
                                    (("1" (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case-replace
                                                 "m!1 * x!2 - m!1 * x!1 = m!1 * (x!2 - x!1)")
                                                (("1"
                                                  (rewrite "abs_mult")
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (case
                                                           "abs(x!2 - x!1) < epsilon!1 / abs(m!1)")
                                                          (("1"
                                                            (cross-mult -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 3)
                                                            (("2"
                                                              (expand "min")
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (lemma "bot_lem")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "fullset")
                                            (("2" (inst?) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (lemma "bot_lem")
                                    (("2" (expand "fullset")
                                      (("2" (inst?) nil nil)) nil))
                                    nil)
                                   ("3" (hide -4 -5 2) (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide -3 -4)
                            (("2"
                              (case "min(epsilon!1 / abs(m!1), a!1 - x!1) > 0")
                              (("1" (assert) nil nil)
                               ("2" (hide 3)
                                (("2" (grind)
                                  (("1" (cross-mult 2)
                                    (("1" (assert) nil nil)) nil)
                                   ("2" (cross-mult 3)
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("3" (hide 3)
                                (("3" (expand "abs")
                                  (("3" (lift-if) (("3" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (flatten)
                          (("3" (expand "abs" -1)
                            (("3" (lift-if) (("3" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (flatten)
                          (("4" (hide -4 -5) (("4" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuity_def formula-decl nil continuous_functions nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (convergence const-decl "bool" convergence_functions nil)
    (abs_nat formula-decl nil abs_lems reals)
    (linear_on? const-decl "bool" linear_functions nil)
    (adh const-decl "setof[real]" convergence_functions nil))
   nil))
 (on_linear_top?_TCC1 0
  (on_linear_top?_TCC1-1 nil 3259057915
   ("" (skosimp*) (("" (expand "top") (("" (assert) nil nil)) nil)) nil)
   ((top const-decl "real" continuous_linear nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (on_linear_top? subtype "continuous_linear.top(continuous_linear.x)" "T")))
 (cont_piecewise_linear 0
  (cont_piecewise_linear-6 nil 3258990953
   ("" (skosimp*)
    (("" (expand "continuous?")
      (("" (skosimp*)
        (("" (expand "piecewise_linear?")
          (("" (inst?)
            (("" (split -1)
              (("1" (lemma "cont_in_linear")
                (("1" (expand "on_linear_part?")
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand "continuous_in?")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "on_linear_top?")
                (("2" (skosimp*)
                  (("2" (typepred "x0!1")
                    (("2" (lemma "cont_upto_lub")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (inst -1 "a!1")
                            (("2" (assert)
                              (("2" (expand "top") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "on_linear_bottom?")
                (("3" (flatten)
                  (("3" (typepred "x0!1")
                    (("3" (skosimp*)
                      (("3" (lemma "cont_downto_glb")
                        (("3" (inst?)
                          (("3" (inst -1 "a!1") (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (expand "on_junction?")
                (("4" (skosimp*)
                  (("4" (lemma "piecewise")
                    (("4"
                      (inst - "a!1" "x0!1" "c!1"
                       "(LAMBDA (y: T): k1!1 + m1!1 * y)"
                       "(LAMBDA (y: T): k2!1 + m2!1 * y)")
                      (("4" (assert)
                        (("4" (split -1)
                          (("1" (lemma "cont_piece")
                            (("1" (inst -1 "a!1" "c!1" "_" "f!1" "x0!1")
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (skosimp*)
                                    (("1" (lift-if)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (inst - "y!1")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst - "y!1")
                                          (("2"
                                            (inst - "y!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "linear_on?")
                            (("2" (inst + "m1!1" "k1!1")
                              (("2" (skosimp*)
                                (("2" (inst - "x!1") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "linear_on?")
                            (("3" (inst + "m2!1" "k2!1")
                              (("3" (skosimp*)
                                (("3" (inst - "x!1")
                                  (("3" (inst - "x!1")
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" continuous_functions nil)
    (piecewise_linear? const-decl "bool" continuous_linear nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (on_junction? const-decl "bool" continuous_linear nil)
    (piecewise formula-decl nil continuous_linear nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil)
    (cont_piece formula-decl nil continuous_linear nil)
    (linear_on? const-decl "bool" linear_functions nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (on_linear_bottom? const-decl "bool" continuous_linear nil)
    (cont_downto_glb formula-decl nil continuous_linear nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (on_linear_top? const-decl "bool" continuous_linear nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (top const-decl "real" continuous_linear nil)
    (cont_upto_lub formula-decl nil continuous_linear nil)
    (cont_in_linear formula-decl nil continuous_linear nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (continuous_in? const-decl "bool" continuous_linear nil)
    (on_linear_part? const-decl "bool" continuous_linear nil)
    (T formal-subtype-decl nil continuous_linear nil)
    (T_pred const-decl "[real -> boolean]" continuous_linear nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (cont_piecewise_linear-5 nil 3258987881
   ("" (skosimp*)
    (("" (expand "continuous?")
      (("" (skosimp*)
        (("" (expand "piecewise_linear?")
          (("" (inst?)
            (("" (split -1)
              (("1" (lemma "continuous_in_linear")
                (("1" (expand "on_linear_part?")
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand "continuous_in?")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "on_linear_top?")
                (("2" (skosimp*)
                  (("2" (typepred "x0!1")
                    (("2" (lemma "continuous_upto_lub")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (inst -1 "a!1") (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "on_junction?")
                (("3" (skosimp*)
                  (("3" (lemma "piecewise")
                    (("3"
                      (inst - "a!1" "x0!1" "c!1"
                       "(LAMBDA (y: T): k1!1 + m1!1 * y)"
                       "(LAMBDA (y: T): k2!1 + m2!1 * y)")
                      (("3" (assert)
                        (("3" (split -1)
                          (("1" (lemma "cont_piece")
                            (("1" (inst -1 "a!1" "c!1" "_" "f!1" "x0!1")
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (skosimp*)
                                    (("1" (lift-if)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (inst - "y!1")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst - "y!1")
                                          (("2"
                                            (inst - "y!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "linear_on?")
                            (("2" (inst + "m1!1" "k1!1")
                              (("2" (skosimp*)
                                (("2" (inst - "x!1") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "linear_on?")
                            (("3" (inst + "m2!1" "k2!1")
                              (("3" (skosimp*)
                                (("3" (inst - "x!1")
                                  (("3" (inst - "x!1")
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (cont_piecewise_linear-4 nil 3258820493
   ("" (skosimp*)
    (("" (expand "continuous?")
      (("" (skosimp*)
        (("" (expand "piecewise_linear?")
          (("" (inst?)
            (("" (split -1)
              (("1" (lemma "continuous_on_linear")
                (("1" (expand "on_linear_part?")
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand "continuous_on?")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "on_linear_top?")
                (("2" (skosimp*)
                  (("2" (typepred "x0!1")
                    (("2" (lemma "continuous_upto_lub")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (inst -1 "a!1") (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "on_junction?")
                (("3" (skosimp*)
                  (("3" (lemma "piecewise")
                    (("3"
                      (inst - "a!1" "x0!1" "c!1"
                       "(LAMBDA (y: T): k1!1 + m1!1 * y)"
                       "(LAMBDA (y: T): k2!1 + m2!1 * y)")
                      (("3" (assert)
                        (("3" (split -1)
                          (("1" (lemma "cont_piece")
                            (("1" (inst -1 "a!1" "c!1" "_" "f!1" "x0!1")
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (skosimp*)
                                    (("1" (lift-if)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (inst - "y!1")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst - "y!1")
                                          (("2"
                                            (inst - "y!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "linear_on?")
                            (("2" (inst + "m1!1" "k1!1")
                              (("2" (skosimp*)
                                (("2" (inst - "x!1") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "linear_on?")
                            (("3" (inst + "m2!1" "k2!1")
                              (("3" (skosimp*)
                                (("3" (inst - "x!1")
                                  (("3" (inst - "x!1")
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (cont_piecewise_linear-3 nil 3258820186
   ("" (skosimp*)
    (("" (expand "continuous?")
      (("" (skosimp*)
        (("" (expand "piecewise_linear?")
          (("" (inst?)
            (("" (split -1)
              (("1" (lemma "continuous_in_linear")
                (("1" (expand "on_linear_part?")
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand "continuous_in?")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "on_junction?")
                (("2" (skosimp*)
                  (("2" (lemma "piecewise")
                    (("2"
                      (inst - "a!1" "x0!1" "c!1"
                       "(LAMBDA (y: T): k1!1 + m1!1 * y)"
                       "(LAMBDA (y: T): k2!1 + m2!1 * y)")
                      (("2" (assert)
                        (("2" (split -1)
                          (("1" (lemma "cont_piece")
                            (("1" (inst -1 "a!1" "c!1" "_" "f!1" "x0!1")
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (skosimp*)
                                    (("1" (lift-if)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (inst - "y!1")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst - "y!1")
                                          (("2"
                                            (inst - "y!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "linear_on?")
                            (("2" (inst + "m1!1" "k1!1")
                              (("2" (skosimp*)
                                (("2" (inst - "x!1") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "linear_on?")
                            (("3" (inst + "m2!1" "k2!1")
                              (("3" (skosimp*)
                                (("3" (inst - "x!1")
                                  (("3" (inst - "x!1")
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (cont_piecewise_linear-2 nil 3258817490
   ("" (skosimp*)
    (("" (expand "continuous?")
      (("" (skosimp*)
        (("" (expand "piecewise_linear?")
          (("" (inst?)
            (("" (split -1)
              (("1" (lemma "continuous_on_linear")
                (("1" (expand "on_linear_part?")
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand "continuous_on?")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "on_junction?")
                (("2" (skosimp*)
                  (("2" (lemma "piecewise")
                    (("2"
                      (inst - "a!1" "x0!1" "c!1"
                       "(LAMBDA (y: T): k1!1 + m1!1 * y)"
                       "(LAMBDA (y: T): k2!1 + m2!1 * y)")
                      (("2" (assert)
                        (("2" (split -1)
                          (("1" (lemma "cont_piece")
                            (("1" (inst -1 "a!1" "c!1" "_" "f!1" "x0!1")
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (skosimp*)
                                    (("1" (lift-if)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (inst - "y!1")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst - "y!1")
                                          (("2"
                                            (inst - "y!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "linear_on?")
                            (("2" (inst + "m1!1" "k1!1")
                              (("2" (skosimp*)
                                (("2" (inst - "x!1") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "linear_on?")
                            (("3" (inst + "m2!1" "k2!1")
                              (("3" (skosimp*)
                                (("3" (inst - "x!1")
                                  (("3" (inst - "x!1")
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (cont_piecewise_linear-1 nil 3258805523
   ("" (skosimp*)
    (("" (expand "continuous?")
      (("" (skosimp*)
        (("" (expand "piecewise_linear?")
          (("" (inst?)
            (("" (split -1)
              (("1" (lemma "continuous_in_linear")
                (("1" (expand "on_linear_part?")
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand "continuous_in?")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "on_junction?")
                (("2" (skosimp*)
                  (("2" (lemma "piecewise")
                    (("2"
                      (inst - "a!1" "x0!1" "c!1"
                       "(LAMBDA (y: T): k1!1 + m1!1 * y)"
                       "(LAMBDA (y: T): k2!1 + m2!1 * y)")
                      (("2" (assert)
                        (("2" (split -1)
                          (("1" (lemma "cont_piece")
                            (("1" (inst -1 "a!1" "c!1" "_" "f!1" "x0!1")
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (skosimp*)
                                    (("1" (lift-if)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (inst - "y!1")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst - "y!1")
                                          (("2"
                                            (inst - "y!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "linear_on?")
                            (("2" (inst + "m1!1" "k1!1")
                              (("2" (skosimp*)
                                (("2" (inst - "x!1") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "linear_on?")
                            (("3" (inst + "m2!1" "k2!1")
                              (("3" (skosimp*)
                                (("3" (inst - "x!1")
                                  (("3" (inst - "x!1")
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))


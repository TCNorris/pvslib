(infinite_limits
 (limit_zero_denominator 0
  (limit_zero_denominator-1 nil 3706952828
   ("" (skeep*)
    (("" (expand "convergence")
      (("" (expand "convergence")
        (("" (flatten)
          (("" (inst - "l/3")
            (("" (skolem - "df")
              (("" (hide (-1 -3))
                (("" (expand "inf_limit_at")
                  (("" (skeep)
                    (("" (case "EXISTS (e1:posreal): l/(2*e1)>M")
                      (("1" (skeep -)
                        (("1" (inst -3 "e1")
                          (("1" (skolem - "dg1")
                            (("1" (expand "sign_near")
                              (("1" (skolem - "dg2")
                                (("1" (inst + "min(min(dg1,dg2),df)/2")
                                  (("1" (skeep)
                                    (("1" (inst - "x")
                                      (("1"
                                        (inst - "x")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "fullset")
                                            (("1"
                                              (inst - "x")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "/")
                                                  (("1"
                                                    (case "sigf*f(x)>(l/2)")
                                                    (("1"
                                                      (mult-by -1 "1/e1")
                                                      (("1"
                                                        (case
                                                         "sigg/g(x)>1/e1")
                                                        (("1"
                                                          (mult-by
                                                           -1
                                                           "sigf*f(x)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "sigf*f(x)>0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-4 1))
                                                              (("2"
                                                                (expand "abs")
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (typepred
                                                                     "sigf")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst -6 "x")
                                                          (("2"
                                                            (typepred "sigg")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "1/(sigg*g(x))>1/e1")
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (cross-mult
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "abs")
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "sigf")
                                                      (("2"
                                                        (expand "abs")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "archimedean")
                        (("2" (inst - "l/(4*M)")
                          (("2" (skolem - "ee")
                            (("2" (inst + "1/ee")
                              (("2" (cross-mult 1)
                                (("2" (cross-mult -1) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergence const-decl "bool" lim_of_functions nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (inf_limit_at const-decl "boolean" infinite_limits nil)
    (archimedean formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (times_div1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (fullset const-decl "set" sets nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (x skolem-const-decl "T" infinite_limits nil)
    (f skolem-const-decl "[T -> real]" infinite_limits nil)
    (sigf skolem-const-decl "Sign" infinite_limits nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Sign type-eq-decl nil sign reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (T_pred const-decl "[real -> boolean]" infinite_limits nil)
    (T formal-subtype-decl nil infinite_limits nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil)
    (sign_near const-decl "bool" infinite_limits nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (convergence const-decl "bool" convergence_functions nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)))


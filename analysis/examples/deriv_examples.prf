(deriv_examples
 (f_TCC1 0
  (f_TCC1-1 nil 3780487472 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (f subtype "2"
    "{i: integers.int | booleans.OR(deriv_examples.x /= 0, reals.>=(i, 0))}")))
 (derivable_f 0
  (derivable_f-1 nil 3780487477 ("" (derivable) nil nil)
   ((f const-decl "real" deriv_examples nil)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (derivable_g 0
  (derivable_g-1 nil 3780492832 ("" (derivable) nil nil)
   ((g const-decl "real" deriv_examples nil)
    (derivable_neg_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (TRUE const-decl "bool" booleans nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam analysis)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (derivable_f_plus_g 0
  (derivable_f_plus_g-1 nil 3780492892
   ("" (derivable :use ("f" "g")) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (derivable_f formula-decl nil deriv_examples nil)
    (derivable_g formula-decl nil deriv_examples nil)
    (TRUE const-decl "bool" booleans nil)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (f const-decl "real" deriv_examples nil)
    (g const-decl "real" deriv_examples nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (derivable_f_div_h 0
  (derivable_f_div_h-1 nil 3780494057
   ("" (flatten) (("" (derivable :use "f") nil nil)) nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (derivable_f formula-decl nil deriv_examples nil)
    (TRUE const-decl "bool" booleans nil)
    (derivable_div_lam formula-decl nil derivatives_lam analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (f const-decl "real" deriv_examples nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nz_deriv_fun type-eq-decl nil derivatives analysis)
    (h const-decl "[real -> nzreal]" deriv_examples nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (derivable_sq_f 0
  (derivable_sq_f-1 nil 3780494962 ("" (derivable) nil nil)
   ((sq_f const-decl "real" deriv_examples nil)
    (derivable_mult_lam formula-decl nil derivatives_lam analysis)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (f const-decl "real" deriv_examples nil)
    (comp_derivable_fun formula-decl nil chain_rule analysis))
   shostak))
 (derivable_f_o_g 0
  (derivable_f_o_g-1 nil 3780496707 ("" (derivable) nil nil)
   ((comp_derivable_fun formula-decl nil chain_rule analysis)
    (g const-decl "real" deriv_examples nil)
    (f const-decl "real" deriv_examples nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam analysis)
    (TRUE const-decl "bool" booleans nil)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (derivable_neg_lam formula-decl nil derivatives_lam analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (O const-decl "T3" function_props nil))
   shostak))
 (derivative_f_TCC1 0
  (derivative_f_TCC1-1 nil 3781815584
   ("" (then (assert) (derivable)) nil nil)
   ((f const-decl "real" deriv_examples nil)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil (derivative_f subtype "deriv_examples.f" "deriv_fun[real]")))
 (derivative_f 0
  (derivative_f-1 nil 3781815586
   ("" (decompose-equality) (("" (deriv) nil nil)) nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (deriv_id_lam formula-decl nil derivatives_lam analysis)
    (expt_x1 formula-decl nil exponentiation nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (deriv_pow_lam formula-decl nil derivatives_lam analysis)
    (deriv_scal1_lam formula-decl nil derivatives_lam analysis)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (deriv_add_lam formula-decl nil derivatives_lam analysis)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (f const-decl "real" deriv_examples nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (derivative_g_TCC1 0
  (derivative_g_TCC1-1 nil 3781815584
   ("" (then (assert) (derivable)) nil nil)
   ((g const-decl "real" deriv_examples nil)
    (derivable_neg_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (TRUE const-decl "bool" booleans nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam analysis)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   nil (derivative_g subtype "deriv_examples.g" "deriv_fun[real]")))
 (derivative_g 0
  (derivative_g-1 nil 3781815586
   ("" (then (decompose-equality) (derivative)) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (g const-decl "real" deriv_examples nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (deriv_scald2_lam formula-decl nil derivatives_lam analysis)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (deriv_neg_lam formula-decl nil derivatives_lam analysis)
    (deriv_id_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (derivable_neg_lam formula-decl nil derivatives_lam analysis)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (deriv_f_plus_g_TCC1 0
  (deriv_f_plus_g_TCC1-1 nil 3781816542
   ("" (then (assert) (derivable)) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (derivable_neg_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam analysis)
    (minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (f const-decl "real" deriv_examples nil)
    (g const-decl "real" deriv_examples nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   nil
   (deriv_f_plus_g subtype
    "(real_fun_ops[real].+)(deriv_examples.f, deriv_examples.g)"
    "deriv_fun[real]")))
 (deriv_f_plus_g 0
  (deriv_f_plus_g-1 nil 3781816544
   ("" (skeep)
    (("" (with-tccs (case "derivable?(f + g)"))
      ((""
        (name-label "d__11" "deriv(f + g)" :label |fnum!:589| :dir rl)
        (("" (expand "real_fun_ops.+" |fnum!:589|)
          ((""
            (rewrites ("deriv_id_lam" "deriv_const_lam" "deriv_add_lam"
                       "deriv_scal1_lam" "deriv_scal2_lam"
                       "deriv_mult_lam" "deriv_pow_lam" "deriv_neg_lam"
                       "deriv_sub_lam" "deriv_sq_lam"
                       "deriv_scald1_lam" "deriv_scald2_lam"
                       "deriv_div_lam" "derivative_f" "derivative_g"
                       "derivative_sin" "derivative_cos"
                       "derivative_exp")
                      |fnum!:589|)
            (("1" (beta |fnum!:589|)
              (("1" (real-props |fnum!:589|)
                (("1" (expand "d__11" :assert? none)
                  (("1" (touch (delabel (|d_:596|)))
                    (("1" (touch (delabel (|fnums!:590| |fnum!:589|)))
                      (("1" (touch (delabel nil :hide? t))
                        (("1" (postpone) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (derivable) nil nil) ("3" (derivable) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (derivable? const-decl "bool" derivatives analysis)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (f const-decl "real" deriv_examples nil)
    (g const-decl "real" deriv_examples nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (derivative_g formula-decl nil deriv_examples nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (derivative_f formula-decl nil deriv_examples nil)
    (deriv_add_lam formula-decl nil derivatives_lam analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (derivable_neg_lam formula-decl nil derivatives_lam analysis)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam analysis)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (d__10 skolem-const-decl "[real -> real]" deriv_examples nil))
   shostak))
 (deriv_f_div_h_TCC1 0
  (deriv_f_div_h_TCC1-1 nil 3781816648
   ("" (flatten) (("" (derivable :use "f") nil nil)) nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (derivable_f formula-decl nil deriv_examples nil)
    (TRUE const-decl "bool" booleans nil)
    (derivable_div_lam formula-decl nil derivatives_lam analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (f const-decl "real" deriv_examples nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nz_deriv_fun type-eq-decl nil derivatives analysis)
    (h const-decl "[real -> nzreal]" deriv_examples nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   nil
   (deriv_f_div_h subtype
    "real_fun_ops[real]./(deriv_examples.f, deriv_examples.h)"
    "deriv_fun[real]")))
 (deriv_f_div_h 0
  (deriv_f_div_h-2 nil 3781817068
   ("" (then (skeep) (derivative :use "f") (expand "f") (assert)) nil
    nil)
   ((d__4 skolem-const-decl "[real -> real]" deriv_examples nil)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv_div_lam formula-decl nil derivatives_lam analysis)
    (nz_deriv_fun type-eq-decl nil derivatives analysis)
    (derivative_f formula-decl nil deriv_examples nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (f const-decl "real" deriv_examples nil)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (h const-decl "[real -> nzreal]" deriv_examples nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (derivable? const-decl "bool" derivatives analysis)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)
  (deriv_f_div_h-1 nil 3781816693
   ("" (skeep)
    (("" (derivative :use "f")
      (("" (expand "f") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (derivable? const-decl "bool" derivatives analysis)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (h const-decl "[real -> nzreal]" deriv_examples nil)
    (f const-decl "real" deriv_examples nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (derivative_f formula-decl nil deriv_examples nil)
    (nz_deriv_fun type-eq-decl nil derivatives analysis)
    (deriv_div_lam formula-decl nil derivatives_lam analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (derivable_add_lam formula-decl nil derivatives_lam analysis))
   shostak))
 (deriv_sq_f_TCC1 0
  (deriv_sq_f_TCC1-1 nil 3781816847
   ("" (then (assert) (derivable)) nil nil)
   ((sq_f const-decl "real" deriv_examples nil)
    (derivable_mult_lam formula-decl nil derivatives_lam analysis)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (f const-decl "real" deriv_examples nil)
    (comp_derivable_fun formula-decl nil chain_rule analysis))
   nil (deriv_sq_f subtype "deriv_examples.sq_f" "deriv_fun[real]")))
 (deriv_sq_f_TCC2 0
  (deriv_sq_f_TCC2-1 nil 3781816847
   ("" (then (assert) (derivable)) nil nil) nil nil
   (deriv_sq_f subtype "3"
    "{i: integers.int | booleans.OR(deriv_examples.x /= 0, reals.>=(i, 0))}")))
 (deriv_sq_f 0
  (deriv_sq_f-1 nil 3781816856
   ("" (then (skeep) (derivative) (hide-all-but 1) (grind)) nil nil)
   ((expt def-decl "real" exponentiation nil)
    (d__5 skolem-const-decl "[real -> real]" deriv_examples nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (deriv_id_lam formula-decl nil derivatives_lam analysis)
    (deriv_add_lam formula-decl nil derivatives_lam analysis)
    (deriv_scal1_lam formula-decl nil derivatives_lam analysis)
    (deriv_pow_lam formula-decl nil derivatives_lam analysis)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (deriv_mult_lam formula-decl nil derivatives_lam analysis)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (derivable_mult_lam formula-decl nil derivatives_lam analysis)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (f const-decl "real" deriv_examples nil)
    (chain_rule formula-decl nil chain_rule analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sq_f const-decl "real" deriv_examples nil)
    (derivable? const-decl "bool" derivatives analysis)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (deriv_f_o_g_TCC1 0
  (deriv_f_o_g_TCC1-1 nil 3781816847
   ("" (then (assert) (derivable)) nil nil)
   ((comp_derivable_fun formula-decl nil chain_rule analysis)
    (g const-decl "real" deriv_examples nil)
    (f const-decl "real" deriv_examples nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam analysis)
    (TRUE const-decl "bool" booleans nil)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (derivable_neg_lam formula-decl nil derivatives_lam analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (O const-decl "T3" function_props nil))
   nil
   (deriv_f_o_g subtype
    "function_props[real, real, real].o(deriv_examples.f, deriv_examples.g)"
    "deriv_fun[real]")))
 (deriv_f_o_g 0
  (deriv_f_o_g-1 nil 3781816856
   ("" (then (skeep) (derivative) (real-props)) nil nil)
   ((div_distributes_minus formula-decl nil real_props nil)
    (div_distributes formula-decl nil real_props nil)
    (cross_mult formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (d__6 skolem-const-decl "[real -> real]" deriv_examples nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (deriv_neg_lam formula-decl nil derivatives_lam analysis)
    (div_cancel1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (deriv_id_lam formula-decl nil derivatives_lam analysis)
    (deriv_scald2_lam formula-decl nil derivatives_lam analysis)
    (deriv_add_lam formula-decl nil derivatives_lam analysis)
    (deriv_scal1_lam formula-decl nil derivatives_lam analysis)
    (deriv_pow_lam formula-decl nil derivatives_lam analysis)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (minus_real_is_real application-judgement "real" reals nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam analysis)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (derivable_neg_lam formula-decl nil derivatives_lam analysis)
    (chain_rule formula-decl nil chain_rule analysis)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (g const-decl "real" deriv_examples nil)
    (f const-decl "real" deriv_examples nil)
    (O const-decl "T3" function_props nil)
    (derivable? const-decl "bool" derivatives analysis)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (derivable_ksincos 0
  (derivable_ksincos-1 nil 3781814507 ("" (derivable) nil nil)
   ((ksincos const-decl "real" deriv_examples nil)
    (derivable_cos formula-decl nil sincos_def trig)
    (derivable_scal2_lam formula-decl nil derivatives_lam analysis)
    (derivable_sin formula-decl nil sincos_def trig)
    (TRUE const-decl "bool" booleans nil)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (k const-decl "real" deriv_examples nil)
    (sin const-decl "real" sincos_def trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (deriv_ksincos_TCC1 0
  (deriv_ksincos_TCC1-1 nil 3781817531
   ("" (then (assert) (derivable)) nil nil)
   ((ksincos const-decl "real" deriv_examples nil)
    (derivable_cos formula-decl nil sincos_def trig)
    (derivable_scal2_lam formula-decl nil derivatives_lam analysis)
    (derivable_sin formula-decl nil sincos_def trig)
    (TRUE const-decl "bool" booleans nil)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (k const-decl "real" deriv_examples nil)
    (sin const-decl "real" sincos_def trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (deriv_ksincos subtype "deriv_examples.ksincos" "deriv_fun[real]")))
 (deriv_ksincos 0
  (deriv_ksincos-1 nil 3781817533
   ("" (then (skeep) (derivative) (assert)) nil nil)
   ((d__7 skolem-const-decl "[real -> real]" deriv_examples nil)
    (zero_times1 formula-decl nil real_props nil)
    (deriv_const_lam formula-decl nil derivatives_lam analysis)
    (derivable_const_lam formula-decl nil derivatives_lam analysis)
    (derivable_sin formula-decl nil sincos_def trig)
    (derivable_cos formula-decl nil sincos_def trig)
    (derivable_scal2_lam formula-decl nil derivatives_lam analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv_add_lam formula-decl nil derivatives_lam analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (k const-decl "real" deriv_examples nil)
    (sin const-decl "real" sincos_def trig)
    (deriv_scal2_lam formula-decl nil derivatives_lam analysis)
    (deriv_mult_lam formula-decl nil derivatives_lam analysis)
    (derivative_sin formula-decl nil sincos_def trig)
    (minus_real_is_real application-judgement "real" reals nil)
    (derivative_cos formula-decl nil sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (ksincos const-decl "real" deriv_examples nil)
    (derivable? const-decl "bool" derivatives analysis)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (derivable_sincos2 0
  (derivable_sincos2-1 nil 3781817727 ("" (derivable) nil nil)
   ((sincos2 const-decl "real" deriv_examples nil)
    (derivable_sin formula-decl nil sincos_def trig)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (derivable_cos formula-decl nil sincos_def trig)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin const-decl "real" sincos_def trig)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cos const-decl "real" sincos_def trig)
    (comp_derivable_fun formula-decl nil chain_rule analysis))
   shostak))
 (deriv_sincos2_TCC1 0
  (deriv_sincos2_TCC1-1 nil 3781817719
   ("" (then (assert) (derivable)) nil nil)
   ((sincos2 const-decl "real" deriv_examples nil)
    (derivable_sin formula-decl nil sincos_def trig)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (derivable_cos formula-decl nil sincos_def trig)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin const-decl "real" sincos_def trig)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cos const-decl "real" sincos_def trig)
    (comp_derivable_fun formula-decl nil chain_rule analysis))
   nil
   (deriv_sincos2 subtype "deriv_examples.sincos2" "deriv_fun[real]")))
 (deriv_sincos2 0
  (deriv_sincos2-1 nil 3781817758
   ("" (then (skeep) (derivative) (assert)) nil nil)
   ((d__8 skolem-const-decl "[real -> real]" deriv_examples nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (deriv_pow_lam formula-decl nil derivatives_lam analysis)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (derivative_cos formula-decl nil sincos_def trig)
    (derivative_sin formula-decl nil sincos_def trig)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (derivable_sin formula-decl nil sincos_def trig)
    (derivable_cos formula-decl nil sincos_def trig)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (comp_derivable_fun formula-decl nil chain_rule analysis)
    (sin const-decl "real" sincos_def trig)
    (^ const-decl "real" exponentiation nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cos const-decl "real" sincos_def trig)
    (chain_rule formula-decl nil chain_rule analysis)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sincos2 const-decl "real" deriv_examples nil)
    (derivable? const-decl "bool" derivatives analysis)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (derivable_expsin 0
  (derivable_expsin-1 nil 3781817404 ("" (derivable) nil nil)
   ((expsin const-decl "real" deriv_examples nil)
    (derivable_exp formula-decl nil ln_exp lnexp)
    (derivable_sin formula-decl nil sincos_def trig)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (sin const-decl "real" sincos_def trig)
    (comp_derivable_fun formula-decl nil chain_rule analysis))
   shostak))
 (deriv_expsin_TCC1 0
  (deriv_expsin_TCC1-1 nil 3781818715
   ("" (then (assert) (derivable)) nil nil)
   ((expsin const-decl "real" deriv_examples nil)
    (derivable_exp formula-decl nil ln_exp lnexp)
    (derivable_sin formula-decl nil sincos_def trig)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (sin const-decl "real" sincos_def trig)
    (comp_derivable_fun formula-decl nil chain_rule analysis))
   nil
   (deriv_expsin subtype "deriv_examples.expsin" "deriv_fun[real]")))
 (deriv_expsin 0
  (deriv_expsin-1 nil 3781818716
   ("" (then (skeep) (derivative)) nil nil)
   ((expsin const-decl "real" deriv_examples nil)
    (derivable? const-decl "bool" derivatives analysis)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (sin const-decl "real" sincos_def trig)
    (chain_rule formula-decl nil chain_rule analysis)
    (derivative_sin formula-decl nil sincos_def trig)
    (derivative_exp formula-decl nil ln_exp lnexp)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (derivable_exp formula-decl nil ln_exp lnexp)
    (derivable_sin formula-decl nil sincos_def trig)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak)))


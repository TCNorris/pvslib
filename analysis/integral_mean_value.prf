(integral_mean_value
 (deriv_domain 0
  (deriv_domain-1 nil 3472400278
   ("" (expand "deriv_domain?")
    (("" (skosimp*)
      (("" (lemma "connected_domain")
        (("" (expand "connected?")
          (("" (lemma "connected_deriv_domain[T]")
            (("" (expand "connected?")
              (("" (expand "not_one_element?")
                (("" (expand "deriv_domain?")
                  (("" (replace -2)
                    (("" (lemma not_one_element)
                      (("" (expand "not_one_element?")
                        (("" (replace -1)
                          (("" (hide -1) (("" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((connected? const-decl "bool" deriv_domain_def nil)
    (not_one_element formula-decl nil integral_mean_value nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (not_one_element? const-decl "bool" deriv_domain_def nil)
    (connected_deriv_domain formula-decl nil deriv_domain_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" integral_mean_value nil)
    (T formal-nonempty-subtype-decl nil integral_mean_value nil)
    (connected_domain formula-decl nil integral_mean_value nil)
    (deriv_domain? const-decl "bool" deriv_domain_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (IMP_fundamental_theorem_TCC1 0
  (IMP_fundamental_theorem_TCC1-1 nil 3376221540
   ("" (lemma "connected_domain") (("" (propax) nil nil)) nil)
   ((connected_domain formula-decl nil integral_mean_value nil)) nil
   (IMP_fundamental_theorem assuming "fundamental_theorem[T]"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")))
 (IMP_fundamental_theorem_TCC2 0
  (IMP_fundamental_theorem_TCC2-1 nil 3376221540
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil integral_mean_value nil)) nil
   (IMP_fundamental_theorem assuming "fundamental_theorem[T]"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (mean_value_integral_TCC1 0
  (mean_value_integral_TCC1-2 "" 3754890205
   ("" (skosimp*)
    (("" (lemma "continuous_Integrable?[T]")
      (("1" (inst?)
        (("1" (split -1)
          (("1" (propax) nil nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (expand "continuous?" -2) (("2" (inst?) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil))
        nil)
       ("3" (lemma "connected_domain") (("3" (propax) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (mean_value_integral subtype "integral_mean_value.f"
    "integral_def[T].Integrable_funs(integral_mean_value.a, integral_mean_value.b)"))
  (mean_value_integral_TCC1-1 nil 3376221540
   ("" (skosimp*)
    (("" (lemma "continuous_Integrable?[T]")
      (("1" (inst?)
        (("1" (split -1)
          (("1" (propax) nil nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (expand "continuous?" -1) (("2" (inst?) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil))
        nil)
       ("3" (lemma "connected_domain")
        (("3" (expand "connected?") (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-subtype-decl nil integral_mean_value nil)
    (T_pred const-decl "[real -> boolean]" integral_mean_value nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (continuous_Integrable? formula-decl nil integral nil)
    (connected? const-decl "bool" deriv_domain_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Closed_interval type-eq-decl nil intervals_real "reals/")
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (continuous? const-decl "bool" continuous_functions nil)
    (not_one_element formula-decl nil integral_mean_value nil)
    (connected_domain formula-decl nil integral_mean_value nil))
   nil
   (mean_value_integral subtype "integral_mean_value.f"
    "integral_def[T].Integrable_funs(integral_mean_value.a, integral_mean_value.b)")))
 (mean_value_integral 0
  (mean_value_integral-1 nil 3376221553
   ("" (skosimp*)
    (("" (lemma "fundamental2")
      (("" (inst?)
        (("" (assert)
          (("" (skosimp*)
            (("" (lemma "mean_value[T]")
              (("" (inst?)
                (("" (assert)
                  (("" (inst - "F!1")
                    (("" (assert)
                      (("" (skosimp*)
                        ((""
                          (case-replace "deriv(F!1, c!1) = f!1(c!1)")
                          (("1" (inst + "c!1")
                            (("1" (assert)
                              (("1"
                                (lemma "fundamental3")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst - "F!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "deriv" -5)
                              (("2"
                                (replace -5 + rl)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (lemma "not_one_element")
                            (("3" (propax) nil nil)) nil)
                           ("4" (lemma "deriv_domain")
                            (("4" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-subtype-decl nil integral_mean_value nil)
    (T_pred const-decl "[real -> boolean]" integral_mean_value nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fundamental2 formula-decl nil fundamental_theorem nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mean_value formula-decl nil derivative_props nil)
    (not_one_element? const-decl "bool" deriv_domain_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def nil)
    (deriv const-decl "real" derivatives_def nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fundamental3 formula-decl nil fundamental_theorem nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Open_interval type-eq-decl nil intervals_real "reals/")
    (b!1 skolem-const-decl "T" integral_mean_value nil)
    (c!1 skolem-const-decl "T" integral_mean_value nil)
    (a!1 skolem-const-decl "T" integral_mean_value nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (not_one_element formula-decl nil integral_mean_value nil)
    (deriv_domain formula-decl nil integral_mean_value nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (mvi_cor1_TCC1 0
  (mvi_cor1_TCC1-2 "" 3754890240
   ("" (skosimp*)
    (("" (lemma "continuous_Integrable?[T]")
      (("1" (inst?)
        (("1" (assert)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (expand "continuous?" -1) (("1" (inst?) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil))
        nil)
       ("3" (lemma "connected_domain") (("3" (propax) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (mvi_cor1 subtype "integral_mean_value.f"
    "integral_def[T].Integrable_funs(integral_mean_value.a, integral_mean_value.b)"))
  (mvi_cor1_TCC1-1 nil 3376222786
   ("" (skosimp*)
    (("" (lemma "continuous_Integrable?[T]")
      (("1" (inst?)
        (("1" (assert)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (expand "continuous?" -3) (("1" (inst?) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil))
        nil)
       ("3" (lemma "connected_domain")
        (("3" (expand "connected?") (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-subtype-decl nil integral_mean_value nil)
    (T_pred const-decl "[real -> boolean]" integral_mean_value nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (continuous_Integrable? formula-decl nil integral nil)
    (connected? const-decl "bool" deriv_domain_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (Closed_interval type-eq-decl nil intervals_real "reals/")
    (continuous? const-decl "bool" continuous_functions nil)
    (not_one_element formula-decl nil integral_mean_value nil)
    (connected_domain formula-decl nil integral_mean_value nil))
   nil
   (mvi_cor1 subtype "integral_mean_value.f"
    "integral_def[T].Integrable_funs(integral_mean_value.a, integral_mean_value.b)")))
 (mvi_cor1 0
  (mvi_cor1-1 nil 3376222764
   ("" (skosimp*)
    (("" (lemma "mean_value_integral")
      (("" (inst?)
        (("" (assert)
          (("" (skosimp*)
            (("" (replace -1)
              (("" (factor -5)
                (("" (mult-cases -5)
                  (("" (inst?)
                    (("1" (assert) nil nil)
                     ("2" (assert)
                      (("2" (typepred "c!1")
                        (("2" (assert) (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mean_value_integral formula-decl nil integral_mean_value nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_times3 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Closed_interval type-eq-decl nil intervals_real "reals/")
    (c!1 skolem-const-decl "Open_interval[T](a!1, b!1)"
     integral_mean_value nil)
    (b!1 skolem-const-decl "T" integral_mean_value nil)
    (a!1 skolem-const-decl "T" integral_mean_value nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Open_interval type-eq-decl nil intervals_real "reals/")
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (T formal-nonempty-subtype-decl nil integral_mean_value nil)
    (T_pred const-decl "[real -> boolean]" integral_mean_value nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)))


(prelude_sets_aux
 (complement_difference 0
  (complement_difference-1 nil 3293875050
   ("" (skolem 1 ("A" "B"))
    (("" (rewrite "difference_intersection")
      (("" (rewrite "demorgan2")
        (("" (rewrite "complement_complement") nil nil)) nil))
      nil))
    nil)
   ((difference_intersection formula-decl nil sets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil prelude_sets_aux nil)
    (complement_complement formula-decl nil sets_lemmas nil)
    (complement const-decl "set" sets nil)
    (demorgan2 formula-decl nil sets_lemmas nil))
   shostak))
 (Intersection_member 0
  (Intersection_member-1 nil 3293730468 ("" (grind) nil nil)
   ((Intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   shostak))
 (Intersection_split 0
  (Intersection_split-1 nil 3293730569
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t)
      (("" (lemma "Intersection_member" ("x" "x!1"))
        (("" (inst-cp - "A!1")
          (("" (expand "intersection")
            (("" (expand "member")
              (("" (inst - "rest(A!1)")
                (("" (case-replace "Intersection(A!1)(x!1)")
                  (("1" (simplify -3)
                    (("1" (flatten)
                      (("1" (hide -2)
                        (("1" (split -2)
                          (("1" (inst - "choose(A!1)")
                            (("1" (assert) nil nil)) nil)
                           ("2" (hide 2)
                            (("2" (skosimp*)
                              (("2" (typepred "a!1")
                                (("2" (lemma "rest_subset" ("a" "A!1"))
                                  (("2" (expand "subset?")
                                    (("2" (expand "member")
                                      (("2"
                                        (inst -1 "a!1")
                                        (("2"
                                          (assert)
                                          (("2" (inst - "a!1") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (flatten)
                      (("2" (replace -4)
                        (("2" (skosimp*)
                          (("2" (case-replace "choose(A!1)=a!1")
                            (("2" (assert)
                              (("2" (inst - "a!1")
                                (("2" (expand "rest")
                                  (("2" (expand "nonempty?")
                                    (("2" (assert)
                                      (("2"
                                        (expand "remove")
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil prelude_sets_aux nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rest const-decl "set" sets nil) (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (Intersection const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (rest_subset formula-decl nil sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (remove const-decl "set" sets nil)
    (a!1 skolem-const-decl "(A!1)" prelude_sets_aux nil)
    (A!1 skolem-const-decl "setofsets[T]" prelude_sets_aux nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Intersection_member formula-decl nil prelude_sets_aux nil))
   shostak))
 (Intersection_finite 0
  (Intersection_finite-2 "" 3790090126
   ("" (skosimp*)
    (("" (name "N" "card(A!1)")
      (("1"
        (case "FORALL (A:setofsets[T],n:nat): subset?(A,A!1) & card(A) <= n => P!1(Intersection(A))")
        (("1" (inst - "A!1" "N")
          (("1" (assert) (("1" (rewrite "subset_reflexive") nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (induct "n")
            (("1" (skosimp*)
              (("1" (expand "<=" -2)
                (("1" (split -2)
                  (("1" (assert) nil nil)
                   ("2" (rewrite "card_is_0" -1)
                    (("2" (replace -1 1)
                      (("2" (lemma "Intersection_empty_full[T]")
                        (("2" (hide-all-but (-1 -5 1))
                          (("2" (rewrite "fullset_is_full?")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (expand "<=" -3)
                (("2" (split -3)
                  (("1" (inst - "A!2") (("1" (assert) nil nil)) nil)
                   ("2" (lemma "finite_subset" ("s" "A!2" "A" "A!1"))
                    (("2" (assert)
                      (("2" (lemma "nonempty_card" ("S" "A!2"))
                        (("2" (assert)
                          (("2" (lemma "card_rest" ("S" "A!2"))
                            (("2" (split -1)
                              (("1" (lemma "rest_subset" ("a" "A!2"))
                                (("1"
                                  (lemma "subset_transitive"
                                   ("a" "rest(A!2)" "b" "A!2" "c" "A!1"))
                                  (("1" (assert)
                                    (("1" (inst - "rest(A!2)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "choose_member" ("a" "A!2"))
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (inst - "choose(A!2)")
                                                (("1"
                                                  (inst
                                                   -
                                                   "choose(A!2)"
                                                   "Intersection(rest(A!2))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "Intersection_split"
                                                       ("A" "A!2"))
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "subset?")
                                                  (("2"
                                                    (inst -9 "choose(A!2)")
                                                    (("2"
                                                      (expand "member")
                                                      (("2" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "nonempty?")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "nonempty?")
                                (("2" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (skosimp*)
                (("3" (lemma "finite_subset" ("s" "A!2" "A" "A!1"))
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skosimp*)
            (("3" (lemma "finite_subset" ("s" "A!2" "A" "A!1"))
              (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (propax) nil nil))
      nil))
    nil)
   nil shostak)
  (Intersection_finite-1 nil 3293823392
   ("" (skosimp*)
    (("" (name "N" "card(A!1)")
      (("1"
        (case "FORALL (A:setofsets[T],n:nat): subset?(A,A!1) & card(A) <= n => P!1(Intersection(A))")
        (("1" (inst - "A!1" "N")
          (("1" (assert) (("1" (rewrite "subset_reflexive") nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (induct "n")
            (("1" (skosimp*)
              (("1" (expand "<=" -2)
                (("1" (split -2)
                  (("1" (assert) nil nil)
                   ("2" (rewrite "card_is_0" -1)
                    (("1" (replace -1 1)
                      (("1" (lemma "Intersection_empty_full[T]")
                        (("1" (hide-all-but (-1 -5 1))
                          (("1" (rewrite "fullset_is_full?")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "finite_subset" ("s" "A!2" "A" "A!1"))
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (expand "<=" -3)
                (("2" (split -3)
                  (("1" (inst - "A!2") (("1" (assert) nil nil)) nil)
                   ("2" (lemma "finite_subset" ("s" "A!2" "A" "A!1"))
                    (("2" (assert)
                      (("2" (lemma "nonempty_card" ("S" "A!2"))
                        (("2" (assert)
                          (("2" (lemma "card_rest" ("S" "A!2"))
                            (("2" (split -1)
                              (("1" (lemma "rest_subset" ("a" "A!2"))
                                (("1"
                                  (lemma "subset_transitive"
                                   ("a" "rest(A!2)" "b" "A!2" "c" "A!1"))
                                  (("1" (assert)
                                    (("1" (inst - "rest(A!2)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "choose_member" ("a" "A!2"))
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (inst - "choose(A!2)")
                                                (("1"
                                                  (inst
                                                   -
                                                   "choose(A!2)"
                                                   "Intersection(rest(A!2))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "Intersection_split"
                                                       ("A" "A!2"))
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "subset?")
                                                  (("2"
                                                    (inst -9 "choose(A!2)")
                                                    (("2"
                                                      (expand "member")
                                                      (("2" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "nonempty?")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "nonempty?")
                                (("2" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (skosimp*)
                (("3" (lemma "finite_subset" ("s" "A!2" "A" "A!1"))
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skosimp*)
            (("3" (lemma "finite_subset" ("s" "A!2" "A" "A!1"))
              (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (propax) nil nil))
      nil))
    nil)
   ((setofsets type-eq-decl nil sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-type-decl nil prelude_sets_aux nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subset_transitive formula-decl nil sets_lemmas nil)
    (rest const-decl "set" sets nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (Intersection_split formula-decl nil prelude_sets_aux nil)
    (A!2 skolem-const-decl "setofsets[T]" prelude_sets_aux nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rest_subset formula-decl nil sets_lemmas nil)
    (card_rest formula-decl nil finite_sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (finite_subset formula-decl nil finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fullset_is_full? formula-decl nil sets_lemmas nil)
    (emptyset const-decl "set" sets nil)
    (Intersection_empty_full formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (card_is_0 formula-decl nil finite_sets nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (A!1 skolem-const-decl "setofsets[T]" prelude_sets_aux nil)
    (subset_reflexive formula-decl nil sets_lemmas nil)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil) (<= const-decl "bool" reals nil)
    (Intersection const-decl "set" sets nil))
   shostak))
 (Union_member 0
  (Union_member-1 nil 3293730382 ("" (grind) nil nil)
   ((Union const-decl "set" sets nil) (member const-decl "bool" sets nil))
   shostak))
 (Union_split 0
  (Union_split-1 nil 3293732078
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t)
      (("" (expand "union")
        (("" (lemma "Union_member" ("x" "x!1" "A" "A!1"))
          (("" (lemma "Union_member" ("x" "x!1" "A" "rest(A!1)"))
            (("" (expand "member")
              (("" (case-replace "Union(A!1)(x!1)")
                (("1" (simplify -3)
                  (("1" (skolem!)
                    (("1" (case "choose(A!1) = a!1")
                      (("1" (assert) nil nil)
                       ("2" (flatten 2)
                        (("2" (replace -2 3)
                          (("2" (inst + "a!1")
                            (("2" (expand "rest")
                              (("2" (expand "nonempty?")
                                (("2" (assert)
                                  (("2" (expand "remove")
                                    (("2" (expand "member")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (split -2)
                    (("1" (inst + "choose(A!1)") nil nil)
                     ("2" (assert)
                      (("2" (skolem!)
                        (("2" (typepred "a!1")
                          (("2" (lemma "rest_subset" ("a" "A!1"))
                            (("2" (expand "subset?")
                              (("2" (expand "member")
                                (("2" (inst - "a!1")
                                  (("2" (assert)
                                    (("2" (inst + "a!1") nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil prelude_sets_aux nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rest const-decl "set" sets nil) (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (Union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Union_surjective name-judgement "(surjective?[setofsets[T], set[T]])"
     sets_lemmas nil)
    (Union_member formula-decl nil prelude_sets_aux nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (rest_subset formula-decl nil sets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (remove const-decl "set" sets nil)
    (a!1 skolem-const-decl "(A!1)" prelude_sets_aux nil)
    (A!1 skolem-const-decl "setofsets[T]" prelude_sets_aux nil))
   shostak))
 (Union_finite 0
  (Union_finite-1 nil 3293825830
   ("" (skosimp*)
    (("" (lemma "Intersection_finite")
      (("" (inst - "Complement(A!1)" "lambda (x:set[T]): P!1(complement(x))")
        (("" (rewrite "Demorgan2" -1)
          (("" (rewrite "Complement_Complement")
            (("" (rewrite "complement_fullset" -1)
              (("" (replace -2)
                (("" (split -1)
                  (("1" (propax) nil nil)
                   ("2" (hide-all-but (-2 1))
                    (("2" (expand "is_finite")
                      (("2" (skolem!)
                        (("2"
                          (inst + "N!1"
                           "lambda (a:(Complement(A!1))): f!1(complement(a))")
                          (("1" (expand "injective?")
                            (("1" (skosimp*)
                              (("1" (typepred "x1!1")
                                (("1" (typepred "x2!1")
                                  (("1" (expand "Complement")
                                    (("1" (skosimp*)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (rewrite "complement_complement")
                                            (("1"
                                              (rewrite
                                               "complement_complement")
                                              (("1"
                                                (typepred "b!1")
                                                (("1"
                                                  (typepred "b!2")
                                                  (("1"
                                                    (inst - "b!2" "b!1")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1)
                            (("2" (skolem!)
                              (("2" (typepred "a!1")
                                (("2" (expand "Complement")
                                  (("2" (skolem!)
                                    (("2" (typepred "b!1")
                                      (("2"
                                        (replace -2)
                                        (("2"
                                          (rewrite "complement_complement")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide-all-but (1 -3))
                    (("3" (skosimp*)
                      (("3" (typepred "a!1")
                        (("3" (expand "Complement")
                          (("3" (skolem!)
                            (("3" (typepred "b!1")
                              (("3" (inst - "b!1")
                                (("3" (replace -2)
                                  (("3" (rewrite "complement_complement") nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide-all-but (1 -4))
                    (("4" (skosimp*)
                      (("4" (inst - "complement(a!1)" "complement(b!1)")
                        (("4" (assert) (("4" (rewrite "demorgan2" 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Intersection_finite formula-decl nil prelude_sets_aux nil)
    (Demorgan2 formula-decl nil sets_lemmas nil)
    (Complement_bijective name-judgement
     "(bijective?[setofsets[T], setofsets[T]])" sets_lemmas nil)
    (Union_surjective name-judgement "(surjective?[setofsets[T], set[T]])"
     sets_lemmas nil)
    (complement_fullset formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (A!1 skolem-const-decl "setofsets[T]" prelude_sets_aux nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (complement_complement formula-decl nil sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (demorgan2 formula-decl nil sets_lemmas nil)
    (Complement_Complement formula-decl nil sets_lemmas nil)
    (complement const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (Complement const-decl "setofsets[T]" sets_lemmas nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil prelude_sets_aux nil))
   shostak))
 (finite_Complement 0
  (finite_Complement-2 "" 3790090127
   ("" (skosimp*)
    (("" (typepred "F!1")
      (("" (name "N" "card(F!1)")
        (("" (case-replace "N=0")
          (("1" (rewrite "card_is_0" -2)
            (("1" (replace -2)
              (("1" (hide -2 -3 -1) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (expand "is_finite")
            (("2" (skosimp*)
              (("2"
                (inst + "N!1"
                 "lambda (a:(Complement(F!1))): f!1(complement(a))")
                (("1" (hide -1 1)
                  (("1" (expand "injective?")
                    (("1" (skosimp*)
                      (("1" (inst - "complement(x1!1)" "complement(x2!1)")
                        (("1" (assert)
                          (("1" (rewrite "complement_equal") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (grind)
                    (("2" (rewrite "complement_complement") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (finite_Complement-1 nil 3293865693
   ("" (skosimp*)
    (("" (typepred "F!1")
      (("" (name "N" "card(F!1)")
        (("" (case-replace "N=0")
          (("1" (rewrite "card_is_0" -2)
            (("1" (replace -2)
              (("1" (hide -2 -3 -1) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (expand "is_finite")
            (("2" (skosimp*)
              (("2"
                (inst + "N!1"
                 "lambda (a:(Complement(F!1))): f!1(complement(a))")
                (("1" (hide -1 1)
                  (("1" (expand "injective?")
                    (("1" (skosimp*)
                      (("1" (inst - "complement(x1!1)" "complement(x2!1)")
                        (("1" (assert)
                          (("1" (rewrite "complement_equal") nil nil)) nil)
                         ("2" (typepred "x2!1")
                          (("2" (expand "Complement")
                            (("2" (skolem!)
                              (("2" (replace -1)
                                (("2" (rewrite "complement_complement")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (typepred "x1!1")
                          (("3" (expand "Complement")
                            (("3" (skolem!)
                              (("3" (replace -1)
                                (("3" (rewrite "complement_complement")
                                  (("3" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (grind)
                    (("2" (rewrite "complement_complement") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil prelude_sets_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Complement_bijective name-judgement
     "(bijective?[setofsets[T], setofsets[T]])" sets_lemmas nil)
    (Complement_is_finite application-judgement "finite_set[set[T]]"
     finite_sets_of_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (card_is_0 formula-decl nil finite_sets nil)
    (complement_complement formula-decl nil sets_lemmas nil)
    (complement_equal formula-decl nil sets_lemmas nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (complement const-decl "set" sets nil)
    (F!1 skolem-const-decl "finite_set[set[T]]" prelude_sets_aux nil)
    (Complement const-decl "setofsets[T]" sets_lemmas nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil))
   shostak))
 (epsilon_to_sequence 0
  (epsilon_to_sequence-1 nil 3460213497
   ("" (skosimp*)
    ((""
      (inst + "(lambda (i:posint): choose({s: T |S!1(s) AND f!1(s) < 1/i}))")
      (("1" (skosimp*)
        (("1" (inst - "1/n!1")
          (("1" (skosimp*)
            (("1" (typepred "choose({s: T | S!1(s) AND f!1(s) < 1 / n!1})")
              (("1" (propax) nil nil)
               ("2" (hide 2)
                (("2" (expand "nonempty?")
                  (("2" (expand "empty?")
                    (("2" (expand "member")
                      (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (inst - "1/i!1")
          (("2" (expand "nonempty?")
            (("2" (expand "empty?")
              (("2" (expand "member")
                (("2" (skosimp*)
                  (("2" (inst - "s!1") (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (f!1 skolem-const-decl "[T -> posreal]" prelude_sets_aux nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (S!1 skolem-const-decl "set[T]" prelude_sets_aux nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (T formal-type-decl nil prelude_sets_aux nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (choose const-decl "(p)" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sets nil))
   nil)))


(convex_function_props
 (convex_functions_locally_bounded 0
  (convex_functions_locally_bounded-1 nil 3465303328
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "convex_function_right_lt")
        (("" (name "AA" "A-1")
          (("" (label "aaname" -1)
            (("" (name "CC" "A")
              (("" (label "ccname" -1)
                (("" (case "f(AA) >= f(CC)")
                  (("1" (label "faacc" -1)
                    (("1"
                      (case "FORALL (x: real): A<=x AND x<=B IMPLIES f(x) >= ((B - AA) / (CC - AA)) * f(CC) - ((B - CC) / (CC - AA)) * f(AA)")
                      (("1" (lemma "axiom_of_archimedes")
                        (("1"
                          (inst -
                           "abs(((B - AA) / (CC - AA)) * f(CC) - ((B - CC) / (CC - AA)) * f(AA))")
                          (("1" (skosimp*)
                            (("1" (lemma "axiom_of_archimedes")
                              (("1" (inst - "max(abs(f(A)),abs(f(B)))")
                                (("1" (skosimp*)
                                  (("1"
                                    (case "FORALL (x: real): A <= x AND x <= B IMPLIES f(x) < i!2")
                                    (("1"
                                      (case
                                       "FORALL (x: real): A <= x AND x <= B IMPLIES f(x) > -i!1")
                                      (("1"
                                        (inst + "max(i!1,i!2)")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst - "x")
                                            (("1"
                                              (inst - "x")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "abs")
                                                  (("1"
                                                    (lift-if)
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst - "x")
                                            (("2"
                                              (inst - "x")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (lemma "convex_btw_pt_left_lt")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst - "A" "B" "i!2" "f" "x")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (label "xb" -2)
                          (("2" (hide 2)
                            (("2" (inst - "AA" "x" "CC" "f")
                              (("2" (assert)
                                (("2" (split)
                                  (("1" (field -1)
                                    (("1" (field 1)
                                      (("1"
                                        (case
                                         "(f(AA)-f(CC))*x<=(f(AA)-f(CC))*B")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (copy "xb")
                                          (("2"
                                            (mult-by -1 "f(AA)-f(CC)")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (case "x = A")
                                    (("1" (replace "aaname" + rl)
                                      (("1"
                                        (replace "ccname" + rl)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (field 2)
                                              (("1"
                                                (both-sides
                                                 "-"
                                                 "f(A)-f(A-1)*B+f(A-1)*A"
                                                 2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (factor 2)
                                                    (("1"
                                                      (div-by 2 "B-A")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (assert) nil nil))
                      nil))
                    nil)
                   ("2"
                    (case "FORALL (x: real): A <= x AND x <= B IMPLIES f(A) <= f(x) AND f(x)<=f(B)")
                    (("1" (lemma "axiom_of_archimedes")
                      (("1" (inst - "max(abs(f(A)),abs(f(B)))")
                        (("1" (skosimp*)
                          (("1" (inst + "i!1")
                            (("1" (skosimp*)
                              (("1" (inst - "x!1")
                                (("1" (assert)
                                  (("1" (flatten)
                                    (("1" (expand "abs")
                                      (("1"
                                        (lift-if)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (case "FORALL (x: real): A <= x AND x <= B IMPLIES f(A) <= f(x)")
                      (("1" (skosimp*)
                        (("1" (inst - "x!1")
                          (("1" (assert)
                            (("1" (case "f(B) > f(A)")
                              (("1" (lemma "convex_btw_pt_right_lt")
                                (("1"
                                  (inst - "A" "B" "max(f(B),f(A))" "f" "x!1")
                                  (("1" (assert)
                                    (("1" (expand "max")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst - "A-1" "B" "A" "f")
                                (("2" (assert)
                                  (("2" (field -6)
                                    (("2" (case "B > A")
                                      (("1"
                                        (case
                                         "f(A) * B + f(A - 1) * A - f(A) * A - f(A - 1) * B > 0")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (both-sides "-" "f(A-1)*A-f(A)*A" 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (factor 1)
                                              (("2"
                                                (div-by 1 "f(A)-f(A-1)")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "axiom_of_archimedes")
                                        (("2"
                                          (inst - "abs(f(A))")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst + "i!1")
                                              (("1"
                                                (skosimp*)
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (inst - "AA" "x!1" "CC" "f")
                          (("2" (assert)
                            (("2" (field -7)
                              (("2" (replace "ccname" - rl)
                                (("2" (replace "aaname" - rl)
                                  (("2" (assert)
                                    (("2"
                                      (both-sides
                                       "-"
                                       "f(A) - f(A-1)*x!1+f(A-1)*A")
                                      (("2"
                                        (case
                                         "f(A) * x!1 + f(A - 1) * A - f(A) * A - f(A - 1) * x!1 >= 0")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (both-sides
                                           "+"
                                           "f(A-1)*x!1-f(A-1)*A"
                                           1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (factor 1)
                                              (("2"
                                                (div-by 1 "x!1-A")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (CC skolem-const-decl "real" convex_function_props nil)
    (AA skolem-const-decl "real" convex_function_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (convex_btw_pt_left_lt formula-decl nil convex_functions reals)
    (minus_int_is_int application-judgement "int" integers nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (i!2 skolem-const-decl "int" convex_function_props nil)
    (i!1 skolem-const-decl "int" convex_function_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}" real_defs
     nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}" real_defs
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (axiom_of_archimedes formula-decl nil real_props nil)
    (fdx_11 skolem-const-decl "real" convex_function_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (fdx_8 skolem-const-decl "real" convex_function_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_plus_ge2 formula-decl nil real_props nil)
    (both_sides_minus_ge2 formula-decl nil real_props nil)
    (both_sides_minus_ge1 formula-decl nil real_props nil)
    (convex_btw_pt_right_lt formula-decl nil convex_functions reals)
    (both_sides_minus_gt1 formula-decl nil real_props nil)
    (both_sides_minus_gt2 formula-decl nil real_props nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (i!1 skolem-const-decl "int" convex_function_props nil)
    (fdx_14 skolem-const-decl "real" convex_function_props nil)
    (both_sides_minus_le1 formula-decl nil real_props nil)
    (both_sides_minus_le2 formula-decl nil real_props nil)
    (both_sides_plus_le2 formula-decl nil real_props nil)
    (both_sides_plus_ge1 formula-decl nil real_props nil)
    (i!1 skolem-const-decl "int" convex_function_props nil)
    (convex_function_right_lt formula-decl nil convex_functions reals))
   shostak))
 (convex_diff_quot_left_lt_TCC1 0
  (convex_diff_quot_left_lt_TCC1-1 nil 3465314160 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (convex? const-decl "bool" convex_functions reals)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (convex_diff_quot_left_lt subtype
    "((number_fields.-)(convex_function_props.C, convex_function_props.B))"
    "nznum")))
 (convex_diff_quot_left_lt_TCC2 0
  (convex_diff_quot_left_lt_TCC2-1 nil 3465314160 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (convex? const-decl "bool" convex_functions reals)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (convex_diff_quot_left_lt subtype
    "((number_fields.-)(convex_function_props.C, convex_function_props.A))"
    "nznum")))
 (convex_diff_quot_left_lt 0
  (convex_diff_quot_left_lt-3 "" 3790090794
   ("" (skeep)
    (("" (skeep)
      (("" (name "t" "(C-B)/(C-A)")
        (("" (label "tname" -1)
          (("" (case "1-t = (B-A)/(C-A)")
            (("1" (label "mtname" -1)
              (("1" (expand "convex?")
                (("1" (inst - "A" "C" "t")
                  (("1" (split)
                    (("1" (case "C + t * A - t * C = B")
                      (("1" (replace -1)
                        (("1" (replace "tname" -2 rl)
                          (("1" (field -2) nil nil)) nil))
                        nil)
                       ("2" (replace "tname" + rl) (("2" (field 1) nil nil))
                        nil))
                      nil)
                     ("2" (replace "tname" + rl)
                      (("2" (cross-mult 1) (("2" (assert) nil nil)) nil)) nil)
                     ("3" (replace "tname" + rl)
                      (("3" (cross-mult 1) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace "tname" + rl) (("2" (field 1) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (convex_diff_quot_left_lt-2 nil 3465548968
   ("" (skeep)
    (("" (skeep)
      (("" (name "t" "(C-B)/(C-A)")
        (("" (label "tname" -1)
          (("" (case "1-t = (B-A)/(C-A)")
            (("1" (label "mtname" -1)
              (("1" (expand "convex?")
                (("1" (inst - "A" "C" "t")
                  (("1" (split)
                    (("1" (case "C + t * A - t * C = B")
                      (("1" (replace -1)
                        (("1" (replace "tname" -2 rl)
                          (("1" (field -2) (("1" (field 1) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (replace "tname" + rl) (("2" (field 1) nil nil))
                        nil))
                      nil)
                     ("2" (replace "tname" + rl)
                      (("2" (cross-mult 1) (("2" (assert) nil nil)) nil)) nil)
                     ("3" (replace "tname" + rl)
                      (("3" (cross-mult 1) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace "tname" + rl) (("2" (field 1) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((div_mult_pos_le1 formula-decl nil real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (C skolem-const-decl "real" convex_function_props nil)
    (A skolem-const-decl "real" convex_function_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (> const-decl "bool" reals nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (fdx_17 skolem-const-decl "real" convex_function_props nil)
    (>= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (both_sides_minus_ge2 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (convex? const-decl "bool" convex_functions reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   nil)
  (convex_diff_quot_left_lt-1 nil 3465314160
   ("" (skeep)
    (("" (skeep)
      (("" (name "t" "(B-A)/(B-X)")
        (("" (label "tname" -1)
          (("" (case "1-t = (A-X)/(B-X)")
            (("1" (label "mtname" -1)
              (("1" (expand "convex?")
                (("1" (inst - "X" "B" "t")
                  (("1" (split)
                    (("1" (case "B + t * X - t * B = A")
                      (("1" (replace -1)
                        (("1" (replace "tname" -2 rl)
                          (("1" (field -2) (("1" (field 1) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (replace "tname" + rl) (("2" (field 1) nil nil))
                        nil))
                      nil)
                     ("2" (replace "tname" + rl)
                      (("2" (cross-mult 1) (("2" (assert) nil nil)) nil)) nil)
                     ("3" (replace "tname" + rl)
                      (("3" (cross-mult 1) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace "tname" + rl) (("2" (field 1) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convex? const-decl "bool" convex_functions reals)) shostak))
 (convex_diff_quot_right_lt_TCC1 0
  (convex_diff_quot_right_lt_TCC1-1 nil 3465314726 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (convex? const-decl "bool" convex_functions reals)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (convex_diff_quot_right_lt subtype
    "((number_fields.-)(convex_function_props.B, convex_function_props.A))"
    "nznum")))
 (convex_diff_quot_right_lt 0
  (convex_diff_quot_right_lt-3 "" 3790090799
   ("" (skeep)
    (("" (skeep)
      (("" (name "t" "(B-A)/(C-A)")
        (("" (label "tname" -1)
          (("" (case "1-t = (C-B)/(C-A)")
            (("1" (label "mtname" -1)
              (("1" (expand "convex?")
                (("1" (inst - "C" "A" "t")
                  (("1" (split)
                    (("1" (case "A + t * C - t * A = B")
                      (("1" (replace -1)
                        (("1" (replace "tname" -2 rl)
                          (("1" (field -2) nil nil)) nil))
                        nil)
                       ("2" (replace "tname" + rl) (("2" (field 1) nil nil))
                        nil))
                      nil)
                     ("2" (replace "tname" + rl)
                      (("2" (cross-mult 1) (("2" (assert) nil nil)) nil)) nil)
                     ("3" (replace "tname" + rl)
                      (("3" (cross-mult 1) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace "tname" + rl) (("2" (field 1) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (convex_diff_quot_right_lt-2 nil 3465549080
   ("" (skeep)
    (("" (skeep)
      (("" (name "t" "(B-A)/(C-A)")
        (("" (label "tname" -1)
          (("" (case "1-t = (C-B)/(C-A)")
            (("1" (label "mtname" -1)
              (("1" (expand "convex?")
                (("1" (inst - "C" "A" "t")
                  (("1" (split)
                    (("1" (case "A + t * C - t * A = B")
                      (("1" (replace -1)
                        (("1" (replace "tname" -2 rl)
                          (("1" (field -2) (("1" (field 1) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (replace "tname" + rl) (("2" (field 1) nil nil))
                        nil))
                      nil)
                     ("2" (replace "tname" + rl)
                      (("2" (cross-mult 1) (("2" (assert) nil nil)) nil)) nil)
                     ("3" (replace "tname" + rl)
                      (("3" (cross-mult 1) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace "tname" + rl) (("2" (field 1) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (C skolem-const-decl "real" convex_function_props nil)
    (A skolem-const-decl "real" convex_function_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (> const-decl "bool" reals nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (fdx_23 skolem-const-decl "real" convex_function_props nil)
    (>= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (both_sides_minus_le1 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (convex? const-decl "bool" convex_functions reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   nil)
  (convex_diff_quot_right_lt-1 nil 3465314739
   ("" (skeep)
    (("" (skeep)
      (("" (name "t" "(B-A)/(X-A)")
        (("" (label "tname" -1)
          (("" (case "1-t = (X-B)/(X-A)")
            (("1" (label "mtname" -1)
              (("1" (expand "convex?")
                (("1" (inst - "X" "A" "t")
                  (("1" (split)
                    (("1" (case "A + t * X - t * A = B")
                      (("1" (replace -1)
                        (("1" (replace "tname" -2 rl)
                          (("1" (field -2) (("1" (field 1) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (replace "tname" + rl) (("2" (field 1) nil nil))
                        nil))
                      nil)
                     ("2" (replace "tname" + rl)
                      (("2" (cross-mult 1) (("2" (assert) nil nil)) nil)) nil)
                     ("3" (replace "tname" + rl)
                      (("3" (cross-mult 1) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace "tname" + rl) (("2" (field 1) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convex? const-decl "bool" convex_functions reals)) nil))
 (convex_diff_quot_increasing 0
  (convex_diff_quot_increasing-1 nil 3465549183
   ("" (skeep)
    (("" (skosimp*)
      (("" (lemma "convex_diff_quot_left_lt")
        (("" (inst?)
          (("" (assert)
            (("" (inst - "A!1" "B!1" "C!1")
              (("" (assert)
                (("" (lemma "convex_diff_quot_right_lt")
                  (("" (inst?)
                    (("" (assert)
                      (("" (inst - "A!1" "B!1" "C!1") (("" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (convex_diff_quot_right_lt formula-decl nil convex_function_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convex_diff_quot_left_lt formula-decl nil convex_function_props nil))
   shostak))
 (convex_diff_quot_bounded 0
  (convex_diff_quot_bounded-1 nil 3465315416
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (name "rightquot" "(f(x+epsil)-f(x))/epsil")
          (("" (label "rqname" -1)
            (("" (name "leftquot" "(f(x)-f(x-epsil))/epsil")
              (("" (label "lqname" -1)
                (("" (name "totquot" "(f(x+epsil)-f(x-epsil))/(2*epsil)")
                  (("" (label "tqname" -1)
                    (("" (lemma "axiom_of_archimedes")
                      ((""
                        (inst -
                         "max(abs(totquot),max(abs(leftquot),abs(rightquot)))")
                        (("" (skosimp*)
                          (("" (inst + "i!1")
                            (("1" (skeep)
                              (("1" (label "idef" -1)
                                (("1"
                                  (name "deltaquot" "(f(x+delta)-f(x))/delta")
                                  (("1" (label "dqname" -1)
                                    (("1"
                                      (case
                                       "deltaquot >= leftquot AND deltaquot <= rightquot")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (case-replace
                                           "abs(f(x + delta) - f(x)) / abs(delta) = abs(deltaquot)")
                                          (("1"
                                            (case
                                             "abs(deltaquot) <= abs(leftquot) OR abs(deltaquot) <= abs(rightquot)")
                                            (("1"
                                              (split)
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (hide-all-but (-2 -3 1 2))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but ("dqname" 1))
                                            (("2"
                                              (cross-mult 1)
                                              (("2"
                                                (cross-mult -1)
                                                (("2"
                                                  (lemma "abs_mult")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "deltaquot"
                                                     "delta")
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (split)
                                        (("1"
                                          (replace "dqname" + rl)
                                          (("1"
                                            (replace "lqname" + rl)
                                            (("1"
                                              (case "delta>=0")
                                              (("1"
                                                (lemma
                                                 "convex_diff_quot_increasing")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -
                                                       "x-epsil"
                                                       "x"
                                                       "x+delta")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "convex_diff_quot_left_lt")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       -
                                                       "x-epsil"
                                                       "x+delta"
                                                       "x")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace "dqname" + rl)
                                          (("2"
                                            (replace "rqname" + rl)
                                            (("2"
                                              (case "delta >=0")
                                              (("1"
                                                (lemma
                                                 "convex_diff_quot_right_lt")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -
                                                       "x"
                                                       "x+delta"
                                                       "x+epsil")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "convex_diff_quot_increasing")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       -
                                                       "delta+x"
                                                       "x"
                                                       "epsil+x")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (axiom_of_archimedes formula-decl nil real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (div_cancel3 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (abs_mult formula-decl nil real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (convex_diff_quot_right_lt formula-decl nil convex_function_props nil)
    (convex_diff_quot_increasing formula-decl nil convex_function_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (convex_diff_quot_left_lt formula-decl nil convex_function_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (i!1 skolem-const-decl "int" convex_function_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (convex_functions_continuous_TCC1 0
  (convex_functions_continuous_TCC1-1 nil 3465311077
   ("" (skeep)
    (("" (lemma "real_metric_space") (("" (inst - "fullset[real]") nil nil))
      nil))
    nil)
   ((real_metric_space formula-decl nil real_metric_space nil)
    (fullset const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (convex_functions_continuous assuming
    "continuity_ms_def[real, real_metric_space.real_dist, real, real_metric_space.real_dist].continuity_ms_def"
    "fullset_metric_space1: ASSUMPTION metric_spaces_def[continuity_ms_def.T1, continuity_ms_def.d1].metric_space?(sets[continuity_ms_def.T1].fullset)")))
 (convex_functions_continuous 0
  (convex_functions_continuous-2 "" 3790090802
   ("" (skeep)
    (("" (lemma "convex_diff_quot_bounded")
      (("" (inst?)
        (("" (assert)
          (("" (expand "continuous?")
            (("" (expand "continuous?")
              (("" (skeep)
                (("" (inst - "x")
                  (("" (expand "continuous_at?")
                    (("" (skosimp*)
                      (("" (inst - "epsilon!1")
                        (("" (skosimp*)
                          (("" (case "M!1 > 0")
                            (("1" (name "delta!1" "epsilon!1/M!1")
                              (("1" (inst + "delta!1")
                                (("1" (skeep)
                                  (("1" (expand "member")
                                    (("1" (expand "ball")
                                      (("1"
                                        (expand "real_dist")
                                        (("1"
                                          (name "newdelt" "y-x")
                                          (("1"
                                            (inst - "newdelt")
                                            (("1"
                                              (split)
                                              (("1"
                                                (cross-mult -1)
                                                (("1"
                                                  (case
                                                   "abs(newdelt) < delta!1")
                                                  (("1"
                                                    (both-sides "+" "x" -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -3 - rl)
                                                        (("1"
                                                          (case-replace
                                                           "epsilon!1 = delta!1*M!1")
                                                          (("1"
                                                            (mult-by -2 "M!1")
                                                            (("1"
                                                              (lemma
                                                               "abs_neg")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "f(x)-f(y)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma "abs_neg")
                                                    (("2"
                                                      (inst - "y-x")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "abs_neg")
                                                (("2"
                                                  (inst - "y-x")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "delta!1 <= epsilon!1")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (replace -3 + rl)
                                                        (("2"
                                                          (cross-mult 1)
                                                          (("2"
                                                            (div-by
                                                             1
                                                             "epsilon!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (case "delta!1 > 0")
                                  (("1" (assert) nil nil)
                                   ("2" (replace -1 + rl)
                                    (("2" (cross-mult 1) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (inst - "epsilon!1")
                              (("2" (expand "abs" -1 1)
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (convex_functions_continuous-1 nil 3465311077
   ("" (skeep)
    (("" (lemma "convex_diff_quot_bounded")
      (("" (inst?)
        (("" (assert)
          (("" (expand "continuous?")
            (("" (expand "continuous?")
              (("" (skeep)
                (("" (inst - "x")
                  (("" (expand "continuous_at?")
                    (("" (skosimp*)
                      (("" (inst - "epsilon!1")
                        (("" (skosimp*)
                          (("" (case "M!1 > 0")
                            (("1" (name "delta!1" "epsilon!1/M!1")
                              (("1" (inst + "delta!1")
                                (("1" (skeep)
                                  (("1" (expand "member")
                                    (("1" (expand "ball")
                                      (("1"
                                        (expand "real_dist")
                                        (("1"
                                          (name "newdelt" "y-x")
                                          (("1"
                                            (inst - "newdelt")
                                            (("1"
                                              (split)
                                              (("1"
                                                (cross-mult -1)
                                                (("1"
                                                  (case
                                                   "abs(newdelt) < delta!1")
                                                  (("1"
                                                    (both-sides "+" "x" -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -3 - rl)
                                                        (("1"
                                                          (case-replace
                                                           "epsilon!1 = delta!1*M!1")
                                                          (("1"
                                                            (mult-by -2 "M!1")
                                                            (("1"
                                                              (lemma
                                                               "abs_neg")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "f(x)-f(y)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma "abs_neg")
                                                    (("2"
                                                      (inst - "y-x")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "abs_neg")
                                                (("2"
                                                  (inst - "y-x")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "delta!1 <= epsilon!1")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (replace -3 + rl)
                                                        (("2"
                                                          (cross-mult 1)
                                                          (("2"
                                                            (div-by
                                                             1
                                                             "epsilon!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (case "delta!1 > 0")
                                  (("1" (assert) nil nil)
                                   ("2" (replace -1 + rl)
                                    (("2" (cross-mult 1)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (inst - "epsilon!1")
                              (("2" (expand "abs" -1 1)
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convex_diff_quot_bounded formula-decl nil convex_function_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (continuous? const-decl "bool" continuity_ms_def nil)
    (fullset const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (M!1 skolem-const-decl "nat" convex_function_props nil)
    (ball const-decl "set[T]" metric_spaces nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (abs_neg formula-decl nil abs_lems reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (abs_nat formula-decl nil abs_lems reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_simp formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (newdelt skolem-const-decl "real" convex_function_props nil)
    (real_dist const-decl "nnreal" real_metric_space nil)
    (member const-decl "bool" sets nil)
    (delta!1 skolem-const-decl "nzreal" convex_function_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (continuous_at? const-decl "bool" continuity_ms_def nil)
    (continuous? const-decl "bool" continuity_ms_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)))


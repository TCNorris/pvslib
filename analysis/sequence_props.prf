(sequence_props
 (incr_condition 0
  (incr_condition-1 nil 3406888867
   ("" (skolem!)
    (("" (expand "increasing?")
      (("" (prop)
        (("1" (skolem!) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (induct "y")
          (("1" (skosimp) (("1" (assert) nil nil)) nil)
           ("2" (skosimp*)
            (("2" (inst -1 "x!1")
              (("2" (inst -3 "j!1") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((increasing? const-decl "bool" real_fun_preds reals)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (sequence type-eq-decl nil sequences nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   nil))
 (decr_condition 0
  (decr_condition-1 nil 3406888867
   ("" (skolem!)
    (("" (expand "decreasing?")
      (("" (prop)
        (("1" (skolem!) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (induct "y")
          (("1" (skosimp) (("1" (assert) nil nil)) nil)
           ("2" (skosimp*)
            (("2" (inst -1 "x!1")
              (("2" (inst -3 "j!1") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((decreasing? const-decl "bool" real_fun_preds reals)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (sequence type-eq-decl nil sequences nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   nil))
 (strict_incr_condition 0
  (strict_incr_condition-1 nil 3406888867
   ("" (skolem!)
    (("" (expand "strict_increasing?")
      (("" (prop)
        (("1" (skolem!) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (induct "y")
          (("1" (skosimp) (("1" (assert) nil nil)) nil)
           ("2" (skosimp*)
            (("2" (inst -1 "x!1")
              (("2" (inst -3 "j!1") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strict_increasing? const-decl "bool" real_fun_preds reals)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (sequence type-eq-decl nil sequences nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   nil))
 (strict_decr_condition 0
  (strict_decr_condition-1 nil 3406888867
   ("" (skolem!)
    (("" (expand "strict_decreasing?")
      (("" (prop)
        (("1" (skolem!) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (induct "y")
          (("1" (skosimp) (("1" (assert) nil nil)) nil)
           ("2" (skosimp*)
            (("2" (inst -1 "x!1")
              (("2" (inst -3 "j!1") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strict_decreasing? const-decl "bool" real_fun_preds reals)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (sequence type-eq-decl nil sequences nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   nil))
 (extract_incr1 0
  (extract_incr1-1 nil 3406888867
   ("" (grind :if-match nil)
    (("1" (inst -1 "j!1" "i!1") (("1" (assert) nil nil)) nil)
     ("2" (inst?) (("2" (assert) nil nil)) nil))
    nil)
   ((extraction type-eq-decl nil sequence_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (extract_incr2 0
  (extract_incr2-1 nil 3406888867
   ("" (skosimp)
    (("" (use "extract_incr1" ("i" "j!1" "j" "i!1")) (("" (assert) nil nil))
      nil))
    nil)
   ((extract_incr1 formula-decl nil sequence_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (extraction type-eq-decl nil sequence_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (extract_incr3 0
  (extract_incr3-1 nil 3406888867
   ("" (skolem 1 ("f!1" _))
    (("" (induct "i")
      (("1" (assert) nil nil)
       ("2" (skosimp)
        (("2" (use "extract_incr1" ("i" "j!1" "j" "j!1+1"))
          (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (extract_incr1 formula-decl nil sequence_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (extraction type-eq-decl nil sequence_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (<= const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (unbounded_extract1 0
  (unbounded_extract1-1 nil 3406888867
   ("" (skolem!) (("" (inst?) (("" (rewrite "extract_incr3") nil nil)) nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (extraction type-eq-decl nil sequence_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (extract_incr3 formula-decl nil sequence_props nil))
   nil))
 (unbounded_extract2 0
  (unbounded_extract2-1 nil 3406888867
   ("" (skosimp)
    (("" (use "unbounded_extract1" ("f" "f!1"))
      (("" (skolem!)
        (("" (inst 1 "j!1+1")
          (("" (use "extract_incr1" ("i" "j!1" "j" "j!1+1"))
            (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((unbounded_extract1 formula-decl nil sequence_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (extraction type-eq-decl nil sequence_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (extract_incr1 formula-decl nil sequence_props nil))
   nil))
 (extract_composition 0
  (extract_composition-1 nil 3406888867
   ("" (auto-rewrite "strict_increasing?" "o") (("" (grind) nil nil)) nil)
   ((strict_increasing? const-decl "bool" real_fun_preds reals)
    (O const-decl "T3" function_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (extraction type-eq-decl nil sequence_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (subseq_def 0
  (subseq_def-1 nil 3406888900
   ("" (skosimp*) (("" (expand "subseq") (("" (propax) nil nil)) nil)) nil)
   ((subseq const-decl "bool" sequence_props nil)) shostak))
 (reflexive_subseq 0
  (reflexive_subseq-1 nil 3406888867
   ("" (skolem!)
    (("" (expand "subseq")
      (("" (inst 1 "I")
        (("1" (expand "I") (("1" (propax) nil nil)) nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((subseq const-decl "bool" sequence_props nil)
    (I const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (extraction type-eq-decl nil sequence_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (transitive_subseq 0
  (transitive_subseq-1 nil 3406888867
   ("" (expand "subseq")
    (("" (skosimp*)
      (("" (inst 1 "f!2 o f!1")
        (("1" (grind) nil nil) ("2" (rewrite "extract_composition") nil nil))
        nil))
      nil))
    nil)
   ((f!1 skolem-const-decl "extraction" sequence_props nil)
    (f!2 skolem-const-decl "extraction" sequence_props nil)
    (extraction type-eq-decl nil sequence_props nil)
    (O const-decl "T3" function_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (extract_composition formula-decl nil sequence_props nil)
    (subseq const-decl "bool" sequence_props nil))
   nil))
 (extract_bij_TCC1 0
  (extract_bij_TCC1-1 nil 3406889120 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (extraction type-eq-decl nil sequence_props nil)
    (set type-eq-decl nil sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (image const-decl "set[R]" function_image nil)
    (fullset const-decl "set" sets nil))
   nil
   (extract_bij subtype "sequence_props.f"
    "[nat -> (function_image[nat, nat].image(sequence_props.f, sets[nat].fullset))]")))
 (extract_bij 0
  (extract_bij-1 nil 3406889143
   ("" (skosimp)
    (("" (expand "bijective?")
      (("" (typepred "f!1")
        (("" (expand "strict_increasing?")
          (("" (split)
            (("1" (expand "injective?")
              (("1" (skosimp)
                (("1" (lemma "trich_lt" ("x" "x1!1" "y" "x2!1"))
                  (("1" (split -1)
                    (("1" (inst - "x1!1" "x2!1") (("1" (assert) nil nil)) nil)
                     ("2" (propax) nil nil)
                     ("3" (inst - "x2!1" "x1!1") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "surjective?")
              (("2" (skosimp*)
                (("2" (typepred "y!1")
                  (("2" (expand "fullset")
                    (("2" (expand "image")
                      (("2" (skosimp)
                        (("2" (inst + "x!1") (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trich_lt formula-decl nil real_props nil)
    (injective? const-decl "bool" functions nil)
    (TRUE const-decl "bool" booleans nil) (set type-eq-decl nil sets nil)
    (image const-decl "set[R]" function_image nil)
    (fullset const-decl "set" sets nil)
    (surjective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (extraction type-eq-decl nil sequence_props nil))
   nil))
 (incr_subseq 0
  (incr_subseq-1 nil 3406888867
   ("" (grind :if-match nil)
    (("" (inst-cp -5 "x!1")
      (("" (inst -5 "y!1")
        (("" (replace*)
          (("" (inst? -4)
            (("" (assert)
              (("" (inst -3 "x!1" "y!1") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (extraction type-eq-decl nil sequence_props nil)
    (subseq const-decl "bool" sequence_props nil)
    (increasing? const-decl "bool" real_fun_preds reals))
   nil))
 (decr_subseq 0
  (decr_subseq-1 nil 3406888867
   ("" (grind :if-match nil)
    (("" (inst-cp -5 "x!1")
      (("" (inst -5 "y!1")
        (("" (inst -3 "x!1" "y!1")
          (("" (inst -4 "f!1(x!1)" "f!1(y!1)") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (extraction type-eq-decl nil sequence_props nil)
    (subseq const-decl "bool" sequence_props nil)
    (decreasing? const-decl "bool" real_fun_preds reals))
   nil))
 (strict_incr_subseq 0
  (strict_incr_subseq-1 nil 3406888867
   ("" (grind :if-match nil)
    (("" (inst-cp -5 "x!1")
      (("" (inst -5 "y!1")
        (("" (inst -3 "x!1" "y!1")
          (("" (inst -4 "f!1(x!1)" "f!1(y!1)") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (extraction type-eq-decl nil sequence_props nil)
    (subseq const-decl "bool" sequence_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals))
   nil))
 (strict_decr_subseq 0
  (strict_decr_subseq-1 nil 3406888867
   ("" (grind :if-match nil)
    (("" (inst-cp -5 "x!1")
      (("" (inst -5 "y!1")
        (("" (inst -3 "x!1" "y!1")
          (("" (inst -4 "f!1(x!1)" "f!1(y!1)") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (extraction type-eq-decl nil sequence_props nil)
    (subseq const-decl "bool" sequence_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals))
   nil))
 (bounded_above_subseq 0
  (bounded_above_subseq-1 nil 3406888867
   ("" (grind :if-match nil)
    (("" (inst? +)
      (("" (skolem!)
        (("" (inst? -4) (("" (inst? -3) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (extraction type-eq-decl nil sequence_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (subseq const-decl "bool" sequence_props nil)
    (bounded_above? const-decl "bool" real_fun_preds reals))
   nil))
 (bounded_below_subseq 0
  (bounded_below_subseq-1 nil 3406888867
   ("" (grind :if-match nil)
    (("" (inst? +)
      (("" (skolem!)
        (("" (inst? -4) (("" (inst? -3) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (extraction type-eq-decl nil sequence_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (subseq const-decl "bool" sequence_props nil)
    (bounded_below? const-decl "bool" real_fun_preds reals))
   nil))
 (bounded_subseq 0
  (bounded_subseq-1 nil 3406888867
   ("" (expand "bounded?")
    (("" (skosimp)
      (("" (forward-chain "bounded_above_subseq")
        (("" (forward-chain "bounded_below_subseq") (("" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_below_subseq formula-decl nil sequence_props nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bounded_above_subseq formula-decl nil sequence_props nil)
    (bounded? const-decl "bool" real_fun_preds reals))
   nil)))


(derivatives
 (IMP_derivatives_def_TCC1 0
  (IMP_derivatives_def_TCC1-2 "" 3790090028
   ("" (lemma "deriv_domain") (("" (propax) nil nil)) nil)
   ((deriv_domain formula-decl nil derivatives nil)) shostak
   (IMP_derivatives_def assuming "derivatives_def[T].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"))
  (IMP_derivatives_def_TCC1-1 nil 3335530451
   ("" (skosimp*)
    (("" (lemma "deriv_domain")
      (("" (expand "deriv_domain?") (("" (inst?) nil nil)) nil)) nil))
    nil)
   nil nil
   (IMP_derivatives_def assuming "derivatives_def[T].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (IMP_derivatives_def_TCC2 0
  (IMP_derivatives_def_TCC2-2 "" 3790090029
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil derivatives nil)) shostak
   (IMP_derivatives_def assuming "derivatives_def[T].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))
  (IMP_derivatives_def_TCC2-1 nil 3335530451
   ("" (lemma "not_one_element")
    (("" (expand "not_one_element?") (("" (propax) nil nil)) nil)) nil)
   nil nil
   (IMP_derivatives_def assuming "derivatives_def[T].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (deriv_TCC1 0
  (deriv_TCC1-2 "" 3790090029
   ("" (skosimp :preds? t)
    (("" (expand "derivable?" -1) (("" (inst?) nil nil)) nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil))
   shostak
   (deriv subtype "derivatives.x"
    "{x | derivatives_def[T].derivable?(derivatives.ff, x)}"))
  (deriv_TCC1-1 nil 3253536989
   ("" (auto-rewrite "derivable")
    (("" (skosimp :preds? t)
      (("" (expand "derivable?" -1) (("" (inst?) nil nil)) nil)) nil))
    nil)
   nil nil
   (deriv subtype "derivatives.x"
    "{x | derivatives_def[T].derivable?(derivatives.ff, x)}")))
 (derivable_cont_fun 0
  (derivable_cont_fun-1 nil 3253536989
   ("" (expand "derivable?")
    (("" (expand "continuous?")
      (("" (grind :defs nil :rewrites "derivable_continuous") nil nil)) nil))
    nil)
   ((continuous? const-decl "bool" continuous_functions nil)
    (derivable_continuous formula-decl nil derivatives_def nil)
    (T formal-subtype-decl nil derivatives nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives nil))
   nil))
 (sum_derivable_fun 0
  (sum_derivable_fun-1 nil 3253536989
   ("" (expand "derivable?")
    (("" (grind :defs nil :rewrites "sum_derivable") nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (sum_derivable formula-decl nil derivatives_def nil)
    (derivable? const-decl "bool" derivatives nil))
   nil))
 (neg_derivable_fun 0
  (neg_derivable_fun-1 nil 3253536989
   ("" (expand "derivable?")
    (("" (grind :defs nil :rewrites "neg_derivable") nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (neg_derivable formula-decl nil derivatives_def nil)
    (derivable? const-decl "bool" derivatives nil))
   nil))
 (diff_derivable_fun 0
  (diff_derivable_fun-1 nil 3253536989
   ("" (expand "derivable?")
    (("" (grind :defs nil :rewrites "diff_derivable") nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (diff_derivable formula-decl nil derivatives_def nil)
    (derivable? const-decl "bool" derivatives nil))
   nil))
 (prod_derivable_fun 0
  (prod_derivable_fun-1 nil 3253536989
   ("" (expand "derivable?")
    (("" (grind :defs nil :rewrites "prod_derivable") nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (prod_derivable formula-decl nil derivatives_def nil)
    (derivable? const-decl "bool" derivatives nil))
   nil))
 (scal_derivable_fun 0
  (scal_derivable_fun-1 nil 3253536989
   ("" (expand "derivable?")
    (("" (grind :defs nil :rewrites "scal_derivable") nil nil)) nil)
   ((T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (scal_derivable formula-decl nil derivatives_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives nil))
   nil))
 (const_derivable_fun 0
  (const_derivable_fun-1 nil 3253536989
   ("" (expand "derivable?")
    (("" (skosimp*)
      (("" (lemma "const_derivable")
        (("" (expand "const_fun") (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((const_fun const-decl "[T -> real]" real_fun_ops reals)
    (const_derivable formula-decl nil derivatives_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil))
   nil))
 (inv_derivable_fun 0
  (inv_derivable_fun-1 nil 3253536989
   ("" (expand "derivable?")
    (("" (grind :defs nil :rewrites "inv_derivable") nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (inv_derivable formula-decl nil derivatives_def nil)
    (derivable? const-decl "bool" derivatives nil))
   nil))
 (div_derivable_fun 0
  (div_derivable_fun-1 nil 3253536989
   ("" (expand "derivable?")
    (("" (grind :defs nil :rewrites "div_derivable") nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (div_derivable formula-decl nil derivatives_def nil)
    (derivable? const-decl "bool" derivatives nil))
   nil))
 (identity_derivable_fun 0
  (identity_derivable_fun-1 nil 3253536989
   ("" (expand "derivable?")
    (("" (grind :defs nil :rewrites "identity_derivable") nil nil)) nil)
   ((identity_derivable formula-decl nil derivatives_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil))
   nil))
 (id_derivable_fun 0
  (id_derivable_fun-1 nil 3474728116
   ("" (lemma identity_derivable_fun)
    (("" (expand "I") (("" (propax) nil nil)) nil)) nil)
   ((I const-decl "(bijective?[T, T])" identity nil)
    (identity_derivable_fun formula-decl nil derivatives nil))
   nil))
 (derivable_cont 0
  (derivable_cont-1 nil 3253536989
   ("" (skolem!) (("" (rewrite "derivable_cont_fun") nil nil)) nil)
   ((derivable_cont_fun formula-decl nil derivatives nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil))
   nil (derivable_cont subtype "derivatives.x" "continuous_fun[T]")))
 (nz_derivable_cont 0
  (nz_derivable_cont-1 nil 3253536989
   ("" (skolem!) (("" (rewrite "derivable_cont_fun") nil nil)) nil)
   ((derivable_cont_fun formula-decl nil derivatives nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives nil)
    (nz_deriv_fun type-eq-decl nil derivatives nil))
   nil (nz_derivable_cont subtype "derivatives.x" "nz_continuous_fun[T]")))
 (derivable_sum 0
  (derivable_sum-1 nil 3253536989
   ("" (skolem!) (("" (rewrite "sum_derivable_fun") nil nil)) nil)
   ((sum_derivable_fun formula-decl nil derivatives nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil))
   nil
   (derivable_sum subtype
    "(real_fun_ops[T].+)(derivatives.ff1, derivatives.ff2)" "deriv_fun")))
 (derivable_diff 0
  (derivable_diff-1 nil 3253536989
   ("" (skolem!) (("" (rewrite "diff_derivable_fun") nil nil)) nil)
   ((diff_derivable_fun formula-decl nil derivatives nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil))
   nil
   (derivable_diff subtype
    "(real_fun_ops[T].-)(derivatives.ff1, derivatives.ff2)" "deriv_fun")))
 (derivable_prod 0
  (derivable_prod-1 nil 3253536989
   ("" (skolem!) (("" (rewrite "prod_derivable_fun") nil nil)) nil)
   ((prod_derivable_fun formula-decl nil derivatives nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil))
   nil
   (derivable_prod subtype
    "real_fun_ops[T].*(derivatives.ff1, derivatives.ff2)" "deriv_fun")))
 (derivable_scal 0
  (derivable_scal-1 nil 3253536989
   ("" (skolem!) (("" (rewrite "scal_derivable_fun") nil nil)) nil)
   ((scal_derivable_fun formula-decl nil derivatives nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil))
   nil
   (derivable_scal subtype "real_fun_ops[T].*(derivatives.b, derivatives.ff)"
    "deriv_fun")))
 (derivable_neg 0
  (derivable_neg-1 nil 3253536989
   ("" (skolem!) (("" (rewrite "neg_derivable_fun") nil nil)) nil)
   ((neg_derivable_fun formula-decl nil derivatives nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil))
   nil
   (derivable_neg subtype "(real_fun_ops[T].-)(derivatives.ff)" "deriv_fun")))
 (derivable_div 0
  (derivable_div-1 nil 3253536989
   ("" (skolem!) (("" (rewrite "div_derivable_fun") nil nil)) nil)
   ((div_derivable_fun formula-decl nil derivatives nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nz_deriv_fun type-eq-decl nil derivatives nil))
   nil
   (derivable_div subtype "real_fun_ops[T]./(derivatives.ff, derivatives.gg)"
    "deriv_fun")))
 (derivable_inv 0
  (derivable_inv-1 nil 3253536989
   ("" (skolem!)
    (("" (case-replace "b!1 / gg!1 = b!1 * (1 / gg!1)")
      (("1" (rewrite "scal_derivable_fun")
        (("1" (rewrite "inv_derivable_fun") nil nil)) nil)
       ("2" (delete 2)
        (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (scal_derivable_fun formula-decl nil derivatives nil)
    (inv_derivable_fun formula-decl nil derivatives nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (nz_deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-subtype-decl nil derivatives nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (derivable_inv subtype "real_fun_ops[T]./(derivatives.b, derivatives.gg)"
    "deriv_fun")))
 (derivable_const 0
  (derivable_const-1 nil 3253536989
   ("" (skosimp*)
    (("" (expand "const_fun") (("" (rewrite "const_derivable_fun") nil nil))
      nil))
    nil)
   ((const_fun const-decl "[T -> real]" real_fun_ops reals)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (const_derivable_fun formula-decl nil derivatives nil))
   nil
   (derivable_const subtype "real_fun_ops[T].const_fun(derivatives.b)"
    "deriv_fun")))
 (derivable_id 0
  (derivable_id-1 nil 3253536989
   ("" (lemma "identity_derivable_fun") (("" (propax) nil nil)) nil)
   ((identity_derivable_fun formula-decl nil derivatives nil)) nil
   (derivable_id subtype "identity[T].I" "deriv_fun")))
 (deriv_fun_def 0
  (deriv_fun_def-1 nil 3297523287
   ("" (skosimp*)
    (("" (case "derivable?(f!1)")
      (("1" (assert)
        (("1" (apply-extensionality 1 :hide? t)
          (("1" (lemma "deriv_def")
            (("1" (inst?)
              (("1" (expand "deriv" 1)
                (("1" (inst - "fp!1(x!1)" "x!1")
                  (("1" (assert) (("1" (inst?) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "derivable?")
        (("2" (skosimp*)
          (("2" (expand "derivable?")
            (("2" (expand "convergent?")
              (("2" (inst -1 "x!1")
                (("2" (expand "convergence")
                  (("2" (inst + "fp!1(x!1)") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable? const-decl "bool" derivatives_def nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (convergent? const-decl "bool" lim_of_functions nil)
    (deriv_def formula-decl nil derivatives_def nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives nil))
   shostak))
 (deriv_sum_fun 0
  (deriv_sum_fun-1 nil 3253536989
   ("" (skolem-typepred)
    (("" (expand "derivable?")
      (("" (apply-extensionality :hide? t)
        (("" (expand "+" 1 2)
          (("" (expand "deriv")
            (("" (rewrite "deriv_sum")
              (("1" (inst?) nil nil) ("2" (inst? -2) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_sum formula-decl nil derivatives_def nil)
    (derivable_sum application-judgement "deriv_fun" derivatives nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (deriv_neg_fun 0
  (deriv_neg_fun-1 nil 3253536989
   ("" (skolem-typepred)
    (("" (expand "derivable?")
      (("" (apply-extensionality :hide? t)
        (("" (expand "-" 1 2)
          (("" (expand "deriv")
            (("" (rewrite "deriv_neg") (("" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_neg formula-decl nil derivatives_def nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (derivable_neg application-judgement "deriv_fun" derivatives nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (deriv_diff_fun 0
  (deriv_diff_fun-1 nil 3253536989
   ("" (skolem-typepred)
    (("" (expand "derivable?")
      (("" (apply-extensionality :hide? t)
        (("" (expand "-" 1 2)
          (("" (expand "deriv")
            (("" (rewrite "deriv_diff")
              (("1" (inst?) nil nil) ("2" (inst? -2) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (deriv_diff formula-decl nil derivatives_def nil)
    (derivable_diff application-judgement "deriv_fun" derivatives nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (deriv_prod_fun 0
  (deriv_prod_fun-1 nil 3253536989
   ("" (skolem-typepred)
    (("" (expand "derivable?")
      (("" (apply-extensionality :hide? t)
        (("" (expand "+" +)
          (("" (expand "*" 1 2)
            (("" (expand "*" 1 2)
              (("" (expand "deriv")
                (("" (rewrite "deriv_prod")
                  (("1" (inst?) nil nil) ("2" (inst? -2) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (deriv_prod formula-decl nil derivatives_def nil)
    (derivable_prod application-judgement "deriv_fun" derivatives nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (deriv_scal_fun 0
  (deriv_scal_fun-1 nil 3253536989
   ("" (skolem-typepred)
    (("" (expand "derivable?")
      (("" (apply-extensionality :hide? t)
        (("" (expand "*" 1 2)
          (("" (expand "deriv")
            (("" (rewrite "deriv_scal") (("" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_scal formula-decl nil derivatives_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (derivable_scal application-judgement "deriv_fun" derivatives nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (deriv_inv_fun_TCC1 0
  (deriv_inv_fun_TCC1-1 nil 3253536989
   ("" (skosimp)
    (("" (expand "*")
      (("" (rewrite "zero_times3") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((* const-decl "[T -> real]" real_fun_ops reals)
    (nz_deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-subtype-decl nil derivatives nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_times3 formula-decl nil real_props nil))
   nil
   (deriv_inv_fun subtype
    "(real_fun_ops[T].*(derivatives.gg, derivatives.gg))" "[T -> nzreal]")))
 (deriv_inv_fun 0
  (deriv_inv_fun-2 "" 3790090034
   ("" (skolem-typepred)
    (("" (expand "derivable?")
      (("" (apply-extensionality :hide? t)
        (("" (expand "/" 1 2)
          (("" (expand "-" +)
            (("" (expand "*" +)
              (("" (expand "deriv")
                (("" (rewrite "deriv_inv") (("" (inst?) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_inv formula-decl nil derivatives_def nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (derivable_prod application-judgement "deriv_fun" derivatives nil)
    (derivable_inv application-judgement "deriv_fun" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (nz_deriv_fun type-eq-decl nil derivatives nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (derivable? const-decl "bool" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)
  (deriv_inv_fun-1 nil 3253536989
   ("" (skolem-typepred)
    (("" (expand "derivable?")
      (("" (apply-extensionality :hide? t)
        (("1" (expand "/" 1 2)
          (("1" (expand "-" +)
            (("1" (expand "*" +)
              (("1" (expand "deriv")
                (("1" (rewrite "deriv_inv") (("1" (inst?) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (delete -) (("2" (grind :rewrites "zero_times3") nil nil)) nil))
        nil))
      nil))
    nil)
   ((deriv_inv formula-decl nil derivatives_def nil)) nil))
 (deriv_scaldiv_fun 0
  (deriv_scaldiv_fun-1 nil 3253536989
   ("" (skolem!)
    (("" (case-replace "b!1 / gg!1 = b!1 * (1/gg!1)")
      (("1" (rewrite "deriv_scal_fun")
        (("1" (rewrite "deriv_inv_fun")
          (("1" (delete -)
            (("1" (apply-extensionality :hide? t)
              (("1" (expand "/")
                (("1" (expand "*")
                  (("1" (expand "-") (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (assert)
          (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (deriv_scal_fun formula-decl nil derivatives nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (deriv const-decl "[T -> real]" derivatives nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (derivable_prod application-judgement "deriv_fun" derivatives nil)
    (deriv_inv_fun formula-decl nil derivatives nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (nz_deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-subtype-decl nil derivatives nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_scal application-judgement "deriv_fun" derivatives nil)
    (derivable_inv application-judgement "deriv_fun" derivatives nil))
   nil))
 (deriv_div_fun 0
  (deriv_div_fun-2 "" 3790090035
   ("" (skolem-typepred)
    (("" (expand "derivable?")
      (("" (apply-extensionality :hide? t)
        (("" (inst?)
          (("" (inst?)
            (("" (expand "/" 1 2)
              (("" (expand "-" +)
                (("" (expand "*")
                  (("" (expand "deriv") (("" (rewrite "deriv_div") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (deriv_div formula-decl nil derivatives_def nil)
    (derivable_prod application-judgement "deriv_fun" derivatives nil)
    (derivable_div application-judgement "deriv_fun" derivatives nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (nz_deriv_fun type-eq-decl nil derivatives nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)
  (deriv_div_fun-1 nil 3253536989
   ("" (skolem-typepred)
    (("" (expand "derivable?")
      (("" (apply-extensionality :hide? t)
        (("1" (inst?)
          (("1" (inst?)
            (("1" (expand "/" 1 2)
              (("1" (expand "-" +)
                (("1" (expand "*")
                  (("1" (expand "deriv") (("1" (rewrite "deriv_div") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (delete -) (("2" (grind :rewrites "zero_times3") nil nil)) nil))
        nil))
      nil))
    nil)
   ((deriv_div formula-decl nil derivatives_def nil)) nil))
 (deriv_const_fun_TCC1 0
  (deriv_const_fun_TCC1-1 nil 3475585951
   ("" (skosimp*) (("" (rewrite "const_derivable_fun") nil nil)) nil)
   ((const_derivable_fun formula-decl nil derivatives nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   nil (deriv_const_fun subtype "LAMBDA x: derivatives.b" "deriv_fun")))
 (deriv_const_fun 0
  (deriv_const_fun-2 "" 3790090035
   ("" (skosimp*)
    (("" (expand "deriv" 1)
      (("" (assert)
        (("" (apply-extensionality 1 :hide? t)
          (("1" (lemma "deriv_const")
            (("1" (expand "const_fun") (("1" (inst?) nil nil)) nil)) nil)
           ("2" (skosimp*)
            (("2" (lemma "const_derivable_fun")
              (("2" (inst?)
                (("2" (expand "derivable?" -1) (("2" (inst?) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv const-decl "[T -> real]" derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (const_derivable_fun formula-decl nil derivatives nil)
    (deriv_const formula-decl nil derivatives_def nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (b!1 skolem-const-decl "real" derivatives nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (deriv const-decl "real" derivatives_def nil)
    (T formal-subtype-decl nil derivatives nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)
  (deriv_const_fun-1 nil 3253536989
   ("" (skosimp*)
    (("" (expand "deriv" 1)
      (("" (assert)
        (("" (apply-extensionality 1 :hide? t)
          (("1" (lemma "deriv_const")
            (("1" (expand "const_fun") (("1" (inst?) nil nil)) nil)) nil)
           ("2" (skosimp*)
            (("2" (lemma "const_derivable_fun")
              (("2" (expand "const_fun")
                (("2" (inst?)
                  (("2" (expand "derivable?" -1) (("2" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv const-decl "real" derivatives_def nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (deriv_const formula-decl nil derivatives_def nil))
   nil))
 (deriv_const_func 0
  (deriv_const_func-1 nil 3475596664
   ("" (skosimp*)
    (("" (lemma "deriv_const_fun")
      (("" (expand "const_fun") (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((deriv_const_fun formula-decl nil derivatives nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals))
   shostak))
 (deriv_id_fun_TCC1 0
  (deriv_id_fun_TCC1-1 nil 3475576474
   ("" (lemma "id_derivable_fun") (("" (propax) nil nil)) nil)
   ((id_derivable_fun formula-decl nil derivatives nil)) nil
   (deriv_id_fun subtype "LAMBDA x: derivatives.x" "deriv_fun")))
 (deriv_id_fun 0
  (deriv_id_fun-1 nil 3253536989
   ("" (auto-rewrite "I" "const_fun" "deriv_identity" "identity_derivable")
    (("" (expand "deriv")
      (("" (apply-extensionality :hide? t)
        (("1" (lemma "deriv_identity")
          (("1" (inst?) (("1" (expand "I") (("1" (propax) nil nil)) nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (lemma "id_derivable_fun")
            (("2" (expand "derivable?" -1) (("2" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv const-decl "[T -> real]" derivatives nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (deriv const-decl "real" derivatives_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (I const-decl "(bijective?[T, T])" identity nil)
    (deriv_identity formula-decl nil derivatives_def nil)
    (id_derivable_fun formula-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil))
   nil))
 (deriv_I_fun 0
  (deriv_I_fun-1 nil 3475596599
   ("" (lemma deriv_id_fun) (("" (expand "I") (("" (propax) nil nil)) nil))
    nil)
   ((I const-decl "(bijective?[T, T])" identity nil)
    (deriv_id_fun formula-decl nil derivatives nil))
   shostak))
 (deriv_linear_fun 0
  (deriv_linear_fun-2 "" 3790090036
   ("" (skosimp*)
    (("" (assert)
      (("" (lemma "const_derivable_fun[T]")
        (("" (inst - "b!1")
          (("" (lemma "id_derivable_fun")
            (("" (lemma "scal_derivable_fun[T]")
              (("" (inst - "m!1" "(LAMBDA x: x)")
                (("" (assert)
                  (("" (expand "*" -1)
                    (("" (case "derivable?(LAMBDA x: m!1 * x + b!1)")
                      (("1" (assert)
                        (("1" (lemma "deriv_sum_fun[T]")
                          (("1"
                            (inst - "(LAMBDA x: m!1 * x)" "(LAMBDA x: b!1)")
                            (("1" (assert)
                              (("1" (expand "+ " -1)
                                (("1" (assert)
                                  (("1" (replace -1)
                                    (("1" (hide -1)
                                      (("1"
                                        (apply-extensionality 1 :hide? t)
                                        (("1"
                                          (lemma "deriv_scal_fun[T]")
                                          (("1"
                                            (inst - "m!1" "(LAMBDA x: x)")
                                            (("1"
                                              (expand "*" -1)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lemma
                                                       "deriv_const_fun[T]")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "deriv_id_fun[T]")
                                                              (("1"
                                                                (replace -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "sum_derivable_fun[T]")
                          (("2"
                            (inst - "(LAMBDA x: m!1 * x)" "(LAMBDA x: b!1)")
                            (("2" (assert)
                              (("2" (expand "+ " -1) (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (scal_derivable_fun formula-decl nil derivatives nil)
    (sum_derivable_fun formula-decl nil derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (deriv const-decl "[T -> real]" derivatives nil)
    (deriv_id_fun formula-decl nil derivatives nil)
    (deriv_const_fun formula-decl nil derivatives nil)
    (deriv_scal_fun formula-decl nil derivatives nil)
    (deriv_sum_fun formula-decl nil derivatives nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (derivable? const-decl "bool" derivatives nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (id_derivable_fun formula-decl nil derivatives nil)
    (const_derivable_fun formula-decl nil derivatives nil))
   shostak)
  (deriv_linear_fun-1 nil 3320142862
   ("" (skosimp*)
    (("" (assert)
      (("" (lemma "const_derivable_fun[T]")
        (("" (expand "const_fun")
          (("" (inst - "b!1")
            (("" (lemma "id_derivable_fun")
              (("" (lemma "scal_derivable_fun[T]")
                (("" (inst - "m!1" "(LAMBDA x: x)")
                  (("" (assert)
                    (("" (expand "*" -1)
                      (("" (case "derivable?(LAMBDA x: m!1 * x + b!1)")
                        (("1" (assert)
                          (("1" (lemma "deriv_sum_fun[T]")
                            (("1"
                              (inst - "(LAMBDA x: m!1 * x)" "(LAMBDA x: b!1)")
                              (("1" (assert)
                                (("1" (expand "+ " -1)
                                  (("1" (assert)
                                    (("1" (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (apply-extensionality 1 :hide? t)
                                          (("1"
                                            (lemma "deriv_scal_fun[T]")
                                            (("1"
                                              (inst - "m!1" "(LAMBDA x: x)")
                                              (("1"
                                                (expand "*" -1)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (lemma
                                                         "deriv_const_fun[T]")
                                                        (("1"
                                                          (expand "const_fun")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (replace -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "deriv_id_fun[T]")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (lemma "sum_derivable_fun[T]")
                            (("2"
                              (inst - "(LAMBDA x: m!1 * x)" "(LAMBDA x: b!1)")
                              (("2" (assert)
                                (("2" (expand "+ " -1)
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (deriv_exp_fun_TCC1 0
  (deriv_exp_fun_TCC1-1 nil 3253536989 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (^ const-decl "real" exponentiation nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (T formal-subtype-decl nil derivatives nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NQ const-decl "real" derivatives_def nil)
    (convergence const-decl "bool" convergence_functions nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (convergent? const-decl "bool" lim_of_functions nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (derivable? const-decl "bool" derivatives nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil (deriv_exp_fun subtype "((number_fields.-)(derivatives.n, 1))" "nat")))
 (deriv_exp_fun 0
  (deriv_exp_fun-2 "" 3790090037
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (split)
        (("1" (expand "^")
          (("1" (expand "^")
            (("1" (expand "expt")
              (("1" (lemma "const_derivable_fun") (("1" (inst?) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (apply-extensionality 1 :hide? t) nil nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (assert)
          (("2" (case-replace "j!1 = 0")
            (("1" (hide -2)
              (("1" (expand "^")
                (("1" (expand "^")
                  (("1" (expand "expt")
                    (("1" (expand "expt")
                      (("1" (split +)
                        (("1" (case-replace "(LAMBDA (t: T): f!1(t)) = f!1")
                          (("1" (hide 2)
                            (("1" (apply-extensionality + :hide? t) nil nil))
                            nil))
                          nil)
                         ("2" (apply-extensionality 1 :hide? t)
                          (("1" (expand "*")
                            (("1"
                              (case-replace "(LAMBDA (t: T): f!1(t)) = f!1")
                              (("1" (assert) nil nil)
                               ("2" (hide 2)
                                (("2" (apply-extensionality 1 :hide? t) nil
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case-replace "(LAMBDA (t: T): f!1(t)) = f!1")
                            (("2" (hide 2)
                              (("2" (apply-extensionality 1 :hide? t) nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (flatten)
                (("2" (split +)
                  (("1" (hide -2)
                    (("1" (expand "derivable?")
                      (("1" (skosimp*)
                        (("1" (expand "derivable?")
                          (("1" (expand "convergent?")
                            (("1" (inst - "x!1")
                              (("1" (inst - "x!1")
                                (("1" (skosimp*)
                                  (("1" (lemma "cnv_seq_prod_NQ")
                                    (("1"
                                      (inst
                                       -1
                                       "f!1^j!1"
                                       "f!1"
                                       "l!1"
                                       "l!2"
                                       "x!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           +
                                           "(f!1 ^ j!1)(x!1) * l!2 + f!1(x!1) * l!1")
                                          (("1"
                                            (case-replace
                                             "f!1 ^ (1 + j!1) = f!1 ^ j!1 * f!1")
                                            (("1"
                                              (hide -1 -2 -3 2)
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (expand "^")
                                                  (("1"
                                                    (expand "expt" 1 1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (apply-extensionality
                                                         1
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (expand "*")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case-replace "f!1 ^ (1 + j!1) = f!1 ^ j!1 * f!1")
                    (("1" (hide -1)
                      (("1" (lemma "deriv_prod_fun")
                        (("1" (inst?)
                          (("1" (replace -1)
                            (("1" (hide -1)
                              (("1" (replace -2)
                                (("1" (hide -2)
                                  (("1"
                                    (case-replace
                                     "j!1 * f!1 ^ (j!1 - 1) * deriv(f!1) * f!1 = j!1 * f!1 ^ j!1 * deriv(f!1) ")
                                    (("1" (apply-extensionality 1 :hide? t)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (expand "+ ")
                                          (("1"
                                            (expand "*")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (apply-extensionality 1 :hide? t)
                                        (("2"
                                          (expand "*")
                                          (("2"
                                            (case "deriv(f!1)(x!1) = 0")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (lemma "both_sides_times1")
                                              (("2"
                                                (inst
                                                 -1
                                                 "deriv(f!1)(x!1)*j!1 "
                                                 "(f!1 ^ (j!1 - 1))(x!1) * f!1(x!1)"
                                                 "(f!1 ^ j!1)(x!1)")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1 -2 2 3)
                                                        (("2"
                                                          (expand "^")
                                                          (("2"
                                                            (expand "^")
                                                            (("2"
                                                              (expand
                                                               "expt"
                                                               1
                                                               2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 -2 3)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (mult-cases -1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 -2 -3 2)
                      (("2" (apply-extensionality 1 :hide? t)
                        (("2" (expand "^")
                          (("2" (expand "^")
                            (("2" (expand "*")
                              (("2" (expand "expt" 1 1)
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (derivable? const-decl "bool" derivatives nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-subtype-decl nil derivatives nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt def-decl "real" exponentiation nil)
    (const_derivable_fun formula-decl nil derivatives nil)
    (^ const-decl "real" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (both_sides_times1 formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "T" derivatives nil)
    (j!1 skolem-const-decl "nat" derivatives nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (zero_times3 formula-decl nil real_props nil)
    (deriv_prod_fun formula-decl nil derivatives nil)
    (convergent? const-decl "bool" lim_of_functions nil)
    (cnv_seq_prod_NQ formula-decl nil derivatives_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (f!1 skolem-const-decl "[T -> real]" derivatives nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak)
  (deriv_exp_fun-1 nil 3253536989
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (split)
        (("1" (expand "^")
          (("1" (expand "^")
            (("1" (expand "expt")
              (("1" (lemma "const_derivable_fun")
                (("1" (inst?)
                  (("1" (expand "const_fun") (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (apply-extensionality 1 :hide? t) nil nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (assert)
          (("2" (case-replace "j!1 = 0")
            (("1" (hide -2)
              (("1" (expand "^")
                (("1" (expand "^")
                  (("1" (expand "expt")
                    (("1" (expand "expt")
                      (("1" (split +)
                        (("1" (case-replace "(LAMBDA (t: T): f!1(t)) = f!1")
                          (("1" (hide 2)
                            (("1" (apply-extensionality + :hide? t) nil nil))
                            nil))
                          nil)
                         ("2" (apply-extensionality 1 :hide? t)
                          (("1" (expand "*")
                            (("1"
                              (case-replace "(LAMBDA (t: T): f!1(t)) = f!1")
                              (("1" (assert) nil nil)
                               ("2" (hide 2)
                                (("2" (apply-extensionality 1 :hide? t) nil
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case-replace "(LAMBDA (t: T): f!1(t)) = f!1")
                            (("2" (hide 2)
                              (("2" (apply-extensionality 1 :hide? t) nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (flatten)
                (("2" (split +)
                  (("1" (hide -2)
                    (("1" (expand "derivable?")
                      (("1" (skosimp*)
                        (("1" (expand "derivable?")
                          (("1" (expand "convergent?")
                            (("1" (inst - "x!1")
                              (("1" (inst - "x!1")
                                (("1" (skosimp*)
                                  (("1" (lemma "cnv_seq_prod_NQ")
                                    (("1"
                                      (inst
                                       -1
                                       "f!1^j!1"
                                       "f!1"
                                       "l!1"
                                       "l!2"
                                       "x!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           +
                                           "(f!1 ^ j!1)(x!1) * l!2 + f!1(x!1) * l!1")
                                          (("1"
                                            (case-replace
                                             "f!1 ^ (1 + j!1) = f!1 ^ j!1 * f!1")
                                            (("1"
                                              (hide -1 -2 -3 2)
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (expand "^")
                                                  (("1"
                                                    (expand "expt" 1 1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (apply-extensionality
                                                         1
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (expand "*")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case-replace "f!1 ^ (1 + j!1) = f!1 ^ j!1 * f!1")
                    (("1" (hide -1)
                      (("1" (lemma "deriv_prod_fun")
                        (("1" (inst?)
                          (("1" (replace -1)
                            (("1" (hide -1)
                              (("1" (replace -2)
                                (("1" (hide -2)
                                  (("1"
                                    (case-replace
                                     "j!1 * f!1 ^ (j!1 - 1) * deriv(f!1) * f!1 = j!1 * f!1 ^ j!1 * deriv(f!1) ")
                                    (("1" (apply-extensionality 1 :hide? t)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (expand "+ ")
                                          (("1"
                                            (expand "*")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (apply-extensionality 1 :hide? t)
                                        (("2"
                                          (expand "*")
                                          (("2"
                                            (case "deriv(f!1)(x!1) = 0")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (lemma "both_sides_times1")
                                              (("2"
                                                (inst
                                                 -1
                                                 "deriv(f!1)(x!1)*j!1 "
                                                 "(f!1 ^ (j!1 - 1))(x!1) * f!1(x!1)"
                                                 "(f!1 ^ j!1)(x!1)")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1 -2 2 3)
                                                        (("2"
                                                          (expand "^")
                                                          (("2"
                                                            (expand "^")
                                                            (("2"
                                                              (expand
                                                               "expt"
                                                               1
                                                               2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 -2 3)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (mult-cases -1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 -2 -3 2)
                      (("2" (apply-extensionality 1 :hide? t)
                        (("2" (expand "^")
                          (("2" (expand "^")
                            (("2" (expand "*")
                              (("2" (expand "expt" 1 1)
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil))
    nil)
   ((derivable? const-decl "bool" derivatives_def nil)
    (cnv_seq_prod_NQ formula-decl nil derivatives_def nil)
    (convergent? const-decl "bool" lim_of_functions nil)
    (^ const-decl "[T -> real]" real_fun_ops reals))
   nil))
 (deriv_x_n_TCC1 0
  (deriv_x_n_TCC1-1 nil 3297592656 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) shostak
   (deriv_x_n subtype "derivatives.n"
    "{i: integers.int | booleans.OR(derivatives.x /= 0, reals.>=(i, 0))}")))
 (deriv_x_n_TCC2 0
  (deriv_x_n_TCC2-1 nil 3297592656 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (T formal-subtype-decl nil derivatives nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NQ const-decl "real" derivatives_def nil)
    (convergence const-decl "bool" convergence_functions nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (convergent? const-decl "bool" lim_of_functions nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (derivable? const-decl "bool" derivatives nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak
   (deriv_x_n subtype "((number_fields.-)(derivatives.n, 1))"
    "{i: integers.int | booleans.OR(derivatives.x /= 0, reals.>=(i, 0))}")))
 (deriv_x_n 0
  (deriv_x_n-1 nil 3297592562
   ("" (skosimp*)
    (("" (lemma "deriv_exp_fun")
      (("" (inst - "I" "n!1")
        (("" (assert)
          (("" (flatten)
            (("" (expand "I")
              (("" (expand "^" -1)
                (("" (assert)
                  (("" (replace -4 * rl)
                    (("" (expand "^" -2)
                      (("" (case-replace "(LAMBDA (x: T): x) = I")
                        (("1" (hide -1)
                          (("1" (replace -4 * rl)
                            (("1" (hide -4)
                              (("1" (replace -2)
                                (("1" (hide -2)
                                  (("1" (expand "*")
                                    (("1" (apply-extensionality 1 :hide? t)
                                      (("1"
                                        (lemma "deriv_identity")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (expand "deriv" 1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "I") (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_exp_fun formula-decl nil derivatives nil)
    (derivable_id name-judgement "deriv_fun" derivatives nil)
    (id_fun_continuous name-judgement "continuous_fun" continuous_functions
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (deriv_identity formula-decl nil derivatives_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (I const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-subtype-decl nil derivatives nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (deriv_x_to_n_TCC1 0
  (deriv_x_to_n_TCC1-1 nil 3297592656 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) shostak
   (deriv_x_to_n subtype "derivatives.n"
    "{i: integers.int | booleans.OR(derivatives.x /= 0, reals.>=(i, 0))}")))
 (deriv_x_to_n_TCC2 0
  (deriv_x_to_n_TCC2-1 nil 3297592656 ("" (subtype-tcc) nil nil)
   ((fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (T formal-subtype-decl nil derivatives nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NQ const-decl "real" derivatives_def nil)
    (convergence const-decl "bool" convergence_functions nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (convergent? const-decl "bool" lim_of_functions nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (derivable? const-decl "bool" derivatives nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (deriv_x_to_n subtype "((number_fields.-)(derivatives.n, 1))"
    "{i: integers.int | booleans.OR(derivatives.x /= 0, reals.>=(i, 0))}")))
 (deriv_x_to_n 0
  (deriv_x_to_n-1 nil 3297592660
   ("" (skosimp*)
    (("" (assert)
      (("" (lemma "deriv_x_n")
        (("" (inst - "LAMBDA x: x ^ n!1" "n!1")
          (("" (assert)
            (("" (flatten)
              (("" (prop)
                (("1" (lemma "scal_derivable_fun")
                  (("1" (inst - "a!1" "LAMBDA x: x ^ n!1")
                    (("1" (assert)
                      (("1" (expand "*") (("1" (propax) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("2" (lemma "deriv_scal_fun")
                  (("2" (inst - "a!1" "LAMBDA x: x ^ n!1")
                    (("2" (expand "*")
                      (("2" (replace -1)
                        (("2" (hide -1)
                          (("2" (apply-extensionality 1 :hide? t)
                            (("2" (replace -2) (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives nil)
    (T formal-subtype-decl nil derivatives nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (scal_derivable_fun formula-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (n!1 skolem-const-decl "posnat" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (deriv_scal_fun formula-decl nil derivatives nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_x_n formula-decl nil derivatives nil))
   shostak)))


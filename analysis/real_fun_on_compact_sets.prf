(real_fun_on_compact_sets
 (IMP_continuity_ms_def_TCC1 0
  (IMP_continuity_ms_def_TCC1-1 nil 3460717941
   ("" (lemma "fullset_metric_space") (("" (propax) nil nil)) nil)
   ((fullset_metric_space formula-decl nil real_fun_on_compact_sets nil)) nil
   (IMP_continuity_ms_def assuming
    "continuity_ms_def[real_fun_on_compact_sets.T, real_fun_on_compact_sets.d, real, real_metric_space.real_dist].continuity_ms_def"
    "fullset_metric_space1: ASSUMPTION metric_spaces_def[continuity_ms_def.T1, continuity_ms_def.d1].metric_space?(sets[continuity_ms_def.T1].fullset)")))
 (IMP_continuity_ms_def_TCC2 0
  (IMP_continuity_ms_def_TCC2-1 nil 3460717941
   ("" (lemma "real_metric_space") (("" (inst - "fullset[real]") nil nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)
    (real_metric_space formula-decl nil real_metric_space nil))
   nil
   (IMP_continuity_ms_def assuming
    "continuity_ms_def[real_fun_on_compact_sets.T, real_fun_on_compact_sets.d, real, real_metric_space.real_dist].continuity_ms_def"
    "fullset_metric_space2: ASSUMPTION metric_spaces_def[continuity_ms_def.T2, continuity_ms_def.d2].metric_space?(sets[continuity_ms_def.T2].fullset)")))
 (cont_on_compact_max 0
  (cont_on_compact_max-1 nil 3460718129
   ("" (skosimp*)
    (("" (label "cont" -1)
      (("" (label "compact" -2)
        (("" (label "empty" 1)
          (("" (label "maxexists" 2)
            (("" (lemma "compact_sequence_limit[T,d]")
              (("" (label "csl" -1)
                (("" (inst "csl" "S!1")
                  (("" (expand "nonempty?")
                    (("" (prop)
                      (("" (case "bounded_real_defs.bounded?(image(f!1,S!1))")
                        (("1" (label "bounded" -1)
                          (("1" (expand "bounded?")
                            (("1" (prop)
                              (("1" (label "bbel" -2)
                                (("1" (hide "bbel")
                                  (("1" (lemma "real_complete")
                                    (("1" (label "lub" -1)
                                      (("1"
                                        (inst "lub" "image(f!1,S!1)")
                                        (("1"
                                          (expand "bounded_above?")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (expand
                                                   "least_upper_bound?")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (label "lub2" -2)
                                                      (("1"
                                                        (name
                                                         "seq"
                                                         "(LAMBDA (n: nat): choose({s: T | S!1(s) AND y!1-f!1(s) < 1/(n+1)}))")
                                                        (("1"
                                                          (label "seq_def" -1)
                                                          (("1"
                                                            (inst "csl" "seq")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst-cp
                                                                 "maxexists"
                                                                 "p!1")
                                                                (("1"
                                                                  (label
                                                                   "maxexists2"
                                                                   2)
                                                                  (("1"
                                                                    (copy
                                                                     "lub")
                                                                    (("1"
                                                                      (label
                                                                       "lub3"
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "upper_bound?"
                                                                         "lub")
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             "lub"
                                                                             "f!1(t!1)")
                                                                            (("1"
                                                                              (case
                                                                               "y!1 = f!1(t!1)")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "upper_bound?"
                                                                                   "lub3")
                                                                                  (("1"
                                                                                    (inst
                                                                                     "maxexists2"
                                                                                     "t!1")
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (inst
                                                                                         "lub3"
                                                                                         "f!1(t!2)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "image")
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "t!2")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (name
                                                                                 "A"
                                                                                 "y!1 - f!1(t!1)")
                                                                                (("2"
                                                                                  (expand
                                                                                   "continuous?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     "cont"
                                                                                     "p!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "continuous_at?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "ball")
                                                                                          (("2"
                                                                                            (inst
                                                                                             "cont"
                                                                                             "A/2")
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "archimedean")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "A/4")
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "both_sides_div_pos_lt2")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "n!1+1"
                                                                                                         "n!1"
                                                                                                         "1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (add-formulas
                                                                                                             -1
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (both-sides
                                                                                                               "-"
                                                                                                               "1/n!1"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   "csl"
                                                                                                                   "delta!1/2"
                                                                                                                   "n!1")
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "n!2")
                                                                                                                      (("1"
                                                                                                                        (both-sides
                                                                                                                         "+"
                                                                                                                         "1"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (label
                                                                                                                           "n1n2"
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (label
                                                                                                                             "arch1"
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (label
                                                                                                                               "Adef"
                                                                                                                               -3)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 "cont"
                                                                                                                                 "seq(n!2)")
                                                                                                                                (("1"
                                                                                                                                  (prop)
                                                                                                                                  (("1"
                                                                                                                                    (grind
                                                                                                                                     "cont")
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       "compact")
                                                                                                                                      (("1"
                                                                                                                                        (typepred
                                                                                                                                         "seq(n!2)")
                                                                                                                                        (("1"
                                                                                                                                          (label
                                                                                                                                           "ge2"
                                                                                                                                           -2)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "both_sides_div_pos_ge2")
                                                                                                                                            (("1"
                                                                                                                                              (label
                                                                                                                                               "recip"
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 "recip"
                                                                                                                                                 "n!1 + 1"
                                                                                                                                                 "n!2 + 1"
                                                                                                                                                 "1")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       "compact")
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "seq(n!2)")
                                                                                                                                        (("2"
                                                                                                                                          (label
                                                                                                                                           "n!2le"
                                                                                                                                           -2)
                                                                                                                                          (("2"
                                                                                                                                            (label
                                                                                                                                             "seqn!2tp"
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "both_sides_div_pos_ge2")
                                                                                                                                              (("2"
                                                                                                                                                (label
                                                                                                                                                 "bsxyz"
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   "bsxyz"
                                                                                                                                                   "n!1 + 1"
                                                                                                                                                   "n!2+1"
                                                                                                                                                   "1")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("3"
                                                                                                                                      (hide
                                                                                                                                       "compact")
                                                                                                                                      (("3"
                                                                                                                                        (typepred
                                                                                                                                         "seq(n!2)")
                                                                                                                                        (("3"
                                                                                                                                          (label
                                                                                                                                           "n!2le"
                                                                                                                                           -2)
                                                                                                                                          (("3"
                                                                                                                                            (label
                                                                                                                                             "seqn!2tp"
                                                                                                                                             -1)
                                                                                                                                            (("3"
                                                                                                                                              (lemma
                                                                                                                                               "both_sides_div_pos_ge2")
                                                                                                                                              (("3"
                                                                                                                                                (label
                                                                                                                                                 "bsxyz"
                                                                                                                                                 -1)
                                                                                                                                                (("3"
                                                                                                                                                  (inst
                                                                                                                                                   "bsxyz"
                                                                                                                                                   "n!1 + 1"
                                                                                                                                                   "n!2 + 1"
                                                                                                                                                   "1")
                                                                                                                                                  (("3"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("4"
                                                                                                                                      (hide
                                                                                                                                       "compact")
                                                                                                                                      (("4"
                                                                                                                                        (typepred
                                                                                                                                         "seq(n!2)")
                                                                                                                                        (("4"
                                                                                                                                          (label
                                                                                                                                           "n!2le"
                                                                                                                                           -2)
                                                                                                                                          (("4"
                                                                                                                                            (label
                                                                                                                                             "seqn!2tp"
                                                                                                                                             -1)
                                                                                                                                            (("4"
                                                                                                                                              (lemma
                                                                                                                                               "both_sides_div_pos_ge2")
                                                                                                                                              (("4"
                                                                                                                                                (label
                                                                                                                                                 "bsxyz"
                                                                                                                                                 -1)
                                                                                                                                                (("4"
                                                                                                                                                  (inst
                                                                                                                                                   "bsxyz"
                                                                                                                                                   "n!1 + 1"
                                                                                                                                                   "n!2 + 1"
                                                                                                                                                   "1")
                                                                                                                                                  (("4"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (lemma
                                                                                                                                     "fullset_metric_space")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "metric_space?")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "space_symmetric?")
                                                                                                                                        (("2"
                                                                                                                                          (prop)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -2
                                                                                                                                             "p!1"
                                                                                                                                             "seq(n!2)")
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -2)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (expand
                                                                                                                                               "fullset")
                                                                                                                                              (("2"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("3"
                                                                                                                                              (expand
                                                                                                                                               "fullset")
                                                                                                                                              (("3"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 (-1
                                                                                                                  1))
                                                                                                                (("2"
                                                                                                                  (iff)
                                                                                                                  (("2"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (cancel-by
                                                                                                                       1
                                                                                                                       "n!1*n!1")
                                                                                                                      (("1"
                                                                                                                        (grind-reals)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (cancel-by
                                                                                                                       1
                                                                                                                       "n!1*n!1")
                                                                                                                      (("2"
                                                                                                                        (grind-reals)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "image")
                                                                              (("2"
                                                                                (inst
                                                                                 +
                                                                                 "t!1")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (expand
                                                             "nonempty?")
                                                            (("2"
                                                              (expand
                                                               "empty?")
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (inst
                                                                   "lub2"
                                                                   "y!1-1/(1+n!1)")
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "upper_bound?"
                                                                       +)
                                                                      (("2"
                                                                        (expand
                                                                         "image")
                                                                        (("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (typepred
                                                                             "s!1")
                                                                            (("2"
                                                                              (expand
                                                                               "image")
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "x!3")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (name
                                                 "seq"
                                                 "(LAMBDA (n: nat): choose({s: T | S!1(s) AND f!1(s) > n}))")
                                                (("1"
                                                  (inst "csl" "seq")
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (lemma
                                                       "axiom_of_archimedes")
                                                      (("1"
                                                        (inst - "f!1(p!1)")
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (expand
                                                             "continuous?")
                                                            (("1"
                                                              (inst
                                                               "cont"
                                                               "p!1")
                                                              (("1"
                                                                (expand
                                                                 "continuous_at?")
                                                                (("1"
                                                                  (inst
                                                                   "cont"
                                                                   "1")
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst
                                                                       "csl"
                                                                       "delta!1"
                                                                       "max(i!1,0) + 2")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (typepred
                                                                           "n!1")
                                                                          (("1"
                                                                            (inst
                                                                             "cont"
                                                                             "seq(n!1)")
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (expand
                                                                                 "ball")
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (grind
                                                                                       -1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "fullset_metric_space")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "metric_space?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "space_symmetric?")
                                                                                        (("2"
                                                                                          (prop)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "p!1"
                                                                                             "seq(n!1)")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "fullset")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (expand
                                                                                               "fullset")
                                                                                              (("3"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand "nonempty?")
                                                    (("2"
                                                      (expand "empty?")
                                                      (("2"
                                                        (inst "lub" "n!1")
                                                        (("2"
                                                          (expand
                                                           "upper_bound?"
                                                           +)
                                                          (("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (typepred "s!1")
                                                              (("2"
                                                                (expand
                                                                 "image")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "x!3")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "bounded?")
                          (("2" (expand "bounded_above?")
                            (("2" (expand "bounded_below?")
                              (("2" (prop)
                                (("1"
                                  (name "seq"
                                        "(LAMBDA (n: nat): choose({s: T | S!1(s) AND f!1(s) > n}))")
                                  (("1" (inst "csl" "seq")
                                    (("1" (skosimp*)
                                      (("1"
                                        (expand "continuous?")
                                        (("1"
                                          (inst "cont" "p!1")
                                          (("1"
                                            (expand "continuous_at?")
                                            (("1"
                                              (inst "cont" 1)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (expand "member")
                                                  (("1"
                                                    (expand "ball")
                                                    (("1"
                                                      (lemma
                                                       "axiom_of_archimedes")
                                                      (("1"
                                                        (inst - "f!1(p!1)")
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             "csl"
                                                             "delta!1"
                                                             "max(i!1,0) + 3")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (typepred
                                                                 "n!1")
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "n!1")
                                                                  (("1"
                                                                    (expand
                                                                     "upper_bound?")
                                                                    (("1"
                                                                      (inst
                                                                       "cont"
                                                                       "seq(n!1)")
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (typepred
                                                                             "s!1")
                                                                            (("1"
                                                                              (expand
                                                                               "image")
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (grind
                                                                                   "cont")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "fullset_metric_space")
                                                                          (("2"
                                                                            (expand
                                                                             "metric_space?")
                                                                            (("2"
                                                                              (expand
                                                                               "space_symmetric?")
                                                                              (("2"
                                                                                (prop)
                                                                                (("2"
                                                                                  (inst
                                                                                   -2
                                                                                   "p!1"
                                                                                   "seq(n!1)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "fullset")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (expand
                                                                                     "fullset")
                                                                                    (("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but (1 2 3))
                                    (("2" (skosimp*)
                                      (("2"
                                        (expand "nonempty?")
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (inst + "n!1")
                                            (("2"
                                              (expand "upper_bound?")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (typepred "s!1")
                                                  (("2"
                                                    (expand "image")
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (typepred "x!2")
                                                        (("2"
                                                          (inst - "x!2")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (name "seq"
                                        "(LAMBDA (n: nat): choose({s: T | S!1(s) AND f!1(s) < -n}))")
                                  (("1" (inst "csl" "seq")
                                    (("1" (skosimp*)
                                      (("1"
                                        (expand "continuous?")
                                        (("1"
                                          (expand "continuous_at?")
                                          (("1"
                                            (inst "cont" "p!1")
                                            (("1"
                                              (inst "cont" "1")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (lemma
                                                   "axiom_of_archimedes")
                                                  (("1"
                                                    (inst - "-f!1(p!1)")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (inst
                                                         "csl"
                                                         "delta!1"
                                                         "max(i!1,0) + 5")
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (typepred "n!1")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (expand
                                                                 "ball")
                                                                (("1"
                                                                  (inst
                                                                   "cont"
                                                                   "seq(n!1)")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (grind
                                                                       "cont")
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "fullset_metric_space")
                                                                      (("2"
                                                                        (expand
                                                                         "metric_space?")
                                                                        (("2"
                                                                          (prop)
                                                                          (("2"
                                                                            (expand
                                                                             "space_symmetric?")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "p!1"
                                                                               "seq(n!1)")
                                                                              (("1"
                                                                                (replace
                                                                                 -2)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "fullset")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (expand
                                                                                 "fullset")
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (expand "nonempty?")
                                    (("2" (expand "empty?")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (inst + "-n!1 - 1")
                                            (("2"
                                              (expand "lower_bound?")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (typepred "s!1")
                                                  (("2"
                                                    (expand "image")
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (typepred "x!2")
                                                        (("2"
                                                          (replace -2)
                                                          (("2"
                                                            (inst - "x!2")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "nonempty?")
                          (("3" (expand "empty?")
                            (("3" (expand "member")
                              (("3" (skosimp*)
                                (("3" (inst - "f!1(x!1)")
                                  (("3" (expand "image")
                                    (("3" (inst + "x!1") nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[T, T -> nnreal]" real_fun_on_compact_sets nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil real_fun_on_compact_sets nil)
    (compact_sequence_limit formula-decl nil compactness nil)
    (set type-eq-decl nil sets nil)
    (x!1 skolem-const-decl "T" real_fun_on_compact_sets nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (p!1 skolem-const-decl "(S!1)" real_fun_on_compact_sets nil)
    (seq skolem-const-decl "[n: nat -> ({s: T | S!1(s) AND f!1(s) < -n})]"
     real_fun_on_compact_sets nil)
    (i!1 skolem-const-decl "int" real_fun_on_compact_sets nil)
    (n!1 skolem-const-decl "above(5 + max(i!1, 0))" real_fun_on_compact_sets
     nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (p!1 skolem-const-decl "(S!1)" real_fun_on_compact_sets nil)
    (seq skolem-const-decl "[n: nat -> ({s: T | S!1(s) AND f!1(s) > n})]"
     real_fun_on_compact_sets nil)
    (i!1 skolem-const-decl "int" real_fun_on_compact_sets nil)
    (n!1 skolem-const-decl "above(3 + max(i!1, 0))" real_fun_on_compact_sets
     nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (t!2 skolem-const-decl "(S!1)" real_fun_on_compact_sets nil)
    (continuous? const-decl "bool" continuity_ms_def nil)
    (continuous_at? const-decl "bool" continuity_ms_def nil)
    (ball const-decl "set[T]" metric_spaces nil)
    (both_sides_div_pos_lt2 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (both_sides_plus_lt2 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (both_sides_plus_le2 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (pos_times_lt formula-decl nil real_props nil)
    (pos_times_le formula-decl nil real_props nil)
    (minus_div1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (add_div formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (both_sides_div_pos_ge2 formula-decl nil real_props nil)
    (y!1 skolem-const-decl "real" real_fun_on_compact_sets nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_dist const-decl "nnreal" real_metric_space nil)
    (Union const-decl "set" sets nil) (subset? const-decl "bool" sets nil)
    (open? const-decl "bool" metric_spaces nil)
    (open_cover? const-decl "bool" compactness nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_cover? const-decl "bool" compactness nil)
    (compact? const-decl "bool" compactness nil)
    (empty? const-decl "bool" sets nil)
    (metric_space? const-decl "bool" metric_spaces_def nil)
    (n!2 skolem-const-decl "above(n!1)" real_fun_on_compact_sets nil)
    (n!1 skolem-const-decl "posnat" real_fun_on_compact_sets nil)
    (seq skolem-const-decl
     "[n: nat -> ({s: T | S!1(s) AND y!1 - f!1(s) < 1 / (n + 1)})]"
     real_fun_on_compact_sets nil)
    (p!1 skolem-const-decl "(S!1)" real_fun_on_compact_sets nil)
    (fullset const-decl "set" sets nil)
    (space_symmetric? const-decl "bool" metric_spaces_def nil)
    (fullset_metric_space formula-decl nil real_fun_on_compact_sets nil)
    (both_sides_plus_gt1 formula-decl nil real_props nil)
    (odd? const-decl "bool" integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (cross_mult formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (both_sides_plus_lt1 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (nonzero_times3 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat" rationals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (archimedean formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (A skolem-const-decl "real" real_fun_on_compact_sets nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (t!1 skolem-const-decl "(S!1)" real_fun_on_compact_sets nil)
    (S!1 skolem-const-decl "set[T]" real_fun_on_compact_sets nil)
    (f!1 skolem-const-decl "[T -> real]" real_fun_on_compact_sets nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (choose const-decl "(p)" sets nil)
    (axiom_of_archimedes formula-decl nil real_props nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}" real_defs
     nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}" real_defs
     nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (n!1 skolem-const-decl "above(2 + max(i!1, 0))" real_fun_on_compact_sets
     nil)
    (i!1 skolem-const-decl "int" real_fun_on_compact_sets nil)
    (seq skolem-const-decl "[n: nat -> ({s: T | S!1(s) AND f!1(s) > n})]"
     real_fun_on_compact_sets nil)
    (p!1 skolem-const-decl "(S!1)" real_fun_on_compact_sets nil)
    (real_complete formula-decl nil bounded_real_defs nil)
    (image const-decl "set[R]" function_image nil)
    (bounded? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil))
   nil))
 (cont_on_compact_min 0
  (cont_on_compact_min-1 nil 3460718233
   ("" (skosimp*)
    (("" (lemma "cont_on_compact_max")
      (("" (inst - "S!1" "(Lambda (x: T): -f!1(x))")
        (("" (assert)
          (("" (prop)
            (("1" (skosimp*)
              (("1" (inst + "s!1")
                (("1" (skosimp*)
                  (("1" (inst - "t!1") (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (expand "continuous?")
              (("2" (skosimp*)
                (("2" (inst - "x!1")
                  (("2" (expand "continuous_at?")
                    (("2" (skosimp*)
                      (("2" (inst - "epsilon!1")
                        (("2" (skosimp*)
                          (("2" (inst + "delta!1")
                            (("2" (skosimp*)
                              (("2" (inst - "y!1")
                                (("2" (expand "member")
                                  (("2" (expand "ball")
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cont_on_compact_max formula-decl nil real_fun_on_compact_sets nil)
    (continuous? const-decl "bool" continuity_ms_def nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_dist const-decl "nnreal" real_metric_space nil)
    (Union const-decl "set" sets nil) (subset? const-decl "bool" sets nil)
    (open? const-decl "bool" metric_spaces nil)
    (d formal-const-decl "[T, T -> nnreal]" real_fun_on_compact_sets nil)
    (nnreal type-eq-decl nil real_types nil)
    (open_cover? const-decl "bool" compactness nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_cover? const-decl "bool" compactness nil)
    (compact? const-decl "bool" compactness nil)
    (empty? const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ball const-decl "set[T]" metric_spaces nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (continuous_at? const-decl "bool" continuity_ms_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil real_fun_on_compact_sets nil)
    (minus_real_is_real application-judgement "real" reals nil))
   nil)))


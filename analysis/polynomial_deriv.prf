(polynomial_deriv
 (derivable_polynomial_TCC1 0
  (derivable_polynomial_TCC1-1 nil 3259332257
   ("" (expand "deriv_domain?")
    (("" (skosimp*) (("" (inst + "e!1/2") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (deriv_domain? const-decl "bool" deriv_domain_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak
   (derivable_polynomial assuming "derivatives[real].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (derivable_polynomial_TCC2 0
  (derivable_polynomial_TCC2-1 nil 3259332271
   ("" (expand "not_one_element?")
    (("" (skosimp*) (("" (inst + "x!1+1") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (not_one_element? const-decl "bool" deriv_domain_def nil))
   shostak
   (derivable_polynomial assuming "derivatives[real].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (derivable_polynomial 0
  (derivable_polynomial-2 "" 3790090831
   ("" (induct "n")
    (("1" (skolem 1 ("a"))
      (("1" (expand "polynomial")
        (("1" (expand "sigma")
          (("1" (expand "sigma")
            (("1" (lemma "const_derivable_fun[real]" ("b" "a(0)"))
              (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("j"))
      (("2" (flatten)
        (("2" (skolem 1 ("a"))
          (("2" (expand "polynomial")
            (("2" (expand "sigma" 1)
              (("2" (inst - "a")
                (("2"
                  (lemma "sum_derivable_fun[real]"
                   ("f1"
                    "LAMBDA (x: real): sigma(0, j, LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF))"
                    "f2" "LAMBDA (x: real): a(1 + j) * x ^ (1 + j)"))
                  (("2" (replace -2 -1)
                    (("2"
                      (lemma "scal_derivable_fun[real]"
                       ("b" "a(1+j)" "f" "LAMBDA (x: real): x ^ (1 + j)"))
                      (("2"
                        (lemma "deriv_exp_fun[real]"
                         ("f" "LAMBDA (x: real): x" "n" "1+j"))
                        (("2" (lemma "identity_derivable_fun[real]")
                          (("2" (expand "I")
                            (("2" (replace -1 -2)
                              (("2" (assert)
                                (("2" (flatten -2)
                                  (("2" (expand "^" -2)
                                    (("2" (replace -2 -4)
                                      (("2"
                                        (expand "*" -4)
                                        (("2"
                                          (replace -4 -5)
                                          (("2"
                                            (expand "+" -5)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (derivable? const-decl "bool" derivatives nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (nat_induction formula-decl nil naturalnumbers nil)
    (const_derivable_fun formula-decl nil derivatives nil)
    (sigma def-decl "real" sigma reals)
    (deriv_exp_fun formula-decl nil derivatives nil)
    (I const-decl "(bijective?[T, T])" identity nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (identity_derivable_fun formula-decl nil derivatives nil)
    (scal_derivable_fun formula-decl nil derivatives nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (sum_derivable_fun formula-decl nil derivatives nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil))
   shostak)
  (derivable_polynomial-1 nil 3259332429
   ("" (induct "n")
    (("1" (skolem 1 ("a"))
      (("1" (expand "polynomial")
        (("1" (expand "sigma")
          (("1" (expand "sigma")
            (("1" (lemma "const_derivable_fun[real]" ("b" "a(0)"))
              (("1" (expand "const_fun") (("1" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("j"))
      (("2" (flatten)
        (("2" (skolem 1 ("a"))
          (("2" (expand "polynomial")
            (("2" (expand "sigma" 1)
              (("2" (inst - "a")
                (("2"
                  (lemma "sum_derivable_fun[real]"
                   ("f1"
                    "LAMBDA (x: real): sigma(0, j, LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF))"
                    "f2" "LAMBDA (x: real): a(1 + j) * x ^ (1 + j)"))
                  (("2" (replace -2 -1)
                    (("2"
                      (lemma "scal_derivable_fun[real]"
                       ("b" "a(1+j)" "f" "LAMBDA (x: real): x ^ (1 + j)"))
                      (("2"
                        (lemma "deriv_exp_fun[real]"
                         ("f" "LAMBDA (x: real): x" "n" "1+j"))
                        (("2" (lemma "identity_derivable_fun[real]")
                          (("2" (expand "I")
                            (("2" (replace -1 -2)
                              (("2" (assert)
                                (("2" (flatten -2)
                                  (("2" (expand "^" -2)
                                    (("2" (replace -2 -4)
                                      (("2"
                                        (expand "*" -4)
                                        (("2"
                                          (replace -4 -5)
                                          (("2"
                                            (expand "+" -5)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (sum_derivable_fun formula-decl nil derivatives nil)
    (scal_derivable_fun formula-decl nil derivatives nil)
    (identity_derivable_fun formula-decl nil derivatives nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (deriv_exp_fun formula-decl nil derivatives nil)
    (sigma def-decl "real" sigma reals)
    (const_derivable_fun formula-decl nil derivatives nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (derivable? const-decl "bool" derivatives nil))
   shostak))
 (deriv_polynomial_TCC1 0
  (deriv_polynomial_TCC1-1 nil 3259332297
   ("" (skosimp*)
    (("" (lemma "derivable_polynomial" ("a" "a!1" "n" "n!1"))
      (("" (propax) nil nil)) nil))
    nil)
   ((sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_polynomial formula-decl nil polynomial_deriv nil))
   shostak
   (deriv_polynomial subtype
    "polynomials.polynomial(polynomial_deriv.a, polynomial_deriv.n)"
    "deriv_fun[real]")))
 (deriv_polynomial_TCC2 0
  (deriv_polynomial_TCC2-1 nil 3259332402 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak
   (deriv_polynomial subtype "(number_fields.-)(polynomial_deriv.n, 1)"
    "nat")))
 (deriv_polynomial 0
  (deriv_polynomial-4 "" 3790090832
   ("" (induct "n")
    (("1" (skolem 1 ("a"))
      (("1" (expand "polynomial")
        (("1" (expand "sigma")
          (("1" (expand "sigma")
            (("1" (lemma "deriv_const_fun[real]" ("b" "a(0)"))
              (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("j"))
      (("2" (flatten)
        (("2" (skolem 1 ("a"))
          (("2" (expand "polynomial")
            (("2" (lemma "trichotomy" ("x" "j"))
              (("2" (split -1)
                (("1" (expand "sigma" 1)
                  (("1" (inst - "a")
                    (("1" (assert)
                      (("1"
                        (lemma "deriv_sum_fun[real]"
                         ("ff1"
                          "LAMBDA (x: real): sigma(0, j, LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF))"
                          "ff2" "LAMBDA (x: real): a(1 + j) * x ^ (1 + j)"))
                        (("1" (expand "+" -1)
                          (("1" (replace -1 1)
                            (("1" (replace -3 1)
                              (("1" (hide -1 -3)
                                (("1" (lemma "identity_derivable_fun[real]")
                                  (("1" (lemma "deriv_id_fun[real]")
                                    (("1" (expand "I")
                                      (("1"
                                        (lemma
                                         "deriv_exp_fun[real]"
                                         ("f"
                                          "LAMBDA (x: real): x"
                                          "n"
                                          "1+j"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "^" -1)
                                            (("1"
                                              (flatten -1)
                                              (("1"
                                                (replace -3 -2)
                                                (("1"
                                                  (lemma
                                                   "deriv_scal_fun[real]"
                                                   ("b"
                                                    "a(1+j)"
                                                    "ff"
                                                    "LAMBDA (t: real): t ^ (1 + j)"))
                                                  (("1"
                                                    (replace -3 -1)
                                                    (("1"
                                                      (expand "*" -1)
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (simplify 1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -2 2)
                          (("2" (lemma "identity_derivable_fun[real]")
                            (("2" (expand "I")
                              (("2"
                                (lemma "deriv_exp_fun[real]"
                                 ("f" "LAMBDA (x: real): x" "n" "1+j"))
                                (("2" (assert)
                                  (("2" (expand "^")
                                    (("2" (flatten)
                                      (("2"
                                        (lemma
                                         "scal_derivable_fun[real]"
                                         ("b"
                                          "a(1+j)"
                                          "f"
                                          "LAMBDA (t: real): t ^ (1 + j)"))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "*")
                                            (("2"
                                              (expand "^" -1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide -2 2)
                          (("3"
                            (lemma "derivable_polynomial" ("a" "a" "n" "j"))
                            (("3" (expand "polynomial")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (replace -1)
                    (("2" (expand "sigma")
                      (("2" (expand "sigma")
                        (("2" (expand "^")
                          (("2" (expand "expt")
                            (("2" (expand "expt")
                              (("2" (lemma "deriv_id_fun[real]")
                                (("2"
                                  (lemma "deriv_const_fun[real]" ("b" "a(0)"))
                                  (("2"
                                    (lemma "deriv_scal_fun[real]"
                                     ("b" "a(1)" "ff" "LAMBDA (x: real): x"))
                                    (("1" (expand "*" -1)
                                      (("1"
                                        (expand "sigma")
                                        (("1"
                                          (lemma
                                           "deriv_sum_fun[real]"
                                           ("ff1"
                                            "LAMBDA (x: real): a(0)"
                                            "ff2"
                                            "LAMBDA (x: real): a(1) * x"))
                                          (("1"
                                            (expand "+" -1)
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (replace -2 1)
                                                (("1"
                                                  (replace -4 1)
                                                  (("1"
                                                    (replace -3 1)
                                                    (("1"
                                                      (simplify 1)
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "identity_derivable_fun[real]")
                                            (("2"
                                              (expand "I")
                                              (("2"
                                                (lemma
                                                 "scal_derivable_fun[real]"
                                                 ("b"
                                                  "a(1)"
                                                  "f"
                                                  "LAMBDA (x: real): x"))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "*" -1)
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma
                                             "const_derivable_fun[real]"
                                             ("b" "a(0)"))
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "identity_derivable_fun[real]")
                                      (("2"
                                        (expand "I")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2)
      (("4" (skolem 1 ("a" "n"))
        (("4" (lemma "derivable_polynomial") (("4" (inst?) nil nil)) nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (derivable? const-decl "bool" derivatives nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (deriv_const_fun formula-decl nil derivatives nil)
    (sigma def-decl "real" sigma reals)
    (const_derivable_fun formula-decl nil derivatives nil)
    (expt def-decl "real" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (deriv_sum_fun formula-decl nil derivatives nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (deriv_id_fun formula-decl nil derivatives nil)
    (deriv_exp_fun formula-decl nil derivatives nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (deriv_scal_fun formula-decl nil derivatives nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (I const-decl "(bijective?[T, T])" identity nil)
    (identity_derivable_fun formula-decl nil derivatives nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (scal_derivable_fun formula-decl nil derivatives nil)
    (derivable_polynomial formula-decl nil polynomial_deriv nil)
    (trichotomy formula-decl nil real_axioms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak)
  (deriv_polynomial-3 nil 3352187782
   ("" (induct "n")
    (("1" (skolem 1 ("a"))
      (("1" (expand "polynomial")
        (("1" (expand "sigma")
          (("1" (expand "sigma")
            (("1" (lemma "deriv_const_fun[real]" ("b" "a(0)"))
              (("1" (expand "const_fun") (("1" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("j"))
      (("2" (flatten)
        (("2" (skolem 1 ("a"))
          (("2" (expand "polynomial")
            (("2" (lemma "trichotomy" ("x" "j"))
              (("2" (split -1)
                (("1" (expand "sigma" 1)
                  (("1" (inst - "a")
                    (("1" (assert)
                      (("1"
                        (lemma "deriv_sum_fun[real]"
                         ("ff1"
                          "LAMBDA (x: real): sigma(0, j, LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF))"
                          "ff2" "LAMBDA (x: real): a(1 + j) * x ^ (1 + j)"))
                        (("1" (expand "+" -1)
                          (("1" (replace -1 1)
                            (("1" (replace -3 1)
                              (("1" (hide -1 -3)
                                (("1" (lemma "identity_derivable_fun[real]")
                                  (("1" (lemma "deriv_id_fun[real]")
                                    (("1" (expand "I")
                                      (("1"
                                        (expand "const_fun")
                                        (("1"
                                          (lemma
                                           "deriv_exp_fun[real]"
                                           ("f"
                                            "LAMBDA (x: real): x"
                                            "n"
                                            "1+j"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "^" -1)
                                              (("1"
                                                (flatten -1)
                                                (("1"
                                                  (replace -3 -2)
                                                  (("1"
                                                    (lemma
                                                     "deriv_scal_fun[real]"
                                                     ("b"
                                                      "a(1+j)"
                                                      "ff"
                                                      "LAMBDA (t: real): t ^ (1 + j)"))
                                                    (("1"
                                                      (replace -3 -1)
                                                      (("1"
                                                        (expand "*" -1)
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (simplify 1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -2 2)
                          (("2" (lemma "identity_derivable_fun[real]")
                            (("2" (expand "I")
                              (("2"
                                (lemma "deriv_exp_fun[real]"
                                 ("f" "LAMBDA (x: real): x" "n" "1+j"))
                                (("2" (assert)
                                  (("2" (expand "^")
                                    (("2" (flatten)
                                      (("2"
                                        (lemma
                                         "scal_derivable_fun[real]"
                                         ("b"
                                          "a(1+j)"
                                          "f"
                                          "LAMBDA (t: real): t ^ (1 + j)"))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "*")
                                            (("2"
                                              (expand "^" -1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide -2 2)
                          (("3"
                            (lemma "derivable_polynomial" ("a" "a" "n" "j"))
                            (("3" (expand "polynomial")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (replace -1)
                    (("2" (expand "sigma")
                      (("2" (expand "sigma")
                        (("2" (expand "^")
                          (("2" (expand "expt")
                            (("2" (expand "expt")
                              (("2" (lemma "deriv_id_fun[real]")
                                (("2"
                                  (lemma "deriv_const_fun[real]" ("b" "a(0)"))
                                  (("2" (expand "I")
                                    (("2" (expand "const_fun")
                                      (("2"
                                        (lemma
                                         "deriv_scal_fun[real]"
                                         ("b"
                                          "a(1)"
                                          "ff"
                                          "LAMBDA (x: real): x"))
                                        (("1"
                                          (expand "*" -1)
                                          (("1"
                                            (expand "sigma")
                                            (("1"
                                              (lemma
                                               "deriv_sum_fun[real]"
                                               ("ff1"
                                                "LAMBDA (x: real): a(0)"
                                                "ff2"
                                                "LAMBDA (x: real): a(1) * x"))
                                              (("1"
                                                (expand "+" -1)
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (replace -2 1)
                                                    (("1"
                                                      (replace -4 1)
                                                      (("1"
                                                        (replace -3 1)
                                                        (("1"
                                                          (simplify 1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "identity_derivable_fun[real]")
                                                (("2"
                                                  (expand "I")
                                                  (("2"
                                                    (lemma
                                                     "scal_derivable_fun[real]"
                                                     ("b"
                                                      "a(1)"
                                                      "f"
                                                      "LAMBDA (x: real): x"))
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "*" -1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma
                                                 "const_derivable_fun[real]"
                                                 ("b" "a(0)"))
                                                (("3"
                                                  (expand "const_fun")
                                                  (("3" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           "identity_derivable_fun[real]")
                                          (("2"
                                            (expand "I")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2)
      (("4" (skolem 1 ("a" "n"))
        (("4" (lemma "derivable_polynomial") (("4" (inst?) nil nil)) nil))
        nil))
      nil))
    nil)
   ((const_derivable_fun formula-decl nil derivatives nil)
    (scal_derivable_fun formula-decl nil derivatives nil)
    (identity_derivable_fun formula-decl nil derivatives nil)
    (deriv_scal_fun formula-decl nil derivatives nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (deriv_exp_fun formula-decl nil derivatives nil)
    (deriv_id_fun formula-decl nil derivatives nil)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (deriv_sum_fun formula-decl nil derivatives nil)
    (sigma def-decl "real" sigma reals)
    (deriv_const_fun formula-decl nil derivatives nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (polynomial const-decl "[real -> real]" polynomials reals))
   nil)
  (deriv_polynomial-2 nil 3320063887
   ("" (induct "n")
    (("1" (skolem 1 ("a"))
      (("1" (expand "polynomial")
        (("1" (expand "sigma")
          (("1" (lemma "deriv_const_fun[real]" ("b" "a(0)"))
            (("1" (expand "const_fun") (("1" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("j"))
      (("2" (flatten)
        (("2" (skolem 1 ("a"))
          (("2" (expand "polynomial")
            (("2" (lemma "trichotomy" ("x" "j"))
              (("2" (split -1)
                (("1" (expand "sigma" 1)
                  (("1" (inst - "a")
                    (("1" (assert)
                      (("1"
                        (lemma "deriv_sum_fun"
                         ("ff1"
                          "LAMBDA (x: real): sigma(0, j, LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF))"
                          "ff2" "LAMBDA (x: real): a(1 + j) * x ^ (1 + j)"))
                        (("1" (expand "+" -1)
                          (("1" (replace -1 1)
                            (("1" (replace -3 1)
                              (("1" (hide -1 -3)
                                (("1" (lemma "identity_derivable_fun[real]")
                                  (("1" (lemma "deriv_id_fun[real]")
                                    (("1" (expand "I")
                                      (("1"
                                        (expand "const_fun")
                                        (("1"
                                          (lemma
                                           "deriv_exp_fun"
                                           ("f"
                                            "LAMBDA (x: real): x"
                                            "n"
                                            "1+j"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "^" -1)
                                              (("1"
                                                (flatten -1)
                                                (("1"
                                                  (replace -3 -2)
                                                  (("1"
                                                    (lemma
                                                     "deriv_scal_fun"
                                                     ("b"
                                                      "a(1+j)"
                                                      "ff"
                                                      "LAMBDA (t: real): t ^ (1 + j)"))
                                                    (("1"
                                                      (replace -3 -1)
                                                      (("1"
                                                        (expand "*" -1)
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (simplify 1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -2 2)
                          (("2" (lemma "identity_derivable_fun[real]")
                            (("2" (expand "I")
                              (("2"
                                (lemma "deriv_exp_fun"
                                 ("f" "LAMBDA (x: real): x" "n" "1+j"))
                                (("2" (assert)
                                  (("2" (expand "^")
                                    (("2" (flatten)
                                      (("2"
                                        (lemma
                                         "scal_derivable_fun"
                                         ("b"
                                          "a(1+j)"
                                          "f"
                                          "LAMBDA (t: real): t ^ (1 + j)"))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "*")
                                            (("2"
                                              (expand "^" -1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide -2 2)
                          (("3"
                            (lemma "derivable_polynomial" ("a" "a" "n" "j"))
                            (("3" (expand "polynomial")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (skosimp*) (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -1)
                  (("2" (expand "sigma")
                    (("2" (expand "sigma")
                      (("2" (expand "^")
                        (("2" (expand "expt")
                          (("2" (expand "expt")
                            (("2" (lemma "deriv_id_fun[real]")
                              (("2"
                                (lemma "deriv_const_fun[real]" ("b" "a(0)"))
                                (("2" (expand "I")
                                  (("2" (expand "const_fun")
                                    (("2"
                                      (lemma
                                       "deriv_scal_fun"
                                       ("b"
                                        "a(1)"
                                        "ff"
                                        "LAMBDA (x: real): x"))
                                      (("1"
                                        (expand "*" -1)
                                        (("1"
                                          (lemma
                                           "deriv_sum_fun"
                                           ("ff1"
                                            "LAMBDA (x: real): a(0)"
                                            "ff2"
                                            "LAMBDA (x: real): a(1) * x"))
                                          (("1"
                                            (expand "+" -1)
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (replace -2 1)
                                                (("1"
                                                  (replace -4 1)
                                                  (("1"
                                                    (replace -3 1)
                                                    (("1"
                                                      (simplify 1)
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "identity_derivable_fun[real]")
                                            (("2"
                                              (expand "I")
                                              (("2"
                                                (lemma
                                                 "scal_derivable_fun"
                                                 ("b"
                                                  "a(1)"
                                                  "f"
                                                  "LAMBDA (x: real): x"))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "*" -1)
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma
                                             "const_derivable_fun[real]"
                                             ("b" "a(0)"))
                                            (("3"
                                              (expand "const_fun")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "identity_derivable_fun[real]")
                                        (("2"
                                          (expand "I")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2)
      (("4" (skolem 1 ("a" "n"))
        (("4" (lemma "derivable_polynomial" ("a" "a" "n" "n"))
          (("4" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials reals)
    (deriv_fun type-eq-decl nil derivatives nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (deriv_const_fun formula-decl nil derivatives nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (sigma def-decl "real" sigma reals)
    (deriv_sum_fun formula-decl nil derivatives nil)
    (deriv_id_fun formula-decl nil derivatives nil)
    (deriv_scal_fun formula-decl nil derivatives nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (deriv_exp_fun formula-decl nil derivatives nil)
    (identity_derivable_fun formula-decl nil derivatives nil)
    (scal_derivable_fun formula-decl nil derivatives nil)
    (const_derivable_fun formula-decl nil derivatives nil))
   nil)
  (get-past-crash-bug "get-past-crash-bug" 3306164179
   ("" (induct "n")
    (("1" (postpone) nil nil) ("2" (postpone) nil nil)
     ("3" (postpone) nil nil) ("4" (postpone) nil nil))
    nil)
   nil shostak)
  (deriv_polynomial-1 nil 3259333426
   ("" (induct "n")
    (("1" (skolem 1 ("a"))
      (("1" (expand "polynomial")
        (("1" (expand "sigma")
          (("1" (lemma "deriv_const_fun[real]" ("b" "a(0)"))
            (("1" (expand "const_fun") (("1" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("j"))
      (("2" (flatten)
        (("2" (skolem 1 ("a"))
          (("2" (expand "polynomial")
            (("2" (lemma "trichotomy" ("x" "j"))
              (("2" (split -1)
                (("1" (expand "sigma" 1)
                  (("1" (inst - "a")
                    (("1" (assert)
                      (("1"
                        (lemma "deriv_sum_fun"
                         ("ff1"
                          "LAMBDA (x: real): sigma(0, j, LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF))"
                          "ff2" "LAMBDA (x: real): a(1 + j) * x ^ (1 + j)"))
                        (("1" (expand "+" -1)
                          (("1" (replace -1 1)
                            (("1" (replace -3 1)
                              (("1" (hide -1 -3)
                                (("1" (lemma "identity_derivable_fun[real]")
                                  (("1" (lemma "deriv_id_fun[real]")
                                    (("1" (expand "I")
                                      (("1"
                                        (expand "const_fun")
                                        (("1"
                                          (lemma
                                           "deriv_exp_fun"
                                           ("f"
                                            "LAMBDA (x: real): x"
                                            "n"
                                            "1+j"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "^" -1)
                                              (("1"
                                                (flatten -1)
                                                (("1"
                                                  (replace -3 -2)
                                                  (("1"
                                                    (lemma
                                                     "deriv_scal_fun"
                                                     ("b"
                                                      "a(1+j)"
                                                      "ff"
                                                      "LAMBDA (t: real): t ^ (1 + j)"))
                                                    (("1"
                                                      (replace -3 -1)
                                                      (("1"
                                                        (expand "*" -1)
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (simplify 1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -2 2)
                          (("2" (lemma "identity_derivable_fun[real]")
                            (("2" (expand "I")
                              (("2"
                                (lemma "deriv_exp_fun"
                                 ("f" "LAMBDA (x: real): x" "n" "1+j"))
                                (("2" (assert)
                                  (("2" (expand "^")
                                    (("2" (flatten)
                                      (("2"
                                        (lemma
                                         "scal_derivable_fun"
                                         ("b"
                                          "a(1+j)"
                                          "f"
                                          "LAMBDA (t: real): t ^ (1 + j)"))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "*")
                                            (("2"
                                              (expand "^" -1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide -2 2)
                          (("3"
                            (lemma "derivable_polynomial" ("a" "a" "n" "j"))
                            (("3" (expand "polynomial")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -1)
                  (("2" (expand "sigma")
                    (("2" (expand "sigma")
                      (("2" (expand "^")
                        (("2" (expand "expt")
                          (("2" (expand "expt")
                            (("2" (lemma "deriv_id_fun[real]")
                              (("2"
                                (lemma "deriv_const_fun[real]" ("b" "a(0)"))
                                (("2" (expand "I")
                                  (("2" (expand "const_fun")
                                    (("2"
                                      (lemma
                                       "deriv_scal_fun"
                                       ("b"
                                        "a(1)"
                                        "ff"
                                        "LAMBDA (x: real): x"))
                                      (("1"
                                        (expand "*" -1)
                                        (("1"
                                          (lemma
                                           "deriv_sum_fun"
                                           ("ff1"
                                            "LAMBDA (x: real): a(0)"
                                            "ff2"
                                            "LAMBDA (x: real): a(1) * x"))
                                          (("1"
                                            (expand "+" -1)
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (replace -2 1)
                                                (("1"
                                                  (replace -4 1)
                                                  (("1"
                                                    (replace -3 1)
                                                    (("1"
                                                      (simplify 1)
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "identity_derivable_fun[real]")
                                            (("2"
                                              (expand "I")
                                              (("2"
                                                (lemma
                                                 "scal_derivable_fun"
                                                 ("b"
                                                  "a(1)"
                                                  "f"
                                                  "LAMBDA (x: real): x"))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "*" -1)
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma
                                             "const_derivable_fun[real]"
                                             ("b" "a(0)"))
                                            (("3"
                                              (expand "const_fun")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "identity_derivable_fun[real]")
                                        (("2"
                                          (expand "I")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2)
      (("4" (skolem 1 ("a" "n"))
        (("4" (lemma "derivable_polynomial" ("a" "a" "n" "n"))
          (("4" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials reals)
    (deriv_fun type-eq-decl nil derivatives nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (deriv_const_fun formula-decl nil derivatives nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (sigma def-decl "real" sigma reals)
    (deriv_sum_fun formula-decl nil derivatives nil)
    (deriv_id_fun formula-decl nil derivatives nil)
    (deriv_scal_fun formula-decl nil derivatives nil)
    (deriv_exp_fun formula-decl nil derivatives nil)
    (identity_derivable_fun formula-decl nil derivatives nil)
    (scal_derivable_fun formula-decl nil derivatives nil)
    (const_derivable_fun formula-decl nil derivatives nil))
   shostak))
 (derivable_n_times_polynomial 0
  (derivable_n_times_polynomial-2 "" 3790090833
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (expand "derivable_n_times?") (("1" (propax) nil nil)) nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "derivable_n_times?" 1)
        (("2" (lemma "derivable_polynomial" ("a" "b!1" "n" "m!1"))
          (("2" (replace -1)
            (("2" (lemma "deriv_polynomial" ("a" "b!1" "n" "m!1"))
              (("2" (case "m!1=0")
                (("1" (replace -1)
                  (("1" (replace -2 1)
                    (("1" (inst - "LAMBDA (i:nat): 0" "0")
                      (("1" (expand "polynomial" -4)
                        (("1" (expand "sigma") (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (replace -1 2)
                    (("2"
                      (inst - "LAMBDA (i: nat): b!1(1 + i) + i * b!1(1 + i)"
                       "m!1 - 1")
                      nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (derivable_n_times? def-decl "bool" nth_derivatives nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (nat_induction formula-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma_0_neg formula-decl nil sigma_nat reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_polynomial formula-decl nil polynomial_deriv nil)
    (derivable_polynomial formula-decl nil polynomial_deriv nil))
   shostak)
  (derivable_n_times_polynomial-1 nil 3261819507
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (expand "derivable_n_times?") (("1" (propax) nil nil)) nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "derivable_n_times?" 1)
        (("2" (lemma "derivable_polynomial" ("a" "b!1" "n" "m!1"))
          (("2" (replace -1)
            (("2" (lemma "deriv_polynomial" ("a" "b!1" "n" "m!1"))
              (("2" (case "m!1=0")
                (("1" (replace -1)
                  (("1" (replace -2 1)
                    (("1" (inst - "LAMBDA (i:nat): 0" "0")
                      (("1" (expand "polynomial" -4)
                        (("1" (expand "sigma")
                          (("1" (assert)
                            (("1" (expand "sigma") (("1" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (replace -1 2)
                    (("2"
                      (inst - "LAMBDA (i: nat): b!1(1 + i) + i * b!1(1 + i)"
                       "m!1 - 1")
                      nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (sigma_0_neg formula-decl nil sigma_nat reals)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (derivable_n_times? def-decl "bool" nth_derivatives nil))
   shostak))
 (nderiv_polynomial_TCC1 0
  (nderiv_polynomial_TCC1-1 nil 3260944881
   ("" (skosimp*)
    ((""
      (lemma "derivable_n_times_polynomial" ("n" "n!1" "b" "b!1" "m" "m!1"))
      (("" (propax) nil nil)) nil))
    nil)
   ((sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_n_times_polynomial formula-decl nil polynomial_deriv nil))
   shostak
   (nderiv_polynomial subtype
    "polynomials.polynomial(polynomial_deriv.b, polynomial_deriv.m)"
    "nth_derivatives[real].nderiv_fun(polynomial_deriv.n)")))
 (nderiv_polynomial_TCC2 0
  (nderiv_polynomial_TCC2-1 nil 3260944938 ("" (grind) nil nil) nil shostak
   (nderiv_polynomial subtype "polynomial_deriv.n"
    "{i_1: naturalnumbers.nat | reals.<=(i_1, (number_fields.+)(polynomial_deriv.i, polynomial_deriv.n))}")))
 (nderiv_polynomial_TCC3 0
  (nderiv_polynomial_TCC3-1 nil 3260944949 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak
   (nderiv_polynomial subtype
    "(number_fields.-)(polynomial_deriv.m, polynomial_deriv.n)" "nat")))
 (nderiv_polynomial 0
  (nderiv_polynomial-1 nil 3261818860
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (assert)
        (("1" (expand "nderiv")
          (("1"
            (lemma "extensionality"
             ("f" "b!1" "g" "LAMBDA (i: nat): b!1(i) * C(i, 0)"))
            (("1" (split -1)
              (("1" (replace -1 1 rl) (("1" (propax) nil nil)) nil)
               ("2" (hide 2)
                (("2" (skolem 1 ("x"))
                  (("2" (rewrite "C_0") (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("j"))
      (("2" (flatten)
        (("2" (skolem 1 ("b" "m"))
          (("2" (expand "nderiv" 1)
            (("2" (lemma "deriv_polynomial" ("a" "b" "n" "m"))
              (("2" (replace -1 1)
                (("2" (case "m=0")
                  (("1" (hide -2)
                    (("1" (assert)
                      (("1" (inst - "LAMBDA (i:nat):0" "0")
                        (("1" (case "j=0")
                          (("1" (expand "nderiv" 1) (("1" (assert) nil nil))
                            nil)
                           ("2" (assert)
                            (("2" (expand "polynomial" -2)
                              (("2" (expand "sigma")
                                (("2" (expand "sigma")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (hide -1)
                      (("2"
                        (inst - "LAMBDA (i: nat): b(1 + i) + i * b(1 + i)"
                         "m - 1")
                        (("2" (replace -1 2)
                          (("2" (hide -1)
                            (("2" (case "1+j> m")
                              (("1" (assert) nil nil)
                               ("2" (assert)
                                (("2"
                                  (lemma "extensionality"
                                   ("f" "LAMBDA (i_1: nat):
                         factorial(j) * b(1 + i_1 + j) * C(i_1 + j, j) +
                          i_1 * factorial(j) * b(1 + i_1 + j) * C(i_1 + j, j)
                          + factorial(j) * b(1 + i_1 + j) * C(i_1 + j, j) * j"
                                    "g" "LAMBDA (i: nat):
                          factorial(1 + j) * b(1 + i + j) * C(1 + i + j,1+j)"))
                                  (("2" (split -1)
                                    (("1" (replace -1 3)
                                      (("1" (propax) nil nil)) nil)
                                     ("2" (hide 4)
                                      (("2"
                                        (skolem 1 ("i"))
                                        (("2"
                                          (name-replace "K1" "b(1 + i + j)")
                                          (("2"
                                            (expand "factorial" 1 4)
                                            (("2"
                                              (name-replace
                                               "K2"
                                               "factorial(j)")
                                              (("2"
                                                (case "i=0")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (rewrite "C_n")
                                                    (("1"
                                                      (rewrite "C_n")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "C_k_plus_1"
                                                   ("n" "i+j" "k" "j"))
                                                  (("1"
                                                    (lemma
                                                     "C_n_plus_1"
                                                     ("n" "i+j" "k" "j+1"))
                                                    (("1"
                                                      (replace -1 2)
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2)
      (("4" (lemma "derivable_n_times_polynomial")
        (("4" (skosimp*) (("4" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (derivable_n_times? def-decl "bool" nth_derivatives nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nderiv_fun type-eq-decl nil nth_derivatives nil)
    (nderiv def-decl "[T -> real]" nth_derivatives nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (C const-decl "posnat" binomial reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (factorial def-decl "posnat" factorial ints)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (factorial_0 formula-decl nil factorial ints)
    (extensionality formula-decl nil functions nil)
    (C_0 formula-decl nil binomial reals)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (sigma def-decl "real" sigma reals)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (C_n formula-decl nil binomial reals)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (C_k_plus_1 formula-decl nil binomial reals)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (C_n_plus_1 formula-decl nil binomial reals)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (deriv_polynomial formula-decl nil polynomial_deriv nil)
    (derivable_n_times_polynomial formula-decl nil polynomial_deriv nil))
   shostak)))


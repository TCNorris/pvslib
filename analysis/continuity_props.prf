(continuity_props
 (continuity_limit 0
  (continuity_limit-1 nil 3473169490
   ("" (skosimp*)
    (("" (expand "continuous?")
      (("" (expand "convergence")
        (("" (skosimp*)
          (("" (expand "o ")
            (("" (inst -2 "epsilon!1")
              (("" (skosimp*)
                (("" (inst -1 "delta!1")
                  (("" (skosimp*)
                    (("" (inst 1 "n!1")
                      (("" (skosimp)
                        (("" (inst?)
                          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (T_pred const-decl "[real -> boolean]" continuity_props nil)
    (T formal-subtype-decl nil continuity_props nil)
    (sequence type-eq-decl nil sequences nil)
    (O const-decl "T3" function_props nil)
    (convergence const-decl "bool" convergence_sequences nil))
   nil))
 (continuity_accumulation 0
  (continuity_accumulation-1 nil 3473169490
   ("" (skosimp*)
    (("" (expand "accumulation")
      (("" (expand "o ")
        (("" (skosimp*)
          (("" (expand "continuous?")
            (("" (inst -2 "epsilon!1")
              (("" (skosimp*)
                (("" (inst - "delta!1" "n!1")
                  (("" (skosimp)
                    (("" (inst - "u!1(i!1)")
                      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (accumulation const-decl "bool" convergence_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (T formal-subtype-decl nil continuity_props nil)
    (T_pred const-decl "[real -> boolean]" continuity_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (continuous? const-decl "bool" continuous_functions nil)
    (O const-decl "T3" function_props nil))
   nil)))


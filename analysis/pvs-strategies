(defparameter *derivable-rews* '("derivable_id_lam"
				 "derivable_const_lam"
				 "derivable_add_lam"
				 "derivable_scal1_lam"
				 "derivable_scal2_lam"
				 "derivable_mult_lam"
				 "derivable_pow_lam"
				 "derivable_neg_lam"
				 "derivable_sub_lam"
				 "derivable_sq_lam"
				 "derivable_scald1_lam"
				 "derivable_scald2_lam"
				 "derivable_div_lam"))

(defparameter *deriv-rews* '("deriv_id_lam"
			     "deriv_const_lam"
			     "deriv_add_lam"
			     "deriv_scal1_lam"
			     "deriv_scal2_lam"
			     "deriv_mult_lam"
			     "deriv_pow_lam"
			     "deriv_neg_lam"
			     "deriv_sub_lam"
			     "deriv_sq_lam"
			     "deriv_scald1_lam"
			     "deriv_scald2_lam"
			     "deriv_div_lam"))

(defparameter *derivable-ops* '("o"
				"real_fun_ops.+"
				"real_fun_ops.-"
				"real_fun_ops.*"
				"real_fun_ops./"
				"real_fun_ops.inv"))

(defhelper derivable__ (fnum names rws)
  (let ((ops   *derivable-ops*)
	(qfnum (list 'quote fnum))
	(expr  (extra-get-formula fnum))
	(deriv (is-function-expr expr '("derivable?")))
	(name  (when (and deriv (is-const-decl-expr (argument expr)))
		 (expr2str (argument expr))))
	(expnd (unless (member name names :test #'equal)
		 name)))
    (when deriv
      (when expnd (expand expnd fnum))
      (mapstep@ #'(lambda(x)`(expand ,x ,qfnum)) ops)
      (try (rewrites rws fnum)
	   (derivable__$ 1 names rws)
	   (try (rewrite "comp_derivable_fun" fnum)
		(derivable__$ 1 names rws)
		(skip)))))
  "Internal strategy. DO NOT USE, use derivable instead"
  "")

(defstep derivable (&optional fnum use)
  (let ((nqn   (no-qualified-name "analysis@strategies.AnalysisStrategies__"))
	(names (append (enlist-it use) (list "sin" "cos" "exp")))
	(rws   (append *derivable-rews*
		       (mapcar #'(lambda (x) (format nil "derivable_~a" x)) names))))
    (if nqn 
	(printf "This strategy requires theory ~a to be imported in the current context" nqn)
      (let ((fn   (if fnum (extra-get-fnum fnum)
		    (extra-get-fnum '(? + "derivable?"))))
	    (expr (and fn (> fn 0) (extra-get-formula fn))))
	(if (not (is-function-expr expr '("derivable?")))
	    (printf "Formula of the form derivable?(...) must appear in the consequent")
	  (derivable__$ fn names rws)))))
  "Discharges a formula of the form derivable?(f) in the consequent, where f
is a function of type [real->real]. If FNUM is not provided, it tries to
discharge the first formula derivable?(f) occurring in the consequent. USE is a list
of function names appearing in f that will not be expanded by the strategy. For every NAME in
USE, the strategy assumes the existence of a lemma derivable_NAME that proves
derivable?(NAME)"
  "Discharging derivable?(f)~@[ in ~a~]")

(defstrat differentiable (&optional fnum use)
  (let ((stp (cons 'derivable (append (when fnum (list fnum)) (when use (list ':use use))))))
    stp)
  "Same as derivable")

(defhelper deriv__ (fnum names rws &optional fun)
  (let ((ops   *derivable-ops*)
	(qfnum (list 'quote fnum))
	(expr  (or fun (extra-get-expr `(~ ,fnum "deriv(%1)"))))
	(name  (when (is-const-decl-expr expr) (expr2str expr)))
	(expnd (unless (member name names :test #'equal)
		 name)))
    (when expr
      (when expnd (expand expnd fnum))
      (mapstep@ #'(lambda(x)`(expand ,x ,qfnum)) ops)
      (try-branch
       (rewrites rws fnum)
       ((then (beta fnum) (real-props fnum) (deriv__$ fnum names rws))
	(derivable))
       (try-branch
	(rewrite "chain_rule" fnum)
	((then (expand "*" fnum) (deriv__$ fnum names rws))
	 (derivable))
	(skip)))))
  "Internal strategy. DO NOT USE, use deriv instead"
  "")

(defstep deriv (&optional f (fnums *) use)
  (let ((nqn (no-qualified-name "analysis@strategies.AnalysisStrategies__"))
	(names (append (enlist-it use) (list "sin" "cos" "exp")))
	(rws   (append *deriv-rews*
		       (mapcar #'(lambda (x) (format nil "derivative_~a" x)) names))))
    (if nqn
	(printf "This strategy requires theory ~a to be imported in the current context" nqn)
      (let ((fun   (if f (extra-get-expr f)
		     (extra-get-expr `(~ * "deriv(%1)"))))
	    (drvbl (format nil "derivable?(~a)" fun))
	    (drv   (format nil "deriv(~a)" fun)))
	(if (not fun)
	    (printf "Formula of the form deriv(...) must appear in the sequent")
	  (with-fresh-labels
	   ((fnum!) (fnums! fnums))
	   (spread
	    (with-tccs (case drvbl))
	    ((with-fresh-names@
	      ((d_))
	      (name-label d_ drv :label fnum! :dir rl)
	      (deriv__$ fnum! names rws fun)
	      (let ((fns (extra-get-fnums fnums!)))
		(when fns
		  (replace fnum! fns)
		  (beta fns)
		  (rewrites ("expt_x0" "expt_x1") fns))))
	     (derivable))))))))
  "Computes the derivative of F and introduces the hypotheses derivable?(F) and deriv(F) = F', 
where F is a function of type [real->real]. The derivative is replaced in the formulas in FNUMS. 
If F is not provided, it looks for the first one occurring in formula of the form deriv(F).  
USE is a list of function names appearing in F that will not be expanded by the strategy. For every 
NAME in USE, the strategy assumes the existence of a lemma derivable_NAME that proves
derivable?(NAME) and lemma derivative_NAME that provides the derivative of NAME."
  "Computing deriv~@[(~a)~]")

(defstrat derivative (&optional f (fnums *) use)
  (let ((stp (cons 'deriv (append (when f (list f))
				  (unless (equal fnums '*) (list ':fnums fnums))
				  (when use (list ':use use))))))
    stp)
  "Same as deriv")

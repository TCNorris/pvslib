(metric_space_real_fun
 (IMP_continuity_ms_def_TCC1 0
  (IMP_continuity_ms_def_TCC1-1 nil 3462120666
   ("" (lemma "fullset_metric_space") (("" (propax) nil nil)) nil)
   ((fullset_metric_space formula-decl nil metric_space_real_fun nil)) nil
   (IMP_continuity_ms_def assuming
    "continuity_ms_def[metric_space_real_fun.T, metric_space_real_fun.d, real, real_metric_space.real_dist].continuity_ms_def"
    "fullset_metric_space1: ASSUMPTION metric_spaces_def[continuity_ms_def.T1, continuity_ms_def.d1].metric_space?(sets[continuity_ms_def.T1].fullset)")))
 (IMP_continuity_ms_def_TCC2 0
  (IMP_continuity_ms_def_TCC2-1 nil 3462120666
   ("" (lemma "real_metric_space") (("" (inst - "fullset[real]") nil nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)
    (real_metric_space formula-decl nil real_metric_space nil))
   nil
   (IMP_continuity_ms_def assuming
    "continuity_ms_def[metric_space_real_fun.T, metric_space_real_fun.d, real, real_metric_space.real_dist].continuity_ms_def"
    "fullset_metric_space2: ASSUMPTION metric_spaces_def[continuity_ms_def.T2, continuity_ms_def.d2].metric_space?(sets[continuity_ms_def.T2].fullset)")))
 (scal_continuous 0
  (scal_continuous-2 "" 3790090757
   ("" (skosimp*)
    (("" (expand "continuous?")
      (("" (skosimp*)
        (("" (inst - "x!1")
          (("" (expand "continuous_at?")
            (("" (skosimp*)
              (("" (case "c!1 = 0")
                (("1" (grind) nil nil)
                 ("2" (inst - "epsilon!1/abs(c!1)")
                  (("1" (skosimp*)
                    (("1" (inst + "delta!1")
                      (("1" (skosimp*)
                        (("1" (inst - "y!1")
                          (("1" (expand "member")
                            (("1" (expand "ball")
                              (("1" (expand "*")
                                (("1" (expand "real_dist")
                                  (("1" (prop)
                                    (("1" (cross-mult -1)
                                      (("1"
                                        (lemma "abs_mult")
                                        (("1"
                                          (inst - "f!1(x!1) - f!1(y!1)" "c!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (prop)
                    (("1" (cross-mult 1) nil nil)
                     ("2" (cross-mult 1) nil nil))
                    nil)
                   ("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" continuity_ms_def nil)
    (T formal-nonempty-type-decl nil metric_space_real_fun nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (real_dist const-decl "nnreal" real_metric_space nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (member const-decl "bool" sets nil)
    (ball const-decl "set[T]" metric_spaces nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (c!1 skolem-const-decl "real" metric_space_real_fun nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (epsilon!1 skolem-const-decl "posreal" metric_space_real_fun nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs_nat formula-decl nil abs_lems reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (abs_mult formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (continuous_at? const-decl "bool" continuity_ms_def nil))
   shostak)
  (scal_continuous-1 nil 3462120679
   ("" (skosimp*)
    (("" (expand "continuous?")
      (("" (skosimp*)
        (("" (inst - "x!1")
          (("" (expand "continuous_at?")
            (("" (skosimp*)
              (("" (case "c!1 = 0")
                (("1" (grind) nil nil)
                 ("2" (inst - "epsilon!1/abs(c!1)")
                  (("1" (skosimp*)
                    (("1" (inst + "delta!1")
                      (("1" (skosimp*)
                        (("1" (inst - "y!1")
                          (("1" (expand "member")
                            (("1" (expand "ball")
                              (("1" (expand "*")
                                (("1" (expand "real_dist")
                                  (("1" (prop)
                                    (("1" (cross-mult -1)
                                      (("1"
                                        (lemma "abs_mult")
                                        (("1"
                                          (inst - "f!1(x!1) - f!1(y!1)" "c!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (prop)
                    (("1" (cross-mult 1) (("1" (assert) nil nil)) nil)
                     ("2" (cross-mult 1) (("2" (assert) nil nil)) nil))
                    nil)
                   ("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs_nat formula-decl nil abs_lems reals)
    (ball const-decl "set[T]" metric_spaces nil)
    (real_dist const-decl "nnreal" real_metric_space nil))
   shostak))
 (neg_continuous 0
  (neg_continuous-1 nil 3462121435
   ("" (skosimp*)
    (("" (lemma "scal_continuous")
      (("" (inst - "S!1" "-1" "f!1") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((scal_continuous formula-decl nil metric_space_real_fun nil)
    (ball const-decl "set[T]" metric_spaces nil)
    (member const-decl "bool" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_dist const-decl "nnreal" real_metric_space nil)
    (d formal-const-decl "[T, T -> nnreal]" metric_space_real_fun nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (continuous_at? const-decl "bool" continuity_ms_def nil)
    (continuous? const-decl "bool" continuity_ms_def nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil metric_space_real_fun nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (sum_continuous 0
  (sum_continuous-1 nil 3462121520
   ("" (skosimp*)
    (("" (expand "continuous?")
      (("" (skosimp*)
        (("" (inst - "x!1")
          (("" (inst - "x!1")
            (("" (expand "continuous_at?")
              (("" (skosimp*)
                (("" (inst - "epsilon!1/2")
                  (("" (inst - "epsilon!1/2")
                    (("" (skosimp*)
                      (("" (inst + "min(delta!1,delta!2)")
                        (("" (skosimp*)
                          (("" (inst - "y!1")
                            (("" (inst - "y!1")
                              (("" (expand "member")
                                (("" (expand "ball")
                                  (("" (expand "real_dist")
                                    (("" (expand "+")
                                      ((""
                                        (lemma "triangle")
                                        ((""
                                          (inst
                                           -
                                           "f!1(x!1) - f!1(y!1)"
                                           "g!1(x!1) - g!1(y!1)")
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" continuity_ms_def nil)
    (T formal-nonempty-type-decl nil metric_space_real_fun nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (continuous_at? const-decl "bool" continuity_ms_def nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (ball const-decl "set[T]" metric_spaces nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (triangle formula-decl nil real_props nil)
    (real_dist const-decl "nnreal" real_metric_space nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil))
   shostak))
 (diff_continuous 0
  (diff_continuous-2 nil 3462121763
   ("" (skosimp*)
    (("" (expand "continuous?")
      (("" (skosimp*)
        (("" (inst - "x!1")
          (("" (inst - "x!1")
            (("" (expand "continuous_at?")
              (("" (skosimp*)
                (("" (inst - "epsilon!1/2")
                  (("" (inst - "epsilon!1/2")
                    (("" (skosimp*)
                      (("" (inst + "min(delta!1,delta!2)")
                        (("" (skosimp*)
                          (("" (inst - "y!1")
                            (("" (inst - "y!1")
                              (("" (expand "member")
                                (("" (expand "ball")
                                  (("" (expand "-")
                                    (("" (expand "real_dist")
                                      ((""
                                        (lemma "triangle")
                                        ((""
                                          (inst
                                           -
                                           "f!1(x!1) - f!1(y!1)"
                                           "-g!1(x!1) + g!1(y!1)")
                                          (("" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" continuity_ms_def nil)
    (T formal-nonempty-type-decl nil metric_space_real_fun nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (continuous_at? const-decl "bool" continuity_ms_def nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (ball const-decl "set[T]" metric_spaces nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_dist const-decl "nnreal" real_metric_space nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (triangle formula-decl nil real_props nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (member const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil))
   nil)
  (diff_continuous-1 nil 3462121727
   (";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
    (skosimp*)
    ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
      (expand "continuous?")
      ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
        (skosimp*)
        ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
          (inst - "x!1")
          ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
            (inst - "x!1")
            ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
              (expand "continuous_at?")
              ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
                (skosimp*)
                ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
                  (inst - "epsilon!1/2")
                  ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
                    (inst - "epsilon!1/2")
                    ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
                      (skosimp*)
                      ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
                        (inst + "min(delta!1,delta!2)")
                        ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
                          (skosimp*)
                          ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
                            (inst - "y!1")
                            ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
                              (inst - "y!1")
                              ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
                                (expand "member")
                                ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
                                  (expand "ball")
                                  ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
                                    (expand "real_dist")
                                    ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
                                      (expand "+")
                                      ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
                                        (lemma "triangle")
                                        ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
                                          (inst
                                           -
                                           "f!1(x!1) - f!1(y!1)"
                                           "g!1(x!1) - g!1(y!1)")
                                          ((";;; Proof sum_continuous-1 for formula metric_space_real_fun.sum_continuous"
                                            (assert)
                                            nil))))))))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   nil nil))
 (prod_continuous 0
  (prod_continuous-2 nil 3462270340
   ("" (skosimp*)
    (("" (expand "continuous?")
      (("" (skosimp*)
        (("" (inst - "x!1")
          (("" (inst - "x!1")
            (("" (expand "continuous_at?")
              (("" (skosimp*)
                (("" (case "g!1(x!1) = 0")
                  (("1" (inst - "1")
                    (("1" (inst - "epsilon!1/(abs(f!1(x!1)) + 1)")
                      (("1" (skosimp*)
                        (("1" (inst + "min(delta!1,delta!2)")
                          (("1" (skosimp*)
                            (("1" (inst - "y!1")
                              (("1" (inst - "y!1")
                                (("1" (expand "member")
                                  (("1" (expand "ball")
                                    (("1" (expand "*")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "real_dist")
                                          (("1"
                                            (lemma "abs_mult")
                                            (("1"
                                              (inst
                                               -
                                               "-1"
                                               "f!1(y!1)*g!1(y!1)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (expand "abs" 1 1)
                                                  (("1"
                                                    (field)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (lemma "triangle")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "f!1(x!1) - f!1(y!1)"
                                                           "- f!1(x!1)")
                                                          (("1"
                                                            (case
                                                             "abs(f!1(x!1) - f!1(y!1) + -f!1(x!1)) = abs(f!1(y!1))")
                                                            (("1"
                                                              (replace -1)
                                                              (("1"
                                                                (hide -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (cross-mult
                                                                     -4)
                                                                    (("1"
                                                                      (case
                                                                       "abs(-1 * g!1(y!1)) = abs(g!1(y!1))")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (case
                                                                             "abs(-1 * f!1(x!1)) = abs(f!1(x!1))")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (add-formulas
                                                                                   -1
                                                                                   -3)
                                                                                  (("1"
                                                                                    (both-sides
                                                                                     "-"
                                                                                     "abs(f!1(x!1) - f!1(y!1))"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         -1
                                                                                         "abs(g!1(y!1))")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1))
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (label "fcont" -1)
                    (("2" (label "gcont" -2)
                      (("2" (name "ep1" "epsilon!1/(2*abs(g!1(x!1)))")
                        (("1"
                          (name "ep2" "epsilon!1/(2*(abs(f!1(x!1)) + ep1))")
                          (("1" (label "ep1name" -2)
                            (("1" (label "ep2name" -1)
                              (("1" (inst - "ep1")
                                (("1" (inst - "ep2")
                                  (("1" (skosimp*)
                                    (("1" (inst + "min(delta!1,delta!2)")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst - "y!1")
                                          (("1"
                                            (inst - "y!1")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (expand "ball")
                                                (("1"
                                                  (copy "fcont")
                                                  (("1"
                                                    (label "fct2" -1)
                                                    (("1"
                                                      (hide "fct2")
                                                      (("1"
                                                        (replace
                                                         "ep1name"
                                                         -
                                                         rl)
                                                        (("1"
                                                          (replace
                                                           "ep2name"
                                                           -
                                                           rl)
                                                          (("1"
                                                            (label
                                                             "mindelta"
                                                             -5)
                                                            (("1"
                                                              (expand
                                                               "real_dist")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (cross-mult
                                                                   -2)
                                                                  (("1"
                                                                    (field -2)
                                                                    (("1"
                                                                      (expand
                                                                       "*")
                                                                      (("1"
                                                                        (lemma
                                                                         "triangle")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "f!1(x!1) * g!1(x!1) - f!1(y!1) * g!1(x!1)"
                                                                           " f!1(y!1) * g!1(x!1) -
                                                                                                                                                                                                                       f!1(y!1) * g!1(y!1)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "abs_mult")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "f!1(x!1)-f!1(y!1)"
                                                                                 "g!1(x!1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "abs_mult")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "f!1(y!1)"
                                                                                         "g!1(x!1) - g!1(y!1)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   "ep1name")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     "ep2name")
                                                                                                    (("1"
                                                                                                      (label
                                                                                                       "finaltop"
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         "mindelta")
                                                                                                        (("1"
                                                                                                          (reveal
                                                                                                           "ep1name")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "abs(f!1(y!1)) <= abs(f!1(x!1)) + ep1")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               "ep1name"
                                                                                                               -
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 "ep1name")
                                                                                                                (("1"
                                                                                                                  (name
                                                                                                                   "A"
                                                                                                                   "f!1(x!1)")
                                                                                                                  (("1"
                                                                                                                    (name
                                                                                                                     "B"
                                                                                                                     "f!1(y!1)")
                                                                                                                    (("1"
                                                                                                                      (name
                                                                                                                       "X"
                                                                                                                       "g!1(x!1)")
                                                                                                                      (("1"
                                                                                                                        (name
                                                                                                                         "Y"
                                                                                                                         "g!1(y!1)")
                                                                                                                        (("1"
                                                                                                                          (label
                                                                                                                           "yname"
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (label
                                                                                                                             "xname"
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (label
                                                                                                                               "bname"
                                                                                                                               -3)
                                                                                                                              (("1"
                                                                                                                                (label
                                                                                                                                 "aname"
                                                                                                                                 -4)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   "aname")
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     "bname")
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       "xname")
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         "yname")
                                                                                                                                        (("1"
                                                                                                                                          (hide
                                                                                                                                           "aname")
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             "bname")
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               "xname")
                                                                                                                                              (("1"
                                                                                                                                                (hide
                                                                                                                                                 "yname")
                                                                                                                                                (("1"
                                                                                                                                                  (copy
                                                                                                                                                   "gcont")
                                                                                                                                                  (("1"
                                                                                                                                                    (name
                                                                                                                                                     "myvar"
                                                                                                                                                     "abs(A) + epsilon!1 / (2 * abs(X))")
                                                                                                                                                    (("1"
                                                                                                                                                      (label
                                                                                                                                                       "namemyvar"
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         "namemyvar")
                                                                                                                                                        (("1"
                                                                                                                                                          (copy
                                                                                                                                                           "namemyvar")
                                                                                                                                                          (("1"
                                                                                                                                                            (label
                                                                                                                                                             "nmv2"
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "2=2")
                                                                                                                                                              (("1"
                                                                                                                                                                (mult-eq
                                                                                                                                                                 -1
                                                                                                                                                                 -2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (hide
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         "nmv2")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (mult-ineq
                                                                                                                                                                           -2
                                                                                                                                                                           -3)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (field
                                                                                                                                                                             -1)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (prop)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (case
                                                                                                                                                                               "myvar > 0")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (grind)
                                                                                                                                                                                nil
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (grind)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (grind)
                                                                                                                                                                              nil
                                                                                                                                                                              nil)
                                                                                                                                                                             ("3"
                                                                                                                                                                              (grind)
                                                                                                                                                                              nil
                                                                                                                                                                              nil)
                                                                                                                                                                             ("4"
                                                                                                                                                                              (grind)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (propax)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (reveal
                                                                                                               "fct2")
                                                                                                              (("2"
                                                                                                                (reveal
                                                                                                                 "mindelta")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "real_dist")
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "triangle")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "-f!1(x!1)"
                                                                                                                         "f!1(x!1)-f!1(y!1)")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             "mindelta")
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but ("ep2name" "ep1name" 1 2))
                                    (("2" (lemma "pos_div_lt")
                                      (("2"
                                        (inst
                                         -
                                         "(2 * (abs(f!1(x!1)) + ep1))"
                                         "epsilon!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "pos_div_lt")
                                            (("2"
                                              (inst
                                               -
                                               "(2 * abs(g!1(x!1)))"
                                               "epsilon!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but ("ep2name" "ep1name" 1 2))
                                  (("2" (lemma "pos_div_lt")
                                    (("2" (copy -1)
                                      (("2"
                                        (inst
                                         -
                                         "(2 * (abs(f!1(x!1)) + ep1))"
                                         "epsilon!1")
                                        (("2"
                                          (inst
                                           -
                                           "(2 * abs(g!1(x!1)))"
                                           "epsilon!1")
                                          (("2"
                                            (replace "ep2name")
                                            (("2"
                                              (replace "ep1name")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "pos_div_lt")
                            (("2" (inst - "(2 * abs(g!1(x!1)))" "epsilon!1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" continuity_ms_def nil)
    (T formal-nonempty-type-decl nil metric_space_real_fun nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (continuous_at? const-decl "bool" continuity_ms_def nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (pos_div_lt formula-decl nil real_props nil)
    (x!1 skolem-const-decl "(S!1)" metric_space_real_fun nil)
    (S!1 skolem-const-decl "set[T]" metric_space_real_fun nil)
    (g!1 skolem-const-decl "[T -> real]" metric_space_real_fun nil)
    (abs_nat formula-decl nil abs_lems reals)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (ep2 skolem-const-decl "nzreal" metric_space_real_fun nil)
    (ep1 skolem-const-decl "nzreal" metric_space_real_fun nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (ball const-decl "set[T]" metric_spaces nil)
    (abs_mult formula-decl nil real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (triangle formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (< const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (both_sides_plus_lt1 formula-decl nil real_props nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (both_sides_minus_lt1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_dist const-decl "nnreal" real_metric_space nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (member const-decl "bool" sets nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   nil)
  (prod_continuous-1 nil 3462270324 ("" (postpone) nil nil) nil shostak))
 (abs_comp_cont 0
  (abs_comp_cont-1 nil 3462122007
   ("" (skosimp*)
    (("" (expand "continuous?")
      (("" (skosimp*)
        (("" (inst - "x!1")
          (("" (expand "continuous_at?")
            (("" (skosimp*)
              (("" (inst - "epsilon!1")
                (("" (skosimp*)
                  (("" (inst + "delta!1")
                    (("" (skosimp*)
                      (("" (inst - "y!1")
                        (("" (expand "member")
                          (("" (expand "ball")
                            (("" (expand "real_dist") (("" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" continuity_ms_def nil)
    (T formal-nonempty-type-decl nil metric_space_real_fun nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_dist const-decl "nnreal" real_metric_space nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (ball const-decl "set[T]" metric_spaces nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (continuous_at? const-decl "bool" continuity_ms_def nil))
   shostak)))


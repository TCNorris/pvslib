(csequence_finseq
 (from_finseq_TCC1 0
  (from_finseq_TCC1-1 nil 3513684461 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (from_finseq subtype "0" "below[fs`length]")))
 (from_finseq_TCC2 0
  (from_finseq_TCC2-1 nil 3513684461 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (from_finseq subtype "(number_fields.-)(csequence_finseq.fs`length, 1)"
    "nat")))
 (from_finseq_TCC3 0
  (from_finseq_TCC3-1 nil 3513684461 ("" (subtype-tcc) nil nil) nil nil
   (from_finseq subtype "(number_fields.+)(csequence_finseq.x, 1)"
    "below[fs`length]")))
 (from_finseq_TCC4 0
  (from_finseq_TCC4-1 nil 3513684461 ("" (termination-tcc) nil nil) nil nil
   (from_finseq termination
    "csequence_finseq.from_finseq((# length := (number_fields.-)(csequence_finseq.fs`length, 1), seq := LAMBDA (x: nat_types[(number_fields.-)(csequence_finseq.fs`length, 1)].below): csequence_finseq.fs`seq((number_fields.+)(x, 1)) #))"
    "nil")))
 (from_finseq_TCC5 0
  (from_finseq_TCC5-1 nil 3513684461
   ("" (expand "is_finite") (("" (propax) nil nil)) nil)
   ((is_finite inductive-decl "bool" csequence_props nil)) nil
   (from_finseq subtype
    "csequence_codt[csequence_finseq.T].add(csequence_finseq.fs`seq(0), csequence_finseq.from_finseq((# length := (number_fields.-)(csequence_finseq.fs`length, 1), seq := LAMBDA (x: nat_types[(number_fields.-)(csequence_finseq.fs`length, 1)].below): csequence_finseq.fs`seq((number_fields.+)(x, 1)) #)))"
    "finite_csequence[T]")))
 (from_finseq_length 0
  (from_finseq_length-1 nil 3513684514
   ("" (measure-induct+ "fs`length" ("fs"))
    (("" (expand "from_finseq" +)
      (("" (expand "length" +)
        (("" (lift-if)
          (("" (ground)
            ((""
              (inst -
               "(# length := x!1`length - 1, seq := LAMBDA (x: below[x!1`length - 1]): x!1`seq(1 + x) #)")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (from_finseq def-decl "finite_csequence" csequence_finseq nil)
    (length def-decl "{n | has_length(fseq, n)}" csequence_length nil)
    (is_finite inductive-decl "bool" csequence_props nil)
    (has_length def-decl "bool" csequence_props nil)
    (csequence type-decl nil csequence_codt nil)
    (finite_csequence nonempty-type-eq-decl nil csequence_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil csequence_finseq nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (from_finseq_index 0
  (from_finseq_index-1 nil 3513684839
   ("" (skolem!)
    (("" (rewrite "index?_finite")
      (("" (rewrite "from_finseq_length") (("" (prop) nil nil)) nil)) nil))
    nil)
   ((index?_finite formula-decl nil csequence_nth nil)
    (csequence type-decl nil csequence_codt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (is_finite inductive-decl "bool" csequence_props nil)
    (finite_csequence nonempty-type-eq-decl nil csequence_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (from_finseq def-decl "finite_csequence" csequence_finseq nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-type-decl nil csequence_finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (from_finseq_length formula-decl nil csequence_finseq nil))
   shostak))
 (from_finseq_nth_TCC1 0
  (from_finseq_nth_TCC1-1 nil 3513684461
   ("" (skolem!) (("" (rewrite "from_finseq_index") nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (from_finseq_index formula-decl nil csequence_finseq nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil csequence_finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil))
   nil
   (from_finseq_nth subtype "csequence_finseq.n"
    "csequence_nth[csequence_finseq.T].indexes(csequence_finseq.from_finseq(csequence_finseq.fs))")))
 (from_finseq_nth 0
  (from_finseq_nth-1 nil 3513684882
   ("" (measure-induct+ "n" ("fs" "n"))
    (("1" (expand "from_finseq" +)
      (("1" (expand "nth" +)
        (("1" (lift-if)
          (("1" (ground)
            (("1"
              (inst -
               "(# length := x!1`length - 1, seq := LAMBDA (x: below[x!1`length - 1]): x!1`seq(1 + x) #)"
               "x!2 - 1")
              (("1" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "from_finseq_nth_TCC1") nil nil)
     ("3" (use "from_finseq_nth_TCC1") nil nil)
     ("4" (use "from_finseq_nth_TCC1") nil nil)
     ("5" (use "from_finseq_nth_TCC1") nil nil))
    nil)
   ((from_finseq_nth_TCC1 subtype-tcc nil csequence_finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" csequence_nth nil)
    (indexes type-eq-decl nil csequence_nth nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (csequence type-decl nil csequence_codt nil)
    (index? def-decl "bool" csequence_nth nil)
    (is_finite inductive-decl "bool" csequence_props nil)
    (finite_csequence nonempty-type-eq-decl nil csequence_props nil)
    (from_finseq def-decl "finite_csequence" csequence_finseq nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil csequence_finseq nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (to_finseq_TCC1 0
  (to_finseq_TCC1-1 nil 3513684461
   ("" (skolem!) (("" (rewrite "index?_finite") nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (index?_finite formula-decl nil csequence_nth nil)
    (csequence type-decl nil csequence_codt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (is_finite inductive-decl "bool" csequence_props nil)
    (finite_csequence nonempty-type-eq-decl nil csequence_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (has_length def-decl "bool" csequence_props nil)
    (length def-decl "{n | has_length(fseq, n)}" csequence_length nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil csequence_finseq nil))
   nil
   (to_finseq subtype "csequence_finseq.x"
    "csequence_nth[csequence_finseq.T].indexes(csequence_finseq.fseq)")))
 (to_finseq_length 0
  (to_finseq_length-1 nil 3513684985
   ("" (expand "to_finseq") (("" (propax) nil nil)) nil)
   ((to_finseq const-decl "finseq" csequence_finseq nil)) shostak))
 (to_finseq_index 0
  (to_finseq_index-1 nil 3513684996
   ("" (skolem!)
    (("" (expand "to_finseq")
      (("" (rewrite "index?_finite") (("" (prop) nil nil)) nil)) nil))
    nil)
   ((to_finseq const-decl "finseq" csequence_finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil csequence_finseq nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_csequence nonempty-type-eq-decl nil csequence_props nil)
    (is_finite inductive-decl "bool" csequence_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (csequence type-decl nil csequence_codt nil)
    (index?_finite formula-decl nil csequence_nth nil))
   shostak))
 (to_finseq_nth_TCC1 0
  (to_finseq_nth_TCC1-1 nil 3513684461
   ("" (skolem-typepred)
    (("" (rewrite "index?_finite") (("" (rewrite "to_finseq_length") nil nil))
      nil))
    nil)
   ((index?_finite formula-decl nil csequence_nth nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (to_finseq_length formula-decl nil csequence_finseq nil)
    (indexes type-eq-decl nil csequence_nth nil)
    (index? def-decl "bool" csequence_nth nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_csequence nonempty-type-eq-decl nil csequence_props nil)
    (is_finite inductive-decl "bool" csequence_props nil)
    (csequence type-decl nil csequence_codt nil)
    (T formal-type-decl nil csequence_finseq nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (to_finseq_nth subtype "csequence_finseq.n"
    "below[to_finseq(fseq)`length]")))
 (to_finseq_nth 0
  (to_finseq_nth-1 nil 3513685045
   ("" (expand "to_finseq") (("" (propax) nil nil)) nil)
   ((to_finseq const-decl "finseq" csequence_finseq nil)) shostak))
 (to_from_finseq 0
  (to_from_finseq-1 nil 3513685065
   ("" (auto-rewrite "from_finseq_index")
    (("" (auto-rewrite "from_finseq_length")
      (("" (skolem!)
        (("" (expand "to_finseq")
          (("" (decompose-equality)
            (("1" (decompose-equality)
              (("1" (typepred "x!1")
                (("1" (use "from_finseq_nth") (("1" (assert) nil nil)) nil))
                nil)
               ("2" (skolem-typepred) (("2" (assert) nil nil)) nil))
              nil)
             ("2" (rewrite "length_def" :dir rl) nil nil)
             ("3" (skolem-typepred) (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((to_finseq const-decl "finseq" csequence_finseq nil)
    (length_def formula-decl nil csequence_length nil)
    (from_finseq_nth formula-decl nil csequence_finseq nil)
    (x!1 skolem-const-decl "below[length(from_finseq(fs!1))]" csequence_finseq
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil csequence_finseq nil)
    (csequence type-decl nil csequence_codt nil)
    (has_length def-decl "bool" csequence_props nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (is_finite inductive-decl "bool" csequence_props nil)
    (finite_csequence nonempty-type-eq-decl nil csequence_props nil)
    (from_finseq def-decl "finite_csequence" csequence_finseq nil)
    (< const-decl "bool" reals nil)
    (length def-decl "{n | has_length(fseq, n)}" csequence_length nil)
    (nth def-decl "T" csequence_nth nil)
    (indexes type-eq-decl nil csequence_nth nil)
    (index? def-decl "bool" csequence_nth nil)
    (from_finseq_length formula-decl nil csequence_finseq nil)
    (from_finseq_index formula-decl nil csequence_finseq nil)
    (fs!1 skolem-const-decl "finseq[T]" csequence_finseq nil))
   shostak))
 (from_to_finseq 0
  (from_to_finseq-1 nil 3513685136
   ("" (skolem!)
    (("" (use "nth_extensionality")
      (("" (assert)
        (("" (delete 2)
          (("" (split)
            (("1" (decompose-equality)
              (("1" (rewrite "from_finseq_index")
                (("1" (rewrite "to_finseq_length")
                  (("1" (rewrite "index?_finite") nil nil)) nil))
                nil))
              nil)
             ("2" (skolem-typepred)
              (("2" (rewrite "from_finseq_index")
                (("2" (assert)
                  (("2" (rewrite "from_finseq_nth")
                    (("2" (rewrite "to_finseq_nth") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth_extensionality formula-decl nil csequence_nth nil)
    (T formal-type-decl nil csequence_finseq nil)
    (to_finseq const-decl "finseq" csequence_finseq nil)
    (from_finseq def-decl "finite_csequence" csequence_finseq nil)
    (finite_csequence nonempty-type-eq-decl nil csequence_props nil)
    (is_finite inductive-decl "bool" csequence_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (csequence type-decl nil csequence_codt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (indexes type-eq-decl nil csequence_nth nil)
    (to_finseq_nth formula-decl nil csequence_finseq nil)
    (from_finseq_nth formula-decl nil csequence_finseq nil)
    (< const-decl "bool" reals nil) (index? def-decl "bool" csequence_nth nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (to_finseq_length formula-decl nil csequence_finseq nil)
    (index?_finite formula-decl nil csequence_nth nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (from_finseq_index formula-decl nil csequence_finseq nil))
   shostak)))


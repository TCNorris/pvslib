(csequence_filter_map
 (map_first_p_TCC1 0
  (map_first_p_TCC1-1 nil 3513638068
   ("" (skosimp) (("" (rewrite "map_some") nil nil)) nil)
   ((map_some formula-decl nil csequence_map_props nil)
    (csequence type-decl nil csequence_codt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (T1 formal-type-decl nil csequence_filter_map nil)
    (T2 formal-type-decl nil csequence_filter_map nil))
   nil
   (map_first_p subtype "csequence_filter_map.cseq"
    "(csequence_codt[csequence_filter_map.T1].some(function_props[csequence_filter_map.T1, csequence_filter_map.T2, booleans.bool].o(csequence_filter_map.p, csequence_filter_map.f)))")))
 (map_first_p 0
  (map_first_p-1 nil 3513638645
   ("" (skosimp)
    (("" (use "map_some")
      (("" (assert)
        (("" (lemma "some_induction[T1]")
          ((""
            (inst - "p!1 o f!1"
             "LAMBDA (cseq1: csequence[T1]): some(p!1 o f!1)(cseq1) AND some(p!1)(map(f!1, cseq1)) AND first_p(p!1, map(f!1, cseq1)) = first_p(p!1 o f!1, cseq1)")
            (("" (split)
              (("1" (inst - "cseq!1") (("1" (assert) nil nil)) nil)
               ("2" (delete -1 -2 2)
                (("2" (skosimp)
                  (("2" (smash)
                    (("1" (expand* "o" "first_p" "p_indexes")
                      (("1"
                        (typepred
                         "min({i: indexes[T2](map(f!1, a!1)) | p!1(nth(map(f!1, a!1), i))})")
                        (("1"
                          (typepred
                           "min({i: indexes[T1](a!1) | p!1(f!1(nth(a!1, i)))})")
                          (("1" (inst - 0)
                            (("1" (inst - 0)
                              (("1" (expand "nth" -3 1)
                                (("1" (expand "nth" -6 1)
                                  (("1" (expand "map" -6 1)
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (expand* "map" "index?") nil nil))
                              nil)
                             ("2" (expand "index?" 1) (("2" (propax) nil nil))
                              nil))
                            nil)
                           ("2" (expand* "nonempty?" "empty?" "member")
                            (("2" (inst - 0)
                              (("1" (expand "nth" 1) (("1" (propax) nil nil))
                                nil)
                               ("2" (expand "index?" 1)
                                (("2" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand* "nonempty?" "empty?" "member")
                          (("2" (inst - 0)
                            (("1" (expand "nth" 1)
                              (("1" (expand "map" 1) (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (expand "index?" 1)
                              (("2" (expand "map" 1) (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "first_p_rest[T1]")
                      (("2" (inst-cp - "a!1" "p!1 o f!1")
                        (("2" (inst - "rest(a!1)" "p!1 o f!1")
                          (("2" (lemma "first_p_rest[T2]")
                            (("2" (inst-cp - "map(f!1, a!1)" "p!1")
                              (("2" (inst - "map(f!1, rest(a!1))" "p!1")
                                (("2" (expand "some" (-2 -4))
                                  (("2" (auto-rewrite "map_rest")
                                    (("2" (auto-rewrite "map_empty")
                                      (("2"
                                        (smash)
                                        (("1"
                                          (expand "map" -4)
                                          (("1"
                                            (expand "o" 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "o" -8)
                                          (("2"
                                            (expand "map" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "map" -3)
                                          (("3"
                                            (expand "o" 3)
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (expand "o" -6)
                                          (("4"
                                            (expand "map" 2)
                                            (("4" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand* "o" "map" "some") (("3" (flatten) nil nil))
                      nil)
                     ("4" (expand "some" +)
                      (("4" (lift-if)
                        (("4" (rewrite "map_empty")
                          (("4" (flatten) (("4" (rewrite "map_rest") nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (expand "some") (("5" (propax) nil nil)) nil)
                     ("6" (expand "some" +) (("6" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((map_some formula-decl nil csequence_map_props nil)
    (T1 formal-type-decl nil csequence_filter_map nil)
    (T2 formal-type-decl nil csequence_filter_map nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (csequence type-decl nil csequence_codt nil)
    (some_induction formula-decl nil csequence_codt nil)
    (nonempty_csequence type-eq-decl nil csequence_props nil)
    (first_p_rest formula-decl nil csequence_first_p nil)
    (rest adt-accessor-decl "[(nonempty?) -> csequence]" csequence_codt nil)
    (nonempty? adt-recognizer-decl "[csequence -> boolean]" csequence_codt
               nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (map_rest formula-decl nil csequence_map_props nil)
    (map_empty formula-decl nil csequence_map_props nil)
    (p_indexes const-decl "set[indexes[T](cseq)]" csequence_first_p nil)
    (f!1 skolem-const-decl "[T1 -> T2]" csequence_filter_map nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (a!1 skolem-const-decl "csequence[T1]" csequence_filter_map nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nth def-decl "T" csequence_nth nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat
         nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (first_p const-decl "indexes(cseq)" csequence_first_p nil)
    (indexes type-eq-decl nil csequence_nth nil)
    (index? def-decl "bool" csequence_nth nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (map adt-def-decl "csequence[T1]" csequence_codt_map nil)
    (some inductive-decl "boolean" csequence_codt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (O const-decl "T3" function_props nil)
    (PRED type-eq-decl nil defined_types nil))
   shostak))
 (map_suffix_empty 0
  (map_suffix_empty-1 nil 3513638997
   ("" (auto-rewrite "map_empty")
    (("" (auto-rewrite "map_rest")
      (("" (induct "n")
        (("1" (skolem!) (("1" (expand "suffix") (("1" (assert) nil nil)) nil))
          nil)
         ("2" (skosimp*)
          (("2" (expand "suffix" +)
            (("2" (lift-if)
              (("2" (lift-if)
                (("2" (lift-if)
                  (("2" (ground)
                    (("1" (inst - "f!1" "rest(cseq!1)")
                      (("1" (assert) nil nil)) nil)
                     ("2" (inst - "f!1" "rest(cseq!1)")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rest adt-accessor-decl "[(nonempty?) -> csequence]" csequence_codt nil)
    (nonempty? adt-recognizer-decl "[csequence -> boolean]" csequence_codt
               nil)
    (map_rest formula-decl nil csequence_map_props nil)
    (map_empty formula-decl nil csequence_map_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (map adt-def-decl "csequence[T1]" csequence_codt_map nil)
    (suffix def-decl "(LAMBDA (cseq1: csequence): suffix?(cseq1, cseq))"
     csequence_suffix nil)
    (suffix? inductive-decl "bool" csequence_suffix nil)
    (empty? adt-recognizer-decl "[csequence -> boolean]" csequence_codt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (csequence type-decl nil csequence_codt nil)
    (T2 formal-type-decl nil csequence_filter_map nil)
    (T1 formal-type-decl nil csequence_filter_map nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (map_suffix 0
  (map_suffix-1 nil 3513639065
   ("" (induct "n")
    (("1" (skolem!) (("1" (expand "suffix") (("1" (propax) nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "suffix" +)
        (("2" (lift-if)
          (("2" (lift-if)
            (("2" (lift-if)
              (("2" (rewrite "map_empty")
                (("2" (ground)
                  (("2" (inst - "f!1" "rest(cseq!1)")
                    (("2" (rewrite "map_rest") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_csequence type-eq-decl nil csequence_props nil)
    (map_rest formula-decl nil csequence_map_props nil)
    (nonempty? adt-recognizer-decl "[csequence -> boolean]" csequence_codt
               nil)
    (rest adt-accessor-decl "[(nonempty?) -> csequence]" csequence_codt nil)
    (map_empty formula-decl nil csequence_map_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (map adt-def-decl "csequence[T1]" csequence_codt_map nil)
    (suffix def-decl "(LAMBDA (cseq1: csequence): suffix?(cseq1, cseq))"
     csequence_suffix nil)
    (suffix? inductive-decl "bool" csequence_suffix nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (csequence type-decl nil csequence_codt nil)
    (T2 formal-type-decl nil csequence_filter_map nil)
    (T1 formal-type-decl nil csequence_filter_map nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (filter_map 0
  (filter_map-1 nil 3513639104
   ("" (skolem!)
    (("" (name "filter1" "filter(cseq!1, p!1 o f!1)")
      (("" (name "filter2" "filter(map(f!1, cseq!1), p!1)")
        (("" (replace*)
          (("" (rewrite "filter_filter_of")
            (("" (rewrite "filter_filter_of")
              (("" (lemma "coinduction[T2]")
                ((""
                  (inst -
                   "LAMBDA (filt2, cseq: csequence[T2]): (empty?(filt2) AND empty?(cseq)) OR (EXISTS (cseq1, filt1: csequence[T1]): filter_of?(filt2, map(f!1, cseq1), p!1) AND filter_of?(filt1, cseq1, p!1 o f!1) AND cseq = map(f!1, filt1))"
                   "filter2" "map(f!1, filter1)")
                  (("1" (reduce) nil nil)
                   ("2" (delete -1 -2 2)
                    (("2" (expand "bisimulation?")
                      (("2" (skosimp)
                        (("2" (smash)
                          (("1" (skosimp)
                            (("1" (replace -5)
                              (("1" (rewrite "map_nonempty")
                                (("1" (expand "filter_of?")
                                  (("1" (assert)
                                    (("1" (flatten)
                                      (("1"
                                        (assert)
                                        (("1" (rewrite "map_some") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp)
                            (("2" (replace -5)
                              (("2" (rewrite "map_empty")
                                (("2" (expand "filter_of?")
                                  (("2" (flatten)
                                    (("2" (assert)
                                      (("2" (rewrite "map_some") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp)
                            (("3" (replace -4)
                              (("3" (hide -4)
                                (("3"
                                  (inst +
                                   "suffix(cseq1!1, 1 + first_p(p!1 o f!1, cseq1!1))"
                                   "rest(filt1!1)")
                                  (("1" (rewrite "map_rest")
                                    (("1" (split)
                                      (("1"
                                        (lemma "filter_of?_suffix[T2]")
                                        (("1"
                                          (inst
                                           -
                                           "x!1"
                                           "map(f!1, cseq1!1)"
                                           "p!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split)
                                              (("1"
                                                (rewrite "map_first_p")
                                                (("1"
                                                  (rewrite "map_suffix")
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "filter_of?"
                                                   (-3 -4))
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "filter_of?" -)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "filter_of?_suffix[T1]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "filter_of?" -)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (rewrite "map_some")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (expand "filter_of?" -)
                                      (("2"
                                        (flatten)
                                        (("2" (rewrite "map_some") nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (expand "filter_of?")
                                    (("2" (ground)
                                      (("1"
                                        (expand "some" +)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (expand "some" -7)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (rewrite "map_empty")
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "o" 2)
                                              (("2"
                                                (expand "map" -2)
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (rewrite "map_some") nil nil))
                                      nil))
                                    nil)
                                   ("3" (expand "filter_of?")
                                    (("3" (assert)
                                      (("3"
                                        (flatten)
                                        (("3" (rewrite "map_some") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (skosimp)
                            (("4" (replace -4)
                              (("4" (hide -4)
                                (("4" (expand "filter_of?" -)
                                  (("4" (flatten)
                                    (("4" (use "map_some")
                                      (("4"
                                        (ground)
                                        (("1"
                                          (inst
                                           +
                                           "rest(cseq1!1)"
                                           "rest(filt1!1)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (rewrite "map_rest")
                                              (("1"
                                                (rewrite "map_rest")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "o" 1)
                                          (("2"
                                            (expand "map" -4)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (expand "some" -8)
                                                (("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "map" 1)
                                          (("3"
                                            (expand "some" -8)
                                            (("3"
                                              (expand "o" -1)
                                              (("3"
                                                (lift-if)
                                                (("3" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (inst
                                           +
                                           "suffix(cseq1!1, 1 + first_p(p!1 o f!1, cseq1!1))"
                                           "rest(filt1!1)")
                                          (("4"
                                            (rewrite "map_rest")
                                            (("4"
                                              (rewrite "map_rest")
                                              (("4"
                                                (split)
                                                (("1"
                                                  (rewrite
                                                   "map_suffix"
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (lemma
                                                     "filter_of?_suffix[T2]")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "x!1"
                                                       "map(f!1, cseq1!1)"
                                                       "p!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "map_first_p")
                                                          (("1"
                                                            (expand
                                                             "filter_of?")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "filter_of?_suffix[T1]")
                                                  (("2"
                                                    (expand "filter_of?")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (skosimp)
                            (("5" (replace -4)
                              (("5" (hide -4)
                                (("5" (expand "map" +)
                                  (("5" (lift-if)
                                    (("5" (ground)
                                      (("1"
                                        (expand "filter_of?")
                                        (("1"
                                          (flatten)
                                          (("1" (rewrite "map_some") nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "filter_of?_first_p[T2]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (use "filter_of?_first_p[T1]")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (rewrite "map_first_p")
                                                  (("1"
                                                    (rewrite "map_nth")
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2"
                                                    (expand "filter_of?" -4)
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "filter_of?" -3)
                                                  (("2" (assert) nil nil))
                                                  nil)
                                                 ("3"
                                                  (expand "filter_of?" -4)
                                                  (("3" (assert) nil nil))
                                                  nil)
                                                 ("4"
                                                  (expand "filter_of?")
                                                  (("4" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "T3" function_props nil)
    (T2 formal-type-decl nil csequence_filter_map nil)
    (filter const-decl
     "(LAMBDA (cseq1: csequence[T]): subsequence?(cseq1, cseq))"
     csequence_filter nil)
    (subsequence? coinductive-decl "bool" csequence_subsequence nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (csequence type-decl nil csequence_codt nil)
    (T1 formal-type-decl nil csequence_filter_map nil)
    (p!1 skolem-const-decl "pred[T2]" csequence_filter_map nil)
    (f!1 skolem-const-decl "[T1 -> T2]" csequence_filter_map nil)
    (filter_of? coinductive-decl "bool" csequence_filter_of nil)
    (empty? adt-recognizer-decl "[csequence -> boolean]" csequence_codt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bisimulation? adt-def-decl "boolean" csequence_codt nil)
    (PRED type-eq-decl nil defined_types nil)
    (map_some formula-decl nil csequence_map_props nil)
    (map_nonempty formula-decl nil csequence_map_props nil)
    (map_empty formula-decl nil csequence_map_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (some inductive-decl "boolean" csequence_codt nil)
    (cseq1!1 skolem-const-decl "csequence[T1]" csequence_filter_map nil)
    (nonempty? adt-recognizer-decl "[csequence -> boolean]" csequence_codt
               nil)
    (filt1!1 skolem-const-decl "csequence[T1]" csequence_filter_map nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (suffix? inductive-decl "bool" csequence_suffix nil)
    (suffix def-decl "(LAMBDA (cseq1: csequence): suffix?(cseq1, cseq))"
     csequence_suffix nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (index? def-decl "bool" csequence_nth nil)
    (indexes type-eq-decl nil csequence_nth nil)
    (first_p const-decl "indexes(cseq)" csequence_first_p nil)
    (rest adt-accessor-decl "[(nonempty?) -> csequence]" csequence_codt nil)
    (map_suffix formula-decl nil csequence_filter_map nil)
    (map_first_p formula-decl nil csequence_filter_map nil)
    (filter_of?_suffix formula-decl nil csequence_filter_of nil)
    (map_rest formula-decl nil csequence_map_props nil)
    (nonempty_csequence type-eq-decl nil csequence_props nil)
    (map_nth formula-decl nil csequence_map_props nil)
    (filter_of?_first_p formula-decl nil csequence_filter_of nil)
    (coinduction formula-decl nil csequence_codt nil)
    (filter_filter_of formula-decl nil csequence_filter nil)
    (map adt-def-decl "csequence[T1]" csequence_codt_map nil))
   shostak)))


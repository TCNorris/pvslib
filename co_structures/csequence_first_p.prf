(csequence_first_p
 (p_indexes_nonempty 0
  (p_indexes_nonempty-1 nil 3513622513
   ("" (skolem!)
    (("" (rewrite "nth_some")
      (("" (expand* "nonempty?" "empty?" "member" "p_indexes")
        (("" (rewrite "not_exists") (("" (prop) nil nil)) nil)) nil))
      nil))
    nil)
   ((nth_some formula-decl nil csequence_nth nil)
    (csequence type-decl nil csequence_codt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil csequence_first_p nil)
    (not_exists formula-decl nil quantifier_props nil)
    (nth def-decl "T" csequence_nth nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (index? def-decl "bool" csequence_nth nil)
    (indexes type-eq-decl nil csequence_nth nil)
    (nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (p_indexes const-decl "set[indexes[T](cseq)]" csequence_first_p nil)
    (empty? const-decl "bool" sets nil))
   shostak))
 (first_p_TCC1 0
  (first_p_TCC1-1 nil 3513622504
   ("" (skolem-typepred) (("" (rewrite "p_indexes_nonempty") nil nil)) nil)
   ((p_indexes_nonempty formula-decl nil csequence_first_p nil)
    (pred type-eq-decl nil defined_types nil)
    (some inductive-decl "boolean" csequence_codt nil)
    (csequence type-decl nil csequence_codt nil)
    (PRED type-eq-decl nil defined_types nil)
    (T formal-type-decl nil csequence_first_p nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (first_p subtype
    "csequence_first_p.p_indexes(csequence_first_p.cseq, csequence_first_p.p)"
    "(sets[csequence_nth[csequence_first_p.T].indexes(csequence_first_p.cseq)].nonempty?)")))
 (first_p_nth 0
  (first_p_nth-1 nil 3513622615
   ("" (skosimp)
    (("" (expand "first_p")
      (("" (typepred "min(p_indexes(cseq!1, p!1))")
        (("" (expand "p_indexes" -2 1) (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((first_p const-decl "indexes(cseq)" csequence_first_p nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil csequence_first_p nil)
    (csequence type-decl nil csequence_codt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (index? def-decl "bool" csequence_nth nil)
    (indexes type-eq-decl nil csequence_nth nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat
         nil)
    (pred type-eq-decl nil defined_types nil)
    (p_indexes const-decl "set[indexes[T](cseq)]" csequence_first_p nil))
   shostak))
 (first_p_rest_TCC1 0
  (first_p_rest_TCC1-1 nil 3513622504
   ("" (skosimp) (("" (expand "some") (("" (bash) nil nil)) nil)) nil)
   ((some inductive-decl "boolean" csequence_codt nil)) nil
   (first_p_rest subtype "csequence_first_p.cseq"
    "(csequence_codt[csequence_first_p.T].nonempty?)")))
 (first_p_rest_TCC2 0
  (first_p_rest_TCC2-1 nil 3513622504
   ("" (skosimp) (("" (expand "some" -) (("" (reduce) nil nil)) nil)) nil)
   ((some inductive-decl "boolean" csequence_codt nil)) nil
   (first_p_rest subtype
    "csequence_codt[csequence_first_p.T].rest(csequence_first_p.cseq)"
    "(csequence_codt[csequence_first_p.T].some(csequence_first_p.p))")))
 (first_p_rest 0
  (first_p_rest-1 nil 3513622695
   ("" (skosimp)
    (("" (lemma "some_weak_induction")
      ((""
        (inst - "p!1"
         "LAMBDA cseq: some(p!1)(cseq) AND first_p(p!1, cseq) = IF p!1(first(cseq)) THEN 0 ELSE first_p(p!1, rest(cseq)) + 1 ENDIF")
        (("1" (split)
          (("1" (inst - "cseq!1") (("1" (assert) nil nil)) nil)
           ("2" (delete -1 2)
            (("2" (skosimp)
              (("2" (smash)
                (("1" (expand "first_p")
                  (("1" (use "p_indexes_nonempty")
                    (("1" (prop)
                      (("1" (rewrite "min_def")
                        (("1" (expand* "minimum?" "p_indexes" "nth") nil nil)
                         ("2"
                          (expand* "nonempty?" "empty?" "member" "p_indexes"
                           "index?")
                          nil nil))
                        nil)
                       ("2" (expand "some") (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -3)
                  (("2" (hide -3)
                    (("2" (expand "first_p")
                      (("2" (rewrite "min_def")
                        (("1" (expand* "minimum?" "p_indexes")
                          (("1" (expand "nth" 3 1)
                            (("1" (expand "nth" 3 1)
                              (("1" (skosimp)
                                (("1" (expand "nth" -3)
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand* "index?" "index?") nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -2)
                  (("3" (hide -2)
                    (("3" (expand "first_p")
                      (("3" (lemma "p_indexes_nonempty")
                        (("3" (inst-cp - "rest(rest(a!1))" "p!1")
                          (("3" (inst-cp - "rest(a!1)" "p!1")
                            (("3" (inst - "a!1" "p!1")
                              (("3" (ground)
                                (("1"
                                  (name "min_first"
                                        "min(p_indexes(a!1, p!1))")
                                  (("1"
                                    (name "min_rr"
                                          "min(p_indexes(rest(rest(a!1)), p!1))")
                                    (("1" (replace*)
                                      (("1"
                                        (rewrite "min_def")
                                        (("1"
                                          (rewrite "min_def")
                                          (("1"
                                            (expand "minimum?")
                                            (("1"
                                              (inst - "min_first - 2")
                                              (("1"
                                                (inst - "2 + min_rr")
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (typepred "min_rr")
                                                      (("1"
                                                        (expand
                                                         "p_indexes"
                                                         (-2 +))
                                                        (("1"
                                                          (expand "nth" +)
                                                          (("1"
                                                            (expand "nth" +)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "min_first")
                                                    (("2"
                                                      (expand
                                                       "p_indexes"
                                                       (-2 +))
                                                      (("2"
                                                        (expand "nth" -)
                                                        (("2"
                                                          (expand "nth" -)
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "index?" +)
                                                  (("2"
                                                    (expand "index?" +)
                                                    (("2"
                                                      (expand "some")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "min_first")
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (expand "p_indexes" -2)
                                                    (("1"
                                                      (expand "nth" -2)
                                                      (("1"
                                                        (expand "nth" -2)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "index?" -)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (expand
                                                         "p_indexes"
                                                         -2)
                                                        (("1"
                                                          (expand "nth")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "index?" -1)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (expand
                                                             "p_indexes"
                                                             -3)
                                                            (("2"
                                                              (expand*
                                                               "nth"
                                                               "nth")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "some" -5)
                                  (("2" (lift-if) (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3" (expand "some" +)
                                  (("3" (propax) nil nil)) nil)
                                 ("4" (expand "some" +)
                                  (("4" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (expand "some") (("4" (propax) nil nil)) nil)
                 ("5" (expand "some" +) (("5" (propax) nil nil)) nil)
                 ("6" (expand "some" +) (("6" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp) (("2" (forward-chain "first_p_rest_TCC2") nil nil))
          nil)
         ("3" (skosimp) (("3" (forward-chain "first_p_rest_TCC1") nil nil))
          nil)
         ("4" (skosimp) (("4" (forward-chain "first_p_rest_TCC1") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil csequence_first_p nil)
    (some_weak_induction formula-decl nil csequence_codt nil)
    (first_p_rest_TCC1 subtype-tcc nil csequence_first_p nil)
    (first_p_rest_TCC2 subtype-tcc nil csequence_first_p nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat
         nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (a!1 skolem-const-decl "csequence[T]" csequence_first_p nil)
    (min_first skolem-const-decl "{a |
   p_indexes(a!1, p!1)(a) AND
    FORALL (x: indexes[T](a!1)): p_indexes(a!1, p!1)(x) IMPLIES a <= x}"
     csequence_first_p nil)
    (min_rr skolem-const-decl "{a |
   p_indexes(rest(rest(a!1)), p!1)(a) AND
    FORALL (x: indexes[T](rest(rest(a!1)))):
      p_indexes(rest(rest(a!1)), p!1)(x) IMPLIES a <= x}" csequence_first_p
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (minimum? const-decl "bool" min_nat nil)
    (nth def-decl "T" csequence_nth nil)
    (min_def formula-decl nil min_nat nil) (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (p_indexes const-decl "set[indexes[T](cseq)]" csequence_first_p nil)
    (p_indexes_nonempty formula-decl nil csequence_first_p nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (first_p const-decl "indexes(cseq)" csequence_first_p nil)
    (indexes type-eq-decl nil csequence_nth nil)
    (index? def-decl "bool" csequence_nth nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (rest adt-accessor-decl "[(nonempty?) -> csequence]" csequence_codt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (first adt-accessor-decl "[(nonempty?) -> T]" csequence_codt nil)
    (csequence type-decl nil csequence_codt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (some inductive-decl "boolean" csequence_codt nil)
    (pred type-eq-decl nil defined_types nil)
    (p!1 skolem-const-decl "pred[T]" csequence_first_p nil)
    (nonempty? adt-recognizer-decl "[csequence -> boolean]" csequence_codt
               nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   shostak)))


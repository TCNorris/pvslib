(csequence_sequence
 (from_sequence_TCC1 0
  (from_sequence_TCC1-1 nil 3513771080
   (""
    (case "FORALL (seq: sequence[T], x: nat): NOT has_length(coreduce[T, sequence](from_sequence_struct)(seq), x)")
    (("1" (skolem!)
      (("1" (rewrite "is_finite_def")
        (("1" (skolem!) (("1" (inst - "seq!1" "n!1") nil nil)) nil)) nil))
      nil)
     ("2" (delete 2)
      (("2" (induct "x")
        (("1" (expand* "has_length" "from_sequence_struct" "coreduce") nil
          nil)
         ("2" (skosimp*)
          (("2" (expand "has_length" -2)
            (("2" (prop)
              (("2" (expand "from_sequence_struct")
                (("2" (expand "coreduce" -1)
                  (("2" (inst - "LAMBDA n: seq!1(1 + n)") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (is_finite_def formula-decl nil csequence_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil csequence_sequence nil)
    (sequence type-eq-decl nil sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (csequence type-decl nil csequence_codt nil)
    (has_length def-decl "bool" csequence_props nil)
    (csequence_struct type-decl nil csequence_codt_coreduce nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (inj_empty? adt-recognizer-decl "[csequence_struct -> boolean]"
     csequence_codt_coreduce nil)
    (empty? adt-recognizer-decl "[csequence -> boolean]" csequence_codt nil)
    (inj_nonempty? adt-recognizer-decl "[csequence_struct -> boolean]"
     csequence_codt_coreduce nil)
    (nonempty? adt-recognizer-decl "[csequence -> boolean]" csequence_codt
               nil)
    (coreduce adt-def-decl "{c: csequence[T] |
   inj_empty?(op(x)) AND empty?(c) OR inj_nonempty?(op(x)) AND nonempty?(c)}"
     csequence_codt_coreduce nil)
    (from_sequence_struct const-decl "csequence_struct" csequence_sequence
     nil))
   nil
   (from_sequence subtype
    "csequence_codt_coreduce[csequence_sequence.T, sequence[T]].coreduce(csequence_sequence.from_sequence_struct)(csequence_sequence.seq)"
    "infinite_csequence[T]")))
 (from_sequence_nth_TCC1 0
  (from_sequence_nth_TCC1-1 nil 3513771080
   ("" (skolem!) (("" (use "index?_infinite") nil nil)) nil)
   ((from_sequence const-decl "infinite_csequence" csequence_sequence nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (infinite_csequence type-eq-decl nil csequence_props nil)
    (is_finite inductive-decl "bool" csequence_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (csequence type-decl nil csequence_codt nil)
    (index?_infinite formula-decl nil csequence_nth nil)
    (T formal-type-decl nil csequence_sequence nil))
   nil
   (from_sequence_nth subtype "csequence_sequence.n"
    "csequence_nth[csequence_sequence.T].indexes(csequence_sequence.from_sequence(csequence_sequence.seq))")))
 (from_sequence_nth 0
  (from_sequence_nth-1 nil 3513771218
   ("" (induct "n")
    (("1" (expand* "nth" "from_sequence" "from_sequence_struct" "coreduce")
      nil nil)
     ("2" (skosimp*)
      (("2" (expand "nth" +)
        (("2" (expand* "from_sequence" "from_sequence_struct")
          (("2" (expand "coreduce" +)
            (("2" (inst - "LAMBDA n: seq!1(1 +  n)") nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skolem!) (("3" (use "from_sequence_nth_TCC1") nil nil)) nil))
    nil)
   ((from_sequence_nth_TCC1 subtype-tcc nil csequence_sequence nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (from_sequence_struct const-decl "csequence_struct" csequence_sequence
     nil)
    (coreduce adt-def-decl "{c: csequence[T] |
   inj_empty?(op(x)) AND empty?(c) OR inj_nonempty?(op(x)) AND nonempty?(c)}"
     csequence_codt_coreduce nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nth def-decl "T" csequence_nth nil)
    (indexes type-eq-decl nil csequence_nth nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil csequence_sequence nil)
    (sequence type-eq-decl nil sequences nil)
    (csequence type-decl nil csequence_codt nil)
    (index? def-decl "bool" csequence_nth nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (is_finite inductive-decl "bool" csequence_props nil)
    (infinite_csequence type-eq-decl nil csequence_props nil)
    (from_sequence const-decl "infinite_csequence" csequence_sequence nil))
   shostak))
 (to_sequence_TCC1 0
  (to_sequence_TCC1-1 nil 3513771080
   ("" (skolem!) (("" (use "index?_infinite") nil nil)) nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (infinite_csequence type-eq-decl nil csequence_props nil)
    (is_finite inductive-decl "bool" csequence_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (csequence type-decl nil csequence_codt nil)
    (index?_infinite formula-decl nil csequence_nth nil)
    (T formal-type-decl nil csequence_sequence nil))
   nil
   (to_sequence subtype "csequence_sequence.n"
    "csequence_nth[csequence_sequence.T].indexes(csequence_sequence.iseq)")))
 (to_sequence_nth 0
  (to_sequence_nth-1 nil 3513771313
   ("" (expand "to_sequence") (("" (propax) nil nil)) nil)
   ((to_sequence const-decl "sequence" csequence_sequence nil)) shostak))
 (to_from_sequence 0
  (to_from_sequence-1 nil 3513771324
   ("" (skolem!)
    (("" (decompose-equality)
      (("" (expand "to_sequence") (("" (rewrite "from_sequence_nth") nil nil))
        nil))
      nil))
    nil)
   ((csequence type-decl nil csequence_codt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (is_finite inductive-decl "bool" csequence_props nil)
    (infinite_csequence type-eq-decl nil csequence_props nil)
    (sequence type-eq-decl nil sequences nil)
    (to_sequence const-decl "sequence" csequence_sequence nil)
    (from_sequence const-decl "infinite_csequence" csequence_sequence nil)
    (T formal-type-decl nil csequence_sequence nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (from_sequence_nth formula-decl nil csequence_sequence nil))
   shostak))
 (from_to_sequence 0
  (from_to_sequence-1 nil 3513771359
   ("" (skolem!)
    (("" (use "nth_extensionality")
      (("" (assert)
        (("" (hide 2)
          (("" (split)
            (("1" (decompose-equality)
              (("1" (rewrite "index?_infinite")
                (("1" (rewrite "index?_infinite") nil nil)) nil))
              nil)
             ("2" (skolem!)
              (("2" (rewrite "from_sequence_nth")
                (("2" (rewrite "to_sequence_nth") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth_extensionality formula-decl nil csequence_nth nil)
    (T formal-type-decl nil csequence_sequence nil)
    (to_sequence const-decl "sequence" csequence_sequence nil)
    (from_sequence const-decl "infinite_csequence" csequence_sequence nil)
    (infinite_csequence type-eq-decl nil csequence_props nil)
    (is_finite inductive-decl "bool" csequence_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (csequence type-decl nil csequence_codt nil)
    (to_sequence_nth formula-decl nil csequence_sequence nil)
    (indexes type-eq-decl nil csequence_nth nil)
    (from_sequence_nth formula-decl nil csequence_sequence nil)
    (index? def-decl "bool" csequence_nth nil)
    (index?_infinite formula-decl nil csequence_nth nil))
   shostak)))


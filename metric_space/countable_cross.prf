(countable_cross
 (is_countable_cross 0
  (is_countable_cross-1 nil 3356753907
   ("" (skosimp)
    (("" (expand "cross_product")
      (("" (expand "is_countable")
        (("" (skolem - "F1")
          (("" (skolem - "F2")
            (("" (typepred "F1")
              (("" (typepred "F2")
                ((""
                  (inst +
                   "lambda (x:({x: [T1, T2] | X!1(x`1) AND Y!1(x`2)})): 2^(F1(x`1))*3^(F2(x`2))")
                  (("" (expand "injective?")
                    (("" (skosimp*)
                      (("" (inst - "x1!1`2" "x2!1`2")
                        (("" (inst - "x1!1`1" "x2!1`1")
                          (("" (name-replace "N1" "F1(x1!1`1)")
                            (("" (name-replace "N2" "F1(x2!1`1)")
                              (("" (name-replace "M1" "F2(x1!1`2)")
                                (("" (name-replace "M2" "F2(x2!1`2)")
                                  ((""
                                    (case "forall (b,n,m:nat): 2 <= b => (b^n = b^m IFF n = m)")
                                    (("1"
                                      (case
                                       "forall (pn,pm:posnat): 1 < 2^pn * 3^pm")
                                      (("1"
                                        (case-replace "N1=N2")
                                        (("1"
                                          (lemma
                                           "both_sides_times2"
                                           ("n0z"
                                            "2^N2"
                                            "x"
                                            "3 ^ M1"
                                            "y"
                                            "3 ^ M2"))
                                          (("1"
                                            (inst -4 "3" "M1" "M2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (decompose-equality)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case
                                           "forall (pn:posnat,n,m:nat): 3^n /= 2^pn*3^m")
                                          (("1"
                                            (lemma
                                             "trich_lt"
                                             ("x" "N1" "y" "N2"))
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (inst - "N2-N1" "M1" "M2")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "both_sides_times2"
                                                     ("n0z"
                                                      "2^N1"
                                                      "x"
                                                      "3 ^ M1"
                                                      "y"
                                                      "(2 ^ (N2 - N1)) * 3 ^ M2"))
                                                    (("1"
                                                      (lemma
                                                       "expt_plus"
                                                       ("n0x"
                                                        "2"
                                                        "i"
                                                        "N1"
                                                        "j"
                                                        "N2-N1"))
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil)
                                               ("2" (propax) nil nil)
                                               ("3"
                                                (inst - "N1-N2" "M2" "M1")
                                                (("1"
                                                  (lemma
                                                   "both_sides_times2"
                                                   ("n0z"
                                                    "2^N2"
                                                    "y"
                                                    "3 ^ M2"
                                                    "x"
                                                    "(2 ^ (N1 - N2)) * 3 ^ M1"))
                                                  (("1"
                                                    (lemma
                                                     "expt_plus"
                                                     ("n0x"
                                                      "2"
                                                      "i"
                                                      "N2"
                                                      "j"
                                                      "N1-N2"))
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 -2 1))
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (lemma
                                                 "trich_lt"
                                                 ("x" "n!1" "y" "m!1"))
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (inst -3 "pn!1" "m!1-n!1")
                                                    (("1"
                                                      (lemma
                                                       "both_sides_times_pos_lt1"
                                                       ("pz"
                                                        "3^n!1"
                                                        "x"
                                                        "1"
                                                        "y"
                                                        "2 ^ pn!1 * 3 ^ (m!1 - n!1)"))
                                                      (("1"
                                                        (lemma
                                                         "expt_plus"
                                                         ("n0x"
                                                          "3"
                                                          "i"
                                                          "m!1-n!1"
                                                          "j"
                                                          "n!1"))
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1 * rl)
                                                    (("2"
                                                      (lemma
                                                       "both_sides_times1"
                                                       ("n0z"
                                                        "3^n!1"
                                                        "x"
                                                        "1"
                                                        "y"
                                                        "2^pn!1"))
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "both_sides_expt_gt1_lt"
                                                           ("gt1x"
                                                            "2"
                                                            "i"
                                                            "0"
                                                            "j"
                                                            "pn!1"))
                                                          (("2"
                                                            (rewrite
                                                             "expt_x0")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (lemma
                                                     "both_sides_times1"
                                                     ("n0z"
                                                      "3^m!1"
                                                      "x"
                                                      "3 ^ (n!1-m!1)"
                                                      "y"
                                                      "2 ^ pn!1"))
                                                    (("3"
                                                      (lemma
                                                       "expt_plus"
                                                       ("n0x"
                                                        "3"
                                                        "i"
                                                        "n!1-m!1"
                                                        "j"
                                                        "m!1"))
                                                      (("3"
                                                        (simplify -1)
                                                        (("3"
                                                          (replace -1 * rl)
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (case
                                                               "forall (n:posnat): even?(2^n)")
                                                              (("1"
                                                                (case
                                                                 "forall (n:posnat): odd?(3^n)")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "n!1-m!1")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "pn!1")
                                                                    (("1"
                                                                      (rewrite
                                                                       "even_or_odd")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (induct
                                                                     "n")
                                                                    (("1"
                                                                      (case-replace
                                                                       "n!2=0")
                                                                      (("1"
                                                                        (rewrite
                                                                         "expt_x0")
                                                                        (("1"
                                                                          (expand
                                                                           "odd?")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "0")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp*)
                                                                      (("3"
                                                                        (case-replace
                                                                         "j!1=0")
                                                                        (("1"
                                                                          (expand
                                                                           "^")
                                                                          (("1"
                                                                            (expand
                                                                             "expt")
                                                                            (("1"
                                                                              (expand
                                                                               "expt")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "^")
                                                                            (("2"
                                                                              (expand
                                                                               "expt"
                                                                               2)
                                                                              (("2"
                                                                                (lemma
                                                                                 "odd_times_odd_is_odd"
                                                                                 ("o1"
                                                                                  "3"
                                                                                  "o2"
                                                                                  "expt(3, j!1)"))
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (induct "n")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (skosimp*)
                                                                    (("3"
                                                                      (case-replace
                                                                       "j!1=0")
                                                                      (("1"
                                                                        (expand
                                                                         "^")
                                                                        (("1"
                                                                          (expand
                                                                           "expt")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "^")
                                                                          (("2"
                                                                            (expand
                                                                             "expt"
                                                                             2)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (lemma
                                             "both_sides_expt_gt1_lt"
                                             ("gt1x" "2" "i" "0" "j" "pn!1"))
                                            (("2"
                                              (lemma
                                               "both_sides_expt_gt1_lt"
                                               ("gt1x"
                                                "3"
                                                "i"
                                                "0"
                                                "j"
                                                "pm!1"))
                                              (("2"
                                                (rewrite "expt_x0")
                                                (("2"
                                                  (rewrite "expt_x0")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "lt_times_lt_pos1"
                                                       ("px"
                                                        "1"
                                                        "y"
                                                        "2^pn!1"
                                                        "nnz"
                                                        "1"
                                                        "w"
                                                        "3^pm!1"))
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but 1)
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lemma
                                               "both_sides_expt1"
                                               ("px" "2"))
                                              (("1"
                                                (case-replace "n!1=0")
                                                (("1"
                                                  (rewrite "expt_x0")
                                                  (("1"
                                                    (lemma
                                                     "both_sides_expt_gt1_lt"
                                                     ("gt1x"
                                                      "b!1"
                                                      "i"
                                                      "0"
                                                      "j"
                                                      "m!1"))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite "expt_x0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case-replace "m!1=0")
                                                  (("1"
                                                    (rewrite "expt_x0")
                                                    (("1"
                                                      (lemma
                                                       "both_sides_expt_gt1_lt"
                                                       ("gt1x"
                                                        "b!1"
                                                        "i"
                                                        "0"
                                                        "j"
                                                        "n!1"))
                                                      (("1"
                                                        (rewrite "expt_x0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "both_sides_expt1"
                                                     ("px"
                                                      "b!1"
                                                      "n0i"
                                                      "n!1"
                                                      "n0j"
                                                      "m!1"))
                                                    (("1" (assert) nil nil)
                                                     ("2" (assert) nil nil)
                                                     ("3" (assert) nil nil)
                                                     ("4" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (set type-eq-decl nil sets nil)
    (T1 formal-type-decl nil countable_cross nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (F2 skolem-const-decl "(injective?[(Y!1), nat])" countable_cross nil)
    (F1 skolem-const-decl "(injective?[(X!1), nat])" countable_cross nil)
    (Y!1 skolem-const-decl "set[T2]" countable_cross nil)
    (X!1 skolem-const-decl "set[T1]" countable_cross nil)
    (both_sides_expt1 formula-decl nil exponentiation nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (N1 skolem-const-decl "nat" countable_cross nil)
    (N2 skolem-const-decl "nat" countable_cross nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trich_lt formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (n!1 skolem-const-decl "nat" countable_cross nil)
    (m!1 skolem-const-decl "nat" countable_cross nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (even? const-decl "bool" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (odd_int nonempty-type-eq-decl nil integers nil)
    (odd_times_odd_is_odd judgement-tcc nil integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (odd? const-decl "bool" integers nil)
    (both_sides_times2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T2 formal-type-decl nil countable_cross nil)
    (is_countable const-decl "bool" countability sets_aux))
   shostak)))


(complete_product
 (d2_TCC1 0
  (d2_TCC1-1 nil 3407036425
   ("" (expand "metric?")
    (("" (split)
      (("1" (expand "metric_zero?")
        (("1" (skosimp)
          (("1" (split)
            (("1" (flatten)
              (("1"
                (lemma "sqrt_eq_0"
                 ("nnx" "sq(d0(x!1`1, y!1`1)) + sq(d1(x!1`2, y!1`2))"))
                (("1" (replace -2)
                  (("1" (hide -2)
                    (("1" (lemma "sq_eq_0" ("a" "d0(x!1`1, y!1`1)"))
                      (("1" (assert)
                        (("1" (lemma "sq_eq_0" ("a" "d1(x!1`2, y!1`2)"))
                          (("1" (assert)
                            (("1" (hide -3)
                              (("1" (typepred "d0")
                                (("1" (typepred "d1")
                                  (("1" (expand "metric?")
                                    (("1" (flatten)
                                      (("1"
                                        (expand "metric_zero?")
                                        (("1"
                                          (inst - "x!1`2" "y!1`2")
                                          (("1"
                                            (inst - "x!1`1" "y!1`1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide-all-but (-1 -4 1))
                                                (("1"
                                                  (decompose-equality)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (replace -1)
                (("2" (typepred "d0")
                  (("2" (typepred "d1")
                    (("2" (expand "metric?")
                      (("2" (flatten)
                        (("2" (expand "metric_zero?")
                          (("2" (inst - "y!1`2" "y!1`2")
                            (("2" (assert)
                              (("2" (replace -1)
                                (("2" (inst - "y!1`1" "y!1`1")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "d0")
        (("2" (typepred "d1")
          (("2" (expand "metric?")
            (("2" (flatten)
              (("2" (expand "metric_symmetric?")
                (("2" (skosimp)
                  (("2" (inst - "x!1`2" "y!1`2")
                    (("2" (inst - "x!1`1" "y!1`1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred "d0")
        (("3" (typepred "d1")
          (("3" (expand "metric?")
            (("3" (flatten)
              (("3" (expand "metric_triangle?")
                (("3" (skosimp)
                  (("3" (inst - "x!1`2" "y!1`2" "z!1`2")
                    (("3" (inst - "x!1`1" "y!1`1" "z!1`1")
                      (("3" (hide-all-but (-3 -6 1))
                        (("3" (rewrite "sq_le" 1 :dir rl)
                          (("3" (rewrite "sq_sqrt")
                            (("3" (rewrite "sq_plus")
                              (("3" (rewrite "sq_le" -1 :dir rl)
                                (("3" (rewrite "sq_le" -2 :dir rl)
                                  (("3" (assert)
                                    (("3" (rewrite "sq_plus" -1)
                                      (("3"
                                        (rewrite "sq_plus" -2)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (name-replace
                                             "D1_XZ"
                                             "d1(x!1`2, z!1`2)")
                                            (("3"
                                              (name-replace
                                               "D0_XZ"
                                               "d0(x!1`1, z!1`1)")
                                              (("3"
                                                (name-replace
                                                 "D1_XY"
                                                 "d1(x!1`2, y!1`2)")
                                                (("3"
                                                  (name-replace
                                                   "D0_XY"
                                                   "d0(x!1`1, y!1`1)")
                                                  (("3"
                                                    (name-replace
                                                     "D1_YZ"
                                                     "d1(y!1`2, z!1`2)")
                                                    (("3"
                                                      (name-replace
                                                       "D0_YZ"
                                                       "d0(y!1`1, z!1`1)")
                                                      (("3"
                                                        (case
                                                         "D1_XY * D1_YZ+D0_XY * D0_YZ<=sqrt(sq(D0_XY) + sq(D1_XY)) * sqrt(sq(D0_YZ) + sq(D1_YZ))")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2 -1 -2)
                                                          (("2"
                                                            (lemma
                                                             "sqrt_cauchy"
                                                             ("a"
                                                              "D1_XY"
                                                              "c"
                                                              "D1_YZ"
                                                              "b"
                                                              "D0_XY"
                                                              "d"
                                                              "D0_YZ"))
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sqrt_sq formula-decl nil sqrt reals) (sq_0 formula-decl nil sq reals)
    (sq_eq_0 formula-decl nil sq reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sqrt_eq_0 formula-decl nil sqrt reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (T0 formal-type-decl nil complete_product nil)
    (nnreal type-eq-decl nil real_types nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (d0 formal-const-decl "metric[T0]" complete_product nil)
    (T1 formal-type-decl nil complete_product nil)
    (d1 formal-const-decl "metric[T1]" complete_product nil)
    (metric_zero? const-decl "bool" metric_def nil)
    (metric_symmetric? const-decl "bool" metric_def nil)
    (sq_le formula-decl nil sq reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq_plus formula-decl nil sq reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sqrt_cauchy formula-decl nil sqrt reals) (<= const-decl "bool" reals nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (metric_triangle? const-decl "bool" metric_def nil)
    (metric? const-decl "bool" metric_def nil))
   nil
   (d2 subtype
    "(LAMBDA (z0, z1): sqrt.sqrt((number_fields.+)(sq.sq(complete_product.d0(complete_product.z0`1, complete_product.z1`1)), sq.sq(complete_product.d1(complete_product.z0`2, complete_product.z1`2)))))"
    "metric[[T0, T1]]")))
 (complete_d2 0
  (complete_d2-1 nil 3407037934
   ("" (flatten)
    (("" (expand "fullset")
      (("" (expand "metric_complete?")
        (("" (skosimp)
          (("" (inst - "lambda (n:nat): u!1(n)`1")
            (("" (inst - "lambda (n:nat): u!1(n)`2")
              (("" (split)
                (("1" (split)
                  (("1" (hide -3)
                    (("1" (expand "metric_convergent?")
                      (("1" (skosimp*)
                        (("1" (inst + "(x!2,x!1)")
                          (("1" (expand "metric_converges_to")
                            (("1" (skosimp)
                              (("1" (inst - "r!1/2")
                                (("1" (inst - "r!1/2")
                                  (("1" (skosimp*)
                                    (("1" (inst + "max(n!1,n!2)")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst - "i!1")
                                          (("1"
                                            (inst - "i!1")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -3)
                                                  (("1"
                                                    (expand "ball")
                                                    (("1"
                                                      (rewrite
                                                       "sq_lt"
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (rewrite
                                                         "sq_lt"
                                                         -2
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (rewrite "sq_div")
                                                          (("1"
                                                            (expand "sq" -1 3)
                                                            (("1"
                                                              (expand
                                                               "sq"
                                                               -2
                                                               3)
                                                              (("1"
                                                                (rewrite
                                                                 "sq_lt"
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-2 1))
                    (("2" (expand "cauchy?")
                      (("2" (skosimp)
                        (("2" (expand "ball")
                          (("2" (expand "member")
                            (("2" (inst - "r!1")
                              (("2" (skosimp)
                                (("2" (inst + "n!1")
                                  (("2" (skosimp)
                                    (("2" (inst - "i!1" "j!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "sq_lt" 1 :dir rl)
                                          (("2"
                                            (rewrite "sq_lt" -3 :dir rl)
                                            (("2"
                                              (rewrite "sq_sqrt")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-2 1))
                  (("2" (expand "cauchy?")
                    (("2" (skosimp)
                      (("2" (inst - "r!1")
                        (("2" (skosimp)
                          (("2" (inst + "n!1")
                            (("2" (skosimp)
                              (("2" (expand "ball")
                                (("2" (expand "member")
                                  (("2" (inst - "i!1" "j!1")
                                    (("2" (assert)
                                      (("2"
                                        (rewrite "sq_lt" -3 :dir rl)
                                        (("2"
                                          (rewrite "sq_sqrt")
                                          (("2"
                                            (rewrite "sq_lt" 1 :dir rl)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (metric_convergent? const-decl "bool" metric_space_def nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (d1 formal-const-decl "metric[T1]" complete_product nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (nnreal type-eq-decl nil real_types nil) (sq_lt formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_div formula-decl nil sq reals) (sq_sqrt formula-decl nil sqrt reals)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (d0 formal-const-decl "metric[T0]" complete_product nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (metric_converges_to const-decl "bool" metric_space_def nil)
    (cauchy? const-decl "bool" metric_space_def nil)
    (T1 formal-type-decl nil complete_product nil)
    (sequence type-eq-decl nil sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (T0 formal-type-decl nil complete_product nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (metric_complete? const-decl "bool" metric_space_def nil))
   shostak)))


(real_continuity
 (IMP_metric_continuity_TCC1 0
  (IMP_metric_continuity_TCC1-1 nil 3429890484
   ("" (expand "metric?")
    (("" (expand "metric_zero?")
      (("" (expand "metric_symmetric?")
        (("" (expand "metric_triangle?") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((metric_zero? const-decl "bool" metric_def nil)
    (metric_triangle? const-decl "bool" metric_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (metric_symmetric? const-decl "bool" metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_metric_continuity subtype
    "(LAMBDA (x, y: reals.real): real_defs.abs((number_fields.-)(x, y)))"
    "metric[real]")))
 (sum_continuous 0
  (sum_continuous-1 nil 3429893655
   ("" (skosimp)
    (("" (typepred "g2!1")
      (("" (typepred "g1!1")
        (("" (expand "metric_continuous?")
          (("" (skosimp)
            (("" (inst - "x!1")
              (("" (inst - "x!1")
                (("" (expand "metric_continuous_at?")
                  (("" (skosimp)
                    (("" (inst - "epsilon!1/2")
                      (("" (inst - "epsilon!1/2")
                        (("" (skosimp*)
                          (("" (inst + "min(delta!1,delta!2)")
                            (("" (skosimp)
                              (("" (inst - "x!2")
                                (("" (inst - "x!2")
                                  (("" (expand "member")
                                    (("" (expand "ball")
                                      ((""
                                        (expand "+")
                                        ((""
                                          (assert)
                                          ((""
                                            (lemma
                                             "triangle"
                                             ("x"
                                              "g1!1(x!1) - g1!1(x!2)"
                                              "y"
                                              "g2!1(x!1) - g2!1(x!2)"))
                                            (("" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_continuous type-eq-decl nil metric_continuity nil)
    (metric_continuous? const-decl "bool" metric_continuity nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (d formal-const-decl "metric" real_continuity nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil real_continuity nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (metric_continuous_at? const-decl "bool" metric_continuity nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (triangle formula-decl nil real_props nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil) (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil))
   nil
   (sum_continuous subtype
    "(real_fun_ops[real_continuity.T].+)(real_continuity.g1, real_continuity.g2)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]")))
 (opp_continuous 0
  (opp_continuous-1 nil 3429893655
   ("" (skosimp)
    (("" (typepred "g!1")
      (("" (expand "metric_continuous?")
        (("" (skosimp)
          (("" (inst - "x!1")
            (("" (expand "metric_continuous_at?")
              (("" (skosimp)
                (("" (inst - "epsilon!1")
                  (("" (skosimp)
                    (("" (inst + "delta!1")
                      (("" (skosimp)
                        (("" (inst - "x!2") (("" (grind) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_continuous type-eq-decl nil metric_continuity nil)
    (metric_continuous? const-decl "bool" metric_continuity nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (d formal-const-decl "metric" real_continuity nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil real_continuity nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (metric_continuous_at? const-decl "bool" metric_continuity nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (ball_is_metric_open application-judgement "metric_open" real_continuity
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ball_is_metric_open application-judgement "metric_open" real_continuity
     nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (member const-decl "bool" sets nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (opp_continuous subtype
    "(real_fun_ops[real_continuity.T].-)(real_continuity.g)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]")))
 (diff_continuous 0
  (diff_continuous-1 nil 3429893655
   ("" (skosimp)
    (("" (lemma "opp_continuous" ("g" "g2!1"))
      (("" (lemma "sum_continuous" ("g1" "g1!1" "g2" "-g2!1"))
        (("" (expand "+") (("" (expand "-") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_continuous type-eq-decl nil metric_continuity nil)
    (metric_continuous? const-decl "bool" metric_continuity nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (d formal-const-decl "metric" real_continuity nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil real_continuity nil)
    (opp_continuous judgement-tcc nil real_continuity nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (opp_continuous application-judgement "metric_continuous" real_continuity
     nil)
    (sum_continuous judgement-tcc nil real_continuity nil)
    (- const-decl "[T -> real]" real_fun_ops reals))
   nil
   (diff_continuous subtype
    "(real_fun_ops[real_continuity.T].-)(real_continuity.g1, real_continuity.g2)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]")))
 (scal_continuous 0
  (scal_continuous-1 nil 3429893655
   ("" (skosimp)
    (("" (typepred "g!1")
      (("" (expand "*")
        (("" (expand "metric_continuous?")
          (("" (skosimp)
            (("" (inst - "x!1")
              (("" (expand "metric_continuous_at?")
                (("" (skosimp)
                  (("" (case-replace "c!1=0")
                    (("1" (inst + "1")
                      (("1" (expand "member")
                        (("1" (expand "ball")
                          (("1" (skosimp)
                            (("1" (expand "abs") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "member")
                      (("2" (expand "ball")
                        (("2"
                          (lemma "posreal_div_posreal_is_posreal"
                           ("px" "epsilon!1" "py" "abs(c!1)"))
                          (("1" (inst - "epsilon!1 / abs(c!1)")
                            (("1" (skosimp)
                              (("1" (inst + "delta!1")
                                (("1" (skosimp)
                                  (("1" (inst - "x!2")
                                    (("1" (assert)
                                      (("1"
                                        (rewrite "div_mult_pos_lt2" -2)
                                        (("1"
                                          (rewrite "abs_mult" -2 :dir rl)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (hide 3 -1) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_continuous type-eq-decl nil metric_continuity nil)
    (metric_continuous? const-decl "bool" metric_continuity nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (d formal-const-decl "metric" real_continuity nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil real_continuity nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (abs_mult formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (c!1 skolem-const-decl "real" real_continuity nil)
    (epsilon!1 skolem-const-decl "posreal" real_continuity nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (metric_continuous_at? const-decl "bool" metric_continuity nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (scal_continuous subtype
    "real_fun_ops[real_continuity.T].*(real_continuity.c, real_continuity.g)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]")))
 (abs_continuous 0
  (abs_continuous-1 nil 3429890484
   ("" (skosimp)
    (("" (typepred "g!1")
      (("" (expand "metric_continuous?")
        (("" (expand "metric_continuous_at?")
          (("" (skosimp)
            (("" (skosimp)
              (("" (inst - "x!1")
                (("" (inst - "epsilon!1")
                  (("" (skosimp)
                    (("" (inst + "delta!1")
                      (("" (expand "member")
                        (("" (skosimp)
                          (("" (inst - "x!2")
                            (("" (assert)
                              (("" (hide -2)
                                (("" (expand "ball")
                                  (("" (expand "abs")
                                    (("" (expand "abs") (("" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_continuous type-eq-decl nil metric_continuity nil)
    (metric_continuous? const-decl "bool" metric_continuity nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (d formal-const-decl "metric" real_continuity nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil real_continuity nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (metric_continuous_at? const-decl "bool" metric_continuity nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (ball_is_metric_open application-judgement "metric_open" real_continuity
     nil)
    (ball_is_metric_open application-judgement "metric_open" real_continuity
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (member const-decl "bool" sets nil))
   nil
   (abs_continuous subtype
    "real_fun_ops[real_continuity.T].abs(real_continuity.g)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]")))
 (expt_real_continuous_TCC1 0
  (expt_real_continuous_TCC1-1 nil 3433761206 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil real_continuity nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (metric? const-decl "bool" metric_def nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (d formal-const-decl "metric" real_continuity nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (metric_continuous? const-decl "bool" metric_continuity nil)
    (metric_continuous type-eq-decl nil metric_continuity nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (metric_continuous_at? const-decl "bool" metric_continuity nil)
    (member const-decl "bool" sets nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (expt_real_continuous_ subtype "real_continuity.h"
    "[real_continuity.T -> nnreal]")))
 (expt_real_continuous 0
  (expt_real_continuous-2 "" 3790338250
   (""
    (case "forall (a,eps:posreal,x:nnreal): exists (delta:posreal): forall (y:nnreal): abs(x-y) < delta => abs(x^a-y^a) < eps")
    (("1" (skosimp)
      (("1" (expand "metric_continuous?")
        (("1" (expand "^" 1)
          (("1" (expand "metric_continuous_at?")
            (("1" (expand "member")
              (("1" (expand "ball")
                (("1" (skosimp*)
                  (("1" (typepred "a!1")
                    (("1" (typepred "h!1")
                      (("1" (inst -5 "a!1" "epsilon!1" "h!1(x!1)")
                        (("1" (skosimp)
                          (("1" (expand "metric_continuous?")
                            (("1" (expand "metric_continuous_at?")
                              (("1" (inst - "x!1")
                                (("1" (inst - "delta!1")
                                  (("1" (skosimp)
                                    (("1" (expand "member")
                                      (("1"
                                        (expand "ball")
                                        (("1"
                                          (inst + "delta!2")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst - "x!2")
                                              (("1"
                                                (inst -5 "h!1(x!2)")
                                                (("1" (assert) nil nil)
                                                 ("2" (inst - "x!2") nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst - "x!1") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp)
        (("2" (case-replace "x!1=0")
          (("1" (rewrite "real_expt_0x")
            (("1"
              (case "EXISTS (delta: posreal):
        FORALL (y: nnreal): y < delta => y ^ a!1 < eps!1")
              (("1" (skosimp)
                (("1" (inst + "delta!1")
                  (("1" (skosimp)
                    (("1" (inst - "y!1")
                      (("1" (expand "abs")
                        (("1" (assert)
                          (("1" (case-replace "y!1=0")
                            (("1" (assert)
                              (("1" (rewrite "real_expt_0x")
                                (("1" (assert) nil nil)) nil))
                              nil)
                             ("2" (assert)
                              (("2" (assert)
                                (("2"
                                  (lemma "real_expt_pos"
                                   ("px" "y!1" "a" "a!1"))
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (inst + "eps!1^(1/a!1)")
                  (("1" (skosimp)
                    (("1"
                      (lemma "real_expt_strict_increasing"
                       ("x" "y!1" "y" "eps!1 ^ (1 / a!1)" "pa" "a!1"))
                      (("1" (assert)
                        (("1" (rewrite "real_expt_times" -1 :dir rl)
                          (("1" (assert)
                            (("1" (rewrite "real_expt_x1") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "real_expt_pos") nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "x!1>0")
            (("1" (hide 1)
              (("1"
                (case "EXISTS (delta: posreal):
        FORALL (y: nnreal): y>x!1& y-x!1<delta => y^a!1-x!1^a!1<eps!1")
                (("1"
                  (case "EXISTS (delta: posreal):
        FORALL (y: nnreal): y<x!1& x!1-y<delta => x!1^a!1-y^a!1<eps!1")
                  (("1" (skosimp*)
                    (("1" (inst + "min(delta!1,delta!2)")
                      (("1" (skosimp)
                        (("1" (lemma "trich_lt" ("x" "x!1" "y" "y!1"))
                          (("1" (split -1)
                            (("1" (inst -3 "y!1")
                              (("1" (assert)
                                (("1"
                                  (lemma "real_expt_strict_increasing"
                                   ("x" "x!1" "y" "y!1" "pa" "a!1"))
                                  (("1" (expand "abs")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1) (("2" (assert) nil nil)) nil)
                             ("3" (inst - "y!1")
                              (("3" (assert)
                                (("3"
                                  (lemma "real_expt_strict_increasing"
                                   ("y" "x!1" "x" "y!1" "pa" "a!1"))
                                  (("3" (expand "abs")
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2)
                    (("2" (lemma "trich_lt" ("x" "x!1^a!1" "y" "eps!1"))
                      (("2" (split -1)
                        (("1" (inst + "1")
                          (("1" (skosimp)
                            (("1"
                              (lemma "real_expt_pos" ("px" "y!1" "a" "a!1"))
                              (("1" (assert) nil nil) ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace -1)
                          (("2" (inst + "x!1/2")
                            (("1" (skosimp)
                              (("1"
                                (lemma "real_expt_pos" ("px" "y!1" "a" "a!1"))
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("3" (inst + "x!1-(x!1^a!1-eps!1)^(1/a!1)")
                          (("1" (skosimp)
                            (("1"
                              (lemma "real_expt_strict_increasing"
                               ("x" "(x!1 ^ a!1 - eps!1) ^ (1 / a!1)" "y"
                                "y!1" "pa" "a!1"))
                              (("1" (assert)
                                (("1" (rewrite "real_expt_times" -1 :dir rl)
                                  (("1" (rewrite "real_expt_x1")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2"
                            (lemma "real_expt_strict_increasing"
                             ("x" "x!1 ^ a!1 - eps!1" "y" "x!1 ^ a!1" "pa"
                              "1/a!1"))
                            (("1" (assert)
                              (("1" (rewrite "real_expt_times" -1 :dir rl)
                                (("1" (rewrite "real_expt_x1")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("3" (flatten) (("3" (assert) nil nil)) nil)
                           ("4" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (inst + "(eps!1+x!1^a!1)^(1/a!1)-x!1")
                    (("1" (skosimp)
                      (("1"
                        (lemma "real_expt_strict_increasing"
                         ("x" "y!1" "y" "(eps!1 + x!1 ^ a!1) ^ (1 / a!1)" "pa"
                          "a!1"))
                        (("1" (assert)
                          (("1" (rewrite "real_expt_times" -1 :dir rl)
                            (("1" (rewrite "real_expt_x1" -1)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (lemma "real_expt_strict_increasing"
                       ("x" "x!1^a!1" "y" "x!1 ^ a!1 + eps!1" "pa" "1/a!1"))
                      (("2" (assert)
                        (("2" (rewrite "real_expt_times" -1 :dir rl)
                          (("2" (rewrite "real_expt_x1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("3" (flatten) (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (expt_real_continuous subtype
    "real_fun_power[real_continuity.T].^(real_continuity.h, real_continuity.a)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]"))
  (expt_real_continuous-1 nil 3429893655
   (""
    (case "forall (a,eps:posreal,x:nnreal): exists (delta:posreal): forall (y:nnreal): abs(x-y) < delta => abs(x^a-y^a) < eps")
    (("1" (skosimp)
      (("1" (expand "metric_continuous?")
        (("1" (expand "^" 1)
          (("1" (expand "metric_continuous_at?")
            (("1" (expand "member")
              (("1" (expand "ball")
                (("1" (skosimp*)
                  (("1" (typepred "a!1")
                    (("1" (typepred "h!1")
                      (("1" (inst -5 "a!1" "epsilon!1" "h!1(x!1)")
                        (("1" (skosimp)
                          (("1" (expand "metric_continuous?")
                            (("1" (expand "metric_continuous_at?")
                              (("1" (inst - "x!1")
                                (("1" (inst - "delta!1")
                                  (("1" (skosimp)
                                    (("1" (expand "member")
                                      (("1"
                                        (expand "ball")
                                        (("1"
                                          (inst + "delta!2")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst - "x!2")
                                              (("1"
                                                (inst -5 "h!1(x!2)")
                                                (("1" (assert) nil nil)
                                                 ("2" (inst - "x!2") nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst - "x!1") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp)
        (("2" (case-replace "x!1=0")
          (("1" (rewrite "real_expt_0x")
            (("1"
              (case "EXISTS (delta: posreal):
        FORALL (y: nnreal): y < delta => y ^ a!1 < eps!1")
              (("1" (skosimp)
                (("1" (inst + "delta!1")
                  (("1" (skosimp)
                    (("1" (inst - "y!1")
                      (("1" (expand "abs")
                        (("1" (assert)
                          (("1" (case-replace "y!1=0")
                            (("1" (assert)
                              (("1" (rewrite "real_expt_0x")
                                (("1" (assert) nil nil)) nil))
                              nil)
                             ("2" (assert)
                              (("2" (assert)
                                (("2"
                                  (lemma "real_expt_pos"
                                   ("px" "y!1" "a" "a!1"))
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (inst + "eps!1^(1/a!1)")
                  (("1" (skosimp)
                    (("1"
                      (lemma "real_expt_strict_increasing"
                       ("x" "y!1" "y" "eps!1 ^ (1 / a!1)" "pa" "a!1"))
                      (("1" (assert)
                        (("1" (rewrite "real_expt_times" -1 :dir rl)
                          (("1" (assert)
                            (("1" (rewrite "real_expt_x1") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "real_expt_pos") nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "x!1>0")
            (("1" (hide 1)
              (("1"
                (case "EXISTS (delta: posreal):
        FORALL (y: nnreal): y>x!1& y-x!1<delta => y^a!1-x!1^a!1<eps!1")
                (("1"
                  (case "EXISTS (delta: posreal):
        FORALL (y: nnreal): y<x!1& x!1-y<delta => x!1^a!1-y^a!1<eps!1")
                  (("1" (skosimp*)
                    (("1" (inst + "min(delta!1,delta!2)")
                      (("1" (skosimp)
                        (("1" (lemma "trich_lt" ("x" "x!1" "y" "y!1"))
                          (("1" (split -1)
                            (("1" (inst -3 "y!1")
                              (("1" (assert)
                                (("1"
                                  (lemma "real_expt_strict_increasing"
                                   ("x" "x!1" "y" "y!1" "pa" "a!1"))
                                  (("1" (expand "abs")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2" (assert)
                                (("2" (expand "abs") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (inst - "y!1")
                              (("3" (assert)
                                (("3"
                                  (lemma "real_expt_strict_increasing"
                                   ("y" "x!1" "x" "y!1" "pa" "a!1"))
                                  (("3" (expand "abs")
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2)
                    (("2" (lemma "trich_lt" ("x" "x!1^a!1" "y" "eps!1"))
                      (("2" (split -1)
                        (("1" (inst + "1")
                          (("1" (skosimp)
                            (("1"
                              (lemma "real_expt_pos" ("px" "y!1" "a" "a!1"))
                              (("1" (assert) nil nil) ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace -1)
                          (("2" (inst + "x!1/2")
                            (("1" (skosimp)
                              (("1"
                                (lemma "real_expt_pos" ("px" "y!1" "a" "a!1"))
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("3" (inst + "x!1-(x!1^a!1-eps!1)^(1/a!1)")
                          (("1" (skosimp)
                            (("1"
                              (lemma "real_expt_strict_increasing"
                               ("x" "(x!1 ^ a!1 - eps!1) ^ (1 / a!1)" "y"
                                "y!1" "pa" "a!1"))
                              (("1" (assert)
                                (("1" (rewrite "real_expt_times" -1 :dir rl)
                                  (("1" (rewrite "real_expt_x1")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2"
                            (lemma "real_expt_strict_increasing"
                             ("x" "x!1 ^ a!1 - eps!1" "y" "x!1 ^ a!1" "pa"
                              "1/a!1"))
                            (("1" (assert)
                              (("1" (rewrite "real_expt_times" -1 :dir rl)
                                (("1" (rewrite "real_expt_x1")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("3" (flatten) (("3" (assert) nil nil)) nil)
                           ("4" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (inst + "(eps!1+x!1^a!1)^(1/a!1)-x!1")
                    (("1" (skosimp)
                      (("1"
                        (lemma "real_expt_strict_increasing"
                         ("x" "y!1" "y" "(eps!1 + x!1 ^ a!1) ^ (1 / a!1)" "pa"
                          "a!1"))
                        (("1" (assert)
                          (("1" (rewrite "real_expt_times" -1 :dir rl)
                            (("1" (rewrite "real_expt_x1" -1)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (lemma "real_expt_strict_increasing"
                       ("x" "x!1^a!1" "y" "x!1 ^ a!1 + eps!1" "pa" "1/a!1"))
                      (("2" (assert)
                        (("2" (rewrite "real_expt_times" -1 :dir rl)
                          (("2" (rewrite "real_expt_x1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("3" (flatten) (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_expt_pos formula-decl nil real_expt power)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (eps!1 skolem-const-decl "posreal" real_continuity nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (a!1 skolem-const-decl "posreal" real_continuity nil)
    (real_expt_strict_increasing formula-decl nil real_expt power)
    (real_expt_times formula-decl nil real_expt power)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_expt_x1 formula-decl nil real_expt power)
    (real_expt_0x formula-decl nil real_expt power)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (trich_lt formula-decl nil real_props nil)
    (abs_nat formula-decl nil abs_lems reals)
    (x!1 skolem-const-decl "nnreal" real_continuity nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (^ const-decl "[T -> nnreal]" real_fun_power power)
    (member const-decl "bool" sets nil)
    (T formal-type-decl nil real_continuity nil)
    (metric? const-decl "bool" metric_def nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (d formal-const-decl "metric" real_continuity nil)
    (metric_continuous type-eq-decl nil metric_continuity nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!2 skolem-const-decl "T" real_continuity nil)
    (x!1 skolem-const-decl "T" real_continuity nil)
    (h!1 skolem-const-decl "{g | FORALL x: g(x) >= 0}" real_continuity nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (metric_continuous_at? const-decl "bool" metric_continuity nil)
    (metric_continuous? const-decl "bool" metric_continuity nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "nnreal" real_expt power))
   nil
   (expt_real_continuous subtype
    "real_fun_power[real_continuity.T].^(real_continuity.h, real_continuity.a)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]")))
 (expt_nat_continuous 0
  (expt_nat_continuous-2 "" 3790338259
   ("" (skosimp)
    (("" (case-replace "n!1=0")
      (("1" (expand "expt")
        (("1" (expand "expt")
          (("1" (lemma "const_continuous" ("a" "1"))
            (("1" (rewrite "metric_continuous_def")
              (("1" (expand "const_fun") (("1" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (case "n!1>0")
        (("1" (hide 1)
          (("1" (typepred "g!1")
            (("1"
              (case "FORALL (epsilon:posreal,x:real): EXISTS (delta:posreal): FORALL (y:real): abs(x-y)<delta => abs(expt(x,n!1)-expt(y,n!1))<epsilon")
              (("1" (expand "metric_continuous?")
                (("1" (skosimp)
                  (("1" (inst - "x!1")
                    (("1" (expand "metric_continuous_at?")
                      (("1" (expand "ball")
                        (("1" (expand "member")
                          (("1" (skosimp)
                            (("1" (inst - "epsilon!1" "g!1(x!1)")
                              (("1" (skosimp)
                                (("1" (inst -2 "delta!1")
                                  (("1" (skosimp)
                                    (("1" (inst + "delta!2")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst -2 "x!2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst - "g!1(x!2)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "expt" 1)
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 2)
                (("2" (skosimp)
                  (("2"
                    (case "forall (n:nat,x:nnreal): EXISTS (delta: posreal):
        FORALL (y: nnreal):
          abs(x - y) < delta =>
           abs(expt(x, n) - expt(y, n)) < epsilon!1")
                    (("1"
                      (case "forall (n:nat,x:negreal): EXISTS (delta: posreal):
        FORALL (y: negreal):
          abs(x - y) < delta =>
           abs(expt(x, n) - expt(y, n)) < epsilon!1")
                      (("1" (case "x!1>=0")
                        (("1" (hide -2)
                          (("1" (inst - "n!1" "x!1")
                            (("1" (skosimp)
                              (("1" (expand ">=" -1)
                                (("1" (expand "<=" -1)
                                  (("1" (split -1)
                                    (("1" (inst + "min(x!1,delta!1)")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst - "y!1")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (replace -1 * rl)
                                      (("2"
                                        (expand "expt" -2 1)
                                        (("2"
                                          (expand "expt" 1 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst + "delta!1")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst - "abs(y!1)")
                                                  (("2"
                                                    (split -2)
                                                    (("1"
                                                      (rewrite "expt_of_abs")
                                                      (("1"
                                                        (name-replace
                                                         "YN"
                                                         "expt(y!1, n!1)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -2)
                          (("2" (inst - "n!1" "x!1")
                            (("1" (skosimp)
                              (("1" (inst + "min(delta!1,-x!1)")
                                (("1" (skosimp)
                                  (("1" (inst - "y!1")
                                    (("1" (split -1)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (hide 3)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide 3) (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide -1) (("2" (grind) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (hide -2)
                          (("2" (skosimp)
                            (("2" (lemma "odd_or_even_int" ("x" "n!2"))
                              (("2" (split -1)
                                (("1"
                                  (case "forall (x:real): expt(-x,n!2)=-expt(x,n!2)")
                                  (("1" (inst - "n!2" "-x!2")
                                    (("1" (skosimp)
                                      (("1"
                                        (inst + "min(delta!1,-x!2)")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst -4 "-y!1")
                                            (("1"
                                              (split -4)
                                              (("1"
                                                (inst-cp - "x!2")
                                                (("1"
                                                  (inst - "y!1")
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (hide -2 -3 -4 -5)
                                                        (("1"
                                                          (name-replace
                                                           "XN"
                                                           "expt(x!2, n!2)")
                                                          (("1"
                                                            (name-replace
                                                             "YN"
                                                             "expt(y!1, n!2)")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-3 1))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -2 2)
                                    (("2"
                                      (case
                                       "forall (j:nat,x:real): expt(-x, 1+2*j) = -expt(x, 1+2*j)")
                                      (("1"
                                        (expand "odd?")
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (inst - "j!1" "x!3")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 2)
                                        (("2"
                                          (induct "j")
                                          (("1"
                                            (expand "expt")
                                            (("1"
                                              (expand "expt")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (expand "expt" 1)
                                              (("2"
                                                (expand "expt" 1)
                                                (("2"
                                                  (inst - "x!3")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "forall (x:real): expt(-x,n!2)=expt(x,n!2)")
                                  (("1" (typepred "x!2")
                                    (("1" (inst - "n!2" "-x!2")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst + "min(delta!1,-x!2)")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst -6 "-y!1")
                                              (("1"
                                                (split -6)
                                                (("1"
                                                  (inst-cp - "x!2")
                                                  (("1"
                                                    (inst - "y!1")
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (replace -5)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -3 2)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -3 -4 -5)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but (-1 1))
                                    (("2"
                                      (case
                                       "forall (x:real,j:nat): expt(-x,2*j) = expt(x,2*j)")
                                      (("1"
                                        (expand "even?")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (inst - "x!3" "j!1")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (induct "j")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (expand "expt")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (expand "expt" 1)
                                              (("2"
                                                (expand "expt" 1)
                                                (("2"
                                                  (inst - "x!3")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (skosimp)
                        (("2" (hide -1)
                          (("2" (case-replace "n!2=0")
                            (("1" (expand "expt")
                              (("1" (expand "abs") (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (case "n!2>0")
                              (("1" (hide 1)
                                (("1"
                                  (case "EXISTS (delta: posreal):
        FORALL (y: nnreal):
          x!2 <= y &y < x!2+delta =>
           expt(y, n!2) < expt(x!2, n!2)+epsilon!1")
                                  (("1"
                                    (case "EXISTS (delta: posreal):
        FORALL (y: nnreal):
          x!2 - delta < y & y <= x!2 =>
           expt(x!2, n!2) - epsilon!1 < expt(y, n!2)")
                                    (("1" (skosimp*)
                                      (("1"
                                        (inst + "min(delta!1,delta!2)")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst - "y!1")
                                            (("1"
                                              (inst - "y!1")
                                              (("1"
                                                (case-replace "x!2=0")
                                                (("1"
                                                  (expand "expt" 1 1)
                                                  (("1"
                                                    (expand "expt" -2 1)
                                                    (("1"
                                                      (expand "expt" -3 2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (name-replace
                                                           "YN"
                                                           "expt(y!1, n!2)")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "x!2>0")
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (case-replace "y!1=0")
                                                      (("1"
                                                        (expand "expt" 1 2)
                                                        (("1"
                                                          (expand "expt" -3 2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (name-replace
                                                               "XN"
                                                               "expt(x!2, n!2)")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "y!1>0")
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (lemma
                                                             "trich_lt"
                                                             ("x"
                                                              "x!2"
                                                              "y"
                                                              "y!1"))
                                                            (("1"
                                                              (split -1)
                                                              (("1"
                                                                (lemma
                                                                 "both_sides_expt_pos_lt_aux"
                                                                 ("px"
                                                                  "x!2"
                                                                  "py"
                                                                  "y!1"
                                                                  "m"
                                                                  "n!2-1"))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (name-replace
                                                                     "XN"
                                                                     "expt(x!2, n!2)")
                                                                    (("1"
                                                                      (name-replace
                                                                       "YN"
                                                                       "expt(y!1, n!2)")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (lemma
                                                                 "both_sides_expt_pos_lt_aux"
                                                                 ("py"
                                                                  "x!2"
                                                                  "px"
                                                                  "y!1"
                                                                  "m"
                                                                  "n!2-1"))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (name-replace
                                                                     "XN"
                                                                     "expt(x!2, n!2)")
                                                                    (("1"
                                                                      (name-replace
                                                                       "YN"
                                                                       "expt(y!1, n!2)")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide -1 2)
                                      (("2"
                                        (case-replace "x!2=0")
                                        (("1"
                                          (expand "expt" 1 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst + "1")
                                              (("1"
                                                (skosimp)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "x!2>0")
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (case
                                               "expt(x!2, n!2) - epsilon!1>0")
                                              (("1"
                                                (lemma
                                                 "posreal_div_posreal_is_posreal"
                                                 ("px" "1" "py" "n!2"))
                                                (("1"
                                                  (lemma
                                                   "real_expt_pos"
                                                   ("px"
                                                    "expt(x!2, n!2) - epsilon!1"
                                                    "a"
                                                    "1/n!2"))
                                                  (("1"
                                                    (lemma
                                                     "real_expt_strict_increasing"
                                                     ("x"
                                                      "expt(x!2, n!2) - epsilon!1"
                                                      "y"
                                                      "expt(x!2, n!2)"
                                                      "pa"
                                                      "1 / n!2"))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "real_expt_times"
                                                         ("x"
                                                          "x!2"
                                                          "a"
                                                          "n!2"
                                                          "b"
                                                          "1/n!2"))
                                                        (("1"
                                                          (rewrite
                                                           "real_expt_x1")
                                                          (("1"
                                                            (rewrite
                                                             "real_expt_int_rew"
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "^"
                                                               -1
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 *
                                                                 rl)
                                                                (("1"
                                                                  (hide -1)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "x!2-(expt(x!2, n!2) - epsilon!1) ^ (1 / n!2)")
                                                                    (("1"
                                                                      (skosimp)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "real_expt_strict_increasing"
                                                                           ("x"
                                                                            "(expt(x!2, n!2) - epsilon!1) ^ (1 / n!2)"
                                                                            "y"
                                                                            "y!1"
                                                                            "pa"
                                                                            "n!2"))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (rewrite
                                                                               "real_expt_times"
                                                                               -1
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "real_expt_x1")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "real_expt_int_rew"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "^"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil)
                                                     ("3" (assert) nil nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil)
                                                 ("2" (propax) nil nil))
                                                nil)
                                               ("2"
                                                (inst + "x!2/2")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "expt_pos_aux"
                                                       ("px" "y!1" "n" "n!2"))
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2"
                                      (lemma
                                       "real_expt_pos"
                                       ("px"
                                        "expt(x!2, n!2) + epsilon!1"
                                        "a"
                                        "1/n!2"))
                                      (("1"
                                        (lemma
                                         "real_expt_strict_increasing"
                                         ("x"
                                          "expt(x!2, n!2)"
                                          "y"
                                          "expt(x!2, n!2) + epsilon!1"
                                          "pa"
                                          "1 / n!2"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "real_expt_times"
                                             ("x"
                                              "x!2"
                                              "a"
                                              "n!2"
                                              "b"
                                              "1/n!2"))
                                            (("1"
                                              (rewrite "real_expt_x1")
                                              (("1"
                                                (rewrite
                                                 "real_expt_int_rew"
                                                 -1)
                                                (("1"
                                                  (expand "^" -1 1)
                                                  (("1"
                                                    (replace -1 * rl)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (inst
                                                         +
                                                         "(expt(x!2, n!2) + epsilon!1) ^ (1 / n!2)-x!2")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "real_expt_strict_increasing"
                                                               ("x"
                                                                "y!1"
                                                                "y"
                                                                "(expt(x!2, n!2) + epsilon!1) ^ (1 / n!2)"
                                                                "pa"
                                                                "n!2"))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "real_expt_times"
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "real_expt_x1"
                                                                     -1)
                                                                    (("1"
                                                                      (rewrite
                                                                       "real_expt_int_rew"
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "^"
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (lemma
                                                 "posreal_div_posreal_is_posreal"
                                                 ("px" "1" "py" "n!2"))
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "posreal_div_posreal_is_posreal"
                                             ("px" "1" "py" "n!2"))
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   nil shostak
   (expt_nat_continuous subtype
    "real_fun_power[real_continuity.T].expt(real_continuity.g, real_continuity.n)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]"))
  (expt_nat_continuous-1 nil 3429907898
   ("" (skosimp)
    (("" (case-replace "n!1=0")
      (("1" (expand "expt")
        (("1" (expand "expt")
          (("1" (lemma "const_continuous" ("a" "1"))
            (("1" (rewrite "metric_continuous_def")
              (("1" (expand "const_fun") (("1" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (case "n!1>0")
        (("1" (hide 1)
          (("1" (typepred "g!1")
            (("1"
              (case "FORALL (epsilon:posreal,x:real): EXISTS (delta:posreal): FORALL (y:real): abs(x-y)<delta => abs(expt(x,n!1)-expt(y,n!1))<epsilon")
              (("1" (expand "metric_continuous?")
                (("1" (skosimp)
                  (("1" (inst - "x!1")
                    (("1" (expand "metric_continuous_at?")
                      (("1" (expand "ball")
                        (("1" (expand "member")
                          (("1" (skosimp)
                            (("1" (inst - "epsilon!1" "g!1(x!1)")
                              (("1" (skosimp)
                                (("1" (inst -2 "delta!1")
                                  (("1" (skosimp)
                                    (("1" (inst + "delta!2")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst -2 "x!2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst - "g!1(x!2)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "expt" 1)
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 2)
                (("2" (skosimp)
                  (("2"
                    (case "forall (n:nat,x:nnreal): EXISTS (delta: posreal):
        FORALL (y: nnreal):
          abs(x - y) < delta =>
           abs(expt(x, n) - expt(y, n)) < epsilon!1")
                    (("1"
                      (case "forall (n:nat,x:negreal): EXISTS (delta: posreal):
        FORALL (y: negreal):
          abs(x - y) < delta =>
           abs(expt(x, n) - expt(y, n)) < epsilon!1")
                      (("1" (case "x!1>=0")
                        (("1" (hide -2)
                          (("1" (inst - "n!1" "x!1")
                            (("1" (skosimp)
                              (("1" (expand ">=" -1)
                                (("1" (expand "<=" -1)
                                  (("1" (split -1)
                                    (("1" (inst + "min(x!1,delta!1)")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst - "y!1")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (replace -1 * rl)
                                      (("2"
                                        (expand "expt" -2 1)
                                        (("2"
                                          (expand "expt" 1 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst + "delta!1")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst - "abs(y!1)")
                                                  (("2"
                                                    (split -2)
                                                    (("1"
                                                      (rewrite "expt_of_abs")
                                                      (("1"
                                                        (name-replace
                                                         "YN"
                                                         "expt(y!1, n!1)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -2)
                          (("2" (inst - "n!1" "x!1")
                            (("1" (skosimp)
                              (("1" (inst + "min(delta!1,-x!1)")
                                (("1" (skosimp)
                                  (("1" (inst - "y!1")
                                    (("1" (split -1)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (hide 3)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide 3) (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide -1) (("2" (grind) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (hide -2)
                          (("2" (skosimp)
                            (("2" (lemma "odd_or_even_int" ("x" "n!2"))
                              (("2" (split -1)
                                (("1"
                                  (case "forall (x:real): expt(-x,n!2)=-expt(x,n!2)")
                                  (("1" (inst - "n!2" "-x!2")
                                    (("1" (skosimp)
                                      (("1"
                                        (inst + "min(delta!1,-x!2)")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst -4 "-y!1")
                                            (("1"
                                              (split -4)
                                              (("1"
                                                (inst-cp - "x!2")
                                                (("1"
                                                  (inst - "y!1")
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (hide -2 -3 -4 -5)
                                                        (("1"
                                                          (name-replace
                                                           "XN"
                                                           "expt(x!2, n!2)")
                                                          (("1"
                                                            (name-replace
                                                             "YN"
                                                             "expt(y!1, n!2)")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-3 1))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -2 2)
                                    (("2"
                                      (case
                                       "forall (j:nat,x:real): expt(-x, 1+2*j) = -expt(x, 1+2*j)")
                                      (("1"
                                        (expand "odd?")
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (inst - "j!1" "x!3")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 2)
                                        (("2"
                                          (induct "j")
                                          (("1"
                                            (expand "expt")
                                            (("1"
                                              (expand "expt")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (expand "expt" 1)
                                              (("2"
                                                (expand "expt" 1)
                                                (("2"
                                                  (inst - "x!3")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "forall (x:real): expt(-x,n!2)=expt(x,n!2)")
                                  (("1" (typepred "x!2")
                                    (("1" (inst - "n!2" "-x!2")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst + "min(delta!1,-x!2)")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst -6 "-y!1")
                                              (("1"
                                                (split -6)
                                                (("1"
                                                  (inst-cp - "x!2")
                                                  (("1"
                                                    (inst - "y!1")
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (replace -5)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -3 2)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -3 -4 -5)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but (-1 1))
                                    (("2"
                                      (case
                                       "forall (x:real,j:nat): expt(-x,2*j) = expt(x,2*j)")
                                      (("1"
                                        (expand "even?")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (inst - "x!3" "j!1")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (induct "j")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (expand "expt")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (expand "expt" 1)
                                              (("2"
                                                (expand "expt" 1)
                                                (("2"
                                                  (inst - "x!3")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (skosimp)
                        (("2" (hide -1)
                          (("2" (case-replace "n!2=0")
                            (("1" (expand "expt")
                              (("1" (expand "abs") (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (case "n!2>0")
                              (("1" (hide 1)
                                (("1"
                                  (case "EXISTS (delta: posreal):
        FORALL (y: nnreal):
          x!2 <= y &y < x!2+delta =>
           expt(y, n!2) < expt(x!2, n!2)+epsilon!1")
                                  (("1"
                                    (case "EXISTS (delta: posreal):
        FORALL (y: nnreal):
          x!2 - delta < y & y <= x!2 =>
           expt(x!2, n!2) - epsilon!1 < expt(y, n!2)")
                                    (("1" (skosimp*)
                                      (("1"
                                        (inst + "min(delta!1,delta!2)")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst - "y!1")
                                            (("1"
                                              (inst - "y!1")
                                              (("1"
                                                (case-replace "x!2=0")
                                                (("1"
                                                  (expand "expt" 1 1)
                                                  (("1"
                                                    (expand "expt" -2 1)
                                                    (("1"
                                                      (expand "expt" -3 2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (name-replace
                                                           "YN"
                                                           "expt(y!1, n!2)")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "x!2>0")
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (case-replace "y!1=0")
                                                      (("1"
                                                        (expand "expt" 1 2)
                                                        (("1"
                                                          (expand "expt" -3 2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (name-replace
                                                               "XN"
                                                               "expt(x!2, n!2)")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "y!1>0")
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (lemma
                                                             "trich_lt"
                                                             ("x"
                                                              "x!2"
                                                              "y"
                                                              "y!1"))
                                                            (("1"
                                                              (split -1)
                                                              (("1"
                                                                (lemma
                                                                 "both_sides_expt_pos_lt_aux"
                                                                 ("px"
                                                                  "x!2"
                                                                  "py"
                                                                  "y!1"
                                                                  "m"
                                                                  "n!2-1"))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (name-replace
                                                                     "XN"
                                                                     "expt(x!2, n!2)")
                                                                    (("1"
                                                                      (name-replace
                                                                       "YN"
                                                                       "expt(y!1, n!2)")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "abs")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (lemma
                                                                 "both_sides_expt_pos_lt_aux"
                                                                 ("py"
                                                                  "x!2"
                                                                  "px"
                                                                  "y!1"
                                                                  "m"
                                                                  "n!2-1"))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (name-replace
                                                                     "XN"
                                                                     "expt(x!2, n!2)")
                                                                    (("1"
                                                                      (name-replace
                                                                       "YN"
                                                                       "expt(y!1, n!2)")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide -1 2)
                                      (("2"
                                        (case-replace "x!2=0")
                                        (("1"
                                          (expand "expt" 1 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst + "1")
                                              (("1"
                                                (skosimp)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "x!2>0")
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (case
                                               "expt(x!2, n!2) - epsilon!1>0")
                                              (("1"
                                                (lemma
                                                 "posreal_div_posreal_is_posreal"
                                                 ("px" "1" "py" "n!2"))
                                                (("1"
                                                  (lemma
                                                   "real_expt_pos"
                                                   ("px"
                                                    "expt(x!2, n!2) - epsilon!1"
                                                    "a"
                                                    "1/n!2"))
                                                  (("1"
                                                    (lemma
                                                     "real_expt_strict_increasing"
                                                     ("x"
                                                      "expt(x!2, n!2) - epsilon!1"
                                                      "y"
                                                      "expt(x!2, n!2)"
                                                      "pa"
                                                      "1 / n!2"))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "real_expt_times"
                                                         ("x"
                                                          "x!2"
                                                          "a"
                                                          "n!2"
                                                          "b"
                                                          "1/n!2"))
                                                        (("1"
                                                          (rewrite
                                                           "real_expt_x1")
                                                          (("1"
                                                            (rewrite
                                                             "real_expt_int_rew"
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "^"
                                                               -1
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 *
                                                                 rl)
                                                                (("1"
                                                                  (hide -1)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "x!2-(expt(x!2, n!2) - epsilon!1) ^ (1 / n!2)")
                                                                    (("1"
                                                                      (skosimp)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "real_expt_strict_increasing"
                                                                           ("x"
                                                                            "(expt(x!2, n!2) - epsilon!1) ^ (1 / n!2)"
                                                                            "y"
                                                                            "y!1"
                                                                            "pa"
                                                                            "n!2"))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (rewrite
                                                                               "real_expt_times"
                                                                               -1
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "real_expt_x1")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "real_expt_int_rew"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "^"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil)
                                                     ("3" (assert) nil nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil)
                                                 ("2" (propax) nil nil))
                                                nil)
                                               ("2"
                                                (inst + "x!2/2")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "expt_pos_aux"
                                                       ("px" "y!1" "n" "n!2"))
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2"
                                      (lemma
                                       "real_expt_pos"
                                       ("px"
                                        "expt(x!2, n!2) + epsilon!1"
                                        "a"
                                        "1/n!2"))
                                      (("1"
                                        (lemma
                                         "real_expt_strict_increasing"
                                         ("x"
                                          "expt(x!2, n!2)"
                                          "y"
                                          "expt(x!2, n!2) + epsilon!1"
                                          "pa"
                                          "1 / n!2"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "real_expt_times"
                                             ("x"
                                              "x!2"
                                              "a"
                                              "n!2"
                                              "b"
                                              "1/n!2"))
                                            (("1"
                                              (rewrite "real_expt_x1")
                                              (("1"
                                                (rewrite
                                                 "real_expt_int_rew"
                                                 -1)
                                                (("1"
                                                  (expand "^" -1 1)
                                                  (("1"
                                                    (replace -1 * rl)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (inst
                                                         +
                                                         "(expt(x!2, n!2) + epsilon!1) ^ (1 / n!2)-x!2")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "real_expt_strict_increasing"
                                                               ("x"
                                                                "y!1"
                                                                "y"
                                                                "(expt(x!2, n!2) + epsilon!1) ^ (1 / n!2)"
                                                                "pa"
                                                                "n!2"))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "real_expt_times"
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "real_expt_x1"
                                                                     -1)
                                                                    (("1"
                                                                      (rewrite
                                                                       "real_expt_int_rew"
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "^"
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (lemma
                                                 "posreal_div_posreal_is_posreal"
                                                 ("px" "1" "py" "n!2"))
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "posreal_div_posreal_is_posreal"
                                             ("px" "1" "py" "n!2"))
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (expt def-decl "real" exponentiation nil)
    (const_fun const-decl "[S -> T]" const_fun_def structures)
    (metric_continuous_def formula-decl nil metric_continuity nil)
    (const_is_continuous application-judgement "continuous
    [T, metric_induced_topology[T, d], real,
     metric_induced_topology[real, (LAMBDA (x, y: real): abs(x - y))]]"
     real_continuity nil)
    (const_continuous formula-decl nil constant_continuity topology)
    (T formal-type-decl nil real_continuity nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (nnreal type-eq-decl nil real_types nil)
    (metric? const-decl "bool" metric_def nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (d formal-const-decl "metric" real_continuity nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt const-decl "[T -> real]" real_fun_power power)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (metric_continuous_at? const-decl "bool" metric_continuity nil)
    (member const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (real_expt_pos formula-decl nil real_expt power)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_expt_x1 formula-decl nil real_expt power)
    (^ const-decl "real" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (epsilon!1 skolem-const-decl "posreal" real_continuity nil)
    (n!2 skolem-const-decl "nat" real_continuity nil)
    (x!2 skolem-const-decl "nnreal" real_continuity nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (real_expt_int_rew formula-decl nil real_expt power)
    (^ const-decl "nnreal" real_expt power)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_expt_times formula-decl nil real_expt power)
    (real_expt_strict_increasing formula-decl nil real_expt power)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (expt_pos_aux formula-decl nil exponentiation nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (both_sides_expt_pos_lt_aux formula-decl nil exponentiation nil)
    (abs_nat formula-decl nil abs_lems reals)
    (trich_lt formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (y!1 skolem-const-decl "real" real_continuity nil)
    (delta!1 skolem-const-decl "posreal" real_continuity nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (expt_of_abs formula-decl nil exponentiation nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (delta!1 skolem-const-decl "posreal" real_continuity nil)
    (y!1 skolem-const-decl "real" real_continuity nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (x!1 skolem-const-decl "real" real_continuity nil)
    (odd_or_even_int formula-decl nil naturalnumbers nil)
    (delta!1 skolem-const-decl "posreal" real_continuity nil)
    (even? const-decl "bool" integers nil)
    (j!1 skolem-const-decl "int" real_continuity nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (x!2 skolem-const-decl "negreal" real_continuity nil)
    (delta!1 skolem-const-decl "posreal" real_continuity nil)
    (nzreal_min application-judgement "{z: nzreal | z <= x AND z <= y}"
     real_defs nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j!1 skolem-const-decl "int" real_continuity nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (odd? const-decl "bool" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (metric_continuous? const-decl "bool" metric_continuity nil)
    (metric_continuous type-eq-decl nil metric_continuity nil)
    (> const-decl "bool" reals nil))
   nil
   (expt_nat_continuous subtype
    "real_fun_power[real_continuity.T].expt(real_continuity.g, real_continuity.n)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]")))
 (sq_continuous 0
  (sq_continuous-1 nil 3429893655
   ("" (skosimp)
    (("" (lemma "expt_nat_continuous" ("g" "g!1" "n" "2"))
      (("" (expand "sq")
        (("" (expand "sq")
          (("" (expand "expt")
            (("" (expand "expt")
              (("" (expand "expt")
                (("" (expand "expt") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (metric_continuous type-eq-decl nil metric_continuity nil)
    (metric_continuous? const-decl "bool" metric_continuity nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (d formal-const-decl "metric" real_continuity nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil real_continuity nil)
    (expt_nat_continuous judgement-tcc nil real_continuity nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sq const-decl "nonneg_real" sq reals)
    (expt def-decl "real" exponentiation nil)
    (expt const-decl "[T -> real]" real_fun_power power)
    (sq const-decl "[T -> nnreal]" real_fun_ops_aux reals))
   nil
   (sq_continuous subtype
    "real_fun_ops_aux[real_continuity.T].sq(real_continuity.g)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]")))
 (min_continuous 0
  (min_continuous-1 nil 3429890484
   ("" (skosimp)
    (("" (typepred "g2!1")
      (("" (typepred "g1!1")
        (("" (expand "metric_continuous?")
          (("" (skosimp)
            (("" (inst - "x!1")
              (("" (inst - "x!1")
                (("" (expand "min")
                  (("" (expand "metric_continuous_at?")
                    (("" (skosimp)
                      (("" (inst - "epsilon!1")
                        (("" (inst - "epsilon!1")
                          (("" (skosimp*)
                            (("" (inst + "min(delta!1,delta!2)")
                              (("" (skosimp)
                                (("" (inst - "x!2")
                                  (("" (inst - "x!2")
                                    (("" (expand "member")
                                      ((""
                                        (expand "ball")
                                        ((""
                                          (expand "min")
                                          (("" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_continuous type-eq-decl nil metric_continuity nil)
    (metric_continuous? const-decl "bool" metric_continuity nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (d formal-const-decl "metric" real_continuity nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil real_continuity nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (min const-decl "[T -> real]" real_fun_ops_aux reals)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil) (member const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (metric_continuous_at? const-decl "bool" metric_continuity nil))
   nil
   (min_continuous subtype
    "real_fun_ops_aux[real_continuity.T].min(real_continuity.g1, real_continuity.g2)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]")))
 (max_continuous 0
  (max_continuous-1 nil 3429890484
   ("" (skosimp)
    (("" (typepred "g2!1")
      (("" (typepred "g1!1")
        (("" (expand "metric_continuous?")
          (("" (skosimp)
            (("" (inst - "x!1")
              (("" (inst - "x!1")
                (("" (expand "metric_continuous_at?")
                  (("" (skosimp)
                    (("" (inst - "epsilon!1")
                      (("" (inst - "epsilon!1")
                        (("" (skosimp*)
                          (("" (inst + "min(delta!1,delta!2)")
                            (("" (skosimp)
                              (("" (inst - "x!2")
                                (("" (inst - "x!2") (("" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_continuous type-eq-decl nil metric_continuity nil)
    (metric_continuous? const-decl "bool" metric_continuity nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (d formal-const-decl "metric" real_continuity nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil real_continuity nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (metric_continuous_at? const-decl "bool" metric_continuity nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ball_is_metric_open application-judgement "metric_open" real_continuity
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ball_is_metric_open application-judgement "metric_open" real_continuity
     nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (member const-decl "bool" sets nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (max const-decl "[T -> real]" real_fun_ops_aux reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil))
   nil
   (max_continuous subtype
    "real_fun_ops_aux[real_continuity.T].max(real_continuity.g1, real_continuity.g2)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]")))
 (minimum_continuous 0
  (minimum_continuous-1 nil 3429890484
   ("" (induct "n")
    (("1" (skosimp) (("1" (expand "minimum") (("1" (propax) nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "minimum" 1)
        (("2" (inst - "u!1")
          (("2"
            (lemma "min_continuous"
             ("g1" "u!1(1+j!1)" "g2" "minimum(u!1, j!1)"))
            (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skosimp) (("3" (expand "metric?") (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((metric_zero? const-decl "bool" metric_def nil)
    (metric_symmetric? const-decl "bool" metric_def nil)
    (metric_triangle? const-decl "bool" metric_def nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min_continuous judgement-tcc nil real_continuity nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (minimum def-decl "[T -> real]" real_fun_ops_aux reals)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil real_continuity nil)
    (nnreal type-eq-decl nil real_types nil)
    (metric? const-decl "bool" metric_def nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (d formal-const-decl "metric" real_continuity nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (metric_continuous? const-decl "bool" metric_continuity nil)
    (metric_continuous type-eq-decl nil metric_continuity nil)
    (sequence type-eq-decl nil sequences nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (minimum_continuous subtype
    "real_fun_ops_aux[real_continuity.T].minimum(real_continuity.u, real_continuity.n)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]")))
 (maximum_continuous 0
  (maximum_continuous-1 nil 3429890484
   ("" (induct "n")
    (("1" (skosimp) (("1" (expand "maximum") (("1" (propax) nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst - "u!1")
        (("2" (expand "maximum" 1)
          (("2"
            (lemma "max_continuous"
             ("g1" "u!1(1+j!1)" "g2" "maximum(u!1, j!1)"))
            (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (metric_triangle? const-decl "bool" metric_def nil)
    (metric_symmetric? const-decl "bool" metric_def nil)
    (metric_zero? const-decl "bool" metric_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max_continuous judgement-tcc nil real_continuity nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (maximum def-decl "[T -> real]" real_fun_ops_aux reals)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil real_continuity nil)
    (nnreal type-eq-decl nil real_types nil)
    (metric? const-decl "bool" metric_def nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (d formal-const-decl "metric" real_continuity nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (metric_continuous? const-decl "bool" metric_continuity nil)
    (metric_continuous type-eq-decl nil metric_continuity nil)
    (sequence type-eq-decl nil sequences nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (maximum_continuous subtype
    "real_fun_ops_aux[real_continuity.T].maximum(real_continuity.u, real_continuity.n)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]")))
 (plus_continuous 0
  (plus_continuous-2 "" 3790338261
   ("" (skosimp)
    (("" (lemma "max_continuous" ("g1" "g!1" "g2" "const_fun[T,real](0)"))
      (("" (expand "plus")
        (("" (expand "const_fun")
          (("" (expand "max" -1) (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (plus_continuous subtype
    "real_fun_ops_aux[real_continuity.T].plus(real_continuity.g)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]"))
  (plus_continuous-1 nil 3429890484
   ("" (skosimp)
    (("" (lemma "max_continuous" ("g1" "g!1" "g2" "const_fun[T,real](0)"))
      (("1" (expand "plus")
        (("1" (expand "const_fun")
          (("1" (expand "max" -1) (("1" (propax) nil nil)) nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "const_fun")
          (("2" (expand "metric_continuous?")
            (("2" (expand "metric_continuous_at?")
              (("2" (skosimp*)
                (("2" (inst + "1") (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((const_fun const-decl "[S -> T]" const_fun_def structures)
    (metric_continuous type-eq-decl nil metric_continuity nil)
    (metric_continuous? const-decl "bool" metric_continuity nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (d formal-const-decl "metric" real_continuity nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil real_continuity nil)
    (max_continuous judgement-tcc nil real_continuity nil)
    (const_is_continuous application-judgement "continuous
    [T, metric_induced_topology[T, d], real,
     metric_induced_topology[real, (LAMBDA (x, y: real): abs(x - y))]]"
     real_continuity nil)
    (max const-decl "[T -> real]" real_fun_ops_aux reals)
    (plus const-decl "[T -> nnreal]" real_fun_ops_aux reals))
   nil
   (plus_continuous subtype
    "real_fun_ops_aux[real_continuity.T].plus(real_continuity.g)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]")))
 (minus_continuous 0
  (minus_continuous-2 "" 3790338262
   ("" (skosimp)
    (("" (expand "minus")
      (("" (lemma "min_continuous" ("g1" "g!1" "g2" "const_fun[T,real](0)"))
        (("" (expand "min" -1)
          (("" (expand "const_fun")
            ((""
              (lemma "opp_continuous"
               ("g" "LAMBDA (x_1: T): min(g!1(x_1), 0)"))
              (("1" (expand "-" -1) (("1" (propax) nil nil)) nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (minus_continuous subtype
    "real_fun_ops_aux[real_continuity.T].minus(real_continuity.g)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]"))
  (minus_continuous-1 nil 3429890484
   ("" (skosimp)
    (("" (expand "minus")
      (("" (lemma "min_continuous" ("g1" "g!1" "g2" "const_fun[T,real](0)"))
        (("1" (expand "min" -1)
          (("1" (expand "const_fun")
            (("1"
              (lemma "opp_continuous"
               ("g" "LAMBDA (x_1: T): min(g!1(x_1), 0)"))
              (("1" (expand "-" -1) (("1" (propax) nil nil)) nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "const_fun")
            (("2" (expand "metric_continuous?")
              (("2" (expand "metric_continuous_at?")
                (("2" (skosimp*)
                  (("2" (inst + "1") (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (minus const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (min const-decl "[T -> real]" real_fun_ops_aux reals)
    (opp_continuous judgement-tcc nil real_continuity nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (const_is_continuous application-judgement "continuous
    [T, metric_induced_topology[T, d], real,
     metric_induced_topology[real, (LAMBDA (x, y: real): abs(x - y))]]"
     real_continuity nil)
    (min_continuous judgement-tcc nil real_continuity nil)
    (T formal-type-decl nil real_continuity nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (metric? const-decl "bool" metric_def nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (d formal-const-decl "metric" real_continuity nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (metric_continuous? const-decl "bool" metric_continuity nil)
    (metric_continuous type-eq-decl nil metric_continuity nil)
    (const_fun const-decl "[S -> T]" const_fun_def structures))
   nil
   (minus_continuous subtype
    "real_fun_ops_aux[real_continuity.T].minus(real_continuity.g)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]")))
 (prod_continuous 0
  (prod_continuous-1 nil 3429890484
   ("" (skosimp)
    (("" (lemma "sum_continuous" ("g1" "g1!1" "g2" "g2!1"))
      (("" (lemma "diff_continuous" ("g1" "g1!1" "g2" "g2!1"))
        (("" (lemma "sq_continuous" ("g" "(+[T])(g1!1, g2!1)"))
          (("" (lemma "sq_continuous" ("g" "(-[T])(g1!1, g2!1)"))
            (("" (hide -3 -4)
              ((""
                (lemma "diff_continuous"
                 ("g1" "sq[T]((+[T])(g1!1, g2!1))" "g2"
                  "sq[T]((-[T])(g1!1, g2!1))"))
                ((""
                  (lemma "scal_continuous"
                   ("c" "1/4" "g"
                    "(-[T])(sq[T]((+[T])(g1!1, g2!1)), sq[T]((-[T])(g1!1, g2!1)))"))
                  ((""
                    (case-replace "(*[T]
               (1 / 4,
                (-[T])
                    (sq[T]((+[T])(g1!1, g2!1)), sq[T]((-[T])(g1!1, g2!1)))))=(*[T](g1!1, g2!1))")
                    (("" (hide-all-but 1)
                      (("" (apply-extensionality :hide? t)
                        (("" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_continuous type-eq-decl nil metric_continuity nil)
    (metric_continuous? const-decl "bool" metric_continuity nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (d formal-const-decl "metric" real_continuity nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil real_continuity nil)
    (sum_continuous judgement-tcc nil real_continuity nil)
    (sum_continuous application-judgement "metric_continuous" real_continuity
     nil)
    (sq_continuous judgement-tcc nil real_continuity nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (scal_continuous judgement-tcc nil real_continuity nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sq const-decl "nonneg_real" sq reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scal_continuous application-judgement "metric_continuous" real_continuity
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (sq const-decl "[T -> nnreal]" real_fun_ops_aux reals)
    (sq_continuous application-judgement "metric_continuous" real_continuity
     nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (diff_continuous application-judgement "metric_continuous" real_continuity
     nil)
    (diff_continuous judgement-tcc nil real_continuity nil))
   nil
   (prod_continuous subtype
    "real_fun_ops[real_continuity.T].*(real_continuity.g1, real_continuity.g2)"
    "metric_continuous[T, d, real, (LAMBDA (x, y: real): abs(x - y))]"))))


(real_topology
 (IMP_metric_space_TCC1 0
  (IMP_metric_space_TCC1-1 nil 3387600277
   ("" (expand "metric?")
    (("" (expand "metric_zero?")
      (("" (expand "metric_symmetric?")
        (("" (expand "metric_triangle?") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((metric_zero? const-decl "bool" metric_def nil)
    (metric_triangle? const-decl "bool" metric_def nil)
    (metric_symmetric? const-decl "bool" metric_def nil)
    (metric? const-decl "bool" metric_def nil))
   nil
   (IMP_metric_space subtype
    "(LAMBDA (x, y: reals.real): real_defs.abs((number_fields.-)(x, y)))"
    "metric[real]")))
 (interval_TCC1 0
  (interval_TCC1-1 nil 3454134699 ("" (subtype-tcc) nil nil)
   ((set type-eq-decl nil sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   nil (interval subtype "sets[real].emptyset" "interval")))
 (bounded_interval_TCC1 0
  (bounded_interval_TCC1-1 nil 3454134699 ("" (subtype-tcc) nil nil)
   ((set type-eq-decl nil sets nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (lower_bound const-decl "bool" bound_defs reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   nil
   (bounded_interval subtype "sets[real].emptyset"
    "bounded_interval")))
 (unbounded_interval_TCC1 0
  (unbounded_interval_TCC1-1 nil 3454134699
   ("" (expand "fullset")
    (("" (expand "unbounded_interval?")
      (("" (split)
        (("1" (grind) nil nil)
         ("2" (expand "unbounded?")
          (("2" (expand "bounded?")
            (("2" (expand "nonempty?")
              (("2" (split)
                (("1" (expand "empty?")
                  (("1" (inst - "0") (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (hide 1)
                    (("2" (expand "above_bounded")
                      (("2" (skosimp)
                        (("2" (expand "upper_bound")
                          (("2" (inst - "n!1+1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (above_bounded const-decl "bool" bounded_reals reals)
    (upper_bound const-decl "bool" bound_defs reals)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil))
   nil
   (unbounded_interval subtype "sets[real].fullset"
    "unbounded_interval")))
 (bounded_open_interval_TCC1 0
  (bounded_open_interval_TCC1-1 nil 3454134699
   ("" (expand "bounded_open_interval?")
    (("" (split)
      (("1" (grind) nil nil)
       ("2" (lemma "open_emptyset")
        (("2" (rewrite "metric_open_def") nil nil)) nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (lower_bound const-decl "bool" bound_defs reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (metric_open_def formula-decl nil metric_space nil)
    (open_emptyset formula-decl nil topology topology)
    (setofsets type-eq-decl nil sets nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   nil
   (bounded_open_interval subtype "sets[real].emptyset"
    "bounded_open_interval")))
 (open_interval_TCC1 0
  (open_interval_TCC1-1 nil 3387600277
   ("" (inst + "ball(0,1)") (("" (inst + "0" "1") nil nil)) nil)
   ((ball const-decl "set[T]" metric_space_def nil)
    (set type-eq-decl nil sets nil))
   nil
   (open_interval existence ""
    "{X | EXISTS x, r: real_topology.X = metric_space_def[real, (LAMBDA (x, y: reals.real): real_defs.abs((number_fields.-)(x, y)))].ball(real_topology.x, real_topology.r)}")))
 (open_interval_is_bounded_open_interval 0
  (open_interval_is_bounded_open_interval-1 nil 3454134699
   ("" (skolem + "X!1")
    (("" (typepred "X!1")
      (("" (skosimp)
        (("" (replace -1)
          (("" (hide -1)
            (("" (expand "bounded_open_interval?")
              (("" (expand "bounded_interval?")
                (("" (split)
                  (("1" (grind) nil nil)
                   ("2" (expand "bounded?")
                    (("2" (flatten)
                      (("2" (hide 1)
                        (("2" (split)
                          (("1" (expand "nonempty?")
                            (("1" (expand "empty?")
                              (("1"
                                (inst - "x!1")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "above_bounded")
                            (("2" (inst + "x!1+r!1")
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("3" (expand "below_bounded")
                            (("3" (inst + "x!1-r!1")
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "metric_open_ball") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ball const-decl "set[T]" metric_space_def nil)
    (set type-eq-decl nil sets nil) (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (lower_bound const-decl "bool" bound_defs reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (metric_open_ball formula-decl nil metric_space nil))
   nil
   (open_interval_is_bounded_open_interval subtype "real_topology.x"
    "bounded_open_interval")))
 (open_basis 0
  (open_basis-2 "" 3790338183
   ("" (expand "base?")
    (("" (split)
      (("1" (expand "subset?")
        (("1" (skosimp*)
          (("1" (expand "fullset")
            (("1" (expand "metric_induced_topology")
              (("1" (expand "extend")
                (("1" (expand "member")
                  (("1" (prop)
                    (("1" (skosimp)
                      (("1" (replace -1)
                        (("1" (expand "metric_open?")
                          (("1" (skosimp)
                            (("1" (case-replace "ball(x!2, r!1)(x!3)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "ball")
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (inst + "r!1-abs(x!2-x!3)")
                                      (("1"
                                        (expand "subset?")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (lemma "triangle")
                                              (("1"
                                                (inst
                                                 -
                                                 "x!2-x!3"
                                                 "x!3-x!4")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace 1 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (inst - "x!3")
                                            (("2"
                                              (lemma
                                               "ball_centre"
                                               ("x" "x!3" "r" "r!2"))
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp)
        (("2" (typepred "A!1")
          (("2" (expand "extend")
            (("2" (expand "subset?")
              (("2" (expand "member")
                (("2" (expand "fullset")
                  (("2" (expand "metric_induced_topology")
                    (("2" (expand "metric_open?")
                      (("2"
                        (name "VV"
                              "{X:set[real]| EXISTS (x:real,r:posreal): X=ball(x,r) & subset?[real](X,A!1)}")
                        (("2" (inst + "VV")
                          (("2" (split)
                            (("1" (skosimp)
                              (("1"
                                (hide -2)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "VV")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (inst + "x!2" "r!1")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (apply-extensionality :hide? t)
                              (("2"
                                (hide -1)
                                (("2"
                                  (expand "Union")
                                  (("2"
                                    (inst - "x!1")
                                    (("2"
                                      (case-replace "A!1(x!1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst + "ball(x!1,r!1)")
                                            (("1"
                                              (lemma
                                               "ball_centre"
                                               ("x" "x!1" "r" "r!1"))
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "VV")
                                              (("2"
                                                (replace -2)
                                                (("2"
                                                  (inst + "x!1" "r!1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (typepred "a!1")
                                              (("2"
                                                (expand "VV")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (expand "subset?")
                                                    (("2"
                                                      (inst - "x!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (open_basis-1 nil 3389861684
   ("" (expand "base?")
    (("" (split)
      (("1" (expand "subset?")
        (("1" (skosimp*)
          (("1" (expand "fullset")
            (("1" (expand "metric_induced_topology")
              (("1" (expand "extend")
                (("1" (expand "member")
                  (("1" (prop)
                    (("1" (skosimp)
                      (("1" (replace -1)
                        (("1" (expand "metric_open?")
                          (("1" (skosimp)
                            (("1" (case-replace "ball(x!2, r!1)(x!3)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "ball")
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (inst + "r!1-abs(x!2-x!3)")
                                      (("1"
                                        (expand "subset?")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (lemma "triangle")
                                              (("1"
                                                (inst
                                                 -
                                                 "x!2-x!3"
                                                 "x!3-x!4")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace 1 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (inst - "x!3")
                                            (("2"
                                              (lemma
                                               "ball_centre"
                                               ("x" "x!3" "r" "r!2"))
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp)
        (("2" (typepred "A!1")
          (("2" (expand "extend")
            (("2" (expand "subset?")
              (("2" (expand "member")
                (("2" (expand "fullset")
                  (("2" (expand "metric_induced_topology")
                    (("2" (expand "metric_open?")
                      (("2"
                        (name "VV"
                              "{X:set[real]| EXISTS (x:real,r:posreal): X=ball(x,r) & subset?[real](X,A!1)}")
                        (("2" (inst + "VV")
                          (("2" (split)
                            (("1" (skosimp)
                              (("1"
                                (hide -2)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "VV")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (inst + "x!2" "r!1")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (apply-extensionality :hide? t)
                              (("2"
                                (hide -1)
                                (("2"
                                  (expand "Union")
                                  (("2"
                                    (inst - "x!1")
                                    (("2"
                                      (case-replace "A!1(x!1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst + "ball(x!1,r!1)")
                                            (("1"
                                              (lemma
                                               "ball_centre"
                                               ("x" "x!1" "r" "r!1"))
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (use "metric?_abs")
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "VV")
                                              (("2"
                                                (replace -2)
                                                (("2"
                                                  (inst + "x!1" "r!1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (typepred "a!1")
                                              (("2"
                                                (expand "VV")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (expand "subset?")
                                                    (("2"
                                                      (inst - "x!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_induced_topology const-decl "setofsets[T]" metric_space_def
     nil)
    (member const-decl "bool" sets nil)
    (metric_open? const-decl "bool" metric_space_def nil)
    (set type-eq-decl nil sets nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (ball_centre formula-decl nil metric_space nil)
    (fullset const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (setofsets type-eq-decl nil sets nil)
    (Union const-decl "set" sets nil))
   shostak))
 (rational_open_interval_TCC1 0
  (rational_open_interval_TCC1-1 nil 3387600277
   ("" (inst + "ball(0,1)") (("" (inst + "0" "1") nil nil)) nil)
   ((ball const-decl "set[T]" metric_space_def nil)
    (set type-eq-decl nil sets nil))
   nil
   (rational_open_interval existence ""
    "{X | EXISTS q, pq: real_topology.X = metric_space_def[real, (LAMBDA (x, y: reals.real): real_defs.abs((number_fields.-)(x, y)))].ball(real_topology.q, real_topology.pq)}")))
 (rational_basis 0
  (rational_basis-1 nil 3387602054
   ("" (lemma "open_basis")
    (("" (expand "extend")
      (("" (expand "base?")
        (("" (flatten)
          (("" (split)
            (("1" (expand "subset?")
              (("1" (expand "member")
                (("1" (skosimp)
                  (("1" (prop)
                    (("1" (skosimp)
                      (("1" (inst -3 "x!1")
                        (("1" (prop)
                          (("1" (expand "fullset")
                            (("1" (propax) nil nil)) nil)
                           ("2" (inst + "q!1" "pq!1") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (inst - "A!1")
                (("2" (skosimp)
                  (("2"
                    (inst +
                     "{X:set[real] | EXISTS q, pq: X = ball(q, pq) & subset?[real](X,A!1)}")
                    (("2" (split)
                      (("1" (expand "subset?")
                        (("1" (skosimp)
                          (("1" (expand "member")
                            (("1" (prop)
                              (("1"
                                (expand "fullset")
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2" (inst + "q!1" "pq!1") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (apply-extensionality 1 :hide? t)
                        (("2" (expand "Union")
                          (("2" (case-replace "A!1(x!1)")
                            (("1" (replace -4 -1 rl)
                              (("1"
                                (assert)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (typepred "a!1")
                                    (("1"
                                      (expand "subset?" -4)
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (inst -4 "a!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (hide -5)
                                                  (("1"
                                                    (replace -1 -4)
                                                    (("1"
                                                      (expand
                                                       "ball"
                                                       -4)
                                                      (("1"
                                                        (name
                                                         "AA"
                                                         "ball(x!1,r!1-abs(x!2-x!1))")
                                                        (("1"
                                                          (case
                                                           "subset?[real](AA,a!1)")
                                                          (("1"
                                                            (name-replace
                                                             "R"
                                                             "r!1 - abs(x!2 - x!1)")
                                                            (("1"
                                                              (case
                                                               "R>0")
                                                              (("1"
                                                                (lemma
                                                                 "density"
                                                                 ("x"
                                                                  "x!1-R/8"
                                                                  "y"
                                                                  "x!1+R/8"))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skolem
                                                                     -
                                                                     ("q!1"))
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (lemma
                                                                         "density"
                                                                         ("x"
                                                                          "R/4"
                                                                          "y"
                                                                          "R/2"))
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (case
                                                                               "ball(q!1,r!2)(x!1)")
                                                                              (("1"
                                                                                (case
                                                                                 "subset?[real](ball(q!1, r!2),AA)")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "ball(q!1, r!2)")
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "q!1"
                                                                                     "r!2")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "subset?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("1"
                                                                                          (skosimp)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -15
                                                                                             1
                                                                                             rl)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -15)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "x!3")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "x!3")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         +
                                                                                                         "a!1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -13
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "AA")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "R")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "R")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "subset?")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (expand
                                                                   "AA")
                                                                  (("2"
                                                                    (expand
                                                                     "ball")
                                                                    (("2"
                                                                      (replace
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "triangle")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "x!2-x!1"
                                                                             "x!1-x!3")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (skosimp)
                                (("2"
                                  (typepred "a!1")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (expand "subset?")
                                      (("2"
                                        (inst - "x!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Union const-decl "set" sets nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (set type-eq-decl nil sets nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     nil)
    (setofsets type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   shostak))
 (countable_rational_open_interval 0
  (countable_rational_open_interval-1 nil 3389931575
   (""
    (lemma "is_countable_cross"
     ("X" "fullset[rat]" "Y" "fullset[posrat]"))
    (("" (lemma "nat_posrat")
      (("" (lemma "nat_rational")
        (("" (split)
          (("1" (hide -2 -3)
            (("1" (expand "fullset")
              (("1" (expand "cross_product")
                (("1" (expand "is_countable")
                  (("1" (skosimp)
                    (("1" (typepred "f!1")
                      (("1"
                        (name "F"
                              "lambda (r:rat,pq:posrat): ball(r,pq)")
                        (("1"
                          (case "bijective?[[rat, posrat],rational_open_interval](F)")
                          (("1"
                            (lemma
                             "bij_inv_is_bij[[rat, posrat], rational_open_interval]"
                             ("f" "F"))
                            (("1" (split)
                              (("1"
                                (assert)
                                (("1"
                                  (inst
                                   +
                                   "f!1 o inverse[[rat, posrat], rational_open_interval](F)")
                                  (("1"
                                    (expand "bijective?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide-all-but (-1 -6 1))
                                        (("1"
                                          (expand "o")
                                          (("1"
                                            (expand "injective?")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst
                                                 -3
                                                 "inverse[[rat, posrat], rational_open_interval](F)(x1!1)"
                                                 "inverse[[rat, posrat], rational_open_interval](F)(x2!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -
                                                     "x1!1"
                                                     "x2!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (expand "bijective?")
                              (("2"
                                (split)
                                (("1"
                                  (expand "injective?")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (expand "F")
                                      (("1"
                                        (rewrite
                                         "extensionality_postulate"
                                         -1
                                         :dir
                                         rl)
                                        (("1"
                                          (lemma
                                           "trich_lt"
                                           ("x" "x1!1`1" "y" "x2!1`1"))
                                          (("1"
                                            (split)
                                            (("1"
                                              (lemma
                                               "trich_lt"
                                               ("x"
                                                "x1!1`2"
                                                "y"
                                                "x2!1`2"))
                                              (("1"
                                                (split)
                                                (("1"
                                                  (inst
                                                   -
                                                   "max(x1!1`1+x1!1`2,x2!1`1)")
                                                  (("1"
                                                    (expand "ball")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst
                                                   -
                                                   "max(x1!1`1+x1!1`2,x2!1`1)")
                                                  (("2"
                                                    (expand "ball")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand "ball")
                                                  (("3"
                                                    (inst
                                                     -
                                                     "min(x1!1`1-x2!1`2,x1!1`1)")
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "trich_lt"
                                               ("x"
                                                "x1!1`2"
                                                "y"
                                                "x2!1`2"))
                                              (("2"
                                                (split)
                                                (("1"
                                                  (inst
                                                   -
                                                   "x1!1`1+x1!1`2")
                                                  (("1"
                                                    (expand "ball")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (decompose-equality)
                                                  nil
                                                  nil)
                                                 ("3"
                                                  (inst
                                                   -
                                                   "x1!1`1+x2!1`2")
                                                  (("3"
                                                    (expand "ball")
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (lemma
                                               "trich_lt"
                                               ("x"
                                                "x1!1`2"
                                                "y"
                                                "x2!1`2"))
                                              (("3"
                                                (split)
                                                (("1"
                                                  (inst
                                                   -
                                                   "min(x2!1`1-x1!1`2,x2!1`1)")
                                                  (("1"
                                                    (expand "ball")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst
                                                   -
                                                   "min(x1!1`1-x1!1`2,x2!1`1)")
                                                  (("2"
                                                    (expand "ball")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (inst
                                                   -
                                                   "max(x1!1`1+x2!1`2,x1!1`1)")
                                                  (("3"
                                                    (expand "ball")
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "surjective?")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (typepred "y!1")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst + "(q!1, pq!1)")
                                          (("2"
                                            (expand "F")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp)
                            (("3" (inst + "x1!1`1" "x1!1`2")
                              (("3"
                                (expand "F")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -2 2)
            (("2" (expand "fullset")
              (("2" (expand "is_countable")
                (("2" (expand "is_countably_infinite_type")
                  (("2" (skosimp) (("2" (inst + "f!1") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide -1 2)
            (("3" (expand "fullset")
              (("3" (expand "is_countably_infinite_type")
                (("3" (expand "is_countable")
                  (("3" (skosimp) (("3" (inst + "f!1") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat_posrat formula-decl nil countable_types sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (injective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (inverse const-decl "D" function_inverse nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (surjective? const-decl "bool" functions nil)
    (extensionality_postulate formula-decl nil functions nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (is_countably_infinite_type const-decl "bool" countability
     sets_aux)
    (nat_rational formula-decl nil countable_types sets_aux)
    (is_countable_cross formula-decl nil countable_cross nil)
    (set type-eq-decl nil sets nil)
    (fullset const-decl "set" sets nil))
   shostak))
 (metric_induced_topology_is_second_countable 0
  (metric_induced_topology_is_second_countable-2 nil 3768658954
   ("" (expand "second_countable?")
    ((""
      (typepred "metric_induced_topology
                        [real, (LAMBDA (x, y: real): abs(x - y))]")
      (("" (expand "hausdorff_space?")
        (("" (flatten)
          (("" (assert)
            (("" (expand "has_countable_basis?")
              (("" (lemma "rational_basis")
                ((""
                  (lemma "base_is_synthetic_base"
                   ("t" "metric_induced_topology" "U"
                    "fullset[rational_open_interval]"))
                  (("" (assert)
                    (("" (inst + "fullset[rational_open_interval]")
                      (("" (replace -1)
                        (("" (hide -1 -2 -3)
                          (("" (split)
                            (("1" (case "is_countable(fullset[rat])")
                              (("1"
                                (lemma
                                 "countable_subset[rat]"
                                 ("S"
                                  "fullset[posrat]"
                                  "Count"
                                  "fullset[rat]"))
                                (("1"
                                  (split)
                                  (("1"
                                    (lemma
                                     "is_countable_cross[rat,posrat]"
                                     ("X"
                                      "fullset[rat]"
                                      "Y"
                                      "fullset[posrat]"))
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (hide -2 -3 -4)
                                          (("1"
                                            (name
                                             "F"
                                             "lambda (q:rat,pq:posrat): ball(q,pq)")
                                            (("1"
                                              (case
                                               "bijective?[(cross_product(fullset[rat], fullset[posrat])),rational_open_interval](F)")
                                              (("1"
                                                (case
                                                 "bijective?[[rat, posrat],rational_open_interval](F)")
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (lemma
                                                     "bijective_inverse_is_bijective[[rat, posrat], rational_open_interval]"
                                                     ("f" "F"))
                                                    (("1"
                                                      (expand
                                                       "is_countable")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (inst
                                                           +
                                                           "lambda (x:rational_open_interval): f!1(inverse[[rat,posrat],rational_open_interval](F)(x))")
                                                          (("1"
                                                            (typepred
                                                             "f!1")
                                                            (("1"
                                                              (expand
                                                               "bijective?")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide
                                                                   -3
                                                                   -4
                                                                   -5
                                                                   -6)
                                                                  (("1"
                                                                    (expand
                                                                     "injective?")
                                                                    (("1"
                                                                      (skosimp)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "inverse[[rat, posrat], rational_open_interval](F)(x1!1)"
                                                                         "inverse[[rat, posrat], rational_open_interval](F)(x2!1)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "x1!1"
                                                                             "x2!1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 "fullset")
                                                                (("1"
                                                                  (expand
                                                                   "extend")
                                                                  (("1"
                                                                    (prop)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "fullset")
                                                                (("2"
                                                                  (expand
                                                                   "extend")
                                                                  (("2"
                                                                    (prop)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skosimp)
                                                            (("3"
                                                              (expand
                                                               "fullset")
                                                              (("3"
                                                                (expand
                                                                 "cross_product")
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-1 1))
                                                  (("2"
                                                    (expand "restrict")
                                                    (("2"
                                                      (expand
                                                       "bijective?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (expand
                                                               "injective?")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "x1!1"
                                                                   "x2!1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "fullset")
                                                                    (("2"
                                                                      (expand
                                                                       "cross_product")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (expand
                                                                     "fullset")
                                                                    (("3"
                                                                      (expand
                                                                       "cross_product")
                                                                      (("3"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide -1)
                                                            (("2"
                                                              (expand
                                                               "surjective?")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "y!1")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "x!1")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (replace -2 1 rl)
                                                  (("3"
                                                    (skosimp)
                                                    (("3"
                                                      (inst
                                                       +
                                                       "x1!1`1"
                                                       "x1!1`2")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (expand
                                                     "bijective?")
                                                    (("2"
                                                      (expand
                                                       "restrict")
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (expand
                                                           "injective?")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (expand
                                                               "F")
                                                              (("1"
                                                                (rewrite
                                                                 "extensionality_postulate"
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (case-replace
                                                                   "x2!1`1=x1!1`1")
                                                                  (("1"
                                                                    (case-replace
                                                                     "x2!1`2=x1!1`2")
                                                                    (("1"
                                                                      (decompose-equality)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "x2!1`2 > x1!1`2")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "x1!1`1-x1!1`2")
                                                                        (("1"
                                                                          (expand
                                                                           "ball")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         -
                                                                         "x1!1`1-x2!1`2")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case-replace
                                                                     "x2!1`2=x1!1`2")
                                                                    (("1"
                                                                      (case
                                                                       "x2!1`1>x1!1`1")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "max(x1!1`1+x1!1`2,x2!1`1)")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         -
                                                                         "max(x2!1`1+x1!1`2,x1!1`1)")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "x2!1`2>x1!1`2")
                                                                      (("1"
                                                                        (case
                                                                         "x2!1`1>x1!1`1")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "max(x1!1`1+x2!1`2,x2!1`1)")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           -
                                                                           "x2!1`1-x1!1`2")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "x2!1`1>x1!1`1")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "x1!1`1-x2!1`2")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           -
                                                                           "x1!1`1+x2!1`2")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "F")
                                                          (("2"
                                                            (expand
                                                             "surjective?")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (typepred
                                                                 "y!1")
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     +
                                                                     "(q!1,pq!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "cross_product")
                                                                      (("2"
                                                                        (expand
                                                                         "fullset")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp)
                                                (("3"
                                                  (inst
                                                   +
                                                   "x1!1`1"
                                                   "x1!1`2")
                                                  (("3"
                                                    (expand "F")
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -2 2 -3)
                                          (("2"
                                            (expand "fullset")
                                            (("2"
                                              (expand "extend")
                                              (("2"
                                                (expand "is_countable")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst + "f!1")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (lemma "nat_rational")
                                  (("2"
                                    (expand
                                     "is_countably_infinite_type")
                                    (("2"
                                      (expand "fullset")
                                      (("2"
                                        (expand "is_countable")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (inst + "f!1")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (apply-extensionality :hide? t)
                              (("2"
                                (expand "metric_induced_topology")
                                (("2"
                                  (case-replace "metric_open?(x!1)")
                                  (("1"
                                    (expand "fullset")
                                    (("1"
                                      (expand "extend")
                                      (("1"
                                        (expand
                                         "synthetic_generated_topology_set")
                                        (("1"
                                          (lemma "rational_basis")
                                          (("1"
                                            (expand "base?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst - "x!1")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst + "V!1")
                                                    (("1"
                                                      (expand
                                                       "fullset")
                                                      (("1"
                                                        (expand
                                                         "extend")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "metric_induced_topology")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "fullset")
                                    (("2"
                                      (expand "extend")
                                      (("2"
                                        (expand
                                         "synthetic_generated_topology_set")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (replace -2 * rl)
                                              (("2"
                                                (rewrite
                                                 "metric_open_def")
                                                (("2"
                                                  (lemma
                                                   "open_Union"
                                                   ("Y" "V!1"))
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand "every")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (typepred
                                                           "x!2")
                                                          (("2"
                                                            (expand
                                                             "subset?")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "x!2")
                                                                (("2"
                                                                  (split
                                                                   -)
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (use
                                                                       "metric_open_ball")
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (use
                                                                           "metric_open_def")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_induced_topology const-decl "setofsets[T]" metric_space_def
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (hausdorff_space? const-decl "bool" topology_prelim topology)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (has_countable_basis? const-decl "bool" topology_def topology)
    (topology nonempty-type-eq-decl nil topology_prelim topology)
    (topology? const-decl "bool" topology_prelim topology)
    (fullset const-decl "set" sets nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (rational_open_interval nonempty-type-eq-decl nil real_topology
     nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (> const-decl "bool" reals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (set type-eq-decl nil sets nil)
    (base_is_synthetic_base formula-decl nil basis topology)
    (synthetic_generated_topology_set const-decl "setofsets[T]" basis
     topology)
    (synthetic_base type-eq-decl nil basis topology)
    (synthetic_base? const-decl "bool" basis topology)
    (synthetic_basis_is_topology application-judgement "topology[real]"
     real_topology nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (x!1 skolem-const-decl "[real -> boolean]" real_topology nil)
    (base? const-decl "bool" basis topology)
    (open_Union formula-decl nil topology topology)
    (every const-decl "bool" sets nil)
    (metric_open_ball formula-decl nil metric_space nil)
    (Union const-decl "set" sets nil)
    (metric_open_def formula-decl nil metric_space nil)
    (is_countable const-decl "bool" countability sets_aux)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (TRUE const-decl "bool" booleans nil)
    (restrict_of_inj_is_inj application-judgement "(injective?[S, R])"
     restrict nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (bijective? const-decl "bool" functions nil)
    (restrict const-decl "R" restrict nil)
    (x1!1 skolem-const-decl "[rat, posrat]" real_topology nil)
    (x2!1 skolem-const-decl "[rat, posrat]" real_topology nil)
    (surjective? const-decl "bool" functions nil)
    (inverse const-decl "D" function_inverse nil)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (F skolem-const-decl
     "[[rat, posrat] -> metric_open[real, (LAMBDA (x, y: real): abs(x - y))]]"
     real_topology nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (f!1 skolem-const-decl
     "(injective?[(cross_product(fullset[rat], fullset[posrat])), nat])"
     real_topology nil)
    (bijective_inverse_is_bijective judgement-tcc nil function_inverse
     nil)
    (pq!1 skolem-const-decl "posrat" real_topology nil)
    (q!1 skolem-const-decl "rat" real_topology nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_abs_is_nonneg application-judgement "{r: nonneg_rat | r >= q}"
     real_defs nil)
    (minus_rat_is_rat application-judgement "rat" rationals nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (extensionality_postulate formula-decl nil functions nil)
    (ball_is_metric_open application-judgement "metric_open"
     real_topology nil)
    (metric_open? const-decl "bool" metric_space_def nil)
    (metric_open nonempty-type-eq-decl nil metric_space nil)
    (is_countable_cross formula-decl nil countable_cross nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (countable_subset formula-decl nil countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (nat_rational formula-decl nil countable_types sets_aux)
    (is_countably_infinite_type const-decl "bool" countability
     sets_aux)
    (rational_basis formula-decl nil real_topology nil)
    (second_countable? const-decl "bool" topology_def topology)
    (metric_space_is_hausdorff name-judgement "hausdorff" real_topology
     nil))
   nil
   (metric_induced_topology_is_second_countable subtype
    "metric_space_def[real, (LAMBDA (x, y: reals.real): real_defs.abs((number_fields.-)(x, y)))].metric_induced_topology"
    "second_countable[real]"))
  (metric_induced_topology_is_second_countable-1 nil 3387600277
   ("" (expand "second_countable?")
    ((""
      (typepred "metric_induced_topology
                    [real, (LAMBDA (x, y: real): abs(x - y))]")
      (("" (expand "hausdorff_space?")
        (("" (assert)
          (("" (expand "has_countable_basis?")
            (("" (lemma "rational_basis")
              ((""
                (lemma "base_is_synthetic_base"
                 ("t" "metric_induced_topology" "U"
                  "fullset[rational_open_interval]"))
                (("" (assert)
                  (("" (inst + "fullset[rational_open_interval]")
                    (("" (replace -1)
                      (("" (hide -1 -2 -3)
                        (("" (split)
                          (("1" (case "is_countable(fullset[rat])")
                            (("1"
                              (lemma "countable_subset[rat]"
                               ("S"
                                "fullset[posrat]"
                                "Count"
                                "fullset[rat]"))
                              (("1"
                                (split)
                                (("1"
                                  (lemma
                                   "is_countable_cross[rat,posrat]"
                                   ("X"
                                    "fullset[rat]"
                                    "Y"
                                    "fullset[posrat]"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split)
                                      (("1"
                                        (hide -2 -3 -4)
                                        (("1"
                                          (name
                                           "F"
                                           "lambda (q:rat,pq:posrat): ball(q,pq)")
                                          (("1"
                                            (case
                                             "bijective?[(cross_product(fullset[rat], fullset[posrat])),rational_open_interval](F)")
                                            (("1"
                                              (case
                                               "bijective?[[rat, posrat],rational_open_interval](F)")
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (lemma
                                                   "bijective_inverse_is_bijective[[rat, posrat], rational_open_interval]"
                                                   ("f" "F"))
                                                  (("1"
                                                    (expand
                                                     "is_countable")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (inst
                                                         +
                                                         "lambda (x:rational_open_interval): f!1(inverse[[rat,posrat],rational_open_interval](F)(x))")
                                                        (("1"
                                                          (typepred
                                                           "f!1")
                                                          (("1"
                                                            (expand
                                                             "bijective?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 -3
                                                                 -4
                                                                 -5
                                                                 -6)
                                                                (("1"
                                                                  (expand
                                                                   "injective?")
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "inverse[[rat, posrat], rational_open_interval](F)(x1!1)"
                                                                       "inverse[[rat, posrat], rational_open_interval](F)(x2!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "x1!1"
                                                                           "x2!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (expand
                                                               "fullset")
                                                              (("1"
                                                                (expand
                                                                 "extend")
                                                                (("1"
                                                                  (prop)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "fullset")
                                                              (("2"
                                                                (expand
                                                                 "extend")
                                                                (("2"
                                                                  (prop)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (skosimp)
                                                          (("3"
                                                            (expand
                                                             "fullset")
                                                            (("3"
                                                              (expand
                                                               "cross_product")
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-1 1))
                                                (("2"
                                                  (expand "restrict")
                                                  (("2"
                                                    (expand
                                                     "bijective?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (expand
                                                             "injective?")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "x1!1"
                                                                 "x2!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "fullset")
                                                                  (("2"
                                                                    (expand
                                                                     "cross_product")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (expand
                                                                   "fullset")
                                                                  (("3"
                                                                    (expand
                                                                     "cross_product")
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -1)
                                                          (("2"
                                                            (expand
                                                             "surjective?")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "y!1")
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     +
                                                                     "x!1")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (replace -2 1 rl)
                                                (("3"
                                                  (skosimp)
                                                  (("3"
                                                    (inst
                                                     +
                                                     "x1!1`1"
                                                     "x1!1`2")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (expand "bijective?")
                                                  (("2"
                                                    (expand "restrict")
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (expand
                                                         "injective?")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (expand
                                                             "F")
                                                            (("1"
                                                              (rewrite
                                                               "extensionality_postulate"
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (case-replace
                                                                 "x2!1`1=x1!1`1")
                                                                (("1"
                                                                  (case-replace
                                                                   "x2!1`2=x1!1`2")
                                                                  (("1"
                                                                    (decompose-equality)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "x2!1`2 > x1!1`2")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "x1!1`1-x1!1`2")
                                                                      (("1"
                                                                        (expand
                                                                         "ball")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "x1!1`1-x2!1`2")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case-replace
                                                                   "x2!1`2=x1!1`2")
                                                                  (("1"
                                                                    (case
                                                                     "x2!1`1>x1!1`1")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "max(x1!1`1+x1!1`2,x2!1`1)")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "max(x2!1`1+x1!1`2,x1!1`1)")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "x2!1`2>x1!1`2")
                                                                    (("1"
                                                                      (case
                                                                       "x2!1`1>x1!1`1")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "max(x1!1`1+x2!1`2,x2!1`1)")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         -
                                                                         "x2!1`1-x1!1`2")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "x2!1`1>x1!1`1")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "x1!1`1-x2!1`2")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         -
                                                                         "x1!1`1+x2!1`2")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "F")
                                                        (("2"
                                                          (expand
                                                           "surjective?")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (typepred
                                                               "y!1")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "(q!1,pq!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "cross_product")
                                                                    (("2"
                                                                      (expand
                                                                       "fullset")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skosimp)
                                              (("3"
                                                (inst
                                                 +
                                                 "x1!1`1"
                                                 "x1!1`2")
                                                (("3"
                                                  (expand "F")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -2 2 -3)
                                        (("2"
                                          (expand "fullset")
                                          (("2"
                                            (expand "extend")
                                            (("2"
                                              (expand "is_countable")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst + "f!1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (lemma "nat_rational")
                                (("2"
                                  (expand "is_countably_infinite_type")
                                  (("2"
                                    (expand "fullset")
                                    (("2"
                                      (expand "is_countable")
                                      (("2"
                                        (skosimp)
                                        (("2" (inst + "f!1") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (apply-extensionality :hide? t)
                            (("2" (expand "metric_induced_topology")
                              (("2"
                                (case-replace "metric_open?(x!1)")
                                (("1"
                                  (expand "fullset")
                                  (("1"
                                    (expand "extend")
                                    (("1"
                                      (expand
                                       "synthetic_generated_topology_set")
                                      (("1"
                                        (lemma "rational_basis")
                                        (("1"
                                          (expand "base?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst - "x!1")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst + "V!1")
                                                  (("1"
                                                    (expand "fullset")
                                                    (("1"
                                                      (expand "extend")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "metric_induced_topology")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "fullset")
                                  (("2"
                                    (expand "extend")
                                    (("2"
                                      (expand
                                       "synthetic_generated_topology_set")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (replace -2 * rl)
                                            (("2"
                                              (rewrite
                                               "metric_open_def")
                                              (("2"
                                                (lemma
                                                 "open_Union"
                                                 ("Y" "V!1"))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "every")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (typepred
                                                         "x!2")
                                                        (("2"
                                                          (expand
                                                           "subset?")
                                                          (("2"
                                                            (expand
                                                             "member")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "x!2")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (prop)
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "metric_open_def"
                                                                         1
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (rewrite
                                                                           "metric_open_ball")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((hausdorff_space? const-decl "bool" topology_prelim topology)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     nil)
    (hausdorff? const-decl "bool" topology_prelim topology)
    (setofsets type-eq-decl nil sets nil)
    (is_countably_infinite_type const-decl "bool" countability
     sets_aux)
    (nat_rational formula-decl nil countable_types sets_aux)
    (countable_subset formula-decl nil countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (is_countable_cross formula-decl nil countable_cross nil)
    (extensionality_postulate formula-decl nil functions nil)
    (bijective_inverse_is_bijective judgement-tcc nil function_inverse
     nil)
    (injective? const-decl "bool" functions nil)
    (inverse const-decl "D" function_inverse nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (is_countable const-decl "bool" countability sets_aux)
    (Union const-decl "set" sets nil)
    (metric_open_def formula-decl nil metric_space nil)
    (metric_open_ball formula-decl nil metric_space nil)
    (open_Union formula-decl nil topology topology)
    (metric_open? const-decl "bool" metric_space_def nil)
    (synthetic_generated_topology_set const-decl "setofsets[T]" basis
     topology)
    (synthetic_base type-eq-decl nil basis topology)
    (synthetic_base? const-decl "bool" basis topology)
    (base_is_synthetic_base formula-decl nil basis topology)
    (set type-eq-decl nil sets nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (fullset const-decl "set" sets nil)
    (topology? const-decl "bool" topology_prelim topology)
    (topology nonempty-type-eq-decl nil topology_prelim topology)
    (has_countable_basis? const-decl "bool" topology_def topology)
    (second_countable? const-decl "bool" topology_def topology))
   nil
   (metric_induced_topology_is_second_countable subtype
    "metric_space_def[real, (LAMBDA (x, y: reals.real): real_defs.abs((number_fields.-)(x, y)))].metric_induced_topology"
    "second_countable[real]")))
 (real_is_complete 0
  (real_is_complete-1 nil 3397565960
   ("" (expand "complete_metric_space?")
    (("" (split)
      (("1" (grind) nil nil)
       ("2" (expand "fullset")
        (("2" (expand "metric_complete?")
          (("2" (skosimp)
            (("2"
              (case "forall (u:sequence[real]): (exists (a:real): forall (i:nat): u(i) <= a) & (forall (i,j:nat): i <= j => u(i) <= u(j)) => metric_convergent?({x: real | TRUE},u)")
              (("1"
                (case "forall (X:set[real]): is_finite(X) & nonempty?(X) => exists (a:(X)): forall (x:(X)): x <= a")
                (("1" (copy -3)
                  (("1" (expand "cauchy?" -1)
                    (("1" (inst - "1")
                      (("1" (expand "ball")
                        (("1" (expand "member")
                          (("1" (skosimp)
                            (("1"
                              (case "forall (n:nat): nonempty?(image(u!1,{m:nat | m>=n}))")
                              (("1"
                                (case
                                 "forall (n:nat):bounded_real_defs. bounded?(image(u!1,{m:nat | m>=n}))")
                                (("1"
                                  (name
                                   "V"
                                   "LAMBDA (n: nat):
         bounded_real_defs.lub(image(u!1, {m: nat | m >= n}))")
                                  (("1"
                                    (case
                                     "FORALL (i, j: nat): i <= j => V(i) >= V(j)")
                                    (("1"
                                      (case
                                       "metric_convergent?({x: real | TRUE}, V)")
                                      (("1"
                                        (hide -8 -7)
                                        (("1"
                                          (expand "metric_convergent?")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst + "x!1")
                                              (("1"
                                                (expand
                                                 "metric_converges_to")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst - "r!1/3")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (expand "ball")
                                                        (("1"
                                                          (expand
                                                           "member")
                                                          (("1"
                                                            (hide -6)
                                                            (("1"
                                                              (expand
                                                               "cauchy?")
                                                              (("1"
                                                                (inst
                                                                 -6
                                                                 "r!1/3")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (expand
                                                                     "ball")
                                                                    (("1"
                                                                      (expand
                                                                       "member")
                                                                      (("1"
                                                                        (case
                                                                         "FORALL (i: nat):
        i >= max(n!2, n!3) => abs(V(i)-u!1(i)) < 2 * r!1 / 3")
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "max(n!2, n!3)")
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "i!1")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "i!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "triangle"
                                                                                     ("x"
                                                                                      "x!1 - V(i!1)"
                                                                                      "y"
                                                                                      "V(i!1) - u!1(i!1)"))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (expand
                                                                               "V"
                                                                               1)
                                                                              (("2"
                                                                                (hide
                                                                                 -4)
                                                                                (("2"
                                                                                  (inst
                                                                                   -4
                                                                                   "i!1")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -5
                                                                                     "i!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "bounded?")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "bounded_real_defs.lub(image(u!1, {m: nat | m >= i!1}))")
                                                                                          (("2"
                                                                                            (name-replace
                                                                                             "LUB"
                                                                                             "bounded_real_defs.lub(image(u!1, {m: nat | m >= i!1}))")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "least_upper_bound?")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "upper_bound?")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "u!1(i!1)")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "abs"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "u!1(i!1)+r!1/3")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (skosimp)
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "s!1")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "image"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (skolem
                                                                                                                       -
                                                                                                                       ("M"))
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "M")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -10
                                                                                                                           "i!1"
                                                                                                                           "M")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "abs"
                                                                                                                               -10)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "image")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         +
                                                                                                         "i!1")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -8 2)
                                        (("2"
                                          (inst
                                           -7
                                           "lambda (i:nat): -V(i)")
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (split -6)
                                              (("1"
                                                (hide-all-but (-1 1))
                                                (("1"
                                                  (expand
                                                   "metric_convergent?")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (inst + "-x!1")
                                                      (("1"
                                                        (expand
                                                         "metric_converges_to")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "r!1")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "n!2")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "i!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "ball")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (inst-cp -2 "0")
                                                  (("2"
                                                    (expand
                                                     "bounded?"
                                                     -3)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "bounded_below?")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             +
                                                             "-x!1")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (hide
                                                                 -3)
                                                                (("2"
                                                                  (expand
                                                                   "lower_bound?")
                                                                  (("2"
                                                                    (expand
                                                                     "V"
                                                                     1)
                                                                    (("2"
                                                                      (inst
                                                                       -2
                                                                       "i!1")
                                                                      (("2"
                                                                        (inst
                                                                         -4
                                                                         "i!1")
                                                                        (("2"
                                                                          (expand
                                                                           "bounded?")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (typepred
                                                                               "bounded_real_defs.lub(image(u!1, {m: nat | m >= i!1}))")
                                                                              (("2"
                                                                                (expand
                                                                                 "least_upper_bound?")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "upper_bound?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "u!1(i!1)")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -6
                                                                                         "u!1(i!1)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "image")
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "i!1")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "image")
                                                                                        (("2"
                                                                                          (inst
                                                                                           +
                                                                                           "i!1")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp)
                                                (("3"
                                                  (inst - "i!1" "j!1")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -6 2 -5)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (hide -2)
                                          (("2"
                                            (inst-cp - "i!1")
                                            (("2"
                                              (inst - "j!1")
                                              (("2"
                                                (inst-cp - "i!1")
                                                (("2"
                                                  (inst - "j!1")
                                                  (("2"
                                                    (expand "bounded?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand "V")
                                                        (("2"
                                                          (typepred
                                                           "bounded_real_defs.lub(image(u!1, {m: nat | m >= i!1}))")
                                                          (("2"
                                                            (typepred
                                                             "bounded_real_defs.lub(image(u!1, {m: nat | m >= j!1}))")
                                                            (("2"
                                                              (name-replace
                                                               "LUB_I"
                                                               "bounded_real_defs.lub(image(u!1, {m: nat | m >= i!1}))")
                                                              (("2"
                                                                (name-replace
                                                                 "LUB_J"
                                                                 "bounded_real_defs.lub(image(u!1, {m: nat | m >= j!1}))")
                                                                (("2"
                                                                  (expand
                                                                   "least_upper_bound?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "upper_bound?")
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (-2
                                                                          -3
                                                                          -5
                                                                          1))
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "LUB_I")
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (typepred
                                                                                 "s!1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "image")
                                                                                  (("2"
                                                                                    (skolem
                                                                                     -
                                                                                     "M")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "M")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "u!1(M)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "image")
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "M")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2"
                                      (inst - "n!2")
                                      (("2"
                                        (inst - "n!2")
                                        (("2"
                                          (expand "bounded?")
                                          (("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2 -5 -4)
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (expand "bounded?")
                                      (("2"
                                        (split)
                                        (("1"
                                          (expand "bounded_above?")
                                          (("1"
                                            (inst
                                             -3
                                             "image(u!1, {m: nat | m < n!1})")
                                            (("1"
                                              (case-replace "n!1=0")
                                              (("1"
                                                (inst + "u!1(0)+1")
                                                (("1"
                                                  (expand
                                                   "upper_bound?")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (typepred "s!1")
                                                      (("1"
                                                        (expand
                                                         "image")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (inst
                                                               -4
                                                               "0"
                                                               "x!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-4
                                                                    1))
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1>=1")
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (lemma
                                                     "finite_image[nat,real]"
                                                     ("f"
                                                      "u!1"
                                                      "S"
                                                      "{m: nat | m < n!1}"))
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (split -5)
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (typepred
                                                             "a!1")
                                                            (("1"
                                                              (inst
                                                               +
                                                               "max(a!1,u!1(n!1)+1)")
                                                              (("1"
                                                                (expand
                                                                 "upper_bound?")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (typepred
                                                                     "s!1")
                                                                    (("1"
                                                                      (expand
                                                                       "image"
                                                                       -1)
                                                                      (("1"
                                                                        (skolem
                                                                         -
                                                                         "j!1")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (case
                                                                             "j!1<n!1")
                                                                            (("1"
                                                                              (inst
                                                                               -4
                                                                               "u!1(j!1)")
                                                                              (("1"
                                                                                (expand
                                                                                 "max")
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "a!1 < 1 + u!1(n!1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "image")
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "j!1")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "j!1>=n!1")
                                                                              (("1"
                                                                                (hide
                                                                                 1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -8
                                                                                   "n!1"
                                                                                   "j!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-8
                                                                                        1))
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-2 1))
                                                          (("2"
                                                            (expand
                                                             "image")
                                                            (("2"
                                                              (expand
                                                               "nonempty?")
                                                              (("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "u!1(0)")
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "0")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-1 1))
                                                      (("2"
                                                        (expand
                                                         "is_finite")
                                                        (("2"
                                                          (inst
                                                           +
                                                           "n!1"
                                                           "lambda (x:{m: nat | m < n!1}): x")
                                                          (("2"
                                                            (expand
                                                             "injective?")
                                                            (("2"
                                                              (skosimp)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1)
                                          (("2"
                                            (expand "bounded_below?")
                                            (("2"
                                              (case-replace "n!1=0")
                                              (("1"
                                                (hide -3)
                                                (("1"
                                                  (inst
                                                   +
                                                   "-(1+abs(u!1(0)))")
                                                  (("1"
                                                    (expand
                                                     "lower_bound?")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (typepred
                                                         "s!1")
                                                        (("1"
                                                          (expand
                                                           "image")
                                                          (("1"
                                                            (skolem
                                                             -
                                                             ("M"))
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (typepred
                                                                 "M")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "M"
                                                                   "0")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "n!1>=1")
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (inst
                                                     -3
                                                     "image[nat,real](lambda (i:nat): -u!1(i),{m: nat | m < n!1})")
                                                    (("1"
                                                      (lemma
                                                       "finite_image[nat,real]"
                                                       ("f"
                                                        "LAMBDA (i: nat): -u!1(i)"
                                                        "S"
                                                        "{m: nat | m < n!1}"))
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (split -4)
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "-max(a!1,abs(u!1(n!1))+1)")
                                                              (("1"
                                                                (expand
                                                                 "lower_bound?")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (typepred
                                                                     "s!1")
                                                                    (("1"
                                                                      (expand
                                                                       "image")
                                                                      (("1"
                                                                        (hide
                                                                         -3)
                                                                        (("1"
                                                                          (skolem
                                                                           -
                                                                           ("M"))
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (typepred
                                                                               "M")
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (case
                                                                                   "M>=n!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -5
                                                                                     "M"
                                                                                     "n!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-5
                                                                                          1))
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "M<n!1")
                                                                                    (("1"
                                                                                      (hide
                                                                                       1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "-u!1(M)")
                                                                                        (("1"
                                                                                          (hide
                                                                                           -5)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "image")
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "M")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "nonempty?")
                                                            (("2"
                                                              (expand
                                                               "image")
                                                              (("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "-u!1(0)")
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "0")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "is_finite")
                                                          (("2"
                                                            (inst
                                                             +
                                                             "n!1"
                                                             "lambda (x: {m: nat | m < n!1}): x")
                                                            (("2"
                                                              (expand
                                                               "injective?")
                                                              (("2"
                                                                (skosimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (propax) nil nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "image")
                                    (("2"
                                      (expand "nonempty?")
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (inst - "u!1(n!2)")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (inst + "n!2")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2"
                    (case "FORALL (n:posnat,X: set[real]):
        is_finite[real](X) & card[real](X)=n & nonempty?[real](X) =>
         (EXISTS (a: (X)): FORALL (x: (X)): x <= a)")
                    (("1" (skosimp)
                      (("1" (inst - "card[real](X!1)" "X!1")
                        (("1" (assert) nil nil)
                         ("2" (rewrite "nonempty_card") nil nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (induct "n")
                        (("1" (assert) nil nil) ("2" (assert) nil nil)
                         ("3" (skosimp*)
                          (("3" (case-replace "j!1=0")
                            (("1" (hide -1 -2 -3)
                              (("1"
                                (lemma "card_one[real]" ("S" "X!1"))
                                (("1"
                                  (assert)
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (inst + "x!1")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (typepred "x!2")
                                          (("1"
                                            (replace -2 -1)
                                            (("1"
                                              (expand "singleton")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1 *)
                                        (("2"
                                          (expand "singleton")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "j!1>=1")
                              (("1"
                                (assert)
                                (("1"
                                  (hide 1)
                                  (("1"
                                    (lemma
                                     "card_rest[real]"
                                     ("S" "X!1"))
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (replace -6)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst - "rest[real](X!1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "nonempty_card[real]"
                                                 ("S"
                                                  "rest[real](X!1)"))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "finite_rest[real]")
                                                    (("1"
                                                      (lemma
                                                       "choose_rest[real]"
                                                       ("a" "X!1"))
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (inst
                                                             +
                                                             "max(choose[real](X!1),a!1)")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (typepred
                                                                 "x!1")
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   -1
                                                                   rl)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "add"
                                                                       -1)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "max")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (lift-if
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "member")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "x!1")
                                                                            (("2"
                                                                              (expand
                                                                               "max")
                                                                              (("2"
                                                                                (lift-if
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "a!1")
                                                              (("2"
                                                                (lemma
                                                                 "choose_member[real]"
                                                                 ("a"
                                                                  "X!1"))
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "member")
                                                                    (("1"
                                                                      (expand
                                                                       "max")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "rest"
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "nonempty?")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "remove")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "nonempty?")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "nonempty?")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "nonempty?")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (skosimp)
                  (("2" (skosimp)
                    (("2"
                      (lemma "lub_exists"
                       ("SA" "image(u!2,fullset[nat])"))
                      (("1" (skosimp)
                        (("1" (expand "metric_convergent?")
                          (("1" (inst + "x!1")
                            (("1" (expand "metric_converges_to")
                              (("1"
                                (skosimp)
                                (("1"
                                  (expand "ball")
                                  (("1"
                                    (expand "member")
                                    (("1"
                                      (expand "fullset")
                                      (("1"
                                        (expand "image")
                                        (("1"
                                          (expand "least_upper_bound?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "upper_bound?")
                                              (("1"
                                                (case
                                                 "EXISTS (n:nat): FORALL (i:nat): i >= n => x!1 - u!2(i) < r!1")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst + "n!1")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (inst - "i!1")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "u!2(i!1)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             +
                                                             "i!1")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (inst -2 "x!1-r!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (typepred
                                                           "s!1")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "x!2")
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     -5
                                                                     "x!2"
                                                                     "i!1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (split 1)
                        (("1" (expand "fullset")
                          (("1" (expand "image")
                            (("1" (expand "nonempty?")
                              (("1"
                                (expand "empty?")
                                (("1"
                                  (expand "member")
                                  (("1"
                                    (inst - "u!2(0)")
                                    (("1" (inst + "0") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "fullset")
                          (("2" (expand "image")
                            (("2" (expand "bounded_above?")
                              (("2"
                                (inst + "a!1")
                                (("2"
                                  (expand "upper_bound?")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (typepred "s!1")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst - "x!1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)
    (metric_zero? const-decl "bool" metric_space_def nil)
    (metric_symmetric? const-decl "bool" metric_space_def nil)
    (metric_triangle? const-decl "bool" metric_space_def nil)
    (metric_space? const-decl "bool" metric_space_def nil)
    (metric_complete? const-decl "bool" metric_space_def nil)
    (sequence type-eq-decl nil sequences nil)
    (remove const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (choose const-decl "(p)" sets nil)
    (finite_rest judgement-tcc nil finite_sets nil)
    (rest const-decl "set" sets nil)
    (card_rest formula-decl nil finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (card_one formula-decl nil finite_sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (finite_image judgement-tcc nil function_image_aux nil)
    (metric_converges_to const-decl "bool" metric_space_def nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (cauchy? const-decl "bool" metric_space_def nil)
    (nonempty? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (complete_metric_space? const-decl "bool" metric_space_def nil))
   nil
   (real_is_complete subtype "sets[real].fullset"
    "metric_complete[real, (LAMBDA (x, y: real): abs(x - y))]")))
 (closed_ball_TCC1 0
  (closed_ball_TCC1-2 "" 3790338204
   ("" (skosimp)
    (("" (case "open?({y| x!1+r!1<y})")
      (("1" (case "open?({y| y < x!1-r!1})")
        (("1"
          (lemma "open_union"
           ("U1" "{y | x!1 + r!1 < y}" "U2" "{y | y < x!1 - r!1}"))
          (("1" (rewrite "open_complement" 1 :dir rl)
            (("1"
              (case-replace
               "union({y | x!1 + r!1 < y}, {y | y < x!1 - r!1})=complement({y | abs(x!1 - y) <= r!1})")
              (("1" (hide-all-but 1)
                (("1" (apply-extensionality :hide? t)
                  (("1" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil) ("3" (assert) nil nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (expand "open?")
            (("2" (expand "member")
              (("2" (expand "metric_induced_topology")
                (("2" (expand "metric_open?")
                  (("2" (skosimp)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (inst + "x!1-(r!1+x!2)")
                          (("1" (expand "ball") (("1" (grind) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (expand "subset?")
                          (("2" (expand "member")
                            (("2" (expand "ball")
                              (("2"
                                (inst - "x!2")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1)
        (("2" (expand "open?")
          (("2" (expand "member")
            (("2" (expand "metric_induced_topology")
              (("2" (expand "metric_open?")
                (("2" (skosimp)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (inst + "x!2-(r!1+x!1)")
                        (("1" (expand "subset?")
                          (("1" (expand "ball")
                            (("1" (expand "member")
                              (("1"
                                (skosimp)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (expand "subset?")
                        (("2" (expand "member")
                          (("2" (expand "ball")
                            (("2" (inst - "x!2")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (closed_ball subtype
    "{y | reals.<=(real_defs.abs((number_fields.-)(real_topology.x, real_topology.y)), real_topology.r)}"
    "closed[real, (metric_induced_topology[real, (LAMBDA (x, y: real): abs(x - y))])]"))
  (closed_ball_TCC1-1 nil 3425709557
   ("" (skosimp)
    (("" (case "open?({y| x!1+r!1<y})")
      (("1" (case "open?({y| y < x!1-r!1})")
        (("1"
          (lemma "open_union"
           ("U1" "{y | x!1 + r!1 < y}" "U2" "{y | y < x!1 - r!1}"))
          (("1" (rewrite "open_complement" 1 :dir rl)
            (("1"
              (case-replace
               "union({y | x!1 + r!1 < y}, {y | y < x!1 - r!1})=complement({y | abs(x!1 - y) <= r!1})")
              (("1" (hide-all-but 1)
                (("1" (apply-extensionality :hide? t)
                  (("1" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil) ("3" (assert) nil nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (expand "open?")
            (("2" (expand "member")
              (("2" (expand "metric_induced_topology")
                (("2" (expand "metric_open?")
                  (("2" (skosimp)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (inst + "x!1-(r!1+x!2)")
                          (("1" (expand "ball") (("1" (grind) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (expand "subset?")
                          (("2" (expand "member")
                            (("2" (expand "ball")
                              (("2"
                                (inst - "x!2")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1)
        (("2" (expand "open?")
          (("2" (expand "member")
            (("2" (expand "metric_induced_topology")
              (("2" (expand "metric_open?")
                (("2" (skosimp)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (inst + "x!2-(r!1+x!1)")
                        (("1" (expand "subset?")
                          (("1" (expand "ball")
                            (("1" (expand "member")
                              (("1"
                                (skosimp)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (expand "subset?")
                        (("2" (expand "member")
                          (("2" (expand "ball")
                            (("2" (inst - "x!2")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3"
        (typepred "metric_induced_topology
                [real, (LAMBDA (x, y: real): abs(x - y))]")
        (("3" (expand "hausdorff_space?") (("3" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((open? const-decl "bool" topology topology)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     nil)
    (setofsets type-eq-decl nil sets nil)
    (set type-eq-decl nil sets nil)
    (metric_open? const-decl "bool" metric_space_def nil)
    (subset? const-decl "bool" sets nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (open_union formula-decl nil topology topology)
    (open nonempty-type-eq-decl nil topology topology)
    (complement const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (open_complement formula-decl nil topology topology))
   nil
   (closed_ball subtype
    "{y | reals.<=(real_defs.abs((number_fields.-)(real_topology.x, real_topology.y)), real_topology.r)}"
    "closed[real, (metric_induced_topology[real, (LAMBDA (x, y: real): abs(x - y))])]")))
 (closed_interval_TCC1 0
  (closed_interval_TCC1-1 nil 3425709557
   ("" (inst + "closed_ball(0,0)") (("" (inst + "0" "0") nil nil)) nil)
   ((closed nonempty-type-eq-decl nil topology topology)
    (closed? const-decl "bool" topology topology)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     nil)
    (setofsets type-eq-decl nil sets nil)
    (set type-eq-decl nil sets nil))
   nil
   (closed_interval existence ""
    "{X | EXISTS (x: reals.real, r: real_types.nnreal): real_topology.X = real_topology.closed_ball(x, r)}")))
 (open_TCC1 0
  (open_TCC1-1 nil 3425709557
   ("" (skosimp) (("" (typepred "b!1") (("" (assert) nil nil)) nil))
    nil)
   nil nil
   (open subtype
         "number_fields./(((number_fields.-)(real_topology.b, real_topology.a)), 2)"
         "posreal")))
 (open_TCC2 0
  (open_TCC2-1 nil 3425709557
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (inst + "(a!1 + b!1) / 2" "(b!1 - a!1) / 2") nil nil)) nil))
    nil)
   nil nil
   (open subtype
         "metric_space_def[real, (LAMBDA (x, y: reals.real): real_defs.abs((number_fields.-)(x, y)))].ball(number_fields./(((number_fields.+)(real_topology.a, real_topology.b)), 2), number_fields./(((number_fields.-)(real_topology.b, real_topology.a)), 2))"
         "open_interval")))
 (closed_TCC1 0
  (closed_TCC1-1 nil 3425709557
   ("" (skosimp) (("" (typepred "b!1") (("" (assert) nil nil)) nil))
    nil)
   nil nil
   (closed subtype
    "number_fields./(((number_fields.-)(real_topology.b, real_topology.a)), 2)"
    "nnreal")))
 (closed_TCC2 0
  (closed_TCC2-1 nil 3425709557
   ("" (skosimp)
    (("" (typepred "b!1")
      (("" (inst + "(a!1 + b!1) / 2" "(b!1 - a!1) / 2") nil nil)) nil))
    nil)
   nil nil
   (closed subtype
    "real_topology.closed_ball(number_fields./(((number_fields.+)(real_topology.a, real_topology.b)), 2), number_fields./(((number_fields.-)(real_topology.b, real_topology.a)), 2))"
    "closed_interval")))
 (open_inf_TCC1 0
  (open_inf_TCC1-1 nil 3454134699
   ("" (skosimp)
    (("" (rewrite "metric_open_def" + :dir rl)
      (("" (expand "metric_open?")
        (("" (skosimp)
          (("" (split)
            (("1" (flatten)
              (("1" (inst + "x!1-a!1")
                (("1" (grind) nil nil) ("2" (assert) nil nil)) nil))
              nil)
             ("2" (skosimp*)
              (("2" (expand "subset?")
                (("2" (expand "member")
                  (("2" (inst - "x!1") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_open_def formula-decl nil metric_space nil)
    (set type-eq-decl nil sets nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (metric_open? const-decl "bool" metric_space_def nil))
   nil
   (open_inf subtype "{x | reals.<(real_topology.a, real_topology.x)}"
    "open[real, (metric_induced_topology[real, (LAMBDA (x, y: real): abs(x - y))])]")))
 (inf_open_TCC1 0
  (inf_open_TCC1-1 nil 3454134699
   ("" (skosimp)
    (("" (rewrite "metric_open_def" + :dir rl)
      (("" (expand "metric_open?")
        (("" (skosimp)
          (("" (split)
            (("1" (flatten)
              (("1" (inst + "a!1-x!1")
                (("1" (grind) nil nil) ("2" (assert) nil nil)) nil))
              nil)
             ("2" (skosimp*)
              (("2" (expand "subset?")
                (("2" (inst - "x!1") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_open_def formula-decl nil metric_space nil)
    (set type-eq-decl nil sets nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (metric_open? const-decl "bool" metric_space_def nil))
   nil
   (inf_open subtype "{x | reals.<(real_topology.x, real_topology.a)}"
    "open[real, (metric_induced_topology[real, (LAMBDA (x, y: real): abs(x - y))])]")))
 (closed_inf_TCC1 0
  (closed_inf_TCC1-1 nil 3454134699
   ("" (skosimp)
    (("" (rewrite "open_complement" 1 :dir rl)
      (("" (lemma "inf_open_TCC1" ("a" "a!1"))
        (("" (case-replace "complement({x | a!1 <= x})={x | x < a!1}")
          (("" (hide-all-but 1)
            (("" (apply-extensionality :hide? t) (("" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((open_complement formula-decl nil topology topology)
    (set type-eq-decl nil sets nil)
    (setofsets type-eq-decl nil sets nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     nil)
    (complement const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil
   (closed_inf subtype
    "{x | reals.<=(real_topology.a, real_topology.x)}"
    "closed[real, (metric_induced_topology[real, (LAMBDA (x, y: real): abs(x - y))])]")))
 (inf_closed_TCC1 0
  (inf_closed_TCC1-1 nil 3454134699
   ("" (skosimp)
    (("" (rewrite "open_complement" 1 :dir rl)
      (("" (lemma "open_inf_TCC1" ("a" "a!1"))
        (("" (case-replace "complement({x | x <= a!1})={x | a!1 < x}")
          (("" (hide-all-but 1)
            (("" (apply-extensionality :hide? t) (("" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((open_complement formula-decl nil topology topology)
    (set type-eq-decl nil sets nil)
    (setofsets type-eq-decl nil sets nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     nil)
    (complement const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil
   (inf_closed subtype
    "{x | reals.<=(real_topology.x, real_topology.a)}"
    "closed[real, (metric_induced_topology[real, (LAMBDA (x, y: real): abs(x - y))])]")))
 (left_semiclosed_interval_TCC1 0
  (left_semiclosed_interval_TCC1-1 nil 3509857231
   ("" (inst + "0") nil nil) nil nil
   (left_semiclosed_interval subtype "real_topology.closed_inf(0)"
    "left_semiclosed_interval")))
 (right_semiclosed_interval_TCC1 0
  (right_semiclosed_interval_TCC1-1 nil 3509857231
   ("" (inst + "0") nil nil) nil nil
   (right_semiclosed_interval subtype "real_topology.inf_closed(0)"
    "right_semiclosed_interval")))
 (left_semiclosed_interval_is_interval 0
  (left_semiclosed_interval_is_interval-1 nil 3509857231
   ("" (skolem + "X!1")
    (("" (typepred "X!1")
      (("" (skosimp)
        (("" (replace -1)
          (("" (hide -1)
            (("" (expand "closed_inf")
              (("" (expand "interval?")
                (("" (skosimp)
                  (("" (typepred "x!1") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((closed nonempty-type-eq-decl nil topology topology)
    (closed? const-decl "bool" topology topology)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     nil)
    (setofsets type-eq-decl nil sets nil)
    (set type-eq-decl nil sets nil))
   nil
   (left_semiclosed_interval_is_interval subtype "real_topology.x"
    "interval")))
 (right_semiclosed_interval_is_interval 0
  (right_semiclosed_interval_is_interval-1 nil 3509857231
   ("" (skolem + "X!1")
    (("" (typepred "X!1")
      (("" (skosimp)
        (("" (replace -1)
          (("" (hide -1)
            (("" (expand "inf_closed")
              (("" (expand "interval?")
                (("" (skosimp)
                  (("" (typepred "x!1") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((closed nonempty-type-eq-decl nil topology topology)
    (closed? const-decl "bool" topology topology)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     nil)
    (setofsets type-eq-decl nil sets nil)
    (set type-eq-decl nil sets nil))
   nil
   (right_semiclosed_interval_is_interval subtype "real_topology.x"
    "interval")))
 (left_semiclosed_interval_is_closed 0
  (left_semiclosed_interval_is_closed-1 nil 3509857231
   ("" (skolem + "X!1")
    (("" (typepred "X!1")
      (("" (skosimp)
        (("" (typepred "closed_inf(a!1)")
          (("" (replace -2 * rl) (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((closed nonempty-type-eq-decl nil topology topology)
    (closed? const-decl "bool" topology topology)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     nil)
    (setofsets type-eq-decl nil sets nil)
    (set type-eq-decl nil sets nil))
   nil
   (left_semiclosed_interval_is_closed subtype "real_topology.x"
    "closed[real, (metric_induced_topology[real, (LAMBDA (x, y: real): abs(x - y))])]")))
 (right_semiclosed_interval_is_closed 0
  (right_semiclosed_interval_is_closed-1 nil 3509857231
   ("" (skolem + "X!1")
    (("" (typepred "X!1")
      (("" (skosimp)
        (("" (typepred "inf_closed(a!1)")
          (("" (replace -2) (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((closed nonempty-type-eq-decl nil topology topology)
    (closed? const-decl "bool" topology topology)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     nil)
    (setofsets type-eq-decl nil sets nil)
    (set type-eq-decl nil sets nil))
   nil
   (right_semiclosed_interval_is_closed subtype "real_topology.x"
    "closed[real, (metric_induced_topology[real, (LAMBDA (x, y: real): abs(x - y))])]"))))


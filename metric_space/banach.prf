(banach
 (fun_iter_TCC1 0
  (fun_iter_TCC1-1 nil 3785590052 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil banach nil) (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (nonempty_set type-eq-decl nil sets nil)
    (S formal-const-decl "nonempty_set[T]" banach nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (fun_iter subtype "(number_fields.-)(banach.n, 1)" "nat")))
 (fun_iter_TCC2 0
  (fun_iter_TCC2-1 nil 3785590052 ("" (termination-tcc) nil nil) nil
   nil
   (fun_iter termination
    "banach.fun_iter(banach.phi)(banach.x)((number_fields.-)(banach.n, 1))"
    "nil")))
 (iter_cauchy 0
  (iter_cauchy-1 nil 3785593611
   ("" (skeep)
    (("" (typepred "phi")
      (("" (expand "contraction?")
        (("" (skeep)
          (("" (case "q=0")
            (("1" (expand "cauchy?")
              (("1" (skeep)
                (("1" (inst 1 "2")
                  (("1" (skeep)
                    (("1" (replace -1)
                      (("1" (expand "fun_iter")
                        (("1" (assert)
                          (("1" (expand "member")
                            (("1" (expand "ball")
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (label "q_non_zero" 1)
              (("2" (hide 1)
                (("2" (name "X" "fun_iter(phi)(x)")
                  (("2" (replace -1)
                    (("2"
                      (case "NOT FORALL (n:nat): d(X(n+1), X(n)) <= q^n*d(X(1),X(0))")
                      (("1" (induct "n")
                        (("1" (assert)
                          (("1" (rewrite "expt_x0")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (skeep)
                          (("2" (replace -2 1 :dir rl)
                            (("2" (expand "fun_iter" 1 1)
                              (("2"
                                (expand "fun_iter" 1 2)
                                (("2"
                                  (inst
                                   -3
                                   " fun_iter(phi)(x)(1 + j)"
                                   "fun_iter(phi)(x)(j)")
                                  (("2"
                                    (replace -2)
                                    (("2"
                                      (mult-by -1 "q")
                                      (("2"
                                        (rewrite "expt_plus" 1)
                                        (("2"
                                          (rewrite "expt_x1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (case "NOT FORALL (r:posreal, a,b: (S)): member(a, ball(b,r)) IFF member(b, ball(a,r))")
                        (("1" (hide (-1 -2 -3 2))
                          (("1" (skeep)
                            (("1" (expand "complete_metric_space?")
                              (("1"
                                (expand "metric_space?")
                                (("1"
                                  (expand "metric_symmetric?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst -2 "a" "b")
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (expand "ball")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "cauchy?")
                          (("2"
                            (case "FORALL (r:posreal): EXISTS (n:nat): FORALL (i,j:nat): i>j AND j>=n IMPLIES member(X(i), ball(X(j), r))")
                            (("1" (skeep)
                              (("1"
                                (inst -1 "r")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 1 "n")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (case "i=j")
                                        (("1"
                                          (expand "ball")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "complete_metric_space?")
                                                  (("1"
                                                    (expand
                                                     "metric_space?")
                                                    (("1"
                                                      (expand
                                                       "metric_zero?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst
                                                           -7
                                                           "X(j)"
                                                           "X(i)")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "i>j")
                                          (("1"
                                            (inst -2 "i" "j")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (inst -1 "j" "i")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 -2
                                                 "r"
                                                 "X(i)"
                                                 "X(j)")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (label "sym_ball" -1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (case
                                     "NOT (FORALL (nn, i,j:nat): i>j AND nn=i-j-1 IMPLIES d(X(i), X(j)) <= q^j*d(X(1),X(0))*sigma(0,nn, geometric(q)))")
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (induct "nn")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (rewrite "sigma_eq_arg")
                                            (("1"
                                              (expand "geometric")
                                              (("1"
                                                (rewrite "expt_x0")
                                                (("1"
                                                  (inst -3 "j")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (expand " sigma" +)
                                              (("2"
                                                (expand
                                                 "complete_metric_space?")
                                                (("2"
                                                  (expand
                                                   "geometric"
                                                   1
                                                   1)
                                                  (("2"
                                                    (expand
                                                     "metric_space?")
                                                    (("2"
                                                      (expand
                                                       "metric_triangle?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (inst
                                                           -9
                                                           "X(i)"
                                                           "X(i-1)"
                                                           "X(j)")
                                                          (("1"
                                                            (inst
                                                             -4
                                                             "i-1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "i-1"
                                                                 "j")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     1)
                                                                    (("1"
                                                                      (rewrite
                                                                       "expt_plus"
                                                                       1
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (reveal
                                                                           "q_non_zero")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "j")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case
                                       "NOT FORALL (i,j: nat): i>j IMPLIES d(X(i), X(j)) <= q^j* d(X(1), X(0))*(1/(1-q))")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst -2 "i - j - 1" "i" "j")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (rewrite
                                               "sigma_geometric")
                                              (("1"
                                                (case
                                                 "NOT ((1 - q ^ (i - j)) / (1 - q)) <= (1 / (1 - q))")
                                                (("1"
                                                  (hide-all-but (-1 1))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (cross-mult 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (move-terms
                                                           1
                                                           l
                                                           1)
                                                          (("1"
                                                            (move-terms
                                                             1
                                                             l
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "NOT -1 * -(q) - q = 0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (move-terms
                                                                     1
                                                                     l
                                                                     2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (cancel-by
                                                                         1
                                                                         "q^(i-j)")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (mult-by
                                                   -1
                                                   "q ^ j * d(X(1), X(0))")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -2)
                                        (("2"
                                          (case "d(X(1), X(0)) = 0")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 1 1)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst -2 "i" "j")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "member")
                                                      (("1"
                                                        (expand "ball")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "complete_metric_space?")
                                                            (("1"
                                                              (expand
                                                               "metric_space?")
                                                              (("1"
                                                                (expand
                                                                 "metric_symmetric?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (inst
                                                                     -9
                                                                     "X(i)"
                                                                     "X(j)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (lemma
                                               "convergence_x_to_n")
                                              (("2"
                                                (inst -1 "1 " "q")
                                                (("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (expand
                                                     "convergence")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "r*(1-q)/d(X(1), X(0))")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst
                                                           2
                                                           "n_1")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "j")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (expand
                                                                     "ball")
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "i"
                                                                       "j")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "complete_metric_space?")
                                                                          (("1"
                                                                            (expand
                                                                             "metric_space?")
                                                                            (("1"
                                                                              (expand
                                                                               "metric_symmetric?")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (inst
                                                                                   -9
                                                                                   "X(i)"
                                                                                   "X(j)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -9)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         -1
                                                                                         "d(X(1), X(0)) * (1 / (1 - q))")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "NOT (r - q * r) / d(X(1), X(0)) * (d(X(1), X(0)) * (1 / (1 - q))) = r")
                                                                                            (("1"
                                                                                              (grind-reals
                                                                                               1)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "d(X(1), X(0)) * (1 / (1 - q))>0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (cross-mult
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (case
                                                           "(r - q * r) / d(X(1), X(0)) > 0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (cross-mult
                                                             1)
                                                            (("2"
                                                              (case
                                                               "NOT 0 * d(X(1), X(0)) = 0
")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (typepred
                                                                   "q")
                                                                  (("2"
                                                                    (swap-rel
                                                                     -2)
                                                                    (("2"
                                                                      (move-terms
                                                                       -2
                                                                       r
                                                                       1)
                                                                      (("2"
                                                                        (mult-by
                                                                         -2
                                                                         "r")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((contraction? const-decl "bool" banach nil)
    (S formal-const-decl "nonempty_set[T]" banach nil)
    (nonempty_set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil) (T formal-type-decl nil banach nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (d formal-const-decl "metric" banach nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (<= const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (j skolem-const-decl "nat" banach nil)
    (i skolem-const-decl "nat" banach nil)
    (sigma_geometric formula-decl nil series "series/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (CBD_1 skolem-const-decl "nnreal" banach nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (convergence_x_to_n formula-decl nil series "series/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (X skolem-const-decl "[nat -> (S)]" banach nil)
    (r skolem-const-decl "posreal" banach nil)
    (q skolem-const-decl "{qq: nnreal | qq < 1}" banach nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (convergence const-decl "bool" convergence_sequences "analysis/")
    (metric_triangle? const-decl "bool" metric_space_def nil)
    (i skolem-const-decl "nat" banach nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sigma_eq_arg formula-decl nil sigma "reals/")
    (geometric const-decl "sequence[real]" series "series/")
    (sequence type-eq-decl nil sequences nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (metric_zero? const-decl "bool" metric_space_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (complete_metric_space? const-decl "bool" metric_space_def nil)
    (metric_symmetric? const-decl "bool" metric_space_def nil)
    (metric_space? const-decl "bool" metric_space_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (cauchy? const-decl "bool" metric_space_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (member const-decl "bool" sets nil)
    (fun_iter def-decl "(S)" banach nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil))
   shostak))
 (fixed_point_exists 0
  (fixed_point_exists-1 nil 3785662629
   ("" (skeep)
    (("" (lemma "iter_cauchy")
      (("" (inst -1 "phi" "choose((S))")
        (("" (assert)
          (("" (expand "complete_metric_space?")
            (("" (expand "metric_complete?")
              (("" (flatten)
                (("" (inst -3 "fun_iter(phi)(choose((S)))")
                  (("" (assert)
                    (("" (expand "metric_convergent?")
                      (("" (skeep)
                        (("" (inst 1 "x!1")
                          (("" (expand "metric_converges_to")
                            (("" (expand "metric_space?")
                              ((""
                                (expand "metric_zero?")
                                ((""
                                  (flatten)
                                  ((""
                                    (expand "member")
                                    ((""
                                      (expand "ball")
                                      ((""
                                        (inst -2 "x!1" "phi(x!1)")
                                        ((""
                                          (flatten)
                                          ((""
                                            (assert)
                                            ((""
                                              (hide -2)
                                              ((""
                                                (name
                                                 "eps"
                                                 "d(x!1, phi(x!1))")
                                                ((""
                                                  (inst -5 "eps/2")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst-cp
                                                       -5
                                                       "n+1")
                                                      (("1"
                                                        (inst -5 "n")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "fun_iter"
                                                             -6)
                                                            (("1"
                                                              (typepred
                                                               "phi")
                                                              (("1"
                                                                (expand
                                                                 "contraction?")
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "x!1"
                                                                     "fun_iter(phi)(choose((S)))(n)")
                                                                    (("1"
                                                                      (expand
                                                                       "metric_symmetric?")
                                                                      (("1"
                                                                        (inst
                                                                         -4
                                                                         "phi(x!1)"
                                                                         " phi(fun_iter(phi)(choose((S)))(n))")
                                                                        (("1"
                                                                          (replaces
                                                                           -4)
                                                                          (("1"
                                                                            (expand
                                                                             "metric_triangle?")
                                                                            (("1"
                                                                              (inst
                                                                               -4
                                                                               "x!1"
                                                                               "phi(fun_iter(phi)(choose((S)))(n))"
                                                                               "phi(x!1)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("1"
                                                                                    (mult-by
                                                                                     -5
                                                                                     "q")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "NOT eps< eps/2+eps/2*q")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "q")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (case
                                                                                               "not q+1<2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (mult-by
                                                                                                 -1
                                                                                                 "eps/2")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((iter_cauchy formula-decl nil banach nil)
    (metric_complete? const-decl "bool" metric_space_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (fun_iter def-decl "(S)" banach nil)
    (metric_convergent? const-decl "bool" metric_space_def nil)
    (metric_space? const-decl "bool" metric_space_def nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (eps skolem-const-decl "nnreal" banach nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (metric_symmetric? const-decl "bool" metric_space_def nil)
    (TRUE const-decl "bool" booleans nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (metric_triangle? const-decl "bool" metric_space_def nil)
    (d formal-const-decl "metric" banach nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member const-decl "bool" sets nil)
    (metric_zero? const-decl "bool" metric_space_def nil)
    (metric_converges_to const-decl "bool" metric_space_def nil)
    (complete_metric_space? const-decl "bool" metric_space_def nil)
    (choose const-decl "(p)" sets nil)
    (contraction? const-decl "bool" banach nil)
    (S formal-const-decl "nonempty_set[T]" banach nil)
    (nonempty_set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil banach nil))
   shostak))
 (banach_fixed_point_thm 0
  (banach_fixed_point_thm-1 nil 3785664462
   ("" (skeep)
    (("" (lemma "fixed_point_exists")
      (("" (name "x" "choose((S))")
        (("" (inst -2 "phi" "x")
          (("" (assert)
            (("" (skeep)
              (("" (inst 1 "x_star")
                (("" (assert)
                  (("" (split 1)
                    (("1" (skeep)
                      (("1" (expand "complete_metric_space?")
                        (("1" (expand "metric_space?")
                          (("1" (expand "metric_zero?")
                            (("1" (flatten)
                              (("1"
                                (inst -4 "x_star" "y")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (typepred "phi")
                                        (("1"
                                          (expand "contraction?")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst -1 " x_star" "y")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (replace -4)
                                                    (("1"
                                                      (typepred "q")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (cancel-by
                                                           -3
                                                           "d(x_star, y)")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (lemma "iter_cauchy")
                        (("2" (inst -1 "phi" "x!1")
                          (("2" (assert)
                            (("2" (label "cms" -4)
                              (("2"
                                (copy -4)
                                (("2"
                                  (hide -5)
                                  (("2"
                                    (expand "complete_metric_space?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "metric_complete?")
                                        (("2"
                                          (inst
                                           -2
                                           " fun_iter(phi)(x!1)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand
                                               "metric_convergent?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (case
                                                   "NOT phi(x!2)  = x!2")
                                                  (("1"
                                                    (expand
                                                     "metric_space?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "metric_zero?")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "phi(x!2)"
                                                           "x!2")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 1)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "metric_converges_to")
                                                                  (("1"
                                                                    (name
                                                                     "eps1"
                                                                     "d(phi(x!2), x!2)")
                                                                    (("1"
                                                                      (inst
                                                                       -4
                                                                       "eps1/2")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (expand
                                                                           "ball")
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst-cp
                                                                               -4
                                                                               "n")
                                                                              (("1"
                                                                                (inst
                                                                                 -4
                                                                                 "n+1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "fun_iter"
                                                                                     -4)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "phi")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "contraction?")
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "x!2"
                                                                                             "fun_iter(phi)(x!1)(n)")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "metric_triangle?")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "metric_symmetric?")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -3
                                                                                                   "x!2"
                                                                                                   "phi(fun_iter(phi)(x!1)(n))")
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -3
                                                                                                       "phi(x!2)"
                                                                                                       "phi(fun_iter(phi)(x!1)(n))"
                                                                                                       "x!2")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (mult-by
                                                                                                           -5
                                                                                                           "q")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "NOT eps1< eps1/2+eps1/2*q")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (typepred
                                                                                                               "q")
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "not q+1<2")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (mult-by
                                                                                                                   -1
                                                                                                                   "eps1/2")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "NOT x_star = x!2")
                                                    (("1"
                                                      (expand
                                                       "metric_space?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "metric_zero?")
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "x_star"
                                                             "x!2")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (typepred
                                                                     "phi")
                                                                    (("1"
                                                                      (expand
                                                                       "contraction?")
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           " x_star"
                                                                           "x!2")
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (replace
                                                                               -8)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "q")
                                                                                  (("1"
                                                                                    (cancel-by
                                                                                     -3
                                                                                     "d(x_star, x!2)")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fixed_point_exists formula-decl nil banach nil)
    (contraction? const-decl "bool" banach nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (fun_iter def-decl "(S)" banach nil)
    (metric_convergent? const-decl "bool" metric_space_def nil)
    (metric_converges_to const-decl "bool" metric_space_def nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (eps1 skolem-const-decl "nnreal" banach nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (metric_triangle? const-decl "bool" metric_space_def nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (q skolem-const-decl "{qq: nnreal | qq < 1}" banach nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (metric_symmetric? const-decl "bool" metric_space_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (CBD_3 skolem-const-decl "nnreal" banach nil)
    (metric_complete? const-decl "bool" metric_space_def nil)
    (iter_cauchy formula-decl nil banach nil)
    (metric_space? const-decl "bool" metric_space_def nil)
    (< const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (CBD_2 skolem-const-decl "nnreal" banach nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (> const-decl "bool" reals nil)
    (d formal-const-decl "metric" banach nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (metric_zero? const-decl "bool" metric_space_def nil)
    (complete_metric_space? const-decl "bool" metric_space_def nil)
    (T formal-type-decl nil banach nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (nonempty_set type-eq-decl nil sets nil)
    (S formal-const-decl "nonempty_set[T]" banach nil))
   shostak)))


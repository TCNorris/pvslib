(submetric_def
 (submetric_is_metric? 0
  (submetric_is_metric?-1 nil 3359136206
   ("" (skosimp)
    (("" (typepred "d!1")
      (("" (expand "restrict")
        (("" (expand "metric?")
          (("" (flatten)
            (("" (split)
              (("1" (expand "metric_zero?")
                (("1" (skosimp) (("1" (inst - "x!1" "y!1") nil nil)) nil))
                nil)
               ("2" (expand "metric_symmetric?")
                (("2" (skosimp) (("2" (inst - "x!1" "y!1") nil nil)) nil))
                nil)
               ("3" (expand "metric_triangle?")
                (("3" (skosimp) (("3" (inst - "x!1" "y!1" "z!1") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric nonempty-type-eq-decl nil metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T1 formal-type-decl nil submetric_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T2_pred const-decl "[T1 -> boolean]" submetric_def nil)
    (T2 formal-subtype-decl nil submetric_def nil)
    (metric_zero? const-decl "bool" metric_def nil)
    (metric_symmetric? const-decl "bool" metric_def nil)
    (metric_triangle? const-decl "bool" metric_def nil)
    (restrict const-decl "R" restrict nil))
   shostak))
 (submetric_is_metric 0
  (submetric_is_metric-1 nil 3359135819
   ("" (skosimp)
    (("" (typepred "d!1") (("" (rewrite "submetric_is_metric?") nil nil))
      nil))
    nil)
   ((metric nonempty-type-eq-decl nil metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T1 formal-type-decl nil submetric_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (submetric_is_metric? formula-decl nil submetric_def nil))
   shostak
   (submetric_is_metric subtype
    "restrict[[submetric_def.T1, submetric_def.T1], [T2, T2], nnreal].restrict(submetric_def.d)"
    "metric[T2]"))))


(composition_uniform_continuity
 (composition_uniform_continuity 0
  (composition_uniform_continuity-1 nil 3383402472
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (typepred "g!1")
        (("" (expand "uniform_continuous?")
          (("" (expand "ball")
            (("" (expand "member")
              (("" (expand "o")
                (("" (skosimp)
                  (("" (inst -2 "epsilon!1")
                    (("" (skosimp)
                      (("" (inst -1 "delta!1")
                        (("" (skosimp)
                          (("" (inst + "delta!2")
                            (("" (skosimp)
                              (("" (inst - "x!1" "x0!1")
                                (("" (inst - "g!1(x!1)" "g!1(x0!1)")
                                  (("" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((uniform_continuous type-eq-decl nil metric_continuity nil)
    (uniform_continuous? const-decl "bool" metric_continuity nil)
    (d3 formal-const-decl "metric[T3]" composition_uniform_continuity nil)
    (d2 formal-const-decl "metric[T2]" composition_uniform_continuity nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T3 formal-type-decl nil composition_uniform_continuity nil)
    (T2 formal-type-decl nil composition_uniform_continuity nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (O const-decl "T3" function_props nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (T1 formal-type-decl nil composition_uniform_continuity nil)
    (d1 formal-const-decl "metric[T1]" composition_uniform_continuity nil))
   nil
   (composition_uniform_continuity subtype
    "function_props[composition_uniform_continuity.T1, composition_uniform_continuity.T2, composition_uniform_continuity.T3].o(composition_uniform_continuity.f, composition_uniform_continuity.g)"
    "uniform_continuous[T1, d1, T3, d3]"))))


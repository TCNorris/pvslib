(continuity_link
 (IMP_metric_space_TCC1 0
  (IMP_metric_space_TCC1-1 nil 3475299084
   ("" (expand "metric?")
    (("" (expand "metric_zero?")
      (("" (expand "metric_symmetric?")
        (("" (expand "metric_triangle?") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((metric_zero? const-decl "bool" metric_def nil)
    (metric_triangle? const-decl "bool" metric_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (metric_symmetric? const-decl "bool" metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_metric_space subtype
    "(LAMBDA (x, y: reals.real): real_defs.abs((number_fields.-)(x, y)))"
    "metric[real]")))
 (IMP_metric_continuity_TCC1 0
  (IMP_metric_continuity_TCC1-1 nil 3453303232
   ("" (expand "metric?")
    (("" (split)
      (("1" (expand "metric_zero?")
        (("1" (skosimp)
          (("1" (split)
            (("1" (flatten) (("1" (grind) nil nil)) nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil)
       ("2" (expand "metric_symmetric?")
        (("2" (skosimp) (("2" (grind) nil nil)) nil)) nil)
       ("3" (expand "metric_triangle?") (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (metric_zero? const-decl "bool" metric_def nil)
    (metric_symmetric? const-decl "bool" metric_def nil)
    (T formal-subtype-decl nil continuity_link nil)
    (T_pred const-decl "[real -> boolean]" continuity_link nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (metric_triangle? const-decl "bool" metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_metric_continuity subtype
    "(LAMBDA (x, y: continuity_link.T): real_defs.abs((number_fields.-)(x, y)))"
    "metric[T]")))
 (continuous_iff_continuous_at? 0
  (continuous_iff_continuous_at?-1 nil 3453779339
   ("" (skosimp*)
    (("" (expand "continuous?")
      (("" (rewrite "metric_continuous_at_def")
        (("" (expand "metric_continuous_at?")
          (("" (expand "member")
            (("" (expand "ball")
              (("" (split)
                (("1" (skosimp*)
                  (("1" (inst - "epsilon!1")
                    (("1" (skosimp)
                      (("1" (inst + "delta!1")
                        (("1" (skosimp)
                          (("1" (inst - "x!1")
                            (("1" (split)
                              (("1" (hide -2) (("1" (grind) nil nil)) nil)
                               ("2" (hide 2) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (inst - "epsilon!1")
                    (("2" (skosimp)
                      (("2" (inst + "delta!1")
                        (("2" (skosimp)
                          (("2" (inst - "x!1")
                            (("2" (split)
                              (("1" (grind) nil nil) ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (metric_continuous_at? const-decl "bool" metric_continuity nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (member const-decl "bool" sets nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-subtype-decl nil continuity_link nil)
    (T_pred const-decl "[real -> boolean]" continuity_link nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (metric_continuous_at_def formula-decl nil metric_continuity nil))
   shostak))
 (continuous_iff_continuous? 0
  (continuous_iff_continuous?-1 nil 3453303114
   ("" (skosimp)
    (("" (expand "continuous?")
      (("" (split)
        (("1" (flatten)
          (("1" (skosimp)
            (("1" (inst - "x!1")
              (("1" (rewrite "continuous_iff_continuous_at?") nil nil)) nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (inst - "x0!1")
            (("2" (rewrite "continuous_iff_continuous_at?") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" continuity_def topology)
    (continuous? const-decl "bool" continuous_functions analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" continuity_link nil)
    (T formal-subtype-decl nil continuity_link nil)
    (continuous_iff_continuous_at? formula-decl nil continuity_link nil))
   shostak)))


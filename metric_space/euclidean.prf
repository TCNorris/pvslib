(euclidean
 (sigma_nnreal_eq_0_TCC1 0
  (sigma_nnreal_eq_0_TCC1-1 nil 3508674642 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (sigma_nnreal_eq_0 subtype "(number_fields.-)(euclidean.n, 1)"
    "T_high[below(n)]")))
 (sigma_nnreal_eq_0 0
  (sigma_nnreal_eq_0-1 nil 3508674648
   ("" (skosimp)
    (("" (lemma "sigma_nonneg_eq_0" ("low" "0" "high" "n-1" "Fnnr" "f!1"))
      (("" (split 1)
        (("1" (flatten) (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil)
         ("2" (flatten)
          (("2" (hide -2)
            (("2" (lemma "sigma_zero" ("low" "0" "high" "n-1"))
              (("2"
                (lemma "sigma_eq"
                 ("low" "0" "high" "n-1" "F" "LAMBDA (i: below(n)): 0" "G"
                  "f!1"))
                (("2" (split -1)
                  (("1" (assert) nil nil)
                   ("2" (hide -1 2)
                    (("2" (skosimp)
                      (("2" (inst - "n1!1") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "posnat" euclidean nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T_low type-eq-decl nil sigma reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (T_high type-eq-decl nil sigma reals) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sigma_nonneg_eq_0 formula-decl nil sigma reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma_zero formula-decl nil sigma reals)
    (sigma_nat application-judgement "nat" euclidean nil)
    (subrange type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sigma_eq formula-decl nil sigma reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sigma_nnreal application-judgement "nnreal" euclidean nil))
   nil))
 (d1_TCC1 0
  (d1_TCC1-2 nil 3508674747
   ("" (expand "metric?")
    (("" (split)
      (("1" (expand "metric_zero?")
        (("1" (skosimp*)
          (("1" (split)
            (("1" (flatten)
              (("1" (apply-extensionality 1 :hide? t)
                (("1" (rewrite "sigma_nnreal_eq_0" -1)
                  (("1" (inst - "x!2") (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (replace -1)
                (("2" (lemma "sigma_zero" ("low" "0" "high" "n-1"))
                  (("2"
                    (lemma "extensionality_postulate"
                     ("f" "LAMBDA (i: below(n)): 0" "g"
                      "LAMBDA i: abs(y!1(i) - y!1(i))"))
                    (("2" (flatten)
                      (("2" (hide -2)
                        (("2" (split)
                          (("1" (assert) nil nil)
                           ("2" (hide -1 2)
                            (("2" (skosimp) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "metric_symmetric?")
        (("2" (skosimp*)
          (("2" (lemma "extensionality_postulate[below[n],nnreal]")
            (("2"
              (inst - "LAMBDA i: abs(x!1(i) - y!1(i))"
               "LAMBDA i: abs(y!1(i) - x!1(i))")
              (("2" (flatten)
                (("2" (hide -2)
                  (("2" (split)
                    (("1" (assert) nil nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand "metric_triangle?")
        (("3" (skosimp*)
          (("3" (rewrite "sigma_sum" 1)
            (("3"
              (lemma "sigma_le"
               ("low" "0" "high" "n-1" "F"
                "LAMBDA (i_1: below[n]): abs(x!1(i_1) - z!1(i_1))" "G"
                "LAMBDA (i_1: below(n)):
                    abs(x!1(i_1) - y!1(i_1)) + abs(y!1(i_1) - z!1(i_1))"))
              (("3" (split -1)
                (("1" (propax) nil nil)
                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_zero formula-decl nil sigma reals)
    (sigma_nat application-judgement "nat" euclidean nil)
    (extensionality_postulate formula-decl nil functions nil)
    (sigma_nnreal_eq_0 formula-decl nil euclidean nil)
    (below type-eq-decl nil nat_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Vector type-eq-decl nil vectors vectors)
    (Index type-eq-decl nil vectors vectors)
    (n formal-const-decl "posnat" euclidean nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (metric_zero? const-decl "bool" metric_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (metric_symmetric? const-decl "bool" metric_def nil)
    (sigma_le formula-decl nil sigma reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sigma_sum formula-decl nil sigma reals)
    (metric_triangle? const-decl "bool" metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (sigma_nnreal application-judgement "nnreal" euclidean nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (d1 subtype
    "LAMBDA x, y: sigma[naturalnumbers.below(euclidean.n)].sigma(0, (number_fields.-)(euclidean.n, 1), (LAMBDA i: real_defs.abs((number_fields.-)(euclidean.x(euclidean.i), euclidean.y(euclidean.i)))))"
    "metric[Vector[n]]"))
  (d1_TCC1-1 nil 3382851446
   ("" (expand "metric?")
    (("" (split)
      (("1" (expand "metric_zero?")
        (("1" (skosimp*)
          (("1" (split)
            (("1" (flatten)
              (("1" (apply-extensionality 1 :hide? t)
                (("1" (rewrite "sigma_nnreal" -1)
                  (("1" (inst - "x!2") (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (replace -1)
                (("2" (lemma "sigma_zero" ("low" "0" "high" "n-1"))
                  (("2"
                    (lemma "extensionality_postulate"
                     ("f" "LAMBDA (i: below(n)): 0" "g"
                      "LAMBDA i: abs(y!1(i) - y!1(i))"))
                    (("2" (flatten)
                      (("2" (hide -2)
                        (("2" (split)
                          (("1" (assert) nil nil)
                           ("2" (hide -1 2)
                            (("2" (skosimp) (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "metric_symmetric?")
        (("2" (skosimp*)
          (("2" (lemma "extensionality_postulate[below[n],nnreal]")
            (("2"
              (inst - "LAMBDA i: abs(x!1(i) - y!1(i))"
               "LAMBDA i: abs(y!1(i) - x!1(i))")
              (("2" (flatten)
                (("2" (hide -2)
                  (("2" (split)
                    (("1" (assert) nil nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand "metric_triangle?")
        (("3" (skosimp*)
          (("3" (rewrite "sigma_sum" 1)
            (("3"
              (lemma "sigma_le"
               ("low" "0" "high" "n-1" "F"
                "LAMBDA (i_1: below[n]): abs(x!1(i_1) - z!1(i_1))" "G"
                "LAMBDA (i_1: below(n)):
               abs(x!1(i_1) - y!1(i_1)) + abs(y!1(i_1) - z!1(i_1))"))
              (("3" (split -1)
                (("1" (propax) nil nil)
                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (sigma_zero formula-decl nil sigma reals)
    (extensionality_postulate formula-decl nil functions nil)
    (Vector type-eq-decl nil vectors vectors)
    (Index type-eq-decl nil vectors vectors)
    (metric_zero? const-decl "bool" metric_def nil)
    (metric_symmetric? const-decl "bool" metric_def nil)
    (sigma_le formula-decl nil sigma reals)
    (sigma_sum formula-decl nil sigma reals)
    (metric_triangle? const-decl "bool" metric_def nil)
    (metric? const-decl "bool" metric_def nil))
   nil
   (d1 subtype
    "LAMBDA x, y: sigma[naturalnumbers.below(euclidean.n)].sigma(0, (number_fields.-)(euclidean.n, 1), (LAMBDA i: real_defs.abs((number_fields.-)(euclidean.x(euclidean.i), euclidean.y(euclidean.i)))))"
    "metric[Vector[n]]")))
 (d2_TCC1 0
  (d2_TCC1-1 nil 3382851446
   ("" (expand "metric?")
    (("" (split)
      (("1" (expand "metric_zero?")
        (("1" (skosimp)
          (("1" (split)
            (("1" (flatten)
              (("1"
                (lemma "sqrt_eq_0"
                 ("nnx"
                  "sigma[below(n)](0, n - 1, LAMBDA i: sq(x!1(i) - y!1(i)))"))
                (("1" (replace -2 -1)
                  (("1" (hide -2)
                    (("1"
                      (lemma "sigma_nonneg_eq_0[below(n)]"
                       ("Fnnr"
                        "LAMBDA (i_1: below[n]): sq(x!1(i_1) - y!1(i_1))"
                        "low" "0" "high" "n-1"))
                      (("1" (replace -2 -1)
                        (("1" (assert)
                          (("1" (hide -2)
                            (("1"
                              (lemma "sub_eq_zero[n]" ("u" "x!1" "v" "y!1"))
                              (("1" (replace -1 1 rl)
                                (("1" (hide -1)
                                  (("1" (expand "-" 1)
                                    (("1" (apply-extensionality 1 :hide? t)
                                      (("1"
                                        (inst - "x!2")
                                        (("1" (rewrite "sq_eq_0") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (replace -1 * rl)
                (("2" (hide -1)
                  (("2"
                    (lemma "extensionality"
                     ("f" "LAMBDA (i:below(n)): sq(x!1(i) - x!1(i))" "g"
                      "lambda (i:below(n)): 0"))
                    (("2" (split -1)
                      (("1" (replace -1)
                        (("1" (rewrite "sigma_zero") (("1" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (skosimp) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "metric_symmetric?")
        (("2" (skosimp)
          (("2"
            (lemma "extensionality"
             ("f" "lambda (i:below(n)): sq(x!1(i) - y!1(i))" "g"
              "lambda (i:below(n)): sq(y!1(i) - x!1(i))"))
            (("2" (split -1)
              (("1" (replace -1) (("1" (propax) nil nil)) nil)
               ("2" (hide 2)
                (("2" (skosimp)
                  (("2" (assert) (("2" (rewrite "sq_neg_minus") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand "metric_triangle?")
        (("3" (skosimp*)
          (("3" (lemma "norm_add_le" ("u" "x!1-y!1" "v" "y!1-z!1"))
            (("3" (expand "norm")
              (("3" (expand "-")
                (("3" (expand "sqv")
                  (("3" (assert)
                    (("3" (expand "*")
                      (("3" (expand "sq")
                        (("3"
                          (name-replace "DRL1" "LAMBDA (i_1: Index[n]):
                     y!1(i_1) * y!1(i_1) - y!1(i_1) * z!1(i_1) +
                      (z!1(i_1) * z!1(i_1) - y!1(i_1) * z!1(i_1))")
                          (("3"
                            (name-replace "DRL2" "LAMBDA (i_2: Index[n]):
                    x!1(i_2) * x!1(i_2) - x!1(i_2) * y!1(i_2) +
                     (y!1(i_2) * y!1(i_2) - x!1(i_2) * y!1(i_2))")
                            (("3"
                              (lemma "extensionality"
                               ("f" " LAMBDA (i_1: Index[n]):
                   ((LAMBDA (i: Index[n]): x!1(i) - y!1(i)) +
                     (LAMBDA (i: Index[n]): y!1(i) - z!1(i)))
                       (i_1)
                    *
                    ((LAMBDA (i: Index[n]): x!1(i) - y!1(i)) +
                      (LAMBDA (i: Index[n]): y!1(i) - z!1(i)))
                        (i_1)" "g" "LAMBDA i:
                  x!1(i) * x!1(i) - x!1(i) * z!1(i) +
                   (z!1(i) * z!1(i) - x!1(i) * z!1(i))"))
                              (("3" (split -1)
                                (("1" (replace -1) (("1" (propax) nil nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (skosimp)
                                    (("2" (expand "+")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_zero formula-decl nil sigma reals)
    (sqrt_0 formula-decl nil sqrt reals) (sq_0 formula-decl nil sq reals)
    (extensionality formula-decl nil functions nil)
    (sigma_nonneg_eq_0 formula-decl nil sigma reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sub_eq_zero formula-decl nil vectors vectors)
    (zero const-decl "Vector" vectors vectors)
    (comp_zero formula-decl nil vectors vectors)
    (sq_eq_0 formula-decl nil sq reals) (- const-decl "real" vectors vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sigma_nnreal application-judgement "nnreal" euclidean nil)
    (sqrt_eq_0 formula-decl nil sqrt reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" euclidean nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (Index type-eq-decl nil vectors vectors)
    (Vector type-eq-decl nil vectors vectors)
    (metric_zero? const-decl "bool" metric_def nil)
    (sq_neg_minus formula-decl nil sq reals)
    (metric_symmetric? const-decl "bool" metric_def nil)
    (norm const-decl "nnreal" vectors vectors)
    (sqv const-decl "nnreal" vectors vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors vectors)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "real" vectors vectors)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (norm_add_le formula-decl nil vectors vectors)
    (metric_triangle? const-decl "bool" metric_def nil)
    (metric? const-decl "bool" metric_def nil))
   nil
   (d2 subtype
    "LAMBDA x, y: sqrt.sqrt(sigma[naturalnumbers.below(euclidean.n)].sigma(0, (number_fields.-)(euclidean.n, 1), (LAMBDA i: sq.sq((number_fields.-)(euclidean.x(euclidean.i), euclidean.y(euclidean.i))))))"
    "metric[Vector[n]]")))
 (dinf_TCC1 0
  (dinf_TCC1-1 nil 3293695864
   ("" (skosimp*)
    ((""
      (case "EXISTS (K:below[n]): FORALL (i:below[n]): abs(x!1(i)-y!1(i)) <= abs(x!1(K)-y!1(K))")
      (("1"
        (case-replace
         "nonempty?[nnreal]({z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z})")
        (("1"
          (case-replace "above_bounded[nnreal]
          ({z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z})")
          (("1" (expand "in_set")
            (("1"
              (case-replace
               "sup[nnreal]({z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z}) >= 0")
              (("1" (skolem!)
                (("1" (inst + "K!1")
                  (("1"
                    (typepred
                     "sup[nnreal]({z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z})")
                    (("1"
                      (name-replace "NNS"
                       "{z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z}")
                      (("1" (expand "least_upper_bound")
                        (("1" (flatten)
                          (("1" (inst -2 "abs(x!1(K!1) - y!1(K!1))")
                            (("1" (split -2)
                              (("1" (expand "upper_bound")
                                (("1" (inst -2 "abs(x!1(K!1) - y!1(K!1))")
                                  (("1" (assert) nil nil)
                                   ("2" (expand "NNS")
                                    (("2" (inst + "K!1") nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil)
                               ("3" (hide 2)
                                (("3" (expand "upper_bound")
                                  (("3" (skosimp*)
                                    (("3" (typepred "z!1")
                                      (("3"
                                        (expand "NNS" -2)
                                        (("3"
                                          (skolem!)
                                          (("3"
                                            (inst -7 "i!1")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2"
                  (typepred
                   "sup[nnreal]({z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z})")
                  (("1"
                    (name-replace "NNS"
                     "{z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z}")
                    (("1" (expand "least_upper_bound")
                      (("1" (flatten)
                        (("1" (expand "upper_bound")
                          (("1" (inst -1 "abs(x!1(0)-y!1(0))")
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2" (expand "NNS")
                                (("2" (inst + "0") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("3" (assert) nil nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "above_bounded")
              (("2" (skolem!)
                (("2" (inst + "abs(x!1(K!1) - y!1(K!1))")
                  (("2" (expand "upper_bound")
                    (("2" (skosimp*)
                      (("2" (typepred "z!1")
                        (("2" (skolem!)
                          (("2" (inst - "i!1") (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "nonempty?")
            (("2" (expand "empty?")
              (("2" (inst - "abs(x!1(0)-y!1(0))")
                (("1" (expand "member")
                  (("1" (inst + "0") (("1" (assert) nil nil)) nil)) nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2"
          (case "FORALL (f: [below[n] -> nnreal], m: below[n]):
        EXISTS (K: below[m+1]): FORALL (i: below[m+1]): f(i) <= f(K)")
          (("1" (inst - "lambda (i:below[n]): abs(x!1(i)-y!1(i))" "n-1")
            (("1" (typepred "n") (("1" (assert) nil nil)) nil)) nil)
           ("2" (hide 2)
            (("2" (induct "m")
              (("1" (typepred "n")
                (("1" (replace -1)
                  (("1" (skosimp*)
                    (("1" (inst + "0") (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst - "f!1")
                  (("2" (skolem!)
                    (("2" (case "f!1(K!1) <= f!1(jb!1+1)")
                      (("1" (inst + "jb!1+1")
                        (("1" (skosimp*)
                          (("1" (inst - "i!1")
                            (("1" (assert) nil nil) ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst + "K!1")
                        (("2" (skosimp*)
                          (("2" (case "i!1<=jb!1")
                            (("1" (inst - "i!1") (("1" (assert) nil nil)) nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vector type-eq-decl nil vectors vectors)
    (Index type-eq-decl nil vectors vectors)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (n formal-const-decl "posnat" euclidean nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (above_bounded const-decl "bool" bounded_reals reals)
    (setof type-eq-decl nil defined_types nil)
    (sup_set type-eq-decl nil bounded_reals reals)
    (pred type-eq-decl nil defined_types nil)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals reals)
    (NNS skolem-const-decl "[nnreal -> boolean]" euclidean nil)
    (x!1 skolem-const-decl "Vector[n]" euclidean nil)
    (K!1 skolem-const-decl "below[n]" euclidean nil)
    (y!1 skolem-const-decl "Vector[n]" euclidean nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NNS skolem-const-decl "[nnreal -> boolean]" euclidean nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (in_set const-decl "bool" bounded_reals reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (nnreal type-eq-decl nil real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (i!1 skolem-const-decl "below[2 + jb!1]" euclidean nil)
    (jb!1 skolem-const-decl "below(n)" euclidean nil)
    (i!1 skolem-const-decl "below[2 + jb!1]" euclidean nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (dinf subtype
    "{z: real_types.nnreal | EXISTS i: real_defs.abs((number_fields.-)(euclidean.x(euclidean.i), euclidean.y(euclidean.i))) = z}"
    "max_set[nnreal]")))
 (dinf_TCC2 0
  (dinf_TCC2-2 "" 3790338219
   ("" (expand "metric?")
    (("" (split)
      (("1" (expand "metric_zero?")
        (("1" (skosimp)
          (("1" (split)
            (("1" (flatten)
              (("1"
                (case "nonempty?[nnreal]({z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z})")
                (("1"
                  (case "above_bounded[nnreal]
          ({z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z})")
                  (("1" (expand "max")
                    (("1"
                      (typepred
                       "sup[nnreal]({z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z})")
                      (("1" (expand "least_upper_bound")
                        (("1" (flatten)
                          (("1" (replace -5)
                            (("1"
                              (name-replace "XX"
                               "{z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z}")
                              (("1" (hide -5)
                                (("1" (expand "upper_bound")
                                  (("1" (apply-extensionality 1 :hide? t)
                                    (("1" (inst - "abs(x!1(x!2)-y!1(x!2))")
                                      (("1"
                                        (typepred "abs(x!1(x!2)-y!1(x!2))")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (expand "XX")
                                        (("2" (inst + "x!2") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (expand "above_bounded")
                    (("2" (expand "upper_bound")
                      (("2"
                        (inst +
                         "sigma(0,n-1,lambda (i:below(n)): abs(x!1(i) - y!1(i)))")
                        (("1" (skosimp)
                          (("1" (typepred "z!1")
                            (("1" (skosimp)
                              (("1" (replace -2 1 rl)
                                (("1" (hide -1 -2 -3 -4 2)
                                  (("1" (typepred "i!1")
                                    (("1"
                                      (lemma
                                       "sigma_split[below(n)]"
                                       ("low"
                                        "0"
                                        "high"
                                        "n-1"
                                        "F"
                                        "LAMBDA (i: below(n)): abs(x!1(i) - y!1(i))"))
                                      (("1"
                                        (inst - "i!1-1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lemma
                                                 "sigma_nonneg"
                                                 ("low"
                                                  "0"
                                                  "high"
                                                  "i!1-1"
                                                  "F"
                                                  " LAMBDA (i: below(n)): abs(x!1(i) - y!1(i))"))
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (name-replace
                                                     "DRL1"
                                                     "sigma(0, i!1 - 1, LAMBDA (i: below(n)): abs(x!1(i) - y!1(i)))")
                                                    (("1"
                                                      (lemma
                                                       "sigma_first"
                                                       ("low"
                                                        "i!1"
                                                        "high"
                                                        "n-1"
                                                        "F"
                                                        "LAMBDA (i_1: below(n)): abs(x!1(i_1) - y!1(i_1))"))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "sigma_nonneg"
                                                               ("low"
                                                                "1+i!1"
                                                                "high"
                                                                "n-1"
                                                                "F"
                                                                "LAMBDA (i_1: below(n)): abs(x!1(i_1) - y!1(i_1))"))
                                                              (("1"
                                                                (split -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (expand "nonempty?")
                    (("2" (expand "empty?")
                      (("2" (expand "member")
                        (("2" (inst - "abs(x!1(0)-y!1(0))")
                          (("1" (inst + "0") (("1" (assert) nil nil)) nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (replace -1 * rl)
                (("2" (assert)
                  (("2" (expand "abs")
                    (("2" (expand "max")
                      (("2"
                        (typepred
                         "sup[nnreal]({z: nnreal | EXISTS i: 0 = z})")
                        (("1" (expand "least_upper_bound")
                          (("1" (flatten)
                            (("1" (expand "upper_bound")
                              (("1" (inst - "0")
                                (("1" (assert)
                                  (("1" (inst - "0")
                                    (("1" (split)
                                      (("1" (assert) nil nil)
                                       ("2" (propax) nil nil)
                                       ("3"
                                        (skosimp)
                                        (("3"
                                          (typepred "z!1")
                                          (("3"
                                            (skosimp)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (inst + "0") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (split)
                          (("1" (expand "nonempty?")
                            (("1" (expand "empty?")
                              (("1" (expand "member")
                                (("1" (inst - "0")
                                  (("1" (inst + "0") (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "above_bounded")
                            (("2" (inst + "0")
                              (("2" (expand "upper_bound")
                                (("2" (skosimp)
                                  (("2" (typepred "z!1")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "metric_symmetric?")
        (("2" (skosimp)
          (("2"
            (lemma "extensionality"
             ("a" "{z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z}" "b"
              "{z: nnreal | EXISTS i: abs(y!1(i) - x!1(i)) = z}"))
            (("2" (split -1)
              (("1" (replace -1) (("1" (propax) nil nil)) nil)
               ("2" (hide 2)
                (("2" (expand "member")
                  (("2" (skosimp*)
                    (("2" (split)
                      (("1" (skosimp*)
                        (("1" (inst + "i!1") (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (inst + "i!1") (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand "metric_triangle?")
        (("3" (skosimp*)
          (("3"
            (case "forall (x,y:Vector[n]): nonempty?[nnreal]({z: nnreal | EXISTS (i:below(n)): abs(x(i) - y(i)) = z})")
            (("1" (expand "max")
              (("1"
                (case "forall (x,y:Vector[n]): above_bounded[nnreal]({z: nnreal | EXISTS (i:below(n)): abs(x(i) - y(i)) = z})")
                (("1" (inst-cp - "x!1" "z!1")
                  (("1" (inst-cp - "x!1" "y!1")
                    (("1" (inst - "y!1" "z!1")
                      (("1" (inst-cp - "x!1" "z!1")
                        (("1" (inst-cp - "x!1" "y!1")
                          (("1" (inst - "y!1" "z!1")
                            (("1"
                              (typepred
                               "sup[nnreal]({z: nnreal | EXISTS i: abs(x!1(i) - z!1(i)) = z})")
                              (("1"
                                (typepred
                                 "sup[nnreal]({z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z})")
                                (("1"
                                  (typepred
                                   "sup[nnreal]({z: nnreal | EXISTS i: abs(y!1(i) - z!1(i)) = z})")
                                  (("1" (expand "least_upper_bound")
                                    (("1" (flatten)
                                      (("1"
                                        (expand "upper_bound")
                                        (("1"
                                          (name-replace
                                           "SXZ"
                                           "sup[nnreal]({z: nnreal | EXISTS i: abs(x!1(i) - z!1(i)) = z})")
                                          (("1"
                                            (name-replace
                                             "SXY"
                                             "sup[nnreal]({z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z})")
                                            (("1"
                                              (name-replace
                                               "SYZ"
                                               "sup[nnreal]({z: nnreal | EXISTS i: abs(y!1(i) - z!1(i)) = z})")
                                              (("1"
                                                (inst -6 "SXY + SYZ")
                                                (("1"
                                                  (split -6)
                                                  (("1" (propax) nil nil)
                                                   ("2" (assert) nil nil)
                                                   ("3"
                                                    (hide 2)
                                                    (("3"
                                                      (skosimp)
                                                      (("3"
                                                        (typepred "z!2")
                                                        (("3"
                                                          (skosimp)
                                                          (("3"
                                                            (inst
                                                             -3
                                                             "abs(y!1(i!1) - z!1(i!1))")
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "abs(x!1(i!1) - y!1(i!1))")
                                                              (("1"
                                                                (lemma
                                                                 "triangle"
                                                                 ("x"
                                                                  "x!1(i!1) - y!1(i!1)"
                                                                  "y"
                                                                  "y!1(i!1) - z!1(i!1)"))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst 1 "i!1")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst + "i!1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (skosimp)
                    (("2" (expand "above_bounded")
                      (("2"
                        (inst +
                         "sigma(0,n-1,lambda (i: below(n)): abs(x!2(i) - y!2(i)))")
                        (("1" (expand "upper_bound")
                          (("1" (skosimp)
                            (("1" (typepred "z!2")
                              (("1" (skosimp)
                                (("1"
                                  (lemma "sigma_split[below(n)]"
                                   ("low" "0" "high" "n-1" "F"
                                    "LAMBDA (i: below(n)): abs(x!2(i) - y!2(i))"))
                                  (("1" (inst - "i!1-1")
                                    (("1" (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma
                                             "sigma_nonneg[below(n)]"
                                             ("low"
                                              "0"
                                              "high"
                                              "i!1-1"
                                              "F"
                                              "LAMBDA (i: below(n)): abs(x!2(i) - y!2(i))"))
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (lemma
                                                 "sigma_first[below(n)]"
                                                 ("low"
                                                  "i!1"
                                                  "high"
                                                  "n-1"
                                                  "F"
                                                  " LAMBDA (i: below(n)): abs(x!2(i) - y!2(i))"))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (lemma
                                                       "sigma_nonneg[below(n)]"
                                                       ("low"
                                                        "1+i!1"
                                                        "high"
                                                        "i!1-1"
                                                        "F"
                                                        "LAMBDA (i: below(n)): abs(x!2(i) - y!2(i))"))
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (expand "nonempty?")
                  (("2" (expand "empty?")
                    (("2" (inst - "abs(x!2(0)-y!2(0))")
                      (("1" (expand "member")
                        (("1" (inst + "0") (("1" (assert) nil nil)) nil)) nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (dinf subtype
    "LAMBDA x, y: bounded_reals[nnreal].max({z: real_types.nnreal | EXISTS i: real_defs.abs((number_fields.-)(euclidean.x(euclidean.i), euclidean.y(euclidean.i))) = z})"
    "metric[Vector[n]]"))
  (dinf_TCC2-1 nil 3382851446
   ("" (expand "metric?")
    (("" (split)
      (("1" (expand "metric_zero?")
        (("1" (skosimp)
          (("1" (split)
            (("1" (flatten)
              (("1"
                (case "nonempty?[nnreal]({z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z})")
                (("1"
                  (case "above_bounded[nnreal]
          ({z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z})")
                  (("1" (expand "max")
                    (("1"
                      (typepred
                       "sup[nnreal]({z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z})")
                      (("1" (expand "least_upper_bound")
                        (("1" (flatten)
                          (("1" (replace -5)
                            (("1"
                              (name-replace "XX"
                               "{z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z}")
                              (("1" (hide -5)
                                (("1" (expand "upper_bound")
                                  (("1" (apply-extensionality 1 :hide? t)
                                    (("1" (inst - "abs(x!1(x!2)-y!1(x!2))")
                                      (("1"
                                        (typepred "abs(x!1(x!2)-y!1(x!2))")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (expand "XX")
                                        (("2" (inst + "x!2") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (expand "above_bounded")
                    (("2" (expand "upper_bound")
                      (("2"
                        (inst +
                         "sigma(0,n-1,lambda (i:below(n)): abs(x!1(i) - y!1(i)))")
                        (("1" (skosimp)
                          (("1" (typepred "z!1")
                            (("1" (skosimp)
                              (("1" (replace -2 1 rl)
                                (("1" (hide -1 -2 -3 -4 2)
                                  (("1" (typepred "i!1")
                                    (("1"
                                      (lemma
                                       "sigma_split[below(n)]"
                                       ("low"
                                        "0"
                                        "high"
                                        "n-1"
                                        "F"
                                        "LAMBDA (i: below(n)): abs(x!1(i) - y!1(i))"))
                                      (("1"
                                        (inst - "i!1-1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lemma
                                                 "sigma_nonneg"
                                                 ("low"
                                                  "0"
                                                  "high"
                                                  "i!1-1"
                                                  "F"
                                                  " LAMBDA (i: below(n)): abs(x!1(i) - y!1(i))"))
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (name-replace
                                                     "DRL1"
                                                     "sigma(0, i!1 - 1, LAMBDA (i: below(n)): abs(x!1(i) - y!1(i)))")
                                                    (("1"
                                                      (lemma
                                                       "sigma_first"
                                                       ("low"
                                                        "i!1"
                                                        "high"
                                                        "n-1"
                                                        "F"
                                                        "LAMBDA (i_1: below(n)): abs(x!1(i_1) - y!1(i_1))"))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1 1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "sigma_nonneg"
                                                               ("low"
                                                                "1+i!1"
                                                                "high"
                                                                "n-1"
                                                                "F"
                                                                "LAMBDA (i_1: below(n)): abs(x!1(i_1) - y!1(i_1))"))
                                                              (("1"
                                                                (split -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) (("2" (assert) nil nil)) nil)
                         ("3" (assert) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (expand "nonempty?")
                    (("2" (expand "empty?")
                      (("2" (expand "member")
                        (("2" (inst - "abs(x!1(0)-y!1(0))")
                          (("1" (inst + "0") (("1" (assert) nil nil)) nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (replace -1 * rl)
                (("2" (assert)
                  (("2" (expand "abs")
                    (("2" (expand "max")
                      (("2"
                        (typepred
                         "sup[nnreal]({z: nnreal | EXISTS i: 0 = z})")
                        (("1" (expand "least_upper_bound")
                          (("1" (flatten)
                            (("1" (expand "upper_bound")
                              (("1" (inst - "0")
                                (("1" (assert)
                                  (("1" (inst - "0")
                                    (("1" (split)
                                      (("1" (assert) nil nil)
                                       ("2" (propax) nil nil)
                                       ("3"
                                        (skosimp)
                                        (("3"
                                          (typepred "z!1")
                                          (("3"
                                            (skosimp)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (inst + "0") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (split)
                          (("1" (expand "nonempty?")
                            (("1" (expand "empty?")
                              (("1" (expand "member")
                                (("1" (inst - "0")
                                  (("1" (inst + "0") (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "above_bounded")
                            (("2" (inst + "0")
                              (("2" (expand "upper_bound")
                                (("2" (skosimp)
                                  (("2" (typepred "z!1")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "metric_symmetric?")
        (("2" (skosimp)
          (("2"
            (lemma "extensionality"
             ("a" "{z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z}" "b"
              "{z: nnreal | EXISTS i: abs(y!1(i) - x!1(i)) = z}"))
            (("2" (split -1)
              (("1" (replace -1) (("1" (propax) nil nil)) nil)
               ("2" (hide 2)
                (("2" (expand "member")
                  (("2" (skosimp*)
                    (("2" (split)
                      (("1" (skosimp*)
                        (("1" (inst + "i!1") (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (inst + "i!1") (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand "metric_triangle?")
        (("3" (skosimp*)
          (("3"
            (case "forall (x,y:Vector[n]): nonempty?[nnreal]({z: nnreal | EXISTS (i:below(n)): abs(x(i) - y(i)) = z})")
            (("1" (expand "max")
              (("1"
                (case "forall (x,y:Vector[n]): above_bounded[nnreal]({z: nnreal | EXISTS (i:below(n)): abs(x(i) - y(i)) = z})")
                (("1" (inst-cp - "x!1" "z!1")
                  (("1" (inst-cp - "x!1" "y!1")
                    (("1" (inst - "y!1" "z!1")
                      (("1" (inst-cp - "x!1" "z!1")
                        (("1" (inst-cp - "x!1" "y!1")
                          (("1" (inst - "y!1" "z!1")
                            (("1"
                              (typepred
                               "sup[nnreal]({z: nnreal | EXISTS i: abs(x!1(i) - z!1(i)) = z})")
                              (("1"
                                (typepred
                                 "sup[nnreal]({z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z})")
                                (("1"
                                  (typepred
                                   "sup[nnreal]({z: nnreal | EXISTS i: abs(y!1(i) - z!1(i)) = z})")
                                  (("1" (expand "least_upper_bound")
                                    (("1" (flatten)
                                      (("1"
                                        (expand "upper_bound")
                                        (("1"
                                          (name-replace
                                           "SXZ"
                                           "sup[nnreal]({z: nnreal | EXISTS i: abs(x!1(i) - z!1(i)) = z})")
                                          (("1"
                                            (name-replace
                                             "SXY"
                                             "sup[nnreal]({z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z})")
                                            (("1"
                                              (name-replace
                                               "SYZ"
                                               "sup[nnreal]({z: nnreal | EXISTS i: abs(y!1(i) - z!1(i)) = z})")
                                              (("1"
                                                (inst -6 "SXY + SYZ")
                                                (("1"
                                                  (split -6)
                                                  (("1" (propax) nil nil)
                                                   ("2" (assert) nil nil)
                                                   ("3"
                                                    (hide 2)
                                                    (("3"
                                                      (skosimp)
                                                      (("3"
                                                        (typepred "z!2")
                                                        (("3"
                                                          (skosimp)
                                                          (("3"
                                                            (inst
                                                             -3
                                                             "abs(y!1(i!1) - z!1(i!1))")
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "abs(x!1(i!1) - y!1(i!1))")
                                                              (("1"
                                                                (lemma
                                                                 "triangle"
                                                                 ("x"
                                                                  "x!1(i!1) - y!1(i!1)"
                                                                  "y"
                                                                  "y!1(i!1) - z!1(i!1)"))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst 1 "i!1")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst + "i!1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (skosimp)
                    (("2" (expand "above_bounded")
                      (("2"
                        (inst +
                         "sigma(0,n-1,lambda (i: below(n)): abs(x!2(i) - y!2(i)))")
                        (("1" (expand "upper_bound")
                          (("1" (skosimp)
                            (("1" (typepred "z!2")
                              (("1" (skosimp)
                                (("1"
                                  (lemma "sigma_split[below(n)]"
                                   ("low" "0" "high" "n-1" "F"
                                    "LAMBDA (i: below(n)): abs(x!2(i) - y!2(i))"))
                                  (("1" (inst - "i!1-1")
                                    (("1" (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma
                                             "sigma_nonneg[below(n)]"
                                             ("low"
                                              "0"
                                              "high"
                                              "i!1-1"
                                              "F"
                                              "LAMBDA (i: below(n)): abs(x!2(i) - y!2(i))"))
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (lemma
                                                 "sigma_first[below(n)]"
                                                 ("low"
                                                  "i!1"
                                                  "high"
                                                  "n-1"
                                                  "F"
                                                  " LAMBDA (i: below(n)): abs(x!2(i) - y!2(i))"))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (lemma
                                                       "sigma_nonneg[below(n)]"
                                                       ("low"
                                                        "1+i!1"
                                                        "high"
                                                        "i!1-1"
                                                        "F"
                                                        "LAMBDA (i: below(n)): abs(x!2(i) - y!2(i))"))
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) (("2" (assert) nil nil)) nil)
                         ("3" (assert) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (expand "nonempty?")
                  (("2" (expand "empty?")
                    (("2" (inst - "abs(x!2(0)-y!2(0))")
                      (("1" (expand "member")
                        (("1" (inst + "0") (("1" (assert) nil nil)) nil)) nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil) (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (above_bounded const-decl "bool" bounded_reals reals)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals reals)
    (sup_set type-eq-decl nil bounded_reals reals)
    (<= const-decl "bool" reals nil)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (pred type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (XX skolem-const-decl "[nnreal -> boolean]" euclidean nil)
    (x!1 skolem-const-decl "Vector[n]" euclidean nil)
    (x!2 skolem-const-decl "Index[n]" euclidean nil)
    (y!1 skolem-const-decl "Vector[n]" euclidean nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (max const-decl "T" bounded_reals reals)
    (sigma_split formula-decl nil sigma reals)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sigma_nnreal application-judgement "nnreal" euclidean nil)
    (sigma_first formula-decl nil sigma reals)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sigma_nonneg formula-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" euclidean nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Index type-eq-decl nil vectors vectors)
    (Vector type-eq-decl nil vectors vectors)
    (metric_zero? const-decl "bool" metric_def nil)
    (extensionality formula-decl nil sets_lemmas nil)
    (metric_symmetric? const-decl "bool" metric_def nil)
    (x!1 skolem-const-decl "Vector[n]" euclidean nil)
    (triangle formula-decl nil real_props nil)
    (i!1 skolem-const-decl "below[n]" euclidean nil)
    (z!1 skolem-const-decl "Vector[n]" euclidean nil)
    (y!1 skolem-const-decl "Vector[n]" euclidean nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (metric_triangle? const-decl "bool" metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (dinf subtype
    "LAMBDA x, y: bounded_reals[nnreal].max({z: real_types.nnreal | EXISTS i: real_defs.abs((number_fields.-)(euclidean.x(euclidean.i), euclidean.y(euclidean.i))) = z})"
    "metric[Vector[n]]")))
 (euclidean_d1 0
  (euclidean_d1-1 nil 3293707277
   ("" (typepred "d1")
    (("" (expand "metric_space?")
      (("" (expand "metric?")
        (("" (flatten)
          (("" (split)
            (("1" (expand "fullset")
              (("1" (expand "metric_zero?")
                (("1" (skosimp) (("1" (inst - "x!1" "y!1") nil nil)) nil))
                nil))
              nil)
             ("2" (expand "metric_symmetric?")
              (("2" (skosimp) (("2" (inst - "x!1" "y!1") nil nil)) nil)) nil)
             ("3" (expand "metric_triangle?")
              (("3" (skosimp) (("3" (inst - "x!1" "y!1" "z!1") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_space? const-decl "bool" metric_space_def nil)
    (metric_triangle? const-decl "bool" metric_def nil)
    (metric_triangle? const-decl "bool" metric_space_def nil)
    (metric_symmetric? const-decl "bool" metric_def nil)
    (metric_symmetric? const-decl "bool" metric_space_def nil)
    (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (metric_zero? const-decl "bool" metric_space_def nil)
    (metric_zero? const-decl "bool" metric_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" euclidean nil)
    (Index type-eq-decl nil vectors vectors)
    (Vector type-eq-decl nil vectors vectors)
    (nnreal type-eq-decl nil real_types nil)
    (metric? const-decl "bool" metric_def nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (d1 const-decl "metric" euclidean nil))
   shostak))
 (euclidean_d2 0
  (euclidean_d2-1 nil 3293708530
   ("" (typepred "d2")
    (("" (expand "metric?")
      (("" (expand "metric_space?")
        (("" (expand "fullset")
          (("" (flatten)
            (("" (split)
              (("1" (expand "metric_zero?")
                (("1" (skosimp) (("1" (inst - "x!1" "y!1") nil nil)) nil))
                nil)
               ("2" (expand "metric_symmetric?")
                (("2" (skosimp) (("2" (inst - "x!1" "y!1") nil nil)) nil))
                nil)
               ("3" (expand "metric_triangle?")
                (("3" (skosimp) (("3" (inst - "x!1" "y!1" "z!1") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil) (TRUE const-decl "bool" booleans nil)
    (metric_zero? const-decl "bool" metric_space_def nil)
    (metric_zero? const-decl "bool" metric_def nil)
    (metric_symmetric? const-decl "bool" metric_space_def nil)
    (metric_symmetric? const-decl "bool" metric_def nil)
    (metric_triangle? const-decl "bool" metric_space_def nil)
    (metric_triangle? const-decl "bool" metric_def nil)
    (metric_space? const-decl "bool" metric_space_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" euclidean nil)
    (Index type-eq-decl nil vectors vectors)
    (Vector type-eq-decl nil vectors vectors)
    (nnreal type-eq-decl nil real_types nil)
    (metric? const-decl "bool" metric_def nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (d2 const-decl "metric" euclidean nil))
   shostak))
 (euclidean_dinf 0
  (euclidean_dinf-2 "" 3790338220
   ("" (expand "metric_space?")
    (("" (split)
      (("1" (expand "metric_zero?")
        (("1" (skosimp*)
          (("1" (expand "dinf")
            (("1" (expand "max")
              (("1" (rewrite "sup_def")
                (("1" (split 1)
                  (("1" (expand "least_upper_bound")
                    (("1" (skosimp*)
                      (("1" (expand "upper_bound")
                        (("1" (apply-extensionality 1 :hide? t)
                          (("1" (inst - "abs(x!1(x!2) - y!1(x!2))")
                            (("1" (hide -2)
                              (("1" (expand "<=")
                                (("1" (split)
                                  (("1" (assert) nil nil)
                                   ("2" (expand "abs")
                                    (("2"
                                      (case-replace "x!1(x!2) - y!1(x!2) < 0")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst + "x!2") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "least_upper_bound")
                    (("2" (skosimp*)
                      (("2" (split)
                        (("1" (expand "upper_bound")
                          (("1" (skosimp*)
                            (("1" (typepred "z!1")
                              (("1" (skosimp)
                                (("1" (replace -3)
                                  (("1" (assert)
                                    (("1" (expand "abs")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (expand "upper_bound")
                            (("2" (inst - "0")
                              (("2" (inst + "0")
                                (("1" (replace -1)
                                  (("1" (assert)
                                    (("1" (expand "abs")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (split)
                    (("1" (expand "nonempty?")
                      (("1" (expand "empty?")
                        (("1" (expand "member")
                          (("1" (inst - "abs(x!1(0)-y!1(0))")
                            (("1" (inst + "0") (("1" (assert) nil nil)) nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "above_bounded")
                      (("2" (expand "upper_bound")
                        (("2" (inst + "d1(x!1,y!1)")
                          (("2" (skosimp)
                            (("2" (typepred "z!1")
                              (("2" (expand "d1")
                                (("2" (skosimp)
                                  (("2"
                                    (lemma "sigma_nn_ge_comps"
                                     ("Fnnr"
                                      "LAMBDA (i:below[n]): abs(x!1(i) - y!1(i))"
                                      "low" "0" "high" "n-1" "i" "i!1"))
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "metric_symmetric?")
        (("2" (skosimp*)
          (("2" (expand "dinf")
            (("2"
              (case-replace
               "{z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z} = {z: nnreal | EXISTS i: abs(y!1(i) - x!1(i)) = z}")
              (("2" (hide 2)
                (("2" (apply-extensionality :hide? t)
                  (("2" (case-replace "EXISTS i: abs(x!1(i) - y!1(i)) = x!2")
                    (("1" (skosimp)
                      (("1" (inst + "i!1")
                        (("1" (expand "abs")
                          (("1"
                            (lemma "trich_lt" ("x" "x!1(i!1)" "y" "y!1(i!1)"))
                            (("1" (split)
                              (("1" (assert) nil nil) ("2" (assert) nil nil)
                               ("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace 1 2)
                      (("2" (assert)
                        (("2" (skosimp)
                          (("2" (inst + "i!1")
                            (("2" (expand "abs")
                              (("2"
                                (lemma "trich_lt"
                                 ("x" "x!1(i!1)" "y" "y!1(i!1)"))
                                (("2" (split)
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand "metric_triangle?")
        (("3" (skosimp*)
          (("3" (expand "dinf")
            (("3" (expand "max")
              (("3"
                (name-replace "XZS"
                 "{z: nnreal | EXISTS i: abs(x!1(i) - z!1(i)) = z}")
                (("3"
                  (name-replace "XYS"
                   "{z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z}")
                  (("3"
                    (name-replace "YZS"
                     "{z: nnreal | EXISTS i: abs(y!1(i) - z!1(i)) = z}")
                    (("3" (name-replace "XZ" "sup(XZS)")
                      (("3" (typepred "XZ")
                        (("3" (name-replace "XY" "sup(XYS)")
                          (("3" (name-replace "YZ" "sup(YZS)")
                            (("3" (typepred "XY")
                              (("3" (typepred "YZ")
                                (("3" (expand "least_upper_bound")
                                  (("3" (flatten)
                                    (("3" (expand "YZS")
                                      (("3"
                                        (expand "XYS")
                                        (("3"
                                          (expand "XZS")
                                          (("3"
                                            (expand "upper_bound")
                                            (("3"
                                              (inst -6 "XY+YZ")
                                              (("3"
                                                (split -6)
                                                (("1" (propax) nil nil)
                                                 ("2" (assert) nil nil)
                                                 ("3"
                                                  (hide 2 -5)
                                                  (("3"
                                                    (skosimp*)
                                                    (("3"
                                                      (typepred "z!2")
                                                      (("3"
                                                        (skosimp)
                                                        (("3"
                                                          (hide -4 -6)
                                                          (("3"
                                                            (inst
                                                             -
                                                             "abs(y!1(i!1)-z!1(i!1))")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "abs(x!1(i!1)-y!1(i!1))")
                                                              (("1"
                                                                (lemma
                                                                 "triangle")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "y!1(i!1) - z!1(i!1)"
                                                                   "x!1(i!1) - y!1(i!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst + "i!1")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst + "i!1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (euclidean_dinf-1 nil 3313054965
   ("" (skosimp)
    (("" (expand "metric_space?")
      (("" (expand "restrict")
        (("" (split)
          (("1" (expand "metric_zero?")
            (("1" (skosimp*)
              (("1" (expand "dinf")
                (("1" (expand "max")
                  (("1" (rewrite "sup_def")
                    (("1" (split 1)
                      (("1" (expand "least_upper_bound")
                        (("1" (skosimp*)
                          (("1" (expand "upper_bound")
                            (("1" (apply-extensionality 1 :hide? t)
                              (("1" (inst - "abs(x!1(x!2) - y!1(x!2))")
                                (("1" (hide -2)
                                  (("1" (expand "<=")
                                    (("1" (split)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "abs")
                                        (("2"
                                          (case-replace
                                           "x!1(x!2) - y!1(x!2) < 0")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (inst + "x!2") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "least_upper_bound")
                        (("2" (skosimp*)
                          (("2" (split)
                            (("1" (expand "upper_bound")
                              (("1" (skosimp*)
                                (("1" (typepred "z!1")
                                  (("1" (skosimp)
                                    (("1" (replace -3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "abs")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2" (expand "upper_bound")
                                (("2" (inst - "0")
                                  (("2" (inst + "0")
                                    (("1" (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "abs")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (split)
                        (("1" (expand "nonempty?")
                          (("1" (expand "empty?")
                            (("1" (expand "member")
                              (("1" (inst - "abs(x!1(0)-y!1(0))")
                                (("1" (inst + "0") (("1" (assert) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "above_bounded")
                          (("2" (expand "upper_bound")
                            (("2" (inst + "d1(x!1,y!1)")
                              (("2" (skosimp)
                                (("2" (typepred "z!1")
                                  (("2" (expand "d1")
                                    (("2" (skosimp)
                                      (("2"
                                        (lemma
                                         "sigma_nn_ge_comps"
                                         ("Fnnr"
                                          "LAMBDA (i:below[n]): abs(x!1(i) - y!1(i))"
                                          "low"
                                          "0"
                                          "high"
                                          "n-1"
                                          "i"
                                          "i!1"))
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "metric_symmetric?")
            (("2" (skosimp*)
              (("2" (expand "dinf")
                (("2"
                  (case-replace
                   "{z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z} = {z: nnreal | EXISTS i: abs(y!1(i) - x!1(i)) = z}")
                  (("2" (hide 2)
                    (("2" (apply-extensionality :hide? t)
                      (("2"
                        (case-replace "EXISTS i: abs(x!1(i) - y!1(i)) = x!2")
                        (("1" (skosimp)
                          (("1" (inst + "i!1")
                            (("1" (expand "abs")
                              (("1"
                                (lemma "trich_lt"
                                 ("x" "x!1(i!1)" "y" "y!1(i!1)"))
                                (("1" (split)
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace 1 2)
                          (("2" (assert)
                            (("2" (skosimp)
                              (("2" (inst + "i!1")
                                (("2" (expand "abs")
                                  (("2"
                                    (lemma "trich_lt"
                                     ("x" "x!1(i!1)" "y" "y!1(i!1)"))
                                    (("2" (split)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil)
                                       ("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "metric_triangle?")
            (("3" (skosimp*)
              (("3" (expand "dinf")
                (("3" (expand "max")
                  (("3"
                    (name-replace "XZS"
                     "{z: nnreal | EXISTS i: abs(x!1(i) - z!1(i)) = z}")
                    (("3"
                      (name-replace "XYS"
                       "{z: nnreal | EXISTS i: abs(x!1(i) - y!1(i)) = z}")
                      (("3"
                        (name-replace "YZS"
                         "{z: nnreal | EXISTS i: abs(y!1(i) - z!1(i)) = z}")
                        (("3" (name-replace "XZ" "sup(XZS)")
                          (("1" (typepred "XZ")
                            (("1" (name-replace "XY" "sup(XYS)")
                              (("1" (name-replace "YZ" "sup(YZS)")
                                (("1" (typepred "XY")
                                  (("1" (typepred "YZ")
                                    (("1" (expand "least_upper_bound")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "YZS")
                                          (("1"
                                            (expand "XYS")
                                            (("1"
                                              (expand "XZS")
                                              (("1"
                                                (expand "upper_bound")
                                                (("1"
                                                  (inst -6 "XY+YZ")
                                                  (("1"
                                                    (split -6)
                                                    (("1" (propax) nil nil)
                                                     ("2" (assert) nil nil)
                                                     ("3"
                                                      (hide 2 -5)
                                                      (("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (typepred "z!2")
                                                          (("3"
                                                            (skosimp)
                                                            (("3"
                                                              (hide -4 -6)
                                                              (("3"
                                                                (inst
                                                                 -
                                                                 "abs(y!1(i!1)-z!1(i!1))")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "abs(x!1(i!1)-y!1(i!1))")
                                                                  (("1"
                                                                    (lemma
                                                                     "triangle")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "y!1(i!1) - z!1(i!1)"
                                                                       "x!1(i!1) - y!1(i!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     +
                                                                     "i!1")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   +
                                                                   "i!1")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (split)
                                    (("1" (expand "nonempty?")
                                      (("1"
                                        (expand "YZS")
                                        (("1"
                                          (expand "empty?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (inst - "abs(y!1(0)-z!1(0))")
                                              (("1"
                                                (inst + "0")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (expand "YZS")
                                      (("2"
                                        (expand "above_bounded")
                                        (("2"
                                          (expand "upper_bound")
                                          (("2"
                                            (inst + "d1(y!1,z!1)")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (typepred "z!2")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (expand "d1")
                                                    (("2"
                                                      (lemma
                                                       "sigma_nn_ge_comps"
                                                       ("low"
                                                        "0"
                                                        "high"
                                                        "n-1"
                                                        "i"
                                                        "i!1"
                                                        "Fnnr"
                                                        "LAMBDA (i:below[n]): abs(y!1(i) - z!1(i))"))
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but 1)
                                (("2" (expand "XYS")
                                  (("2" (split)
                                    (("1" (expand "nonempty?")
                                      (("1"
                                        (expand "empty?")
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (inst - "abs(x!1(0)-y!1(0))")
                                            (("1"
                                              (inst + "0")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (expand "above_bounded")
                                      (("2"
                                        (expand "upper_bound")
                                        (("2"
                                          (inst + "d1(x!1,y!1)")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (typepred "z!2")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (lemma
                                                   "sigma_nn_ge_comps"
                                                   ("low"
                                                    "0"
                                                    "high"
                                                    "n-1"
                                                    "i"
                                                    "i!1"
                                                    "Fnnr"
                                                    "LAMBDA (i:below[n]): abs(x!1(i) - y!1(i))"))
                                                  (("2"
                                                    (expand "d1")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (split)
                              (("1" (expand "nonempty?")
                                (("1" (expand "empty?")
                                  (("1" (expand "member")
                                    (("1" (expand "XZS")
                                      (("1"
                                        (inst - "abs(x!1(0)-z!1(0))")
                                        (("1"
                                          (inst + "0")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "above_bounded")
                                (("2" (expand "XZS")
                                  (("2" (expand "upper_bound")
                                    (("2" (inst + "d1(x!1,z!1)")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (expand "d1")
                                          (("2"
                                            (typepred "z!2")
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (lemma
                                                 "sigma_nn_ge_comps"
                                                 ("low"
                                                  "0"
                                                  "high"
                                                  "n-1"
                                                  "i"
                                                  "i!1"
                                                  "Fnnr"
                                                  "LAMBDA (i:below[n]): abs(x!1(i) - z!1(i))"))
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl "T" bounded_reals reals)
    (d1 const-decl "metric" euclidean nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (metric? const-decl "bool" metric_def nil)
    (sigma_nnreal application-judgement "nnreal" euclidean nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_nn_ge_comps formula-decl nil sigma reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (x!2 skolem-const-decl "Index[n]" euclidean nil)
    (y!1 skolem-const-decl "(fullset[Vector[n]])" euclidean nil)
    (x!1 skolem-const-decl "(fullset[Vector[n]])" euclidean nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fullset const-decl "set" sets nil)
    (Vector type-eq-decl nil vectors vectors)
    (Index type-eq-decl nil vectors vectors)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (n formal-const-decl "posnat" euclidean nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sup_set type-eq-decl nil bounded_reals reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (sup_def formula-decl nil bounded_reals reals)
    (dinf const-decl "metric" euclidean nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (metric_zero? const-decl "bool" metric_space_def nil)
    (trich_lt formula-decl nil real_props nil)
    (metric_symmetric? const-decl "bool" metric_space_def nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals reals)
    (pred type-eq-decl nil defined_types nil)
    (YZS skolem-const-decl "[nnreal -> boolean]" euclidean nil)
    (XZS skolem-const-decl "[nnreal -> boolean]" euclidean nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "(fullset[Vector[n]])" euclidean nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (triangle formula-decl nil real_props nil)
    (i!1 skolem-const-decl "below[n]" euclidean nil)
    (z!1 skolem-const-decl "(fullset[Vector[n]])" euclidean nil)
    (y!1 skolem-const-decl "(fullset[Vector[n]])" euclidean nil)
    (XYS skolem-const-decl "[nnreal -> boolean]" euclidean nil)
    (metric_triangle? const-decl "bool" metric_space_def nil)
    (metric_space? const-decl "bool" metric_space_def nil))
   shostak))
 (Qn_TCC1 0
  (Qn_TCC1-1 nil 3391058802 ("" (subtype-tcc) nil nil)
   ((n formal-const-decl "posnat" euclidean nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero const-decl "Vector" vectors vectors))
   nil (Qn subtype "vectors[euclidean.n].zero" "Qn")))
 (Qn_countable 0
  (Qn_countable-1 nil 3391066001
   ("" (case "forall (n:posnat): is_countable(fullset[[below(n)->rat]])")
    (("1" (inst - "n") nil nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (assert) nil nil) ("2" (assert) nil nil)
         ("3" (skosimp*)
          (("3" (case-replace "j!1=0")
            (("1" (assert)
              (("1" (hide -2 -3)
                (("1" (lemma "nat_rational")
                  (("1" (expand "is_countably_infinite_type")
                    (("1" (expand "fullset")
                      (("1" (expand "is_countable")
                        (("1" (skosimp)
                          (("1" (typepred "f!1")
                            (("1"
                              (inst +
                               "lambda (i:[below(1 + j!1) -> rat]): f!1(i(0))")
                              (("1" (expand "bijective?")
                                (("1" (flatten)
                                  (("1" (expand "restrict")
                                    (("1" (expand "injective?")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (apply-extensionality 1 :hide? t)
                                          (("1"
                                            (typepred "x!1")
                                            (("1"
                                              (replace -5)
                                              (("1"
                                                (inst - "x1!1(0)" "x2!1(0)")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (case "1<=j!1")
                (("1" (hide -3 1)
                  (("1" (case "is_countable(fullset[rat])")
                    (("1"
                      (lemma "is_countable_cross[rat,[[below(j!1) -> rat]]]"
                       ("X" "fullset[rat]" "Y"
                        "fullset[[below(j!1) -> rat]]"))
                      (("1" (assert)
                        (("1" (hide -2 -4)
                          (("1" (expand "fullset")
                            (("1" (expand "cross_product")
                              (("1" (expand "is_countable")
                                (("1" (skosimp*)
                                  (("1" (typepred "f!1")
                                    (("1"
                                      (inst
                                       +
                                       "lambda (v:[below(1 + j!1) -> rat]): f!1(v(j!1),lambda (i:[below(j!1)]): v(i))")
                                      (("1"
                                        (expand "restrict")
                                        (("1"
                                          (expand "injective?")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst
                                               -
                                               "(x1!1(j!1), LAMBDA (i: [below(j!1)]): x1!1(i))"
                                               "(x2!1(j!1), LAMBDA (i: [below(j!1)]): x2!1(i))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (decompose-equality)
                                                    (("1"
                                                      (typepred "x!1")
                                                      (("1"
                                                        (case-replace
                                                         "x!1=j!1")
                                                        (("1"
                                                          (rewrite
                                                           "extensionality_postulate"
                                                           -4
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (inst -4 "x!1")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (lemma "nat_rational")
                        (("2" (expand "is_countably_infinite_type")
                          (("2" (expand "fullset")
                            (("2" (expand "is_countable")
                              (("2" (skosimp)
                                (("2" (typepred "f!1")
                                  (("2" (expand "bijective?")
                                    (("2" (flatten)
                                      (("2" (inst + "f!1") nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_countable_cross formula-decl nil countable_cross nil)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (f!1 skolem-const-decl "(injective?[{z | TRUE}, nat])" euclidean nil)
    (extensionality_postulate formula-decl nil functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (<= const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nat_rational formula-decl nil countable_types sets_aux)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (restrict const-decl "R" restrict nil)
    (injective? const-decl "bool" functions nil)
    (TRUE const-decl "bool" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (j!1 skolem-const-decl "nat" euclidean nil)
    (f!1 skolem-const-decl "(bijective?[rational, nat])" euclidean nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (bijective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (is_countably_infinite_type const-decl "bool" countability sets_aux)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (n formal-const-decl "posnat" euclidean nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (set type-eq-decl nil sets nil)
    (is_countable const-decl "bool" countability sets_aux)
    (fullset const-decl "set" sets nil))
   shostak))
 (balls_TCC1 0
  (balls_TCC1-1 nil 3391058802 ("" (subtype-tcc) nil nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (zero const-decl "Vector" vectors vectors)
    (Vector type-eq-decl nil vectors vectors)
    (Index type-eq-decl nil vectors vectors)
    (n formal-const-decl "posnat" euclidean nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (balls subtype
    "metric_space_def[Vector[n], euclidean.d2].ball(vectors[euclidean.n].zero, 1)"
    "balls")))
 (rational_balls_TCC1 0
  (rational_balls_TCC1-1 nil 3391058802 ("" (subtype-tcc) nil nil)
   ((posrat nonempty-type-eq-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (Vector type-eq-decl nil vectors vectors)
    (Qn nonempty-type-eq-decl nil euclidean nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (Index type-eq-decl nil vectors vectors) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (zero const-decl "Vector" vectors vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" euclidean nil))
   nil
   (rational_balls subtype
    "metric_space_def[Vector[n], euclidean.d2].ball(vectors[euclidean.n].zero, 1)"
    "rational_balls")))
 (ball_basis 0
  (ball_basis-1 nil 3391058849
   ("" (expand "fullset")
    (("" (expand "extend")
      (("" (expand "base?")
        (("" (split)
          (("1" (expand "subset?")
            (("1" (expand "member")
              (("1" (skosimp*)
                (("1" (prop)
                  (("1" (skosimp)
                    (("1" (expand "metric_induced_topology")
                      (("1"
                        (lemma "metric_open_ball[Vector,d2]"
                         ("x" "x!2" "r" "r!1"))
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (typepred "A!1")
              (("2" (expand "metric_induced_topology")
                (("2" (inst + "{X:balls|subset?(X,A!1)}")
                  (("2" (split)
                    (("1" (expand "extend")
                      (("1" (expand "subset?")
                        (("1" (expand "member")
                          (("1" (skosimp*) (("1" (prop) nil nil)) nil)) nil))
                        nil))
                      nil)
                     ("2" (apply-extensionality 1 :hide? t)
                      (("2" (expand "extend")
                        (("2" (expand "subset?")
                          (("2" (expand "member")
                            (("2" (expand "Union")
                              (("2" (case-replace "A!1(x!1)")
                                (("1" (expand "metric_open?")
                                  (("1" (inst - "x!1")
                                    (("1" (assert)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst + "ball(x!1, r!1)")
                                          (("1"
                                            (lemma
                                             "ball_centre"
                                             ("x" "x!1" "r" "r!1"))
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (prop)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (expand "subset?")
                                                (("1"
                                                  (inst - "x!3")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst + "x!1" "r!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (skosimp*)
                                    (("2" (typepred "a!1")
                                      (("2"
                                        (replace -2 -1)
                                        (("2"
                                          (hide -2)
                                          (("2"
                                            (inst - "x!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((extend const-decl "R" extend nil) (member const-decl "bool" sets nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def nil)
    (ball_is_metric_open application-judgement "metric_open" euclidean nil)
    (metric_open_ball formula-decl nil metric_space nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" euclidean nil)
    (Index type-eq-decl nil vectors vectors)
    (Vector type-eq-decl nil vectors vectors)
    (nnreal type-eq-decl nil real_types nil)
    (metric? const-decl "bool" metric_def nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (d2 const-decl "metric" euclidean nil)
    (subset? const-decl "bool" sets nil) (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (balls nonempty-type-eq-decl nil euclidean nil)
    (FALSE const-decl "bool" booleans nil) (Union const-decl "set" sets nil)
    (Union_surjective name-judgement "(surjective?[setofsets[T], set[T]])"
     sets_lemmas nil)
    (metric_open? const-decl "bool" metric_space_def nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (x!1 skolem-const-decl "[Index[n] -> real]" euclidean nil)
    (r!1 skolem-const-decl "posreal" euclidean nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (A!1 skolem-const-decl "(metric_induced_topology[Vector[n], d2])"
     euclidean nil)
    (ball_centre formula-decl nil metric_space nil)
    (base? const-decl "bool" basis topology)
    (fullset const-decl "set" sets nil))
   shostak))
 (Qn_dense 0
  (Qn_dense-1 nil 3396336618
   ("" (expand "fullset")
    (("" (expand "dense_in?")
      (("" (expand "subset?")
        (("" (expand "member")
          (("" (skosimp*)
            (("" (expand "metric_closure")
              (("" (expand "metric_adherent?")
                (("" (skosimp)
                  (("" (expand "intersection")
                    (("" (expand "nonempty?")
                      (("" (expand "empty?")
                        (("" (expand "member")
                          (("" (expand "ball")
                            ((""
                              (case "FORALL i:
        EXISTS (q: rat): sq(x!1(i) - q) < sq(r!1) / n")
                              (("1"
                                (name "Q"
                                      "lambda i: choose[rat]({q:rat | sq(x!1(i) - q) < sq(r!1) / n})")
                                (("1" (inst -3 "Q")
                                  (("1" (split)
                                    (("1" (inst + "Q") nil nil)
                                     ("2" (expand "d2")
                                      (("2"
                                        (rewrite "sq_lt" 1 :dir rl)
                                        (("2"
                                          (rewrite "sq_sqrt")
                                          (("2"
                                            (lemma
                                             "sigma_lt"
                                             ("low"
                                              "0"
                                              "high"
                                              "n-1"
                                              "F"
                                              "LAMBDA i: sq(x!1(i) - Q(i))"
                                              "G"
                                              "lambda i: sq(r!1)/n"))
                                            (("2"
                                              (rewrite "sigma_const" -1)
                                              (("2"
                                                (rewrite "div_cancel1" -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (replace -1 1 rl)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (skosimp)
                                  (("2" (expand "nonempty?")
                                    (("2" (expand "empty?")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (inst -2 "i!1")
                                          (("2"
                                            (skosimp)
                                            (("2" (inst -1 "q!1") nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skosimp)
                                (("2"
                                  (lemma "density"
                                   ("x" "x!1(i!1)-r!1/sqrt(n)" "y"
                                    "x!1(i!1)+r!1/sqrt(n)"))
                                  (("2"
                                    (lemma "posreal_div_posreal_is_posreal"
                                     ("px" "r!1" "py" "sqrt(n)"))
                                    (("2" (assert)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst + "r!2")
                                          (("2"
                                            (rewrite "sqrt_lt" 1 :dir rl)
                                            (("2"
                                              (rewrite "sqrt_div" 1)
                                              (("2"
                                                (name-replace
                                                 "R"
                                                 "r!1 / sqrt(n)")
                                                (("2"
                                                  (rewrite "sqrt_sq_abs")
                                                  (("2"
                                                    (hide-all-but
                                                     (-1 -2 -3 1))
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dense_in? const-decl "bool" metric_space_def nil)
    (member const-decl "bool" sets nil)
    (metric_closure const-decl "set[T]" metric_space_def nil)
    (nonempty? const-decl "bool" sets nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors vectors)
    (Index type-eq-decl nil vectors vectors)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (below type-eq-decl nil nat_types nil)
    (n formal-const-decl "posnat" euclidean nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (d2 const-decl "metric" euclidean nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (sigma_const formula-decl nil sigma reals)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_cancel1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (sigma_lt formula-decl nil sigma reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma_nnreal application-judgement "nnreal" euclidean nil)
    (sq_lt formula-decl nil sq reals) (nnreal type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals)
    (Qn nonempty-type-eq-decl nil euclidean nil)
    (choose const-decl "(p)" sets nil) (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (density formula-decl nil rational_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqrt_div formula-decl nil sqrt reals)
    (sqrt_sq formula-decl nil sqrt reals)
    (sqrt_sq_abs formula-decl nil sqrt reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (sqrt_lt formula-decl nil sqrt reals)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (metric_adherent? const-decl "bool" metric_space_def nil)
    (subset? const-decl "bool" sets nil) (fullset const-decl "set" sets nil))
   shostak))
 (Qn_basis 0
  (Qn_basis-2 "" 3790338225
   ("" (expand "fullset")
    (("" (expand "extend")
      (("" (expand "base?")
        (("" (split)
          (("1" (expand "metric_induced_topology")
            (("1" (expand "subset?")
              (("1" (expand "member")
                (("1" (skosimp*)
                  (("1" (prop)
                    (("1" (skosimp)
                      (("1" (expand "metric_open?")
                        (("1" (skosimp)
                          (("1" (case-replace "x!1(x!2)")
                            (("1" (assert)
                              (("1" (replace -2)
                                (("1" (hide -2)
                                  (("1" (expand "ball")
                                    (("1" (typepred "d2(q!1, x!2)")
                                      (("1"
                                        (inst + "pq!1-d2(q!1, x!2)")
                                        (("1"
                                          (expand "subset?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (typepred "d2")
                                                (("1"
                                                  (expand "metric?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "metric_triangle?")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "q!1"
                                                         "x!2"
                                                         "x!3")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2" (skosimp)
                                (("2" (expand "subset?")
                                  (("2" (inst - "x!2")
                                    (("2"
                                      (lemma
                                       "ball_centre"
                                       ("x" "x!2" "r" "r!1"))
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst + "{X:rational_balls|subset?(X,A!1)}")
              (("2" (split)
                (("1" (expand "extend")
                  (("1" (expand "subset?")
                    (("1" (expand "member")
                      (("1" (skosimp*) (("1" (prop) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("2" (expand "extend")
                  (("2" (apply-extensionality :hide? t)
                    (("2" (case-replace "A!1(x!1)")
                      (("1" (expand "Union")
                        (("1" (typepred "A!1")
                          (("1" (expand "metric_induced_topology")
                            (("1" (expand "metric_open?")
                              (("1" (inst - "x!1")
                                (("1" (assert)
                                  (("1" (skosimp)
                                    (("1"
                                      (lemma "density" ("x" "0" "y" "r!1"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (case "exists q: d2(q,x!1)<r!2/4")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (case
                                                 "subset?(ball[Vector,d2](q!1,r!2/2),ball[Vector,d2](x!1, r!1)) & ball[Vector,d2](q!1,r!2/2)(x!1)")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst
                                                     +
                                                     "ball[Vector, d2](q!1, r!2 / 2)")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (expand "subset?")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (inst - "x!2")
                                                              (("1"
                                                                (inst - "x!2")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst + "q!1" "r!2/2")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (expand "subset?")
                                                      (("1"
                                                        (expand "member")
                                                        (("1"
                                                          (expand "ball")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (typepred "d2")
                                                              (("1"
                                                                (expand
                                                                 "metric?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "metric_triangle?")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "x!1"
                                                                       "q!1"
                                                                       "x!2")
                                                                      (("1"
                                                                        (expand
                                                                         "metric_symmetric?")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "x!1"
                                                                           "q!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "ball")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (flatten)
                                                  (("3" (assert) nil nil))
                                                  nil)
                                                 ("4" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "d2")
                                                (("2"
                                                  (case
                                                   "exists q: forall i: sq(q(i)-x!1(i)) < sq(r!2/4)/n")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (inst + "q!1")
                                                      (("1"
                                                        (lemma
                                                         "sigma_lt"
                                                         ("low"
                                                          "0"
                                                          "high"
                                                          "n-1"
                                                          "F"
                                                          "LAMBDA i: sq(q!1(i) - x!1(i))"
                                                          "G"
                                                          "LAMBDA i: sq(r!2 / 4) / n"))
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (lemma
                                                             "sigma_const"
                                                             ("low"
                                                              "0"
                                                              "high"
                                                              "n-1"
                                                              "x"
                                                              "sq(r!2 / 4) / n"))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 "div_cancel1"
                                                                 -1)
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "sqrt_lt"
                                                                     ("nny"
                                                                      "sigma(0, n - 1,
                 LAMBDA (i_1: below[n]): sq(q!1(i_1) - x!1(i_1)))"
                                                                      "nnz"
                                                                      "sq(r!2 / 4)"))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (skosimp)
                                                            (("3"
                                                              (inst - "n1!1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (hide -3 -4 -2)
                                                      (("2"
                                                        (lemma
                                                         "posreal_div_posreal_is_posreal"
                                                         ("px"
                                                          "r!2"
                                                          "py"
                                                          "4*n"))
                                                        (("1"
                                                          (case
                                                           "FORALL i: nonempty?({q: rat | abs(q - x!1(i)) < r!2 / (4 * n)})")
                                                          (("1"
                                                            (name
                                                             "Q"
                                                             "lambda i: choose[rat]({q: rat | abs(q - x!1(i)) < r!2 / (4 * n)})")
                                                            (("1"
                                                              (case
                                                               "FORALL i:abs(Q(i)-x!1(i))<r!2/(4*n)")
                                                              (("1"
                                                                (inst + "Q")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "i!1")
                                                                    (("1"
                                                                      (lemma
                                                                       "sq_lt"
                                                                       ("nna"
                                                                        "abs(Q(i!1) - x!1(i!1))"
                                                                        "nnb"
                                                                        "r!2 / (4 * n)"))
                                                                      (("1"
                                                                        (rewrite
                                                                         "sq_abs")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (name-replace
                                                                             "LHS"
                                                                             "sq(Q(i!1) - x!1(i!1))")
                                                                            (("1"
                                                                              (rewrite
                                                                               "sq_div"
                                                                               1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "sq_div"
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "sq"
                                                                                   -1
                                                                                   2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "sq"
                                                                                     1
                                                                                     2)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "div_div2"
                                                                                       1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "both_sides_div_pos_le2")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "16*n*n"
                                                                                           "16*n"
                                                                                           "sq(r!2)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "both_sides_times_pos_le1"
                                                                                               ("pz"
                                                                                                "16*n"
                                                                                                "x"
                                                                                                "1"
                                                                                                "y"
                                                                                                "n"))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2 -1)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (expand
                                                                     "Q")
                                                                    (("2"
                                                                      (lemma
                                                                       "choose_member[rat]"
                                                                       ("a"
                                                                        "{q: rat | abs(q - x!1(i!1)) < r!2 / (4 * n)}"))
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "i!1")
                                                                        (("2"
                                                                          (expand
                                                                           "nonempty?")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (expand
                                                                 "nonempty?")
                                                                (("2"
                                                                  (expand
                                                                   "empty?")
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (lemma
                                                                       "density"
                                                                       ("x"
                                                                        "x!1(i!1)-r!2 / (4 * n)"
                                                                        "y"
                                                                        "x!1(i!1)+r!2 / (4 * n)"))
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "r!3")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "Union")
                          (("2" (skosimp*)
                            (("2" (typepred "a!1")
                              (("2" (replace -2 -1)
                                (("2" (hide -2)
                                  (("2" (expand "subset?")
                                    (("2" (inst - "x!1")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (Qn_basis-1 nil 3391059839
   ("" (expand "fullset")
    (("" (expand "extend")
      (("" (expand "base?")
        (("" (split)
          (("1" (expand "metric_induced_topology")
            (("1" (expand "subset?")
              (("1" (expand "member")
                (("1" (skosimp*)
                  (("1" (prop)
                    (("1" (skosimp)
                      (("1" (expand "metric_open?")
                        (("1" (skosimp)
                          (("1" (case-replace "x!1(x!2)")
                            (("1" (assert)
                              (("1" (replace -2)
                                (("1" (hide -2)
                                  (("1" (expand "ball")
                                    (("1" (typepred "d2(q!1, x!2)")
                                      (("1"
                                        (inst + "pq!1-d2(q!1, x!2)")
                                        (("1"
                                          (expand "subset?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (typepred "d2")
                                                (("1"
                                                  (expand "metric?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "metric_triangle?")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "q!1"
                                                         "x!2"
                                                         "x!3")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2" (skosimp)
                                (("2" (expand "subset?")
                                  (("2" (inst - "x!2")
                                    (("2"
                                      (lemma
                                       "ball_centre"
                                       ("x" "x!2" "r" "r!1"))
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst + "{X:rational_balls|subset?(X,A!1)}")
              (("2" (split)
                (("1" (expand "extend")
                  (("1" (expand "subset?")
                    (("1" (expand "member")
                      (("1" (skosimp*) (("1" (prop) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("2" (expand "extend")
                  (("2" (apply-extensionality :hide? t)
                    (("2" (case-replace "A!1(x!1)")
                      (("1" (expand "Union")
                        (("1" (typepred "A!1")
                          (("1" (expand "metric_induced_topology")
                            (("1" (expand "metric_open?")
                              (("1" (inst - "x!1")
                                (("1" (assert)
                                  (("1" (skosimp)
                                    (("1"
                                      (lemma "density" ("x" "0" "y" "r!1"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (case "exists q: d2(q,x!1)<r!2/4")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (case
                                                 "subset?(ball[Vector,d2](q!1,r!2/2),ball[Vector,d2](x!1, r!1)) & ball[Vector,d2](q!1,r!2/2)(x!1)")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst
                                                     +
                                                     "ball[Vector, d2](q!1, r!2 / 2)")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (expand "subset?")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (inst - "x!2")
                                                              (("1"
                                                                (inst - "x!2")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst + "q!1" "r!2/2")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (expand "subset?")
                                                      (("1"
                                                        (expand "member")
                                                        (("1"
                                                          (expand "ball")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (typepred "d2")
                                                              (("1"
                                                                (expand
                                                                 "metric?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "metric_triangle?")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "x!1"
                                                                       "q!1"
                                                                       "x!2")
                                                                      (("1"
                                                                        (expand
                                                                         "metric_symmetric?")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "x!1"
                                                                           "q!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "ball")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (flatten)
                                                  (("3" (assert) nil nil))
                                                  nil)
                                                 ("4" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "d2")
                                                (("2"
                                                  (case
                                                   "exists q: forall i: sq(q(i)-x!1(i)) < sq(r!2/4)/n")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (inst + "q!1")
                                                      (("1"
                                                        (lemma
                                                         "sigma_lt"
                                                         ("low"
                                                          "0"
                                                          "high"
                                                          "n-1"
                                                          "F"
                                                          "LAMBDA i: sq(q!1(i) - x!1(i))"
                                                          "G"
                                                          "LAMBDA i: sq(r!2 / 4) / n"))
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (lemma
                                                             "sigma_const"
                                                             ("low"
                                                              "0"
                                                              "high"
                                                              "n-1"
                                                              "x"
                                                              "sq(r!2 / 4) / n"))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 "div_cancel1"
                                                                 -1)
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "sqrt_lt"
                                                                     ("nny"
                                                                      "sigma(0, n - 1,
                 LAMBDA (i_1: below[n]): sq(q!1(i_1) - x!1(i_1)))"
                                                                      "nnz"
                                                                      "sq(r!2 / 4)"))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "sigma_Fnnr[below(n)]")
                                                                      (("2"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (skosimp)
                                                            (("3"
                                                              (inst - "n1!1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (hide -3 -4 -2)
                                                      (("2"
                                                        (lemma
                                                         "posreal_div_posreal_is_posreal"
                                                         ("px"
                                                          "r!2"
                                                          "py"
                                                          "4*n"))
                                                        (("1"
                                                          (case
                                                           "FORALL i: nonempty?({q: rat | abs(q - x!1(i)) < r!2 / (4 * n)})")
                                                          (("1"
                                                            (name
                                                             "Q"
                                                             "lambda i: choose[rat]({q: rat | abs(q - x!1(i)) < r!2 / (4 * n)})")
                                                            (("1"
                                                              (case
                                                               "FORALL i:abs(Q(i)-x!1(i))<r!2/(4*n)")
                                                              (("1"
                                                                (inst + "Q")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "i!1")
                                                                    (("1"
                                                                      (lemma
                                                                       "sq_lt"
                                                                       ("nna"
                                                                        "abs(Q(i!1) - x!1(i!1))"
                                                                        "nnb"
                                                                        "r!2 / (4 * n)"))
                                                                      (("1"
                                                                        (rewrite
                                                                         "sq_abs")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (name-replace
                                                                             "LHS"
                                                                             "sq(Q(i!1) - x!1(i!1))")
                                                                            (("1"
                                                                              (rewrite
                                                                               "sq_div"
                                                                               1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "sq_div"
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "sq"
                                                                                   -1
                                                                                   2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "sq"
                                                                                     1
                                                                                     2)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "div_div2"
                                                                                       1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "both_sides_div_pos_le2")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "16*n*n"
                                                                                           "16*n"
                                                                                           "sq(r!2)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "both_sides_times_pos_le1"
                                                                                               ("pz"
                                                                                                "16*n"
                                                                                                "x"
                                                                                                "1"
                                                                                                "y"
                                                                                                "n"))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2 -1)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (expand
                                                                     "Q")
                                                                    (("2"
                                                                      (lemma
                                                                       "choose_member[rat]"
                                                                       ("a"
                                                                        "{q: rat | abs(q - x!1(i!1)) < r!2 / (4 * n)}"))
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "i!1")
                                                                        (("2"
                                                                          (expand
                                                                           "nonempty?")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (expand
                                                                 "nonempty?")
                                                                (("2"
                                                                  (expand
                                                                   "empty?")
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (lemma
                                                                       "density"
                                                                       ("x"
                                                                        "x!1(i!1)-r!2 / (4 * n)"
                                                                        "y"
                                                                        "x!1(i!1)+r!2 / (4 * n)"))
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "r!3")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "Union")
                          (("2" (skosimp*)
                            (("2" (typepred "a!1")
                              (("2" (replace -2 -1)
                                (("2" (hide -2)
                                  (("2" (expand "subset?")
                                    (("2" (inst - "x!1")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((extend const-decl "R" extend nil) (subset? const-decl "bool" sets nil)
    (ball_centre formula-decl nil metric_space nil)
    (ball_is_metric_open application-judgement "metric_open" euclidean nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (metric? const-decl "bool" metric_def nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (d2 const-decl "metric" euclidean nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (Qn nonempty-type-eq-decl nil euclidean nil)
    (metric_triangle? const-decl "bool" metric_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (x!2 skolem-const-decl "Vector[n]" euclidean nil)
    (q!1 skolem-const-decl "Qn" euclidean nil)
    (pq!1 skolem-const-decl "posrat" euclidean nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (setof type-eq-decl nil defined_types nil)
    (Vector type-eq-decl nil vectors vectors)
    (Index type-eq-decl nil vectors vectors)
    (n formal-const-decl "posnat" euclidean nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (metric_open? const-decl "bool" metric_space_def nil)
    (member const-decl "bool" sets nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def nil)
    (setofsets type-eq-decl nil sets nil) (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_balls nonempty-type-eq-decl nil euclidean nil)
    (FALSE const-decl "bool" booleans nil)
    (density formula-decl nil rational_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (below type-eq-decl nil nat_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma_nnreal application-judgement "nnreal" euclidean nil)
    (sqrt_sq formula-decl nil sqrt reals) (sigma def-decl "real" sigma reals)
    (sqrt_lt formula-decl nil sqrt reals)
    (div_cancel1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (sigma_const formula-decl nil sigma reals)
    (subrange type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_lt formula-decl nil sigma reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonempty? const-decl "bool" sets nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (sq_lt formula-decl nil sq reals) (sq_div formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (div_div2 formula-decl nil real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (both_sides_div_pos_le2 formula-decl nil real_props nil)
    (sq_abs formula-decl nil sq reals)
    (choose_member formula-decl nil sets_lemmas nil)
    (Q skolem-const-decl
     "[i: below[n] -> ({q: rat | abs(q - x!1(i)) < r!2 / (4 * n)})]" euclidean
     nil)
    (choose const-decl "(p)" sets nil) (empty? const-decl "bool" sets nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (metric_symmetric? const-decl "bool" metric_def nil)
    (A!1 skolem-const-decl "(metric_induced_topology[Vector[n], d2])"
     euclidean nil)
    (q!1 skolem-const-decl "Qn" euclidean nil)
    (r!2 skolem-const-decl "rat" euclidean nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (Union_surjective name-judgement "(surjective?[setofsets[T], set[T]])"
     sets_lemmas nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Union const-decl "set" sets nil) (base? const-decl "bool" basis topology)
    (fullset const-decl "set" sets nil))
   shostak))
 (countable_rational_balls 0
  (countable_rational_balls-1 nil 3391072197
   ("" (lemma "Qn_countable")
    (("" (case "is_countable(fullset[posrat])")
      (("1"
        (lemma "is_countable_cross[Qn,posrat]"
         ("X" "fullset[Qn]" "Y" "fullset[posrat]"))
        (("1" (assert)
          (("1"
            (lemma "countable_image[[Qn,posrat],rational_balls]"
             ("S" "cross_product(fullset[Qn], fullset[posrat])" "f"
              "lambda (q:Qn,pq:posrat): ball[Vector,d2](q,pq)"))
            (("1" (replace -2)
              (("1" (expand "fullset" -1)
                (("1" (expand "cross_product" -1)
                  (("1" (expand "image" -1)
                    (("1" (expand "image" -1)
                      (("1" (expand "fullset" 1)
                        (("1"
                          (case-replace "{y: rational_balls |
                      EXISTS (x: ({z: [Qn, posrat] | TRUE})):
                        y = ball[Vector, d2](x`1, x`2)}={x: rational_balls | TRUE}")
                          (("1" (apply-extensionality :hide? t)
                            (("1" (hide-all-but 1)
                              (("1" (typepred "x!1")
                                (("1" (skosimp)
                                  (("1" (inst + "(q!1,pq!1)") nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (skosimp) (("2" (inst + "q!1" "pq!1") nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1)
        (("2"
          (lemma "is_countable_cross[posnat,posnat]"
           ("X" "fullset[posnat]" "Y" "fullset[posnat]"))
          (("2" (case-replace "is_countable(fullset[posnat])")
            (("1" (hide -1)
              (("1"
                (lemma "countable_image[[posnat,posnat],posrat]"
                 ("S" "cross_product(fullset[posnat], fullset[posnat])" "f"
                  "lambda (pn,pr:posnat): pn/pr"))
                (("1" (assert)
                  (("1" (expand "fullset")
                    (("1" (expand "cross_product")
                      (("1" (expand "image")
                        (("1" (expand "image")
                          (("1" (hide -2)
                            (("1"
                              (case-replace "{y: posrat |
                      EXISTS (x: ({z: [posnat, posnat] | TRUE})):
                        y = x`1 / x`2}={x: posrat | TRUE}")
                              (("1" (apply-extensionality :hide? t)
                                (("1" (hide -1 2)
                                  (("1"
                                    (name "DEN"
                                          "lambda (q:rat): min({p:posnat | integer_pred(q*p)})")
                                    (("1"
                                      (name "NUM" "LAMBDA (q: rat): q*DEN(q)")
                                      (("1"
                                        (case
                                         "forall (q:rat): NUM(q)/DEN(q) = q")
                                        (("1"
                                          (inst + "(NUM(x!1),DEN(x!1))")
                                          (("1"
                                            (inst - "x!1")
                                            (("1"
                                              (replace -1)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (split)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst - "x!1")
                                                  (("1"
                                                    (expand "NUM")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst - "x!1")
                                                (("2"
                                                  (expand "NUM")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst - "x!1")
                                                (("3"
                                                  (expand "NUM")
                                                  (("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (expand "NUM")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (lemma
                                           "rational_pred_ax2"
                                           ("r" "q!1"))
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (expand "nonempty?")
                                              (("2"
                                                (expand "empty?")
                                                (("2"
                                                  (inst - "p!1")
                                                  (("2"
                                                    (expand "member")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (expand "is_countable")
                (("2" (inst + "lambda (pn:posnat): pn-1")
                  (("1" (expand "restrict")
                    (("1" (expand "injective?") (("1" (skosimp) nil nil))
                      nil))
                    nil)
                   ("2" (expand "restrict")
                    (("2" (expand "injective?") (("2" (skosimp) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (> const-decl "bool" reals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (image const-decl "set[R]" function_image nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (image const-decl "set[R]" function_image nil)
    (ball_is_metric_open application-judgement "metric_open" euclidean nil)
    (countable_image formula-decl nil countable_image sets_aux)
    (cross_product const-decl "set[[T1, T2]]" cross_product topology)
    (Vector type-eq-decl nil vectors vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (metric? const-decl "bool" metric_def nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (d2 const-decl "metric" euclidean nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (rational_balls nonempty-type-eq-decl nil euclidean nil)
    (is_countable_cross formula-decl nil countable_cross nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" euclidean nil)
    (Index type-eq-decl nil vectors vectors)
    (rat nonempty-type-eq-decl nil rationals nil)
    (Qn nonempty-type-eq-decl nil euclidean nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (injective? const-decl "bool" functions nil)
    (rational_pred_ax2 formula-decl nil rational_props nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (NUM skolem-const-decl "[rat -> rat]" euclidean nil)
    (x!1 skolem-const-decl "posrat" euclidean nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat
         nil)
    (nonempty? const-decl "bool" sets nil) (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (Qn_countable formula-decl nil euclidean nil))
   shostak))
 (euclidean_topology_is_second_countable 0
  (euclidean_topology_is_second_countable-1 nil 3396338346
   ("" (expand "second_countable?")
    (("" (expand "has_countable_basis?")
      (("" (typepred "metric_induced_topology[Vector[n], d2]")
        (("" (expand "hausdorff_space?")
          (("" (flatten)
            (("" (assert)
              (("" (inst + "fullset[rational_balls]")
                (("" (split)
                  (("1" (lemma "countable_rational_balls")
                    (("1" (hide -2 -3)
                      (("1" (expand "fullset")
                        (("1" (expand "extend")
                          (("1" (expand "is_countable")
                            (("1" (skosimp)
                              (("1" (inst + "f!1")
                                (("1" (typepred "f!1")
                                  (("1" (split)
                                    (("1" (skosimp)
                                      (("1"
                                        (case-replace
                                         "(EXISTS q, pq: x2!1 = ball[Vector[n], d2](q, pq))")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (replace 1 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (expand "injective?")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst - "x1!1" "x2!1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "Qn_basis")
                    (("2"
                      (lemma "base_is_synthetic_base"
                       ("U"
                        "extend[setof[Vector[n]], rational_balls, bool, FALSE](fullset[rational_balls])"
                        "t" "metric_induced_topology[Vector, d2]"))
                      (("2" (assert) nil nil)) nil))
                    nil)
                   ("3" (apply-extensionality :hide? t)
                    (("3" (expand "metric_induced_topology")
                      (("3" (case-replace "metric_open?(x!1)")
                        (("1" (expand "fullset")
                          (("1" (expand "extend")
                            (("1" (expand "synthetic_generated_topology_set")
                              (("1"
                                (inst + "{X:rational_balls| subset?(X,x!1)}")
                                (("1" (split)
                                  (("1" (expand "extend")
                                    (("1" (expand "subset?")
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (skosimp)
                                          (("1" (prop) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (expand "extend")
                                    (("2" (expand "Union")
                                      (("2"
                                        (apply-extensionality 1 :hide? t)
                                        (("2"
                                          (case-replace "x!1(x!2)")
                                          (("1"
                                            (expand "metric_open?")
                                            (("1"
                                              (inst - "x!2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (case
                                                     "exists q, pq: subset?(ball[Vector, d2](q, pq),ball(x!2, r!1)) & ball[Vector, d2](q, pq)(x!2)")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (inst
                                                         +
                                                         "ball[Vector, d2](q!1, pq!1)")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (expand
                                                               "subset?")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "x!3")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "x!3")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             +
                                                             "q!1"
                                                             "pq!1")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (lemma
                                                         "density"
                                                         ("x" "0" "y" "r!1"))
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (lemma
                                                               "posreal_div_posreal_is_posreal"
                                                               ("px"
                                                                "r!2"
                                                                "py"
                                                                "sqrt(n)"))
                                                              (("1"
                                                                (name
                                                                 "R"
                                                                 "r!2 / sqrt(n)")
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (name
                                                                     "VV"
                                                                     "{q | ball[Vector, d2](q,r!2/2)(x!2)}")
                                                                    (("1"
                                                                      (case
                                                                       "nonempty?(VV)")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "choose(VV)"
                                                                         "r!2/2")
                                                                        (("1"
                                                                          (lemma
                                                                           "choose_member"
                                                                           ("a"
                                                                            "VV"))
                                                                          (("1"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (expand
                                                                                 "VV"
                                                                                 -1
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "subset?"
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "CC"
                                                                                           "choose(VV)")
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              -6
                                                                                              -7
                                                                                              -8
                                                                                              1))
                                                                                            (("1"
                                                                                              (expand
                                                                                               "ball")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "metric_triangle"
                                                                                                 ("x"
                                                                                                  "x!2"
                                                                                                  "y"
                                                                                                  "CC"
                                                                                                  "z"
                                                                                                  "x!3"))
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "metric_symmetric"
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "nonempty?")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "nonempty?")
                                                                          (("2"
                                                                            (expand
                                                                             "empty?")
                                                                            (("2"
                                                                              (expand
                                                                               "member")
                                                                              (("2"
                                                                                (expand
                                                                                 "VV")
                                                                                (("2"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "ball")
                                                                                    (("2"
                                                                                      (case
                                                                                       "FORALL i: nonempty?[rat]({q: rat | sq(q - x!2(i)) < sq(r!2 / 2) / n})")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         "lambda i: choose[rat]({q:rat | sq(q-x!2(i)) < sq(r!2/2)/n})")
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "v"
                                                                                           "LAMBDA i: choose[rat]({q: rat | sq(q - x!2(i)) < sq(r!2 / 2) / n})")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "d2")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "sqrt_lt"
                                                                                               ("nny"
                                                                                                "sigma(0, n - 1, LAMBDA i: sq(v(i) - x!2(i)))"
                                                                                                "nnz"
                                                                                                "sq(r!2/2)"))
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "sqrt_sq")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "sigma_lt"
                                                                                                       ("low"
                                                                                                        "0"
                                                                                                        "high"
                                                                                                        "n-1"
                                                                                                        "F"
                                                                                                        "LAMBDA i: sq(v(i) - x!2(i))"
                                                                                                        "G"
                                                                                                        "LAMBDA i: sq(r!2/2)/n"))
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "sigma_const")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (skosimp)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "n1!1")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "nonempty?")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "nonempty?")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "empty?")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "density"
                                                                                               ("x"
                                                                                                "x!2(i!1)-r!2/(2*sqrt(n))"
                                                                                                "y"
                                                                                                "x!2(i!1)+r!2/(2*sqrt(n))"))
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (skosimp)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -3
                                                                                                     "r!3")
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "sq_abs"
                                                                                                       ("a"
                                                                                                        "r!3 - x!2(i!1)"))
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "sqrt_lt"
                                                                                                             ("nny"
                                                                                                              "sq(abs(r!3 - x!2(i!1)))"
                                                                                                              "nnz"
                                                                                                              "sq(r!2 / 2) / n"))
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               1
                                                                                                               rl)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "sqrt_sq")
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "sqrt_div")
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "div_div2")
                                                                                                                      (("2"
                                                                                                                        (case-replace
                                                                                                                         "r!2 / (2 * sqrt(n))=R/2")
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "R")
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "div_div2")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (typepred "a!1")
                                                (("2"
                                                  (replace -2 -1)
                                                  (("2"
                                                    (expand "subset?")
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (inst - "x!2")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace 1 2)
                          (("2" (assert)
                            (("2" (expand "fullset")
                              (("2" (expand "extend")
                                (("2"
                                  (expand "synthetic_generated_topology_set")
                                  (("2" (skosimp)
                                    (("2" (lemma "open_Union" ("Y" "V!1"))
                                      (("2"
                                        (replace -3 -1)
                                        (("2"
                                          (rewrite "metric_open_def")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (expand "every")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (typepred "x!2")
                                                    (("2"
                                                      (hide -3)
                                                      (("2"
                                                        (rewrite
                                                         "metric_open_def"
                                                         +
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand "subset?")
                                                          (("2"
                                                            (expand "member")
                                                            (("2"
                                                              (inst - "x!2")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (prop)
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((has_countable_basis? const-decl "bool" topology_def topology)
    (ball_is_metric_open application-judgement "metric_open" euclidean nil)
    (f!1 skolem-const-decl "(injective?[rational_balls, nat])" euclidean nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (TRUE const-decl "bool" booleans nil)
    (injective? const-decl "bool" functions nil)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_rational_balls formula-decl nil euclidean nil)
    (base_is_synthetic_base formula-decl nil basis topology)
    (topology? const-decl "bool" topology_prelim topology)
    (topology nonempty-type-eq-decl nil topology_prelim topology)
    (Qn_basis formula-decl nil euclidean nil)
    (open_Union formula-decl nil topology topology)
    (metric_open_def formula-decl nil metric_space nil)
    (every const-decl "bool" sets nil)
    (Union_surjective name-judgement "(surjective?[setofsets[T], set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil) (Union const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty? const-decl "bool" sets nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (metric_symmetric formula-decl nil metric_space nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (metric_triangle formula-decl nil metric_space nil)
    (choose const-decl "(p)" sets nil)
    (r!2 skolem-const-decl "rat" euclidean nil)
    (VV skolem-const-decl "[Qn -> bool]" euclidean nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (below type-eq-decl nil nat_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma_nnreal application-judgement "nnreal" euclidean nil)
    (sqrt_lt formula-decl nil sqrt reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals)
    (sigma_lt formula-decl nil sigma reals)
    (subrange type-eq-decl nil integers nil)
    (sigma_const formula-decl nil sigma reals)
    (sqrt_sq formula-decl nil sqrt reals)
    (x!2 skolem-const-decl "[Index[n] -> real]" euclidean nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq_abs formula-decl nil sq reals)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_div2 formula-decl nil real_props nil)
    (R skolem-const-decl "real" euclidean nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (fullset_is_clopen name-judgement
     "clopen[Vector[n], (metric_induced_topology)]" euclidean nil)
    (emptyset_is_clopen name-judgement
     "clopen[Vector[n], (metric_induced_topology)]" euclidean nil)
    (emptyset_is_compact name-judgement
     "compact[Vector[n], (metric_induced_topology)]" euclidean nil)
    (finite_emptyset name-judgement "finite_set[T]" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (emptyset const-decl "set" sets nil)
    (topology_empty? const-decl "bool" topology_prelim topology)
    (topology_full? const-decl "bool" topology_prelim topology)
    (topology_Union? const-decl "bool" topology_prelim topology)
    (intersection const-decl "set" sets nil)
    (topology_intersection? const-decl "bool" topology_prelim topology)
    (disjoint? const-decl "bool" sets nil)
    (is_T2? const-decl "bool" topology_prelim topology)
    (hausdorff? const-decl "bool" topology_prelim topology)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (sqrt_div formula-decl nil sqrt reals)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (empty? const-decl "bool" sets nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (density formula-decl nil rational_props nil)
    (x!1 skolem-const-decl "[[Index[n] -> real] -> boolean]" euclidean nil)
    (pq!1 skolem-const-decl "posrat" euclidean nil)
    (q!1 skolem-const-decl "Qn" euclidean nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (metric_open? const-decl "bool" metric_space_def nil)
    (synthetic_basis_is_topology application-judgement "topology[Vector[n]]"
     euclidean nil)
    (synthetic_generated_topology_set const-decl "setofsets[T]" basis
     topology)
    (synthetic_base type-eq-decl nil basis topology)
    (synthetic_base? const-decl "bool" basis topology)
    (fullset const-decl "set" sets nil) (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (rational_balls nonempty-type-eq-decl nil euclidean nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (Qn nonempty-type-eq-decl nil euclidean nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (set type-eq-decl nil sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" euclidean nil)
    (Index type-eq-decl nil vectors vectors)
    (Vector type-eq-decl nil vectors vectors)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (hausdorff_space? const-decl "bool" topology_prelim topology)
    (nnreal type-eq-decl nil real_types nil)
    (metric? const-decl "bool" metric_def nil)
    (metric nonempty-type-eq-decl nil metric_def nil)
    (d2 const-decl "metric" euclidean nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def nil)
    (second_countable? const-decl "bool" topology_def topology)
    (metric_space_is_hausdorff name-judgement "hausdorff" euclidean nil))
   nil
   (euclidean_topology_is_second_countable subtype
    "metric_space_def[Vector[n], euclidean.d2].metric_induced_topology"
    "second_countable[Vector[n]]")))
 (euclidean_topology_is_complete 0
  (euclidean_topology_is_complete-1 nil 3407039473
   ("" (lemma "real_is_complete")
    (("" (expand "complete_metric_space?")
      (("" (flatten)
        (("" (split)
          (("1" (hide -1 -2)
            (("1" (lemma "euclidean_d2") (("1" (propax) nil nil)) nil)) nil)
           ("2" (hide -1)
            (("2"
              (case "forall (m:posnat): metric_complete?[[below[m]->real],(LAMBDA (x,y:[[below[m]->real]]): sqrt(sigma[below[m]](0,m-1,(LAMBDA (i:below[m]): sq(x(i)-y(i))))))](fullset[[below[m]->real]])")
              (("1" (inst - "n")
                (("1" (hide -2)
                  (("1" (expand "fullset")
                    (("1" (expand "metric_complete?")
                      (("1" (skosimp)
                        (("1" (inst - "u!1")
                          (("1" (assert)
                            (("1" (split -1)
                              (("1" (hide -2)
                                (("1" (expand "metric_convergent?")
                                  (("1" (skosimp)
                                    (("1" (inst + "x!1")
                                      (("1"
                                        (expand "metric_converges_to")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst - "r!1")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst + "n!1")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst - "i!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "ball")
                                                        (("1"
                                                          (expand "d2")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (expand "cauchy?")
                                  (("2" (skosimp)
                                    (("2" (inst - "r!1")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst + "n!1")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (inst - "i!1" "j!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "ball")
                                                  (("2"
                                                    (expand "d2")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (induct "m")
                  (("1" (assert) nil nil) ("2" (assert) nil nil)
                   ("3" (skosimp*)
                    (("3" (case-replace "j!1=0")
                      (("1" (hide -2 -3)
                        (("1" (expand "fullset")
                          (("1" (expand "metric_complete?")
                            (("1" (skosimp)
                              (("1" (inst - "lambda (n:nat): u!1(n)(0)")
                                (("1" (split -3)
                                  (("1" (expand "metric_convergent?")
                                    (("1" (skosimp)
                                      (("1"
                                        (inst
                                         +
                                         "lambda (n:below[1 + j!1]): x!1")
                                        (("1"
                                          (expand "metric_converges_to")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst - "r!1")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst + "n!1")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (inst - "i!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand "ball")
                                                          (("1"
                                                            (expand "sigma")
                                                            (("1"
                                                              (expand "sigma")
                                                              (("1"
                                                                (replace -2)
                                                                (("1"
                                                                  (rewrite
                                                                   "sqrt_sq_abs")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2" (expand "cauchy?")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst - "r!1")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (inst + "n!1")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst - "i!1" "j!2")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "ball")
                                                      (("2"
                                                        (replace -3)
                                                        (("2"
                                                          (expand "sigma")
                                                          (("2"
                                                            (expand "sigma")
                                                            (("2"
                                                              (rewrite
                                                               "sqrt_sq_abs")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (case "j!1>=1")
                          (("1" (hide -3 1)
                            (("1"
                              (lemma
                               "complete_d2[real,[below[j!1] -> real],(LAMBDA (x,y:real): abs(x-y)),(LAMBDA (x, y: [[below[j!1] -> real]]):
                                     sqrt(sigma[below[j!1]]
                                              (0, j!1 - 1,
                                               LAMBDA (i: below[j!1]): sq(x(i) - y(i)))))]")
                              (("1" (replace -4)
                                (("1" (replace -3)
                                  (("1" (hide-all-but (-1 1 -2))
                                    (("1" (expand "fullset")
                                      (("1"
                                        (expand "metric_complete?")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst
                                             -
                                             "lambda (n:nat): (u!1(n)(j!1),lambda (i:below[j!1]): u!1(n)(i))")
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (expand "metric_convergent?")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst
                                                     +
                                                     "lambda (n:below[1 + j!1]): if n = j!1 then x!1`1 else x!1`2(n) endif")
                                                    (("1"
                                                      (expand
                                                       "metric_converges_to")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (inst - "r!1")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (inst + "n!1")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "i!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "ball")
                                                                      (("1"
                                                                        (expand
                                                                         "sigma"
                                                                         1)
                                                                        (("1"
                                                                          (rewrite
                                                                           "sq_abs")
                                                                          (("1"
                                                                            (rewrite
                                                                             "sq_sqrt")
                                                                            (("1"
                                                                              (case
                                                                               "forall (n:nat): n <= j!1-1 => sigma[below[j!1]]
                                                              (0, n,
                                                               LAMBDA (i_1: below[j!1]): sq(x!1`2(i_1) - u!1(i!1)(i_1))) = sigma[below[1+j!1]](0, n,
                                                                LAMBDA (i: below[1 + j!1]):
                                                                  sq(IF i = j!1 THEN x!1`1 ELSE x!1`2(i) ENDIF -
                                                                      u!1(i!1)(i)))")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "j!1-1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (1
                                                                                  -2))
                                                                                (("2"
                                                                                  (induct
                                                                                   "n")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sigma")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "sigma")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "sigma"
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (skosimp)
                                                                                    (("3"
                                                                                      (skosimp)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (skosimp)
                                                                                    (("4"
                                                                                      (skosimp)
                                                                                      (("4"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("5"
                                                                                    (skosimp)
                                                                                    (("5"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("6"
                                                                                    (skosimp)
                                                                                    (("6"
                                                                                      (skosimp)
                                                                                      (("6"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("7"
                                                                                    (skosimp)
                                                                                    (("7"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp)
                                                                                (("3"
                                                                                  (skosimp)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (skosimp)
                                                                                (("4"
                                                                                  (skosimp)
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (skosimp)
                                                                                (("5"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (skosimp)
                                                                                (("6"
                                                                                  (skosimp)
                                                                                  (("6"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("7"
                                                                                (skosimp)
                                                                                (("7"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp*)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand "cauchy?")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst - "r!1")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst + "n!1")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "i!1"
                                                               "j!2")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "ball")
                                                                  (("2"
                                                                    (rewrite
                                                                     "sq_sqrt")
                                                                    (("2"
                                                                      (expand
                                                                       "sigma"
                                                                       -4)
                                                                      (("2"
                                                                        (case-replace
                                                                         "sigma[below[j!1+1]](0, j!1 - 1,
                                                  LAMBDA (i: below[1 + j!1]):
                                                    sq(u!1(j!2)(i) - u!1(i!1)(i)))=sigma[below[j!1]]
                                                (0, j!1 - 1,
                                                 LAMBDA (i_1: below[j!1]):
                                                   sq(u!1(j!2)(i_1) - u!1(i!1)(i_1)))")
                                                                        (("1"
                                                                          (rewrite
                                                                           "sq_abs"
                                                                           1)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -4
                                                                           2)
                                                                          (("2"
                                                                            (case
                                                                             "forall (n:nat): n <= j!1-1 => sigma[below[j!1 + 1]]
                                                        (0, n,
                                                         LAMBDA (i: below[1 + j!1]): sq(u!1(j!2)(i) - u!1(i!1)(i)))
                                                     =
                                                     sigma[below[j!1]]
                                                         (0, n,
                                                          LAMBDA (i_1: below[j!1]): sq(u!1(j!2)(i_1) - u!1(i!1)(i_1)))")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "j!1-1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (induct
                                                                                 "n")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "sigma")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sigma")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "sigma"
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (skosimp)
                                                                                  (("3"
                                                                                    (skosimp)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (skosimp)
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("5"
                                                                                  (skosimp)
                                                                                  (("5"
                                                                                    (skosimp)
                                                                                    (("5"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("6"
                                                                                  (skosimp)
                                                                                  (("6"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skosimp)
                                                                              (("3"
                                                                                (skosimp)
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (skosimp)
                                                                              (("4"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (skosimp)
                                                                              (("5"
                                                                                (skosimp)
                                                                                (("5"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("6"
                                                                              (skosimp)
                                                                              (("6"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (skosimp)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (hide -2 -3)
                                  (("2" (expand "metric?")
                                    (("2" (split)
                                      (("1"
                                        (expand "metric_zero?")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (split)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma
                                                 "sqrt_eq_0"
                                                 ("nnx"
                                                  "sigma[below(j!1)](0, j!1 - 1, LAMBDA (i: below[j!1]): sq(x!1(i) - y!1(i)))"))
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (lemma
                                                       "sigma_nonneg_eq_0[below(j!1)]"
                                                       ("Fnnr"
                                                        "LAMBDA (i_1: below[j!1]): sq(x!1(i_1) - y!1(i_1))"
                                                        "low"
                                                        "0"
                                                        "high"
                                                        "j!1-1"))
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (lemma
                                                             "sub_eq_zero[j!1]"
                                                             ("u"
                                                              "x!1"
                                                              "v"
                                                              "y!1"))
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1
                                                               rl)
                                                              (("1"
                                                                (hide -1)
                                                                (("1"
                                                                  (expand "-")
                                                                  (("1"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "x!2")
                                                                      (("1"
                                                                        (rewrite
                                                                         "sq_eq_0")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "sigma_Fnnr[below(j!1)]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (replace -1 1 rl)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "extensionality"
                                                     ("f"
                                                      "LAMBDA (i:below[j!1]): sq(x!1(i) - x!1(i))"
                                                      "g"
                                                      "lambda (i:below[j!1]): 0"))
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (rewrite
                                                           "sigma_zero[below[j!1]]")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand "sq")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "metric_symmetric?")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (lemma
                                             "extensionality"
                                             ("f"
                                              "lambda (i:below[j!1]): sq(x!1(i) - y!1(i))"
                                              "g"
                                              "lambda (i:below[j!1]): sq(y!1(i) - x!1(i))"))
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (replace -1)
                                                (("1" (propax) nil nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (rewrite "sq_neg_minus")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "metric_triangle?")
                                        (("3"
                                          (skosimp)
                                          (("3"
                                            (lemma
                                             "norm_add_le[j!1]"
                                             ("u"
                                              "vectors[j!1].-(x!1,y!1)"
                                              "v"
                                              "vectors[j!1].-(y!1,z!1)"))
                                            (("3"
                                              (expand "norm")
                                              (("3"
                                                (expand "-")
                                                (("3"
                                                  (expand "sqv")
                                                  (("3"
                                                    (expand "*")
                                                    (("3"
                                                      (expand "sq")
                                                      (("3"
                                                        (case-replace
                                                         "(LAMBDA (i_1: Index[j!1]):
                                                     y!1(i_1) * y!1(i_1) - y!1(i_1) * z!1(i_1) +
                                                      (z!1(i_1) * z!1(i_1) - y!1(i_1) * z!1(i_1)))=LAMBDA (i: below[j!1]):
                                                    y!1(i) * y!1(i) - y!1(i) * z!1(i) +
                                                     (z!1(i) * z!1(i) - y!1(i) * z!1(i))")
                                                        (("3"
                                                          (hide -1)
                                                          (("3"
                                                            (case-replace
                                                             "(LAMBDA (i_1: Index[j!1]):
                                                    x!1(i_1) * x!1(i_1) - x!1(i_1) * y!1(i_1) +
                                                     (y!1(i_1) * y!1(i_1) - x!1(i_1) * y!1(i_1)))=LAMBDA (i: below[j!1]):
                                                   x!1(i) * x!1(i) - x!1(i) * y!1(i) +
                                                    (y!1(i) * y!1(i) - x!1(i) * y!1(i))")
                                                            (("3"
                                                              (name-replace
                                                               "RHS"
                                                               " sqrt(sigma[below[j!1]]
                                                (0, j!1 - 1,
                                                 LAMBDA (i: below[j!1]):
                                                   x!1(i) * x!1(i) - x!1(i) * y!1(i) +
                                                    (y!1(i) * y!1(i) - x!1(i) * y!1(i))))
                                        +
                                        sqrt(sigma[below[j!1]]
                                                 (0, j!1 - 1,
                                                  LAMBDA (i: below[j!1]):
                                                    y!1(i) * y!1(i) - y!1(i) * z!1(i) +
                                                     (z!1(i) * z!1(i) - y!1(i) * z!1(i))))")
                                                              (("1"
                                                                (expand "+")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-3 1))
                                                                (("2"
                                                                  (lemma
                                                                   "sigma_nonneg[below[j!1]]"
                                                                   ("F"
                                                                    "LAMBDA (i: below[j!1]):
                                                   y!1(i) * y!1(i) + z!1(i) * z!1(i) - 2 * (y!1(i) * z!1(i))"
                                                                    "low"
                                                                    "0"
                                                                    "high"
                                                                    "j!1-1"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (skosimp)
                                                                      (("1"
                                                                        (lemma
                                                                         "sq_pos"
                                                                         ("a"
                                                                          "y!1(i!1)-z!1(i!1)"))
                                                                        (("1"
                                                                          (expand
                                                                           "sq")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide-all-but
                                                                 (-3 1))
                                                                (("3"
                                                                  (lemma
                                                                   "sigma_nonneg[below[j!1]]"
                                                                   ("F"
                                                                    "LAMBDA (i: below[j!1]):
                                                   x!1(i) * x!1(i) + y!1(i) * y!1(i) - 2 * (x!1(i) * y!1(i))"
                                                                    "low"
                                                                    "0"
                                                                    "high"
                                                                    "j!1-1"))
                                                                  (("1"
                                                                    (split -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (lemma
                                                                         "sq_pos"
                                                                         ("a"
                                                                          "x!1(i!1)-y!1(i!1)"))
                                                                        (("2"
                                                                          (expand
                                                                           "sq")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (skosimp)
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (hide 2)
                                (("3" (skosimp*)
                                  (("3" (lemma "sigma_Fnnr[below(j!1)]")
                                    (("1" (inst?) (("1" (assert) nil nil))
                                      nil)
                                     ("2" (skosimp*) (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4" (assert)
                                (("4" (hide-all-but 1) (("4" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide -1 2) (("4" (grind) nil nil)) nil)
                   ("5" (skosimp) (("5" (assert) nil nil)) nil)
                   ("6" (skosimp) (("6" (assert) nil nil)) nil))
                  nil))
                nil)
               ("3" (skosimp) (("3" (skosimp) (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset_is_clopen name-judgement
     "clopen[real, (metric_induced_topology)]" real_topology nil)
    (real_is_complete name-judgement "metric_complete" real_topology nil)
    (fullset_is_clopen name-judgement
     "clopen[Vector[n], (metric_induced_topology)]" euclidean nil)
    (complete_metric_space? const-decl "bool" metric_space_def nil)
    (euclidean_d2 formula-decl nil euclidean nil)
    (fullset const-decl "set" sets nil)
    (metric_complete? const-decl "bool" metric_space_def nil)
    (sq const-decl "nonneg_real" sq reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (set type-eq-decl nil sets nil) (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sigma_nnreal application-judgement "nnreal" vectors vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (Vector type-eq-decl nil vectors vectors)
    (Index type-eq-decl nil vectors vectors)
    (sequence type-eq-decl nil sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (metric_convergent? const-decl "bool" metric_space_def nil)
    (ball_is_metric_open application-judgement "metric_open" euclidean nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (member const-decl "bool" sets nil) (d2 const-decl "metric" euclidean nil)
    (ball const-decl "set[T]" metric_space_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (metric_converges_to const-decl "bool" metric_space_def nil)
    (cauchy? const-decl "bool" metric_space_def nil)
    (n formal-const-decl "posnat" euclidean nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqrt_sq_abs formula-decl nil sqrt reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (complete_d2 formula-decl nil complete_product nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (metric? const-decl "bool" metric_def nil)
    (sq_abs formula-decl nil sq reals)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (j!1 skolem-const-decl "nat" euclidean nil)
    (sigma_zero formula-decl nil sigma reals) (sq_0 formula-decl nil sq reals)
    (sigma_nat application-judgement "nat" vectors vectors)
    (sqrt_0 formula-decl nil sqrt reals)
    (extensionality formula-decl nil functions nil)
    (sigma_Fnnr formula-decl nil sigma reals)
    (sigma_nonneg_eq_0 formula-decl nil sigma reals)
    (- const-decl "real" vectors vectors) (sq_eq_0 formula-decl nil sq reals)
    (comp_zero formula-decl nil vectors vectors)
    (zero const-decl "Vector" vectors vectors)
    (sub_eq_zero formula-decl nil vectors vectors)
    (below type-eq-decl nil naturalnumbers nil)
    (sqrt_eq_0 formula-decl nil sqrt reals)
    (metric_zero? const-decl "bool" metric_def nil)
    (sq_neg_minus formula-decl nil sq reals)
    (metric_symmetric? const-decl "bool" metric_def nil)
    (norm const-decl "nnreal" vectors vectors)
    (sqv const-decl "nnreal" vectors vectors)
    (+ const-decl "real" vectors vectors)
    (sigma_nonneg formula-decl nil sigma reals)
    (sq_pos formula-decl nil sq reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (norm_add_le formula-decl nil vectors vectors)
    (metric_triangle? const-decl "bool" metric_def nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_is_complete judgement-tcc nil real_topology nil))
   nil
   (euclidean_topology_is_complete subtype "sets[Vector[n]].fullset"
    "metric_complete[Vector[n], d2]"))))


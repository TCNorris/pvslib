(a2l__multi_bernstein
 (a2l__bsproduct_eval_TCC1 0
  (a2l__bsproduct_eval_TCC1-1 nil 3685973919 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (a2l__bsproduct_eval subtype
    "a2l__multi_bernstein.bsdegmono(a2l__multi_bernstein.i)"
    "integers.above((number_fields.-)(a2l__multi_bernstein.j, 1))")))
 (a2l__bsproduct_eval__homomorphism 0
  (a2l__bsproduct_eval__homomorphism-1 nil 3685973952
   ("" (skeep :preds? t)
    (("" (hide -3)
      (("" (expand "bsproduct_eval")
        (("" (expand "a2l__bsproduct_eval")
          ((""
            (case "FORALL (i: nat, j: nat): NOT j > dm(i) IMPLIES dm(i) > j - 1"
              "FORALL (i: nat): dm(i) >= 0 OR (EXISTS (j: nat): dm(i) <= j)")
            (("1"
              (invoke
               (rewrite-lemma "product_constrains_theory"
                ("low" "%1" "high" "%2" "F" "%3"))
               (! 1 2 1) (! 1 2 2) (! 1 2 3))
              (("1"
                (invoke
                 (rewrite-lemma "product_constrains_theory"
                  ("low" "%1" "high" "%2" "F" "%3"))
                 (! 1 1 1) (! 1 1 2) (! 1 1 3))
                (("1"
                  (case "FORALL (x: subrange(0, nvars - 1), j: nat):
        NOT j > dm(x) IMPLIES dm(x) > j - 1"
                    "FORALL (x: subrange(0, nvars - 1)):
        dm(x) >= 0 OR (EXISTS (j: nat): dm(x) <= j)")
                  (("1" (invoke (name "first_lambda" "%1") (! 1 2 3))
                    (("1"
                      (invoke (name "first_lambda_original" "%1") (! 1 1 3))
                      (("1" (assert)
                        (("1" (replace -1 1)
                          (("1" (replace -2 1)
                            (("1" (hide -1 -2 -3 -4 -5 -6)
                              (("1"
                                (case "first_lambda_original=first_lambda")
                                (("1" (assert) nil nil)
                                 ("2" (hide 2)
                                  (("2" (expand "first_lambda_original")
                                    (("2" (expand "first_lambda")
                                      (("2"
                                        (apply-extensionality :hide? t)
                                        (("2"
                                          (case
                                           "FORALL (j: nat): NOT j > dm(x!1) IMPLIES dm(x!1) > j - 1")
                                          (("1"
                                            (invoke
                                             (rewrite-lemma
                                              "sigma_constrains_theory"
                                              ("low"
                                               "%1"
                                               "high"
                                               "%2"
                                               "F"
                                               "%3"))
                                             (! 1 2 1)
                                             (! 1 2 2)
                                             (! 1 2 3))
                                            (("1"
                                              (invoke
                                               (rewrite-lemma
                                                "sigma_constrains_theory"
                                                ("low"
                                                 "%1"
                                                 "high"
                                                 "%2"
                                                 "F"
                                                 "%3"))
                                               (! 1 1 1)
                                               (! 1 1 2)
                                               (! 1 1 3))
                                              (("1"
                                                (invoke
                                                 (name
                                                  "second_lambda_original"
                                                  "%1")
                                                 (! 1 1 3))
                                                (("1"
                                                  (invoke
                                                   (name "second_lambda" "%1")
                                                   (! 1 2 3))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (replace -2 1)
                                                        (("1"
                                                          (hide -1 -2 -3)
                                                          (("1"
                                                            (case
                                                             "second_lambda_original=second_lambda")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "second_lambda_original")
                                                                (("2"
                                                                  (expand
                                                                   "second_lambda")
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (expand
                                                                       "nth_ext"
                                                                       1
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "polyproduct__represents")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (typepred
                                                                             "x!1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "nth_ext")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "represents")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "represents")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "x!2")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep) (("2" (assert) nil nil)) nil)
                   ("3" (skeep) (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skeep) (("2" (assert) nil nil)) nil)
             ("3" (skeep) (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((a2l__bsproduct_eval const-decl "real" a2l__multi_bernstein nil)
    (Vars type-eq-decl nil util nil)
    (Bern const-decl "real" bernstein_polynomials reals)
    (above nonempty-type-eq-decl nil integers nil)
    (polyproduct__represents const-decl "bool" multibernstein_into_polylist
     nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (PolyproductList type-eq-decl nil a2l__util nil)
    (nth_ext const-decl "T" nth_ext structures)
    (Coefficient type-eq-decl nil a2l__util nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (product_constrains_theory formula-decl nil product_props reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (subrange type-eq-decl nil integers nil)
    (first_lambda skolem-const-decl "[subrange(0, nvars - 1) -> real]"
     a2l__multi_bernstein nil)
    (second_lambda skolem-const-decl "[subrange(0, dm(x!1)) -> real]"
     a2l__multi_bernstein nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (represents const-decl "bool" arrays_into_lists structures)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (PolynomialList type-eq-decl nil a2l__util nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (second_lambda_original skolem-const-decl "[subrange(0, dm(x!1)) -> real]"
     a2l__multi_bernstein nil)
    (sigma_constrains_theory formula-decl nil sigma_props reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (nvars skolem-const-decl "posnat" a2l__multi_bernstein nil)
    (dm skolem-const-decl "DegreeMono" a2l__multi_bernstein nil)
    (first_lambda_original skolem-const-decl
     "[subrange(0, nvars - 1) -> real]" a2l__multi_bernstein nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (DegreeMono type-eq-decl nil util nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bsproduct_eval const-decl "real" multi_bernstein nil))
   shostak))
 (a2l__multibs_eval__homomorphism 0
  (a2l__multibs_eval__homomorphism-1 nil 3686303373
   ("" (skeep :preds? t)
    (("" (hide -3)
      (("" (expand "multibs_eval")
        (("" (expand "a2l__multibs_eval")
          ((""
            (invoke
             (rewrite-lemma "sigma_constrains_theory"
              ("low" "%1" "high" "%2" "F" "%3"))
             (! 1 1 1) (! 1 1 2) (! 1 1 3))
            ((""
              (invoke
               (rewrite-lemma "sigma_constrains_theory"
                ("low" "%1" "high" "%2" "F" "%3"))
               (! 1 2 1) (! 1 2 2) (! 1 2 3))
              (("" (invoke (name "first_lambda_original" "%1") (! 1 1 3))
                (("" (invoke (name "first_lambda" "%1") (! 1 2 3))
                  (("" (assert)
                    (("" (hide -1 -2)
                      (("" (case "first_lambda_original=first_lambda")
                        (("1" (assert) nil nil)
                         ("2" (hide 2)
                          (("2" (apply-extensionality :hide? t)
                            (("2" (expand "first_lambda_original")
                              (("2" (expand "first_lambda")
                                (("2" (expand "multipolynomial__represents")
                                  (("2" (expand "nth_ext")
                                    (("2" (typepred "x!1")
                                      (("2"
                                        (expand "represents")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma
                                               "a2l__bsproduct_eval__homomorphism")
                                              (("2"
                                                (invoke
                                                 (inst
                                                  -
                                                  "nvars"
                                                  "terms"
                                                  "dm"
                                                  "%1"
                                                  "%2"
                                                  "env")
                                                 (! 1 1 2 0 1)
                                                 (! 1 2 2 0 1))
                                                (("1"
                                                  (replace -1 1 :hide? t)
                                                  (("1" (propax) nil nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand
                                                     "polyproduct__represents")
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (expand
                                                         "represents"
                                                         -)
                                                        (("1"
                                                          (inst -5 "x!1")
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst -7 "x!1")
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (skeep :preds? t)
                                                        (("3"
                                                          (inst
                                                           -9
                                                           "x!1"
                                                           "var_i")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((a2l__multibs_eval const-decl "real" a2l__multi_bernstein nil)
    (multipolynomial__represents const-decl "bool"
     multibernstein_into_polylist nil)
    (PolyList type-eq-decl nil util nil)
    (nth_ext const-decl "T" nth_ext structures)
    (a2l__bsproduct_eval const-decl "real" a2l__multi_bernstein nil)
    (PolyproductList type-eq-decl nil a2l__util nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (first_lambda_original skolem-const-decl
     "[subrange(0, terms - 1) -> real]" a2l__multi_bernstein nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (a2l__bsproduct_eval__homomorphism formula-decl nil a2l__multi_bernstein
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (represents const-decl "bool" arrays_into_lists structures)
    (terms skolem-const-decl "posnat" a2l__multi_bernstein nil)
    (nvars skolem-const-decl "posnat" a2l__multi_bernstein nil)
    (dm skolem-const-decl "DegreeMono" a2l__multi_bernstein nil)
    (polyproduct__represents const-decl "bool" multibernstein_into_polylist
     nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (mb skolem-const-decl "MultiBernstein" a2l__multi_bernstein nil)
    (pl skolem-const-decl
     "{pl: PolyList | multipolynomial__represents[terms, nvars, dm](pl, mb)}"
     a2l__multi_bernstein nil)
    (x!1 skolem-const-decl "subrange(0, terms - 1)" a2l__multi_bernstein nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (represents const-decl "bool" multibernstein_into_polylist nil)
    (first_lambda skolem-const-decl "[subrange(0, terms - 1) -> real]"
     a2l__multi_bernstein nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subrange type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma_constrains_theory formula-decl nil sigma_props reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Coeff type-eq-decl nil util nil) (Polynomial type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil) (Vars type-eq-decl nil util nil)
    (bsproduct_eval const-decl "real" multi_bernstein nil)
    (MultiBernstein type-eq-decl nil util nil)
    (multibs_eval const-decl "real" multi_bernstein nil))
   shostak))
 (a2l__multibscoeff_homomorphism 0
  (a2l__multibscoeff_homomorphism-3 nil 3685712917
   ("" (skeep :preds? t)
    (("" (hide -3)
      (("" (expand "multibscoeff")
        (("" (expand "a2l__multibscoeff")
          ((""
            (invoke
             (rewrite-lemma "sigma_constrains_theory"
              ("low" "%1" "high" "%2" "F" "%3"))
             (! 1 2 1) (! 1 2 2) (! 1 2 3))
            ((""
              (invoke
               (rewrite-lemma "sigma_constrains_theory"
                ("low" "%1" "high" "%2" "F" "%3"))
               (! 1 1 1) (! 1 1 2) (! 1 1 3))
              (("" (invoke (name "first_lambda_original" "%1") (! 1 1 3))
                (("" (invoke (name "first_lambda" "%1") (! 1 2 3))
                  (("" (assert)
                    (("" (replace -1 1 :hide? t)
                      (("" (replace -1 1 :hide? t)
                        (("" (case "first_lambda_original=first_lambda")
                          (("1" (assert) nil nil)
                           ("2" (hide 2)
                            (("2" (apply-extensionality :hide? t)
                              (("2" (expand "first_lambda_original")
                                (("2" (expand "first_lambda")
                                  (("2"
                                    (invoke
                                     (rewrite-lemma
                                      "product_constrains_theory"
                                      ("low" "%1" "high" "%2" "F" "%3"))
                                     (! 1 1 2 1) (! 1 1 2 2) (! 1 1 2 3))
                                    (("2"
                                      (invoke
                                       (rewrite-lemma
                                        "product_constrains_theory"
                                        ("low" "%1" "high" "%2" "F" "%3"))
                                       (! 1 2 2 1)
                                       (! 1 2 2 2)
                                       (! 1 2 2 3))
                                      (("2"
                                        (invoke
                                         (name "second_lambda_original" "%1")
                                         (! 1 1 2 3))
                                        (("2"
                                          (invoke
                                           (name "second_lambda" "%1")
                                           (! 1 2 2 3))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -1 1 :hide? t)
                                              (("2"
                                                (replace -1 1 :hide? t)
                                                (("2"
                                                  (case
                                                   "second_lambda_original=second_lambda")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (apply-extensionality
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (expand
                                                         "second_lambda_original")
                                                        (("2"
                                                          (expand
                                                           "second_lambda")
                                                          (("2"
                                                            (expand
                                                             "nth_ext"
                                                             1
                                                             3)
                                                            (("2"
                                                              (typepred "x!1")
                                                              (("2"
                                                                (expand
                                                                 "represents")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "nth_ext"
                                                                       1
                                                                       2)
                                                                      (("2"
                                                                        (typepred
                                                                         "x!2")
                                                                        (("2"
                                                                          (inst
                                                                           -9
                                                                           "x!1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "nth_ext")
                                                                              (("2"
                                                                                (inst
                                                                                 -10
                                                                                 "x!1"
                                                                                 "x!2")
                                                                                (("2"
                                                                                  (inst
                                                                                   -11
                                                                                   "x!2")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "represents")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "represents")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "x!2")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "represents")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "cm(x!2)")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((a2l__multibscoeff const-decl "real" a2l__multi_bernstein nil)
    (first_lambda skolem-const-decl "[subrange(0, terms - 1) -> real]"
     a2l__multi_bernstein nil)
    (second_lambda skolem-const-decl "[subrange(0, nvars - 1) -> real]"
     a2l__multi_bernstein nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (represents const-decl "bool" arrays_into_lists structures)
    (Coefficient type-eq-decl nil a2l__util nil)
    (PolynomialList type-eq-decl nil a2l__util nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (PolyproductList type-eq-decl nil a2l__util nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (second_lambda_original skolem-const-decl
     "[subrange(0, nvars - 1) -> real]" a2l__multi_bernstein nil)
    (product_constrains_theory formula-decl nil product_props reals)
    (first_lambda_original skolem-const-decl
     "[subrange(0, terms - 1) -> real]" a2l__multi_bernstein nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subrange type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma_constrains_theory formula-decl nil sigma_props reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Coeff type-eq-decl nil util nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil product reals)
    (T_high type-eq-decl nil product reals)
    (product def-decl "real" product reals) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nth_ext const-decl "T" nth_ext structures)
    (PolyList type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (MultiBernstein type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil)
    (represents const-decl "bool" multibernstein_into_polylist nil)
    (CoeffMono type-eq-decl nil util nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (multibscoeff const-decl "real" multi_bernstein nil))
   nil)
  (a2l__multibscoeff_homomorphism-2 nil 3685709317
   ("" (skolem 1 ("bsdegmono" "cf" "nvars" "_" "mb" "_" "cm"))
    (("" (induct "terms")
      (("1" (assert) nil) ("2" (assert) nil)
       ("3" (skolem 1 "j")
        (("3" (flatten)
          (("3" (skolem * "pl")
            (("3" (split)
              (("1" (inst - "pl")
                (("1" (expand "multibscoeff")
                  (("1" (expand "a2l__multibscoeff")
                    (("1"
                      (rewrite-lemma "reals@sigma.sigma_rew"
                       ("low" "0" "high" "j" "F" "LAMBDA (i: nat):
                        cf(i) *
                         product(0, nvars - 1,
                                 LAMBDA (j_1: nat):
                                   nth(nth(nth(pl, i), j_1), cm(j_1)))"))
                      (("1"
                        (rewrite-lemma "reals@sigma.sigma_rew"
                         ("low" "0" "high" "j" "F" "LAMBDA (i: nat):
                         cf(i) *
                          product(0, nvars - 1,
                                  LAMBDA (j_1: nat): bspoly(i)(j_1)(cm(j_1)))"))
                        (("1" (case "j=0")
                          (("1" (rewrite -1)
                            (("1" (assert) (("1" (postpone) nil)))))
                           ("2" (postpone) nil)))))
                       ("2" (postpone) nil) ("3" (postpone) nil)
                       ("4" (postpone) nil)))))))
                 ("2" (postpone) nil)))
               ("2" (postpone) nil))))))))))))
    nil)
   nil nil)
  (a2l__multibscoeff_homomorphism-1 nil 3685457680
   ("" (skolem 1 ("bsdegmono" "cf" "nvars" "_" "bspoly" "_" "cm"))
    (("" (induct "terms")
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (skolem 1 "j")
        (("3" (flatten)
          (("3" (skolem * "pl")
            (("3" (split)
              (("1" (inst - "pl")
                (("1" (expand "multibscoeff")
                  (("1" (expand "a2l__multibscoeff")
                    (("1"
                      (rewrite-lemma "reals@sigma.sigma_rew"
                       ("low" "0" "high" "j" "F" "LAMBDA (i: nat):
               cf(i) *
                product(0, nvars - 1,
                        LAMBDA (j_1: nat):
                          nth(nth(nth(pl, i), j_1), cm(j_1)))"))
                      (("1"
                        (rewrite-lemma "reals@sigma.sigma_rew"
                         ("low" "0" "high" "j" "F" "LAMBDA (i: nat):
              cf(i) *
               product(0, nvars - 1,
                       LAMBDA (j_1: nat): bspoly(i)(j_1)(cm(j_1)))"))
                        (("1" (case "j=0")
                          (("1" (rewrite -1)
                            (("1" (assert) (("1" (postpone) nil nil)) nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil) ("3" (postpone) nil nil)
                       ("4" (postpone) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil))
                nil)
               ("2" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (a2l__multibscoeff_id 0
  (a2l__multibscoeff_id-2 "" 3790098015
   ("" (skosimp* :preds? t)
    (("" (hide -1 -2 -3 -5 -6)
      (("" (expand "multipolynomial_represents?")
        (("" (expand "represents?")
          (("" (skosimp* -)
            (("" (lemma "multibscoeff_id")
              ((""
                (inst -1 "bsdegmono!1" "A!1" "cf!1" "coeffmono1!1"
                 "coeffmono2!1" "nvars!1" "terms!1")
                (("" (assert)
                  (("" (hide -3 -2)
                    (("" (lemma "a2l__multibscoeff_homomorphism")
                      ((""
                        (inst - "bsdegmono!1" "cf!1" "nvars!1" "terms!1" "A!1"
                         "bspoly!1" "coeffmono1!1")
                        (("1" (replace -1 -2 :hide? t)
                          (("1" (lemma "a2l__multibscoeff_homomorphism")
                            (("1"
                              (inst - "bsdegmono!1" "cf!1" "nvars!1" "terms!1"
                               "A!1" "bspoly!1" "coeffmono2!1")
                              (("1" (replace -1 -2 :hide? t)
                                (("1" (propax) nil nil)) nil)
                               ("2" (hide -1 2)
                                (("2" (skeep)
                                  (("2"
                                    (typepred
                                     "maximum_degree(bsdegmono!1, nvars!1)")
                                    (("2" (inst - "var_index")
                                      (("2"
                                        (reveal -12)
                                        (("2"
                                          (inst - "var_index")
                                          (("2" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (reveal -8)
                            (("2" (inst - "var_index")
                              (("2" (flatten) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (a2l__multibscoeff_id-1 nil 3685964123
   ("" (skosimp* :preds? t)
    (("" (hide -1 -2 -3 -5 -6)
      (("" (expand "multipolynomial_represents?")
        (("" (expand "represents?")
          (("" (skosimp* -)
            (("" (lemma "multibscoeff_id")
              ((""
                (inst -1 "bsdegmono!1" "A!1" "cf!1" "coeffmono1!1"
                 "coeffmono2!1" "nvars!1" "terms!1")
                (("" (assert)
                  (("" (hide -3 -2)
                    (("" (lemma "a2l__multibscoeff_homomorphism")
                      ((""
                        (inst - "bsdegmono!1" "cf!1" "nvars!1" "terms!1" "A!1"
                         "bspoly!1" "coeffmono1!1")
                        (("1" (replace -1 -2 :hide? t)
                          (("1" (lemma "a2l__multibscoeff_homomorphism")
                            (("1"
                              (inst - "bsdegmono!1" "cf!1" "nvars!1" "terms!1"
                               "A!1" "bspoly!1" "coeffmono2!1")
                              (("1" (replace -1 -2 :hide? t)
                                (("1" (propax) nil nil)) nil)
                               ("2" (hide -1 2)
                                (("2" (skeep)
                                  (("2"
                                    (typepred
                                     "maximum_degree(bsdegmono!1, nvars!1)")
                                    (("2" (inst - "var_index")
                                      (("2"
                                        (reveal -12)
                                        (("2"
                                          (inst - "var_index")
                                          (("2" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (reveal -3)
                                (("3"
                                  (expand "represents_polylist_multipolynomial")
                                  (("3" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (reveal -8)
                            (("2" (inst - "var_index")
                              (("2" (flatten) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (expand "represents_polylist_multipolynomial")
                          (("3" (reveal -2) (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((represents? const-decl "bool" multibernstein_into_polylist nil)
    (multibscoeff_id formula-decl nil multi_bernstein nil)
    (a2l__multibscoeff_homomorphism formula-decl nil a2l__multi_bernstein nil)
    (coeffmono2!1 skolem-const-decl "{coeffmono2: CoeffMono |
   FORALL (i: below(nvars!1)):
     coeffmono11!1(i) <= bsdegmono!1(i) AND coeffmono2(i) <= bsdegmono!1(i)}"
     a2l__multi_bernstein nil)
    (maximum_degree def-decl
     "{n: nat | FORALL (i: below(nvars)): coeffmono(i) <= n}" a2l__util nil)
    (represents const-decl "bool" multibernstein_into_polylist nil)
    (coeffmono1!1 skolem-const-decl "{coeffmono2: CoeffMono |
   FORALL (i: below(nvars!1)):
     coeffmono11!1(i) <= bsdegmono!1(i) AND coeffmono2(i) <= bsdegmono!1(i)}"
     a2l__multi_bernstein nil)
    (bsdegmono!1 skolem-const-decl "DegreeMono" a2l__multi_bernstein nil)
    (coeffmono11!1 skolem-const-decl "CoeffMono" a2l__multi_bernstein nil)
    (nvars!1 skolem-const-decl "posnat" a2l__multi_bernstein nil)
    (Polynomial type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (MultiBernstein type-eq-decl nil util nil)
    (Coeff type-eq-decl nil util nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PolyList type-eq-decl nil util nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (DegreeMono type-eq-decl nil util nil)
    (multipolynomial_represents? const-decl "bool"
     multibernstein_into_polylist nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (CoeffMono type-eq-decl nil util nil))
   shostak))
 (a2l__eval_X_between__homomorphism 0
  (a2l__eval_X_between__homomorphism-1 nil 3686307039
   ("" (skeep :preds? t)
    (("" (hide -5)
      (("" (lemma "a2l__multibs_eval__homomorphism")
        (("" (inst - "cf" "nvars" "terms" "dm" "mb" "pl" "env")
          (("" (replace -1 1 :hide? t) (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Coeff type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (DegreeMono type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (MultiBernstein type-eq-decl nil util nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PolyList type-eq-decl nil util nil)
    (multipolynomial__represents const-decl "bool"
     multibernstein_into_polylist nil)
    (Vars type-eq-decl nil util nil)
    (a2l__multibs_eval__homomorphism formula-decl nil a2l__multi_bernstein
     nil))
   shostak))
 (a2l__forall_X_between__homorphism 0
  (a2l__forall_X_between__homorphism-1 nil 3686307856
   ("" (skeep)
    (("" (expand "a2l__forall_X_between")
      (("" (expand "forall_X_between")
        (("" (iff)
          (("" (split)
            (("1" (flatten)
              (("1" (skeep)
                (("1" (inst - "X")
                  (("1" (assert)
                    (("1" (lemma "a2l__multibs_eval__homomorphism")
                      (("1" (inst - "cf" "nvars" "terms" "dm" "mb" "pl" "X")
                        (("1" (replace -1 -2) (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (skeep)
                (("2" (inst - "X")
                  (("2" (assert)
                    (("2" (lemma "a2l__multibs_eval__homomorphism")
                      (("2" (inst - "cf" "nvars" "terms" "dm" "mb" "pl" "X")
                        (("2" (replace -1 -2 RL) (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((a2l__forall_X_between const-decl "bool" a2l__multi_bernstein nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Vars type-eq-decl nil util nil)
    (a2l__multibs_eval__homomorphism formula-decl nil a2l__multi_bernstein
     nil)
    (multipolynomial__represents const-decl "bool"
     multibernstein_into_polylist nil)
    (PolyList type-eq-decl nil util nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (MultiBernstein type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (Coeff type-eq-decl nil util nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (forall_X_between const-decl "bool" multi_bernstein nil))
   shostak))
 (a2l__Bern_split_left_mono_TCC1 0
  (a2l__Bern_split_left_mono_TCC1-1 nil 3685982487 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (a2l__Bern_split_left_mono subtype "a2l__multi_bernstein.k"
    "{i: naturalnumbers.nat | reals.<=(i, a2l__multi_bernstein.j)}")))
 (a2l__Bern_split_left_mono__homomorphism 0
  (a2l__Bern_split_left_mono__homomorphism-1 nil 3686320138
   ("" (skeep :preds? t)
    (("" (hide -4)
      (("" (expand "polyproduct__represents")
        (("" (flatten)
          ((""
            (case "FORALL (r: nat):
                             NOT splitVar /= r IMPLIES
                              (FORALL (j: nat):
                                 NOT j > dm(splitVar) IMPLIES
                                  (FORALL (k: nat): NOT k > j IMPLIES k <= j))"
              "FORALL (var_i: below(nvars)):
                        length(nth(a2l__Bern_split_left_mono(ppl, dm)(splitVar), var_i)) =
                         1 + dm(var_i)"
              "nvars = length(a2l__Bern_split_left_mono(ppl, dm)(splitVar))")
            (("1" (assert)
              (("1" (split)
                (("1" (label "length_nth_ppl" -9)
                  (("1" (label "length_nth_function_ppl" -2)
                    (("1" (hide-all-but (1 -4 -5 -6 -7 -8))
                      (("1" (expand "represents")
                        (("1" (skeep :preds? t)
                          (("1" (inst - "i")
                            (("1" (expand "represents")
                              (("1" (copy -5)
                                (("1" (label "point2point_equality" -1)
                                  (("1" (hide -1)
                                    (("1" (skeep :preds? t)
                                      (("1"
                                        (inst - "i_1")
                                        (("1"
                                          (expand
                                           "a2l__Bern_split_left_mono"
                                           1)
                                          (("1"
                                            (invoke
                                             (rewrite-lemma
                                              "map_with_index__nth"
                                              ("f" "%1" "a" "%2" "i" "%3"))
                                             (! 1 1 1 1 0 1)
                                             (! 1 1 1 1 1)
                                             (! 1 1 1 2))
                                            (("1"
                                              (expand "Bern_split_left_mono")
                                              (("1"
                                                (case "splitVar /= i")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "nth_ext")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (invoke
                                                     (rewrite-lemma
                                                      "map_with_index__nth[real,real]"
                                                      ("f"
                                                       "%1"
                                                       "a"
                                                       "%2"
                                                       "i"
                                                       "%3"))
                                                     (! 2 1 1 0 1)
                                                     (! 2 1 1 1)
                                                     (! 2 1 2))
                                                    (("1"
                                                      (case
                                                       "i_1 > dm(splitVar)")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (case
                                                           "FORALL (k: nat): NOT k > i_1 IMPLIES k <= i_1")
                                                          (("1"
                                                            (invoke
                                                             (rewrite-lemma
                                                              "sigma_constrains_theory"
                                                              ("low"
                                                               "%1"
                                                               "high"
                                                               "%2"
                                                               "F"
                                                               "%3")
                                                              3)
                                                             (! 3 1 2 1)
                                                             (! 3 1 2 2)
                                                             (! 3 1 2 3))
                                                            (("1"
                                                              (invoke
                                                               (rewrite-lemma
                                                                "sigma_constrains_theory"
                                                                ("low"
                                                                 "%1"
                                                                 "high"
                                                                 "%2"
                                                                 "F"
                                                                 "%3")
                                                                3)
                                                               (! 3 2 2 1)
                                                               (! 3 2 2 2)
                                                               (! 3 2 2 3))
                                                              (("1"
                                                                (invoke
                                                                 (case
                                                                  "(%1)=(%2)")
                                                                 (! 3 1 2 3)
                                                                 (! 3 2 2 3))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide 4)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (expand
                                                                       "nth_ext")
                                                                      (("2"
                                                                        (typepred
                                                                         "x!1")
                                                                        (("2"
                                                                          (case
                                                                           "splitVar=i")
                                                                          (("1"
                                                                            (reveal
                                                                             "length_nth_ppl")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "splitVar")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 1
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (reveal
                                                                                   "length_nth_function_ppl")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "i")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       -6
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (reveal
                                                                                             "point2point_equality")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x!1")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*
                                                             :preds?
                                                             t)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (reveal
                                                       "length_nth_ppl")
                                                      (("2"
                                                        (inst -1 "i")
                                                        (("2"
                                                          (reveal
                                                           "length_nth_function_ppl")
                                                          (("2"
                                                            (inst -1 "i")
                                                            (("2"
                                                              (replace -1 -3)
                                                              (("2"
                                                                (replace -2 1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp* :preds? t)
                                                      (("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (reveal "length_nth_ppl")
                                          (("2"
                                            (inst -1 "i")
                                            (("2"
                                              (reveal
                                               "length_nth_function_ppl")
                                              (("2"
                                                (inst -1 "i")
                                                (("2"
                                                  (replace -1 -3 :hide? t)
                                                  (("2"
                                                    (replace -1 1 :hide? t)
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil)
             ("2" (hide-all-but (1 -2 -3 -4 -5 -6 -7))
              (("2" (expand "a2l__Bern_split_left_mono")
                (("2"
                  (invoke
                   (rewrite-lemma
                    "map_with_index__preserves_length[PolynomialList,PolynomialList]"
                    ("f" "%1" "a" "%2"))
                   (! 1 2 1 0 1) (! 1 2 1 1))
                  nil nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (skeep :preds? t)
                (("3" (inst -8 "var_i")
                  (("3" (expand "a2l__Bern_split_left_mono")
                    (("3"
                      (invoke
                       (rewrite-lemma "map_with_index__nth"
                        ("f" "%1" "a" "%2" "i" "%3"))
                       (! 1 1 1 1 0 1) (! 1 1 1 1 1) (! 1 1 1 2))
                      (("3" (case "splitVar /= var_i")
                        (("1" (assert)
                          (("1" (expand "nth_ext" 1) (("1" (propax) nil nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (invoke
                             (rewrite-lemma
                              "map_with_index__preserves_length[Coefficient,Coefficient]"
                              ("f" "%1" "a" "%2"))
                             (! 2 1 1 0 1) (! 2 1 1 1))
                            (("2" (inst -2 "splitVar")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (hide 2)
              (("4" (skosimp* :preds? t) (("4" (assert) nil nil)) nil)) nil)
             ("5" (hide 2)
              (("5" (skeep :preds? t)
                (("5" (expand "a2l__Bern_split_left_mono")
                  (("5"
                    (invoke
                     (rewrite-lemma
                      "map_with_index__preserves_length[PolynomialList,PolynomialList]"
                      ("f" "%1" "a" "%2") 1 RL)
                     (! 1 2 1 0 1) (! 1 2 1 1))
                    (("1" (assert) nil nil)
                     ("2" (skosimp* :preds? t) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((map_with_index__preserves_length formula-decl nil map_with_index
     structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (Bern_split_left_mono const-decl "real" multi_bernstein nil)
    (subrange type-eq-decl nil integers nil)
    (sigma_constrains_theory formula-decl nil sigma_props reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (C const-decl "posnat" binomial reals) (sigma def-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (map_with_index const-decl "list[T1]" map_with_index structures)
    (nth_ext const-decl "T" nth_ext structures)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (map_with_index__nth formula-decl nil map_with_index structures)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (i_1 skolem-const-decl
     "below(length(nth(a2l__Bern_split_left_mono(ppl, dm)(splitVar), i)))"
     a2l__multi_bernstein nil)
    (i skolem-const-decl
       "below(length(a2l__Bern_split_left_mono(ppl, dm)(splitVar)))"
       a2l__multi_bernstein nil)
    (splitVar skolem-const-decl "{splitVar: nat | splitVar < nvars}"
     a2l__multi_bernstein nil)
    (ppl skolem-const-decl
     "{ppl: PolyproductList | polyproduct__represents[terms, nvars, dm](ppl, pp)}"
     a2l__multi_bernstein nil)
    (pp skolem-const-decl "Polyproduct" a2l__multi_bernstein nil)
    (dm skolem-const-decl "DegreeMono" a2l__multi_bernstein nil)
    (nvars skolem-const-decl "posnat" a2l__multi_bernstein nil)
    (terms skolem-const-decl "posnat" a2l__multi_bernstein nil)
    (PolynomialList type-eq-decl nil a2l__util nil)
    (represents const-decl "bool" arrays_into_lists structures)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Coefficient type-eq-decl nil a2l__util nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (PolyproductList type-eq-decl nil a2l__util nil)
    (a2l__Bern_split_left_mono const-decl "PolyproductList"
     a2l__multi_bernstein nil)
    (Polynomial type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil) (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (DegreeMono type-eq-decl nil util nil) (<= const-decl "bool" reals nil)
    (polyproduct__represents const-decl "bool" multibernstein_into_polylist
     nil))
   shostak))
 (a2l__Bern_split_right_mono_TCC1 0
  (a2l__Bern_split_right_mono_TCC1-1 nil 3686658274 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (a2l__Bern_split_right_mono subtype
    "(number_fields.-)(a2l__multi_bernstein.bsdegmono(a2l__multi_bernstein.i), a2l__multi_bernstein.j)"
    "nat")))
 (a2l__Bern_split_right_mono_TCC2 0
  (a2l__Bern_split_right_mono_TCC2-1 nil 3686658274 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (a2l__Bern_split_right_mono subtype "a2l__multi_bernstein.k"
    "{i_1: naturalnumbers.nat | reals.<=(i_1, (number_fields.-)(a2l__multi_bernstein.bsdegmono(a2l__multi_bernstein.i), a2l__multi_bernstein.j))}")))
 (a2l__Bern_split_right_mono_TCC3 0
  (a2l__Bern_split_right_mono_TCC3-1 nil 3686658274 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (a2l__Bern_split_right_mono subtype
    "(number_fields.-)(a2l__multi_bernstein.bsdegmono(a2l__multi_bernstein.i), a2l__multi_bernstein.k)"
    "nat")))
 (a2l__Bern_split_right_mono__homomorphism 0
  (a2l__Bern_split_right_mono__homomorphism-6 "" 3790098021
   ("" (skeep :preds? t)
    (("" (hide -4)
      (("" (expand "polyproduct__represents")
        (("" (flatten)
          ((""
            (case "FORALL (r: nat):
        NOT splitVar /= r IMPLIES
         (FORALL (j: nat):
            NOT j > dm(splitVar) IMPLIES
             (FORALL (k: nat):
                NOT k > dm(splitVar) - j IMPLIES dm(splitVar) - k >= 0))"
              "FORALL (r: nat):
        NOT splitVar /= r IMPLIES
         (FORALL (j: nat):
            NOT j > dm(splitVar) IMPLIES
             (FORALL (k: nat):
                NOT k > dm(splitVar) - j IMPLIES k <= dm(splitVar) - j))"
              "FORALL (r: nat):
        NOT splitVar /= r IMPLIES
         (FORALL (j: nat):
            NOT j > dm(splitVar) IMPLIES
             (FORALL (k: nat):
                NOT k > dm(splitVar) - j IMPLIES dm(splitVar) - j >= 0))"
              "FORALL (r: nat):
        NOT splitVar /= r IMPLIES
         (FORALL (j: nat):
            NOT j > dm(splitVar) IMPLIES
             dm(splitVar) - j >= 0 OR
              (EXISTS (j_1: nat): dm(splitVar) - j <= j_1))"
              "FORALL (var_i: below(nvars)):
                           length(nth(a2l__Bern_split_right_mono(ppl, dm)(splitVar), var_i)) =
                            1 + dm(var_i)"
              "nvars = length(a2l__Bern_split_right_mono(ppl, dm)(splitVar))")
            (("1" (assert)
              (("1" (split)
                (("1" (label "length_nth_ppl" -12)
                  (("1" (label "length_nth_function_ppl" -2)
                    (("1" (hide-all-but (1 -7 -8 -9 -10 -11))
                      (("1" (expand "represents")
                        (("1" (skeep :preds? t)
                          (("1" (inst - "i")
                            (("1" (expand "represents")
                              (("1" (copy -5)
                                (("1" (label "point2point_equality" -1)
                                  (("1" (hide -1)
                                    (("1" (skeep :preds? t)
                                      (("1"
                                        (inst - "i_1")
                                        (("1"
                                          (expand
                                           "a2l__Bern_split_right_mono"
                                           1)
                                          (("1"
                                            (invoke
                                             (rewrite-lemma
                                              "map_with_index__nth"
                                              ("f" "%1" "a" "%2" "i" "%3"))
                                             (! 1 1 1 1 0 1)
                                             (! 1 1 1 1 1)
                                             (! 1 1 1 2))
                                            (("1"
                                              (expand "Bern_split_right_mono")
                                              (("1"
                                                (case "splitVar /= i")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "nth_ext")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (invoke
                                                     (rewrite-lemma
                                                      "map_with_index__nth[real,real]"
                                                      ("f"
                                                       "%1"
                                                       "a"
                                                       "%2"
                                                       "i"
                                                       "%3"))
                                                     (! 2 1 1 0 1)
                                                     (! 2 1 1 1)
                                                     (! 2 1 2))
                                                    (("1"
                                                      (case
                                                       "i_1 > dm(splitVar)")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (case
                                                           "FORALL (k: nat):
        NOT k > dm(splitVar) - i_1 IMPLIES dm(splitVar) - k >= 0"
                                                           "FORALL (k: nat):
        NOT k > dm(splitVar) - i_1 IMPLIES k <= dm(splitVar) - i_1")
                                                          (("1"
                                                            (invoke
                                                             (rewrite-lemma
                                                              "sigma_constrains_theory"
                                                              ("low"
                                                               "%1"
                                                               "high"
                                                               "%2"
                                                               "F"
                                                               "%3")
                                                              3)
                                                             (! 3 1 2 1)
                                                             (! 3 1 2 2)
                                                             (! 3 1 2 3))
                                                            (("1"
                                                              (invoke
                                                               (rewrite-lemma
                                                                "sigma_constrains_theory"
                                                                ("low"
                                                                 "%1"
                                                                 "high"
                                                                 "%2"
                                                                 "F"
                                                                 "%3")
                                                                3)
                                                               (! 3 2 2 1)
                                                               (! 3 2 2 2)
                                                               (! 3 2 2 3))
                                                              (("1"
                                                                (invoke
                                                                 (case
                                                                  "(%1)=(%2)")
                                                                 (! 3 1 2 3)
                                                                 (! 3 2 2 3))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide 4)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (expand
                                                                       "nth_ext")
                                                                      (("2"
                                                                        (typepred
                                                                         "x!1")
                                                                        (("2"
                                                                          (case
                                                                           "splitVar=i")
                                                                          (("1"
                                                                            (reveal
                                                                             "length_nth_ppl")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "splitVar")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 1
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (reveal
                                                                                   "length_nth_function_ppl")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "i")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       -7
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (reveal
                                                                                             "point2point_equality")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "dm(i) - x!1")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*
                                                             :preds?
                                                             t)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skosimp*
                                                             :preds?
                                                             t)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (reveal
                                                       "length_nth_ppl")
                                                      (("2"
                                                        (inst -1 "i")
                                                        (("2"
                                                          (reveal
                                                           "length_nth_function_ppl")
                                                          (("2"
                                                            (inst -1 "i")
                                                            (("2"
                                                              (replace -1 -3)
                                                              (("2"
                                                                (replace -2 1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp* :preds? t)
                                                      (("3" (assert) nil nil))
                                                      nil)
                                                     ("4"
                                                      (skosimp* :preds? t)
                                                      (("4" (assert) nil nil))
                                                      nil)
                                                     ("5"
                                                      (skosimp* :preds? t)
                                                      (("5" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (reveal "length_nth_ppl")
                                            (("2"
                                              (inst -1 "i")
                                              (("2"
                                                (reveal
                                                 "length_nth_function_ppl")
                                                (("2"
                                                  (inst -1 "i")
                                                  (("2"
                                                    (replace -1 -3 :hide? t)
                                                    (("2"
                                                      (replace -1 1 :hide? t)
                                                      (("2" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil)
             ("2" (expand "a2l__Bern_split_right_mono")
              (("2"
                (invoke
                 (rewrite-lemma
                  "map_with_index__preserves_length[PolynomialList,PolynomialList]"
                  ("f" "%1" "a" "%2"))
                 (! 1 2 1 0 1) (! 1 2 1 1))
                nil nil))
              nil)
             ("3" (hide 2)
              (("3" (skeep :preds? t)
                (("3" (inst -11 "var_i")
                  (("3" (expand "a2l__Bern_split_right_mono")
                    (("3"
                      (invoke
                       (rewrite-lemma "map_with_index__nth"
                        ("f" "%1" "a" "%2" "i" "%3"))
                       (! 1 1 1 1 0 1) (! 1 1 1 1 1) (! 1 1 1 2))
                      (("3" (case "splitVar /= var_i")
                        (("1" (assert)
                          (("1" (expand "nth_ext" 1) (("1" (propax) nil nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (invoke
                             (rewrite-lemma
                              "map_with_index__preserves_length[Coefficient,Coefficient]"
                              ("f" "%1" "a" "%2"))
                             (! 2 1 1 0 1) (! 2 1 1 1))
                            (("1" (skosimp* :preds? t)
                              (("1" (assert) nil nil)) nil)
                             ("2" (skosimp* :preds? t)
                              (("2" (assert) nil nil)) nil)
                             ("3" (skosimp* :preds? t)
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (skosimp* :preds? t) (("4" (assert) nil nil)) nil)
             ("5" (skosimp* :preds? t) (("5" (assert) nil nil)) nil)
             ("6" (skosimp* :preds? t) (("6" (assert) nil nil)) nil)
             ("7" (skosimp* :preds? t) (("7" (assert) nil nil)) nil)
             ("8" (hide 2)
              (("8" (skeep :preds? t)
                (("8" (expand "a2l__Bern_split_right_mono")
                  (("8"
                    (invoke
                     (rewrite-lemma
                      "map_with_index__preserves_length[PolynomialList,PolynomialList]"
                      ("f" "%1" "a" "%2") 1 RL)
                     (! 1 2 1 0 1) (! 1 2 1 1))
                    (("1" (assert) nil nil)
                     ("2" (skosimp* :preds? t) (("2" (assert) nil nil)) nil)
                     ("3" (skosimp* :preds? t) (("3" (assert) nil nil)) nil)
                     ("4" (skosimp* :preds? t) (("4" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (a2l__Bern_split_right_mono__homomorphism-5 "" 3686926095
   ("" (skeep :preds? t)
    (("" (hide -4)
      (("" (expand "polyproduct__represents")
        (("" (flatten)
          ((""
            (case "FORALL (r: nat):
        NOT splitVar /= r IMPLIES
         (FORALL (j: nat):
            NOT j > dm(splitVar) IMPLIES
             (FORALL (k: nat):
                NOT k > dm(splitVar) - j IMPLIES dm(splitVar) - k >= 0))"
              "FORALL (r: nat):
        NOT splitVar /= r IMPLIES
         (FORALL (j: nat):
            NOT j > dm(splitVar) IMPLIES
             (FORALL (k: nat):
                NOT k > dm(splitVar) - j IMPLIES k <= dm(splitVar) - j))"
              "FORALL (r: nat):
        NOT splitVar /= r IMPLIES
         (FORALL (j: nat):
            NOT j > dm(splitVar) IMPLIES
             (FORALL (k: nat):
                NOT k > dm(splitVar) - j IMPLIES dm(splitVar) - j >= 0))"
              "FORALL (r: nat):
        NOT splitVar /= r IMPLIES
         (FORALL (j: nat):
            NOT j > dm(splitVar) IMPLIES
             dm(splitVar) - j >= 0 OR
              (EXISTS (j_1: nat): dm(splitVar) - j <= j_1))"
              "FORALL (var_i: below(nvars)):
                           length(nth(a2l__Bern_split_right_mono(ppl, dm)(splitVar), var_i)) =
                            1 + dm(var_i)"
              "nvars = length(a2l__Bern_split_right_mono(ppl, dm)(splitVar))")
            (("1" (assert)
              (("1" (split)
                (("1" (label "length_nth_ppl" -12)
                  (("1" (label "length_nth_function_ppl" -2)
                    (("1" (hide-all-but (1 -7 -8 -9 -10 -11))
                      (("1" (expand "represents")
                        (("1" (skeep :preds? t)
                          (("1" (inst - "i")
                            (("1" (expand "represents")
                              (("1" (copy -5)
                                (("1" (label "point2point_equality" -1)
                                  (("1" (hide -1)
                                    (("1" (skeep :preds? t)
                                      (("1"
                                        (inst - "i_1")
                                        (("1"
                                          (expand
                                           "a2l__Bern_split_right_mono"
                                           1)
                                          (("1"
                                            (invoke
                                             (rewrite-lemma
                                              "map_with_index__nth"
                                              ("f" "%1" "a" "%2" "i" "%3"))
                                             (! 1 1 1 1 0 1)
                                             (! 1 1 1 1 1)
                                             (! 1 1 1 2))
                                            (("1"
                                              (expand "Bern_split_right_mono")
                                              (("1"
                                                (case "splitVar /= i")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "nth_ext")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (invoke
                                                     (rewrite-lemma
                                                      "map_with_index__nth[real,real]"
                                                      ("f"
                                                       "%1"
                                                       "a"
                                                       "%2"
                                                       "i"
                                                       "%3"))
                                                     (! 2 1 1 0 1)
                                                     (! 2 1 1 1)
                                                     (! 2 1 2))
                                                    (("1"
                                                      (case
                                                       "i_1 > dm(splitVar)")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (case
                                                           "FORALL (k: nat):
        NOT k > dm(splitVar) - i_1 IMPLIES dm(splitVar) - k >= 0"
                                                           "FORALL (k: nat):
        NOT k > dm(splitVar) - i_1 IMPLIES k <= dm(splitVar) - i_1")
                                                          (("1"
                                                            (invoke
                                                             (rewrite-lemma
                                                              "sigma_constrains_theory"
                                                              ("low"
                                                               "%1"
                                                               "high"
                                                               "%2"
                                                               "F"
                                                               "%3")
                                                              3)
                                                             (! 3 1 2 1)
                                                             (! 3 1 2 2)
                                                             (! 3 1 2 3))
                                                            (("1"
                                                              (invoke
                                                               (rewrite-lemma
                                                                "sigma_constrains_theory"
                                                                ("low"
                                                                 "%1"
                                                                 "high"
                                                                 "%2"
                                                                 "F"
                                                                 "%3")
                                                                3)
                                                               (! 3 2 2 1)
                                                               (! 3 2 2 2)
                                                               (! 3 2 2 3))
                                                              (("1"
                                                                (invoke
                                                                 (case
                                                                  "(%1)=(%2)")
                                                                 (! 3 1 2 3)
                                                                 (! 3 2 2 3))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide 4)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (expand
                                                                       "nth_ext")
                                                                      (("2"
                                                                        (typepred
                                                                         "x!1")
                                                                        (("2"
                                                                          (case
                                                                           "splitVar=i")
                                                                          (("1"
                                                                            (reveal
                                                                             "length_nth_ppl")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "splitVar")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 1
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (reveal
                                                                                   "length_nth_function_ppl")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "i")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       -7
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (reveal
                                                                                             "point2point_equality")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "dm(i) - x!1")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*
                                                             :preds?
                                                             t)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skosimp*
                                                             :preds?
                                                             t)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (reveal
                                                       "length_nth_ppl")
                                                      (("2"
                                                        (inst -1 "i")
                                                        (("2"
                                                          (reveal
                                                           "length_nth_function_ppl")
                                                          (("2"
                                                            (inst -1 "i")
                                                            (("2"
                                                              (replace -1 -3)
                                                              (("2"
                                                                (replace -2 1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp* :preds? t)
                                                      (("3" (assert) nil nil))
                                                      nil)
                                                     ("4"
                                                      (skosimp* :preds? t)
                                                      (("4" (assert) nil nil))
                                                      nil)
                                                     ("5"
                                                      (skosimp* :preds? t)
                                                      (("5" (assert) nil nil))
                                                      nil)
                                                     ("6"
                                                      (skosimp* :preds? t)
                                                      (("6" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (reveal "length_nth_ppl")
                                            (("2"
                                              (inst -1 "i")
                                              (("2"
                                                (reveal
                                                 "length_nth_function_ppl")
                                                (("2"
                                                  (inst -1 "i")
                                                  (("2"
                                                    (replace -1 -3 :hide? t)
                                                    (("2"
                                                      (replace -1 1 :hide? t)
                                                      (("2" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil)
             ("2" (expand "a2l__Bern_split_right_mono")
              (("2"
                (invoke
                 (rewrite-lemma
                  "map_with_index__preserves_length[PolynomialList,PolynomialList]"
                  ("f" "%1" "a" "%2"))
                 (! 1 2 1 0 1) (! 1 2 1 1))
                nil nil))
              nil)
             ("3" (hide 2)
              (("3" (skeep :preds? t)
                (("3" (inst -11 "var_i")
                  (("3" (expand "a2l__Bern_split_right_mono")
                    (("3"
                      (invoke
                       (rewrite-lemma "map_with_index__nth"
                        ("f" "%1" "a" "%2" "i" "%3"))
                       (! 1 1 1 1 0 1) (! 1 1 1 1 1) (! 1 1 1 2))
                      (("3" (case "splitVar /= var_i")
                        (("1" (assert)
                          (("1" (expand "nth_ext" 1) (("1" (propax) nil nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (invoke
                             (rewrite-lemma
                              "map_with_index__preserves_length[Coefficient,Coefficient]"
                              ("f" "%1" "a" "%2"))
                             (! 2 1 1 0 1) (! 2 1 1 1))
                            (("1" (skosimp* :preds? t)
                              (("1" (assert) nil nil)) nil)
                             ("2" (skosimp* :preds? t)
                              (("2" (assert) nil nil)) nil)
                             ("3" (skosimp* :preds? t)
                              (("3" (assert) nil nil)) nil)
                             ("4" (skosimp* :preds? t)
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (skosimp* :preds? t) (("4" (assert) nil nil)) nil)
             ("5" (skosimp* :preds? t) (("5" (assert) nil nil)) nil)
             ("6" (skosimp* :preds? t) (("6" (assert) nil nil)) nil)
             ("7" (skosimp* :preds? t) (("7" (assert) nil nil)) nil)
             ("8" (hide 2)
              (("8" (skeep :preds? t)
                (("8" (expand "a2l__Bern_split_right_mono")
                  (("8"
                    (invoke
                     (rewrite-lemma
                      "map_with_index__preserves_length[PolynomialList,PolynomialList]"
                      ("f" "%1" "a" "%2") 1 RL)
                     (! 1 2 1 0 1) (! 1 2 1 1))
                    (("1" (assert) nil nil)
                     ("2" (skosimp* :preds? t) (("2" (assert) nil nil)) nil)
                     ("3" (skosimp* :preds? t) (("3" (assert) nil nil)) nil)
                     ("4" (skosimp* :preds? t) (("4" (assert) nil nil)) nil)
                     ("5" (skosimp* :preds? t) (("5" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((map_with_index__preserves_length formula-decl nil map_with_index
     structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (Bern_split_right_mono const-decl "real" multi_bernstein nil)
    (subrange type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (sigma_constrains_theory formula-decl nil sigma_props reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (C const-decl "posnat" binomial reals) (sigma def-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (^ const-decl "real" exponentiation nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (map_with_index const-decl "list[T1]" map_with_index structures)
    (nth_ext const-decl "T" nth_ext structures)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (map_with_index__nth formula-decl nil map_with_index structures)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (i_1 skolem-const-decl
     "below(length(nth(a2l__Bern_split_right_mono(ppl, dm)(splitVar), i)))"
     a2l__multi_bernstein nil)
    (i skolem-const-decl
       "below(length(a2l__Bern_split_right_mono(ppl, dm)(splitVar)))"
       a2l__multi_bernstein nil)
    (splitVar skolem-const-decl "{splitVar: nat | splitVar < nvars}"
     a2l__multi_bernstein nil)
    (ppl skolem-const-decl
     "{ppl: PolyproductList | polyproduct__represents[terms, nvars, dm](ppl, pp)}"
     a2l__multi_bernstein nil)
    (pp skolem-const-decl "Polyproduct" a2l__multi_bernstein nil)
    (dm skolem-const-decl "DegreeMono" a2l__multi_bernstein nil)
    (nvars skolem-const-decl "posnat" a2l__multi_bernstein nil)
    (terms skolem-const-decl "posnat" a2l__multi_bernstein nil)
    (PolynomialList type-eq-decl nil a2l__util nil)
    (represents const-decl "bool" arrays_into_lists structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Coefficient type-eq-decl nil a2l__util nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (PolyproductList type-eq-decl nil a2l__util nil)
    (a2l__Bern_split_right_mono const-decl "PolyproductList"
     a2l__multi_bernstein nil)
    (Polynomial type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil) (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (DegreeMono type-eq-decl nil util nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (polyproduct__represents const-decl "bool" multibernstein_into_polylist
     nil))
   nil)
  (a2l__Bern_split_right_mono__homomorphism-4 "" 3686925767
   ("" (skeep)
    (("" (expand "polyproduct__represents")
      (("" (expand "represents")
        ((""
          (case "   FORALL (variable: nat):
               NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
                (FORALL (degree: nat):
                   NOT degree > dm(splitVar) IMPLIES
                    (FORALL (k: subrange(0, dm(splitVar) - degree)): splitVar < length[list[Coefficient]](ppl)))"
            "FORALL (variable: nat):
           NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
            (FORALL (degree: nat):
               NOT degree > dm(splitVar) IMPLIES
                (FORALL (x: subrange(0, dm(splitVar) - degree), y: subrange(0, dm(splitVar) - degree)), (z: integer):
                   x <= z AND z <= y IMPLIES 0 <= z AND z <= dm(splitVar) - degree))"
            "FORALL (variable: nat):
           NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
            (FORALL (degree: nat):
               NOT degree > dm(splitVar) IMPLIES
                (FORALL (k: subrange(0, dm(splitVar) - degree)):
                   dm(splitVar) - k < length[Coefficient](nth[list[Coefficient]](ppl, splitVar))))"
            "FORALL (variable: nat):
           NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
            (FORALL (degree: nat):
               NOT degree > dm(splitVar) IMPLIES
                0 <= dm(splitVar) - degree OR (EXISTS (j: subrange(0, dm(splitVar) - degree)): dm(splitVar) - degree <= j))"
            "FORALL (variable: nat):
           NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
            (FORALL (degree: nat):
               NOT degree > dm(splitVar) IMPLIES
                0 <= dm(splitVar) - degree OR (EXISTS (j: subrange(0, dm(splitVar) - degree)): j <= 0))"
            "FORALL (variable: nat):
                   splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
                    variable < length[list[Coefficient]](ppl)")
          (("1"
            (case "FORALL (i: below(nvars)): polynomial__represents[terms,nvars,maximum_degree(dm,nvars)](nth(a2l__Bern_split_right_mono(ppl,dm)(splitVar),i),original.Bern_split_right_mono(pp,dm)(splitVar)(i))")
            (("1" (label "polynomiallists_represents_polynomial" -1)
              (("1" (hide -1)
                (("1" (split)
                  (("1" (expand "representationList?")
                    (("1" (skolem 1 "pl")
                      (("1" (flatten)
                        (("1" (expand "representation?")
                          (("1" (lemma "member_nth[PolynomialList]")
                            (("1"
                              (inst -1 "pl"
                               "a2l__Bern_split_right_mono(ppl, dm)(splitVar)")
                              (("1" (assert)
                                (("1" (skeep - :preds? t)
                                  (("1"
                                    (reveal
                                     "polynomiallists_represents_polynomial")
                                    (("1" (inst - "i")
                                      (("1"
                                        (expand "polynomial__represents")
                                        (("1"
                                          (inst
                                           1
                                           "original.Bern_split_right_mono(pp, dm)(splitVar)(i)")
                                          (("1"
                                            (replace -4 1 RL :hide? t)
                                            (("1" (propax) nil)))))))
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (hide -3 -4)
                                          (("2"
                                            (typepred "ppl")
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (expand
                                                 "polyproduct__represents")
                                                (("2"
                                                  (expand "represents")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide -1 -3)
                                                      (("2"
                                                        (expand
                                                         "a2l__Bern_split_right_mono")
                                                        (("2"
                                                          (lemma
                                                           "map_with_index__preserves_length[PolynomialList,PolynomialList]")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (variable: nat, p: PolynomialList):
                                 IF variable >= length(ppl) THEN null
                                 ELSIF splitVar /= variable THEN nth(ppl, variable)
                                 ELSE map_with_index[real, real]
                                          (LAMBDA (degree: nat, coefficient: real):
                                             IF degree > dm(splitVar) THEN 0
                                             ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                                   sigma[subrange(0, dm(splitVar) - degree)]
                                                       (0, dm(splitVar) - degree,
                                                        LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                          C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                             ENDIF)
                                          (p)
                                 ENDIF"
                                                             "ppl")
                                                            (("2"
                                                              (assert)
                                                              nil)))))))))))))))))))))))))))))))
                               ("2" (hide 2)
                                (("2" (hide -1)
                                  (("2" (expand "a2l__Bern_split_right_mono")
                                    (("2"
                                      (lemma
                                       "map_with_index__preserves_length[PolynomialList,PolynomialList]")
                                      (("2"
                                        (inst
                                         -
                                         "LAMBDA (variable: nat, p: PolynomialList):
                               IF variable >= length(ppl) THEN null
                               ELSIF splitVar /= variable THEN nth(ppl, variable)
                               ELSE map_with_index[real, real]
                                        (LAMBDA (degree: nat, coefficient: real):
                                           IF degree > dm(splitVar) THEN 0
                                           ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                                 sigma[subrange(0, dm(splitVar) - degree)]
                                                     (0, dm(splitVar) - degree,
                                                      LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                        C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                           ENDIF)
                                        (p)
                               ENDIF"
                                         "ppl")
                                        (("2"
                                          (replace -1 1 RL :hide? t)
                                          (("2"
                                            (typepred "ppl")
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (expand
                                                 "polyproduct__represents")
                                                (("2"
                                                  (expand "represents")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil)))))))))))))))))))))))))))))))))))
                   ("2" (expand "a2l__Bern_split_right_mono")
                    (("2"
                      (lemma
                       "map_with_index__preserves_length[PolynomialList,PolynomialList]")
                      (("2"
                        (inst - "LAMBDA (variable: nat, p: PolynomialList):
                             IF variable >= length(ppl) THEN null
                             ELSIF splitVar /= variable THEN nth(ppl, variable)
                             ELSE map_with_index[real, real]
                                      (LAMBDA (degree: nat, coefficient: real):
                                         IF degree > dm(splitVar) THEN 0
                                         ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                               sigma[subrange(0, dm(splitVar) - degree)]
                                                   (0, dm(splitVar) - degree,
                                                    LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                      C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                         ENDIF)
                                      (p)
                             ENDIF" "ppl")
                        (("2" (replace -1 1 RL :hide? t)
                          (("2" (typepred "ppl")
                            (("2" (hide -1)
                              (("2" (expand "polyproduct__represents")
                                (("2" (expand "represents")
                                  (("2" (flatten) nil)))))))))))))))))
                   ("3" (assert)
                    (("3" (hide -)
                      (("3" (skeep :preds? t)
                        (("3" (expand "represents")
                          (("3" (typepred "ppl")
                            (("3" (hide -1)
                              (("3" (expand "polyproduct__represents")
                                (("3" (expand "represents")
                                  (("3" (flatten)
                                    (("3" (hide -1 -2)
                                      (("3"
                                        (inst - "i")
                                        (("3"
                                          (expand "represents")
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (case
                                               "FORALL (i: below(nvars)): length(nth(ppl, i)) = 1 + maximum_degree(dm, nvars) IMPLIES FORALL (i_1: below(1 + maximum_degree(dm, nvars))):
                                     (nth(nth(a2l__Bern_split_right_mono(ppl, dm)(splitVar), i), i_1)
                                       = original.Bern_split_right_mono(pp, dm)(splitVar)(i)(i_1))")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (expand
                                                   "representationList?")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (expand
                                                       "representation?")
                                                      (("1"
                                                        (hide -3 -4 -5 -6)
                                                        (("1"
                                                          (lemma
                                                           "member_nth[Coefficient]")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "a"
                                                             " nth(a2l__Bern_split_right_mono(ppl, dm)(splitVar), i)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skeep
                                                                 -1
                                                                 :preds?
                                                                 t)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "i_1")
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     -5
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "original.Bern_split_right_mono(pp, dm)(splitVar)(i)(i_1)")
                                                                      nil)))
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-2 1))
                                                                      (("2"
                                                                        (expand
                                                                         "a2l__Bern_split_right_mono")
                                                                        (("2"
                                                                          (lemma
                                                                           "map_with_index__nth[PolynomialList,PolynomialList]")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "LAMBDA (variable: nat, p: PolynomialList):
                                         IF variable >= length(ppl) THEN null
                                         ELSIF splitVar /= variable THEN nth(ppl, variable)
                                         ELSE map_with_index[real, real]
                                                  (LAMBDA (degree: nat, coefficient: real):
                                                     IF degree > dm(splitVar) THEN 0
                                                     ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                                           sigma[subrange(0, dm(splitVar) - degree)]
                                                               (0, dm(splitVar) - degree,
                                                                LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                                  C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                                     ENDIF)
                                                  (p)
                                         ENDIF"
                                                                             "ppl"
                                                                             "i")
                                                                            (("1"
                                                                              (reveal
                                                                               -10
                                                                               -13)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -3
                                                                                   -4
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (case
                                                                                     "splitVar /= i")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         -9)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil)))))
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "map_with_index__preserves_length[real,real]")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "LAMBDA (degree: nat, coefficient: real):
                                         IF degree > dm(splitVar) THEN 0
                                         ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                               sigma[subrange(0, dm(splitVar) - degree)]
                                                   (0, dm(splitVar) - degree,
                                                    LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                      C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                         ENDIF"
                                                                                           "nth(ppl,i)")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             -4
                                                                                             RL
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (reveal
                                                                                               -11)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil)))))
                                                                                           ("2"
                                                                                            (reveal
                                                                                             -21)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "i")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil)))))
                                                                                           ("3"
                                                                                            (reveal
                                                                                             -20)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -
                                                                                               "i")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil)))))
                                                                                           ("4"
                                                                                            (reveal
                                                                                             -19)
                                                                                            (("4"
                                                                                              (inst
                                                                                               -
                                                                                               "i")
                                                                                              (("4"
                                                                                                (assert)
                                                                                                nil)))))
                                                                                           ("5"
                                                                                            (reveal
                                                                                             -18)
                                                                                            (("5"
                                                                                              (inst
                                                                                               -
                                                                                               "i")
                                                                                              (("5"
                                                                                                (assert)
                                                                                                nil)))))))))))))))))))
                                                                             ("2"
                                                                              (assert)
                                                                              nil)
                                                                             ("3"
                                                                              (assert)
                                                                              nil)
                                                                             ("4"
                                                                              (assert)
                                                                              nil)
                                                                             ("5"
                                                                              (assert)
                                                                              nil)
                                                                             ("6"
                                                                              (assert)
                                                                              nil)
                                                                             ("7"
                                                                              (assert)
                                                                              nil)))))))))))))))))
                                                             ("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (typepred
                                                                 "ppl")
                                                                (("2"
                                                                  (hide -1)
                                                                  (("2"
                                                                    (expand
                                                                     "polyproduct__represents")
                                                                    (("2"
                                                                      (expand
                                                                       "represents")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "i")
                                                                            (("2"
                                                                              (expand
                                                                               "represents")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -3)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "a2l__Bern_split_right_mono")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "map_with_index__nth[PolynomialList,PolynomialList]")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "LAMBDA (variable: nat, p: PolynomialList):
                                     IF variable >= length(ppl) THEN null
                                     ELSIF splitVar /= variable THEN nth(ppl, variable)
                                     ELSE map_with_index[real, real]
                                              (LAMBDA (degree: nat, coefficient: real):
                                                 IF degree > dm(splitVar) THEN 0
                                                 ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                                       sigma[subrange(0, dm(splitVar) - degree)]
                                                           (0, dm(splitVar) - degree,
                                                            LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                              C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                                 ENDIF)
                                              (p)
                                     ENDIF"
                                                                                         "ppl"
                                                                                         "i")
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "i")
                                                                                          (("1"
                                                                                            (reveal
                                                                                             -12)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -3
                                                                                                 1
                                                                                                 :hide?
                                                                                                 t)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "splitVar/=i")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "map_with_index__preserves_length[real,real]")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "LAMBDA (degree: nat, coefficient: real):
                                    IF degree > dm(splitVar) THEN 0
                                    ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                          sigma[subrange(0, dm(splitVar) - degree)]
                                              (0, dm(splitVar) - degree,
                                               LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                 C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                    ENDIF"
                                                                                                         "nth(ppl,i)")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           2
                                                                                                           RL)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           -20)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "splitVar")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil)))))
                                                                                                         ("3"
                                                                                                          (reveal
                                                                                                           -19)
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "splitVar")
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              nil)))))
                                                                                                         ("4"
                                                                                                          (reveal
                                                                                                           -18)
                                                                                                          (("4"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "splitVar")
                                                                                                            (("4"
                                                                                                              (assert)
                                                                                                              nil)))))
                                                                                                         ("5"
                                                                                                          (reveal
                                                                                                           -17)
                                                                                                          (("5"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "splitVar")
                                                                                                            (("5"
                                                                                                              (assert)
                                                                                                              nil)))))))))))))))))))))
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil)
                                                                                         ("3"
                                                                                          (assert)
                                                                                          nil)
                                                                                         ("4"
                                                                                          (assert)
                                                                                          nil)
                                                                                         ("5"
                                                                                          (assert)
                                                                                          nil)
                                                                                         ("6"
                                                                                          (assert)
                                                                                          nil)
                                                                                         ("7"
                                                                                          (assert)
                                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                                 ("2"
                                                  (hide -1 -2 -4)
                                                  (("2"
                                                    (hide -1 -2)
                                                    (("2"
                                                      (expand
                                                       "a2l__Bern_split_right_mono")
                                                      (("2"
                                                        (lemma
                                                         "map_with_index__nth[PolynomialList,PolynomialList]")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "LAMBDA (variable: nat, p: PolynomialList):
                                    IF variable >= length(ppl) THEN null
                                    ELSIF splitVar /= variable THEN nth(ppl, variable)
                                    ELSE map_with_index[real, real]
                                             (LAMBDA (degree: nat, coefficient: real):
                                                IF degree > dm(splitVar) THEN 0
                                                ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                                      sigma[subrange(0, dm(splitVar) - degree)]
                                                          (0, dm(splitVar) - degree,
                                                           LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                             C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                                ENDIF)
                                             (p)
                                    ENDIF"
                                                           "ppl"
                                                           "i")
                                                          (("1"
                                                            (reveal -2 -9)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 1
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (case
                                                                   "splitVar/=i")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "map_with_index__preserves_length[real,real]")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "LAMBDA (degree: nat, coefficient: real):
                                    IF degree > dm(splitVar) THEN 0
                                    ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                          sigma[subrange(0, dm(splitVar) - degree)]
                                              (0, dm(splitVar) - degree,
                                               LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                 C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                    ENDIF"
                                                                         "nth(ppl,i)")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           2
                                                                           RL
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (propax)
                                                                            nil)))
                                                                         ("2"
                                                                          (reveal
                                                                           -17)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "splitVar")
                                                                            (("2"
                                                                              (assert)
                                                                              nil)))))
                                                                         ("3"
                                                                          (reveal
                                                                           -16)
                                                                          (("3"
                                                                            (inst
                                                                             -
                                                                             "splitVar")
                                                                            (("3"
                                                                              (assert)
                                                                              nil)))))
                                                                         ("4"
                                                                          (reveal
                                                                           -15)
                                                                          (("4"
                                                                            (inst
                                                                             -
                                                                             "splitVar")
                                                                            (("4"
                                                                              (assert)
                                                                              nil)))))
                                                                         ("5"
                                                                          (reveal
                                                                           -14)
                                                                          (("5"
                                                                            (inst
                                                                             -
                                                                             "splitVar")
                                                                            (("5"
                                                                              (assert)
                                                                              nil)))))))))))))))))))
                                                           ("2" (assert) nil)
                                                           ("3" (assert) nil)
                                                           ("4" (assert) nil)
                                                           ("5" (assert) nil)
                                                           ("6" (assert) nil)
                                                           ("7"
                                                            (assert)
                                                            nil)))))))))))
                                                 ("3" (propax) nil)))
                                               ("2"
                                                (skeep :preds? t)
                                                (("2"
                                                  (reveal -11)
                                                  (("2"
                                                    (expand
                                                     "polynomial__represents")
                                                    (("2"
                                                      (inst - "i")
                                                      (("2"
                                                        (expand "represents")
                                                        (("2"
                                                          (propax)
                                                          nil)))))))))))
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (skeep :preds? t)
                                                  (("3"
                                                    (expand
                                                     "a2l__Bern_split_right_mono")
                                                    (("3"
                                                      (lemma
                                                       "map_with_index__nth[PolynomialList,PolynomialList]")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         "LAMBDA (variable: nat, p: PolynomialList):
                                  IF variable >= length(ppl) THEN null
                                  ELSIF splitVar /= variable THEN nth(ppl, variable)
                                  ELSE map_with_index[real, real]
                                           (LAMBDA (degree: nat, coefficient: real):
                                              IF degree > dm(splitVar) THEN 0
                                              ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                                    sigma[subrange(0, dm(splitVar) - degree)]
                                                        (0, dm(splitVar) - degree,
                                                         LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                           C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                              ENDIF)
                                           (p)
                                  ENDIF"
                                                         "ppl"
                                                         "i")
                                                        (("1"
                                                          (reveal -4)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (case
                                                                 "splitVar/=i")
                                                                (("1"
                                                                  (assert)
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "map_with_index__preserves_length[real,real]")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "LAMBDA (degree: nat, coefficient: real):
                                 IF degree > dm(splitVar) THEN 0
                                 ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                       sigma[subrange(0, dm(splitVar) - degree)]
                                           (0, dm(splitVar) - degree,
                                            LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                              C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                 ENDIF"
                                                                       "nth(ppl,i)")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         2
                                                                         RL
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (assert)
                                                                          nil)))
                                                                       ("2"
                                                                        (reveal
                                                                         -12)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "splitVar")
                                                                          (("2"
                                                                            (assert)
                                                                            nil)))))
                                                                       ("3"
                                                                        (reveal
                                                                         -11)
                                                                        (("3"
                                                                          (inst
                                                                           -1
                                                                           "splitVar")
                                                                          (("3"
                                                                            (assert)
                                                                            nil)))))
                                                                       ("4"
                                                                        (reveal
                                                                         -10)
                                                                        (("4"
                                                                          (inst
                                                                           -1
                                                                           "splitVar")
                                                                          (("4"
                                                                            (assert)
                                                                            nil)))))
                                                                       ("5"
                                                                        (reveal
                                                                         -9)
                                                                        (("5"
                                                                          (inst
                                                                           -1
                                                                           "splitVar")
                                                                          (("5"
                                                                            (assert)
                                                                            nil)))))))))))))))))))
                                                         ("2" (assert) nil)
                                                         ("3" (assert) nil)
                                                         ("4" (assert) nil)
                                                         ("5" (assert) nil)
                                                         ("6" (assert) nil)
                                                         ("7"
                                                          (assert)
                                                          nil)))))))))))
                                               ("4"
                                                (hide 2)
                                                (("4"
                                                  (skeep :preds? t)
                                                  (("4"
                                                    (expand
                                                     "a2l__Bern_split_right_mono")
                                                    (("4"
                                                      (lemma
                                                       "map_with_index__preserves_length[PolynomialList,PolynomialList]")
                                                      (("4"
                                                        (inst
                                                         -
                                                         "LAMBDA (variable: nat, p: PolynomialList):
                             IF variable >= length(ppl) THEN null
                             ELSIF splitVar /= variable THEN nth(ppl, variable)
                             ELSE map_with_index[real, real]
                                      (LAMBDA (degree: nat, coefficient: real):
                                         IF degree > dm(splitVar) THEN 0
                                         ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                               sigma[subrange(0, dm(splitVar) - degree)]
                                                   (0, dm(splitVar) - degree,
                                                    LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                      C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                         ENDIF)
                                      (p)
                             ENDIF"
                                                         "ppl")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1
                                                           RL
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (reveal -5)
                                                            (("1"
                                                              (assert)
                                                              nil)))))
                                                         ("2" (assert) nil)
                                                         ("3" (assert) nil)
                                                         ("4" (assert) nil)
                                                         ("5" (assert) nil)
                                                         ("6" (assert) nil)
                                                         ("7"
                                                          (assert)
                                                          nil)))))))))))
                                               ("5"
                                                (assert)
                                                (("5"
                                                  (hide-all-but 1)
                                                  (("5"
                                                    (typepred "ppl")
                                                    (("5"
                                                      (hide -1)
                                                      (("5"
                                                        (expand
                                                         "polyproduct__represents")
                                                        (("5"
                                                          (expand
                                                           "represents")
                                                          (("5"
                                                            (flatten)
                                                            (("5"
                                                              (hide -1 -2)
                                                              (("5"
                                                                (skosimp*
                                                                 :preds?
                                                                 t)
                                                                (("5"
                                                                  (inst
                                                                   -
                                                                   "i!2")
                                                                  (("1"
                                                                    (expand
                                                                     "represents")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         -3
                                                                         -5)
                                                                        (("1"
                                                                          (typepred
                                                                           "maximum_degree(dm,nvars)")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "i!2")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "i")
                                                                              (("2"
                                                                                (postpone)
                                                                                nil)))))))))))))
                                                                   ("2"
                                                                    (postpone)
                                                                    nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))
             ("2" (postpone) nil) ("3" (postpone) nil) ("4" (postpone) nil)))
           ("2" (postpone) nil) ("3" (postpone) nil) ("4" (postpone) nil)
           ("5" (postpone) nil) ("6" (postpone) nil) ("7" (postpone) nil)
           ("8" (postpone) nil))))))))
    nil)
   nil nil)
  (a2l__Bern_split_right_mono__homomorphism-3 "" 3686925116
   ("" (skeep)
    (("" (expand "polyproduct__represents")
      (("" (expand "represents")
        ((""
          (case "   FORALL (variable: nat):
               NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
                (FORALL (degree: nat):
                   NOT degree > dm(splitVar) IMPLIES
                    (FORALL (k: subrange(0, dm(splitVar) - degree)): splitVar < length[list[Coefficient]](ppl)))"
            "FORALL (variable: nat):
           NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
            (FORALL (degree: nat):
               NOT degree > dm(splitVar) IMPLIES
                (FORALL (x: subrange(0, dm(splitVar) - degree), y: subrange(0, dm(splitVar) - degree)), (z: integer):
                   x <= z AND z <= y IMPLIES 0 <= z AND z <= dm(splitVar) - degree))"
            "FORALL (variable: nat):
           NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
            (FORALL (degree: nat):
               NOT degree > dm(splitVar) IMPLIES
                (FORALL (k: subrange(0, dm(splitVar) - degree)):
                   dm(splitVar) - k < length[Coefficient](nth[list[Coefficient]](ppl, splitVar))))"
            "FORALL (variable: nat):
           NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
            (FORALL (degree: nat):
               NOT degree > dm(splitVar) IMPLIES
                0 <= dm(splitVar) - degree OR (EXISTS (j: subrange(0, dm(splitVar) - degree)): dm(splitVar) - degree <= j))"
            "FORALL (variable: nat):
           NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
            (FORALL (degree: nat):
               NOT degree > dm(splitVar) IMPLIES
                0 <= dm(splitVar) - degree OR (EXISTS (j: subrange(0, dm(splitVar) - degree)): j <= 0))"
            "FORALL (variable: nat):
                   splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
                    variable < length[list[Coefficient]](ppl)")
          (("1"
            (case "FORALL (i: below(nvars)): polynomial__represents[terms,nvars,maximum_degree(dm,nvars)](nth(a2l__Bern_split_right_mono(ppl,dm)(splitVar),i),original.Bern_split_right_mono(pp,dm)(splitVar)(i))")
            (("1" (label "polynomiallists_represents_polynomial" -1)
              (("1" (hide -1)
                (("1" (split)
                  (("1" (expand "representationList?")
                    (("1" (skolem 1 "pl")
                      (("1" (flatten)
                        (("1" (expand "representation?")
                          (("1" (lemma "member_nth[PolynomialList]")
                            (("1"
                              (inst -1 "pl"
                               "a2l__Bern_split_right_mono(ppl, dm)(splitVar)")
                              (("1" (assert)
                                (("1" (skeep - :preds? t)
                                  (("1"
                                    (reveal
                                     "polynomiallists_represents_polynomial")
                                    (("1" (inst - "i")
                                      (("1"
                                        (expand "polynomial__represents")
                                        (("1"
                                          (inst
                                           1
                                           "original.Bern_split_right_mono(pp, dm)(splitVar)(i)")
                                          (("1"
                                            (replace -4 1 RL :hide? t)
                                            (("1" (propax) nil)))))))
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (hide -3 -4)
                                          (("2"
                                            (typepred "ppl")
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (expand
                                                 "polyproduct__represents")
                                                (("2"
                                                  (expand "represents")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide -1 -3)
                                                      (("2"
                                                        (expand
                                                         "a2l__Bern_split_right_mono")
                                                        (("2"
                                                          (lemma
                                                           "map_with_index__preserves_length[PolynomialList,PolynomialList]")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (variable: nat, p: PolynomialList):
                                 IF variable >= length(ppl) THEN null
                                 ELSIF splitVar /= variable THEN nth(ppl, variable)
                                 ELSE map_with_index[real, real]
                                          (LAMBDA (degree: nat, coefficient: real):
                                             IF degree > dm(splitVar) THEN 0
                                             ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                                   sigma[subrange(0, dm(splitVar) - degree)]
                                                       (0, dm(splitVar) - degree,
                                                        LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                          C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                             ENDIF)
                                          (p)
                                 ENDIF"
                                                             "ppl")
                                                            (("2"
                                                              (assert)
                                                              nil)))))))))))))))))))))))))))))))
                               ("2" (hide 2)
                                (("2" (hide -1)
                                  (("2" (expand "a2l__Bern_split_right_mono")
                                    (("2"
                                      (lemma
                                       "map_with_index__preserves_length[PolynomialList,PolynomialList]")
                                      (("2"
                                        (inst
                                         -
                                         "LAMBDA (variable: nat, p: PolynomialList):
                               IF variable >= length(ppl) THEN null
                               ELSIF splitVar /= variable THEN nth(ppl, variable)
                               ELSE map_with_index[real, real]
                                        (LAMBDA (degree: nat, coefficient: real):
                                           IF degree > dm(splitVar) THEN 0
                                           ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                                 sigma[subrange(0, dm(splitVar) - degree)]
                                                     (0, dm(splitVar) - degree,
                                                      LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                        C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                           ENDIF)
                                        (p)
                               ENDIF"
                                         "ppl")
                                        (("2"
                                          (replace -1 1 RL :hide? t)
                                          (("2"
                                            (typepred "ppl")
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (expand
                                                 "polyproduct__represents")
                                                (("2"
                                                  (expand "represents")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil)))))))))))))))))))))))))))))))))))
                   ("2" (expand "a2l__Bern_split_right_mono")
                    (("2"
                      (lemma
                       "map_with_index__preserves_length[PolynomialList,PolynomialList]")
                      (("2"
                        (inst - "LAMBDA (variable: nat, p: PolynomialList):
                             IF variable >= length(ppl) THEN null
                             ELSIF splitVar /= variable THEN nth(ppl, variable)
                             ELSE map_with_index[real, real]
                                      (LAMBDA (degree: nat, coefficient: real):
                                         IF degree > dm(splitVar) THEN 0
                                         ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                               sigma[subrange(0, dm(splitVar) - degree)]
                                                   (0, dm(splitVar) - degree,
                                                    LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                      C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                         ENDIF)
                                      (p)
                             ENDIF" "ppl")
                        (("2" (replace -1 1 RL :hide? t)
                          (("2" (typepred "ppl")
                            (("2" (hide -1)
                              (("2" (expand "polyproduct__represents")
                                (("2" (expand "represents")
                                  (("2" (flatten) nil)))))))))))))))))
                   ("3" (assert)
                    (("3" (hide -)
                      (("3" (skeep :preds? t)
                        (("3" (expand "represents")
                          (("3" (typepred "ppl")
                            (("3" (hide -1)
                              (("3" (expand "polyproduct__represents")
                                (("3" (expand "represents")
                                  (("3" (flatten)
                                    (("3" (hide -1 -2)
                                      (("3"
                                        (inst - "i")
                                        (("3"
                                          (expand "represents")
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (case
                                               "i < nvars IMPLIES FORALL (i_1: below(1 + maximum_degree(dm, nvars))):
                                     (nth(nth(a2l__Bern_split_right_mono(ppl, dm)(splitVar), i), i_1)
                                       = original.Bern_split_right_mono(pp, dm)(splitVar)(i)(i_1))")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (expand
                                                   "representationList?")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (expand
                                                       "representation?")
                                                      (("1"
                                                        (hide -3 -4 -5 -6)
                                                        (("1"
                                                          (lemma
                                                           "member_nth[Coefficient]")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "a"
                                                             " nth(a2l__Bern_split_right_mono(ppl, dm)(splitVar), i)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skeep
                                                                 -1
                                                                 :preds?
                                                                 t)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "i_1")
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     -5
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "original.Bern_split_right_mono(pp, dm)(splitVar)(i)(i_1)")
                                                                      nil)))
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-2 1))
                                                                      (("2"
                                                                        (expand
                                                                         "a2l__Bern_split_right_mono")
                                                                        (("2"
                                                                          (lemma
                                                                           "map_with_index__nth[PolynomialList,PolynomialList]")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "LAMBDA (variable: nat, p: PolynomialList):
                                         IF variable >= length(ppl) THEN null
                                         ELSIF splitVar /= variable THEN nth(ppl, variable)
                                         ELSE map_with_index[real, real]
                                                  (LAMBDA (degree: nat, coefficient: real):
                                                     IF degree > dm(splitVar) THEN 0
                                                     ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                                           sigma[subrange(0, dm(splitVar) - degree)]
                                                               (0, dm(splitVar) - degree,
                                                                LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                                  C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                                     ENDIF)
                                                  (p)
                                         ENDIF"
                                                                             "ppl"
                                                                             "i")
                                                                            (("1"
                                                                              (reveal
                                                                               -10
                                                                               -13)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -3
                                                                                   -4
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (case
                                                                                     "splitVar /= i")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         -9)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil)))))
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "map_with_index__preserves_length[real,real]")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "LAMBDA (degree: nat, coefficient: real):
                                         IF degree > dm(splitVar) THEN 0
                                         ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                               sigma[subrange(0, dm(splitVar) - degree)]
                                                   (0, dm(splitVar) - degree,
                                                    LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                      C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                         ENDIF"
                                                                                           "nth(ppl,i)")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             -4
                                                                                             RL
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (reveal
                                                                                               -11)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil)))))
                                                                                           ("2"
                                                                                            (reveal
                                                                                             -21)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "i")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil)))))
                                                                                           ("3"
                                                                                            (reveal
                                                                                             -20)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -
                                                                                               "i")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil)))))
                                                                                           ("4"
                                                                                            (reveal
                                                                                             -19)
                                                                                            (("4"
                                                                                              (inst
                                                                                               -
                                                                                               "i")
                                                                                              (("4"
                                                                                                (assert)
                                                                                                nil)))))
                                                                                           ("5"
                                                                                            (reveal
                                                                                             -18)
                                                                                            (("5"
                                                                                              (inst
                                                                                               -
                                                                                               "i")
                                                                                              (("5"
                                                                                                (assert)
                                                                                                nil)))))))))))))))))))
                                                                             ("2"
                                                                              (assert)
                                                                              nil)
                                                                             ("3"
                                                                              (assert)
                                                                              nil)
                                                                             ("4"
                                                                              (assert)
                                                                              nil)
                                                                             ("5"
                                                                              (assert)
                                                                              nil)
                                                                             ("6"
                                                                              (assert)
                                                                              nil)
                                                                             ("7"
                                                                              (assert)
                                                                              nil)))))))))))))))))
                                                             ("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (typepred
                                                                 "ppl")
                                                                (("2"
                                                                  (hide -1)
                                                                  (("2"
                                                                    (expand
                                                                     "polyproduct__represents")
                                                                    (("2"
                                                                      (expand
                                                                       "represents")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "i")
                                                                            (("2"
                                                                              (expand
                                                                               "represents")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -3)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "a2l__Bern_split_right_mono")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "map_with_index__nth[PolynomialList,PolynomialList]")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "LAMBDA (variable: nat, p: PolynomialList):
                                     IF variable >= length(ppl) THEN null
                                     ELSIF splitVar /= variable THEN nth(ppl, variable)
                                     ELSE map_with_index[real, real]
                                              (LAMBDA (degree: nat, coefficient: real):
                                                 IF degree > dm(splitVar) THEN 0
                                                 ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                                       sigma[subrange(0, dm(splitVar) - degree)]
                                                           (0, dm(splitVar) - degree,
                                                            LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                              C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                                 ENDIF)
                                              (p)
                                     ENDIF"
                                                                                         "ppl"
                                                                                         "i")
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "i")
                                                                                          (("1"
                                                                                            (reveal
                                                                                             -12)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -3
                                                                                                 1
                                                                                                 :hide?
                                                                                                 t)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "splitVar/=i")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "map_with_index__preserves_length[real,real]")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "LAMBDA (degree: nat, coefficient: real):
                                    IF degree > dm(splitVar) THEN 0
                                    ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                          sigma[subrange(0, dm(splitVar) - degree)]
                                              (0, dm(splitVar) - degree,
                                               LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                 C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                    ENDIF"
                                                                                                         "nth(ppl,i)")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           2
                                                                                                           RL)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           -20)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "splitVar")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil)))))
                                                                                                         ("3"
                                                                                                          (reveal
                                                                                                           -19)
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "splitVar")
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              nil)))))
                                                                                                         ("4"
                                                                                                          (reveal
                                                                                                           -18)
                                                                                                          (("4"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "splitVar")
                                                                                                            (("4"
                                                                                                              (assert)
                                                                                                              nil)))))
                                                                                                         ("5"
                                                                                                          (reveal
                                                                                                           -17)
                                                                                                          (("5"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "splitVar")
                                                                                                            (("5"
                                                                                                              (assert)
                                                                                                              nil)))))))))))))))))))))
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil)
                                                                                         ("3"
                                                                                          (assert)
                                                                                          nil)
                                                                                         ("4"
                                                                                          (assert)
                                                                                          nil)
                                                                                         ("5"
                                                                                          (assert)
                                                                                          nil)
                                                                                         ("6"
                                                                                          (assert)
                                                                                          nil)
                                                                                         ("7"
                                                                                          (assert)
                                                                                          nil)))))))))))))))))))))))))))))))))))))))))
                                                 ("2"
                                                  (hide -1 -2 -4)
                                                  (("2"
                                                    (hide -1 -2)
                                                    (("2"
                                                      (expand
                                                       "a2l__Bern_split_right_mono")
                                                      (("2"
                                                        (lemma
                                                         "map_with_index__nth[PolynomialList,PolynomialList]")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "LAMBDA (variable: nat, p: PolynomialList):
                                    IF variable >= length(ppl) THEN null
                                    ELSIF splitVar /= variable THEN nth(ppl, variable)
                                    ELSE map_with_index[real, real]
                                             (LAMBDA (degree: nat, coefficient: real):
                                                IF degree > dm(splitVar) THEN 0
                                                ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                                      sigma[subrange(0, dm(splitVar) - degree)]
                                                          (0, dm(splitVar) - degree,
                                                           LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                             C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                                ENDIF)
                                             (p)
                                    ENDIF"
                                                           "ppl"
                                                           "i")
                                                          (("1"
                                                            (reveal -2 -9)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 1
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (case
                                                                   "splitVar/=i")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "map_with_index__preserves_length[real,real]")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "LAMBDA (degree: nat, coefficient: real):
                                    IF degree > dm(splitVar) THEN 0
                                    ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                          sigma[subrange(0, dm(splitVar) - degree)]
                                              (0, dm(splitVar) - degree,
                                               LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                 C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                    ENDIF"
                                                                         "nth(ppl,i)")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           2
                                                                           RL
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (propax)
                                                                            nil)))
                                                                         ("2"
                                                                          (reveal
                                                                           -17)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "splitVar")
                                                                            (("2"
                                                                              (assert)
                                                                              nil)))))
                                                                         ("3"
                                                                          (reveal
                                                                           -16)
                                                                          (("3"
                                                                            (inst
                                                                             -
                                                                             "splitVar")
                                                                            (("3"
                                                                              (assert)
                                                                              nil)))))
                                                                         ("4"
                                                                          (reveal
                                                                           -15)
                                                                          (("4"
                                                                            (inst
                                                                             -
                                                                             "splitVar")
                                                                            (("4"
                                                                              (assert)
                                                                              nil)))))
                                                                         ("5"
                                                                          (reveal
                                                                           -14)
                                                                          (("5"
                                                                            (inst
                                                                             -
                                                                             "splitVar")
                                                                            (("5"
                                                                              (assert)
                                                                              nil)))))))))))))))))))
                                                           ("2" (assert) nil)
                                                           ("3" (assert) nil)
                                                           ("4" (assert) nil)
                                                           ("5" (assert) nil)
                                                           ("6" (assert) nil)
                                                           ("7"
                                                            (assert)
                                                            nil)))))))))))
                                                 ("3" (propax) nil)))
                                               ("2"
                                                (skeep :preds? t)
                                                (("2"
                                                  (reveal -11)
                                                  (("2"
                                                    (expand
                                                     "polynomial__represents")
                                                    (("2"
                                                      (inst - "i")
                                                      (("2"
                                                        (expand "represents")
                                                        (("2"
                                                          (propax)
                                                          nil)))))))))))
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (skeep :preds? t)
                                                  (("3"
                                                    (expand
                                                     "a2l__Bern_split_right_mono")
                                                    (("3"
                                                      (lemma
                                                       "map_with_index__nth[PolynomialList,PolynomialList]")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         "LAMBDA (variable: nat, p: PolynomialList):
                                  IF variable >= length(ppl) THEN null
                                  ELSIF splitVar /= variable THEN nth(ppl, variable)
                                  ELSE map_with_index[real, real]
                                           (LAMBDA (degree: nat, coefficient: real):
                                              IF degree > dm(splitVar) THEN 0
                                              ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                                    sigma[subrange(0, dm(splitVar) - degree)]
                                                        (0, dm(splitVar) - degree,
                                                         LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                           C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                              ENDIF)
                                           (p)
                                  ENDIF"
                                                         "ppl"
                                                         "i")
                                                        (("1"
                                                          (reveal -4)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (case
                                                                 "splitVar/=i")
                                                                (("1"
                                                                  (assert)
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "map_with_index__preserves_length[real,real]")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "LAMBDA (degree: nat, coefficient: real):
                                 IF degree > dm(splitVar) THEN 0
                                 ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                       sigma[subrange(0, dm(splitVar) - degree)]
                                           (0, dm(splitVar) - degree,
                                            LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                              C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                 ENDIF"
                                                                       "nth(ppl,i)")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         2
                                                                         RL
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (assert)
                                                                          nil)))
                                                                       ("2"
                                                                        (reveal
                                                                         -12)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "splitVar")
                                                                          (("2"
                                                                            (assert)
                                                                            nil)))))
                                                                       ("3"
                                                                        (reveal
                                                                         -11)
                                                                        (("3"
                                                                          (inst
                                                                           -1
                                                                           "splitVar")
                                                                          (("3"
                                                                            (assert)
                                                                            nil)))))
                                                                       ("4"
                                                                        (reveal
                                                                         -10)
                                                                        (("4"
                                                                          (inst
                                                                           -1
                                                                           "splitVar")
                                                                          (("4"
                                                                            (assert)
                                                                            nil)))))
                                                                       ("5"
                                                                        (reveal
                                                                         -9)
                                                                        (("5"
                                                                          (inst
                                                                           -1
                                                                           "splitVar")
                                                                          (("5"
                                                                            (assert)
                                                                            nil)))))))))))))))))))
                                                         ("2" (assert) nil)
                                                         ("3" (assert) nil)
                                                         ("4" (assert) nil)
                                                         ("5" (assert) nil)
                                                         ("6" (assert) nil)
                                                         ("7"
                                                          (assert)
                                                          nil)))))))))))
                                               ("4"
                                                (hide 2)
                                                (("4"
                                                  (skeep :preds? t)
                                                  (("4"
                                                    (expand
                                                     "a2l__Bern_split_right_mono")
                                                    (("4"
                                                      (lemma
                                                       "map_with_index__preserves_length[PolynomialList,PolynomialList]")
                                                      (("4"
                                                        (inst
                                                         -
                                                         "LAMBDA (variable: nat, p: PolynomialList):
                             IF variable >= length(ppl) THEN null
                             ELSIF splitVar /= variable THEN nth(ppl, variable)
                             ELSE map_with_index[real, real]
                                      (LAMBDA (degree: nat, coefficient: real):
                                         IF degree > dm(splitVar) THEN 0
                                         ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                               sigma[subrange(0, dm(splitVar) - degree)]
                                                   (0, dm(splitVar) - degree,
                                                    LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                      C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                         ENDIF)
                                      (p)
                             ENDIF"
                                                         "ppl")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1
                                                           RL
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (reveal -5)
                                                            (("1"
                                                              (assert)
                                                              nil)))))
                                                         ("2" (assert) nil)
                                                         ("3" (assert) nil)
                                                         ("4" (assert) nil)
                                                         ("5" (assert) nil)
                                                         ("6" (assert) nil)
                                                         ("7"
                                                          (assert)
                                                          nil)))))))))))
                                               ("5"
                                                (assert)
                                                (("5"
                                                  (hide-all-but 1)
                                                  (("5"
                                                    (typepred "ppl")
                                                    (("5"
                                                      (hide -1)
                                                      (("5"
                                                        (expand
                                                         "polyproduct__represents")
                                                        (("5"
                                                          (expand
                                                           "represents")
                                                          (("5"
                                                            (flatten)
                                                            (("5"
                                                              (hide -1 -2)
                                                              (("5"
                                                                (skosimp*
                                                                 :preds?
                                                                 t)
                                                                (("5"
                                                                  (inst
                                                                   -
                                                                   "i!2")
                                                                  (("1"
                                                                    (expand
                                                                     "represents")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         -3
                                                                         -5)
                                                                        (("1"
                                                                          (typepred
                                                                           "maximum_degree(dm,nvars)")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "i!2")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "i")
                                                                              (("2"
                                                                                (postpone)
                                                                                nil)))))))))))))
                                                                   ("2"
                                                                    (postpone)
                                                                    nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))
             ("2" (postpone) nil) ("3" (postpone) nil) ("4" (postpone) nil)))
           ("2" (postpone) nil) ("3" (postpone) nil) ("4" (postpone) nil)
           ("5" (postpone) nil) ("6" (postpone) nil) ("7" (postpone) nil)
           ("8" (postpone) nil))))))))
    nil)
   nil nil)
  (a2l__Bern_split_right_mono__homomorphism-2 "" 3686925106
   ("" (skeep)
    (("" (expand "polyproduct__represents")
      (("" (expand "represents")
        ((""
          (case "
   FORALL (variable: nat):
        NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
         (FORALL (degree: nat):
            NOT degree > dm(splitVar) IMPLIES
             (FORALL (k: subrange(0, dm(splitVar) - degree)): splitVar < length[list[Coefficient]](ppl)))"
            "FORALL (variable: nat):
        NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
         (FORALL (degree: nat):
            NOT degree > dm(splitVar) IMPLIES
             (FORALL (x: subrange(0, dm(splitVar) - degree), y: subrange(0, dm(splitVar) - degree)), (z: integer):
                x <= z AND z <= y IMPLIES 0 <= z AND z <= dm(splitVar) - degree))"
            "FORALL (variable: nat):
        NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
         (FORALL (degree: nat):
            NOT degree > dm(splitVar) IMPLIES
             (FORALL (k: subrange(0, dm(splitVar) - degree)):
                dm(splitVar) - k < length[Coefficient](nth[list[Coefficient]](ppl, splitVar))))"
            "FORALL (variable: nat):
        NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
         (FORALL (degree: nat):
            NOT degree > dm(splitVar) IMPLIES
             0 <= dm(splitVar) - degree OR (EXISTS (j: subrange(0, dm(splitVar) - degree)): dm(splitVar) - degree <= j))"
            "FORALL (variable: nat):
        NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
         (FORALL (degree: nat):
            NOT degree > dm(splitVar) IMPLIES
             0 <= dm(splitVar) - degree OR (EXISTS (j: subrange(0, dm(splitVar) - degree)): j <= 0))"
            "FORALL (variable: nat):
                splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
                 variable < length[list[Coefficient]](ppl)")
          (("1"
            (case "FORALL (i: below(nvars)): polynomial__represents[terms,nvars,maximum_degree(dm,nvars)](nth(a2l__Bern_split_right_mono(ppl,dm)(splitVar),i),original.Bern_split_right_mono(pp,dm)(splitVar)(i))")
            (("1" (label "polynomiallists_represents_polynomial" -1)
              (("1" (hide -1)
                (("1" (split)
                  (("1" (expand "representationList?")
                    (("1" (skolem 1 "pl")
                      (("1" (flatten)
                        (("1" (expand "representation?")
                          (("1" (lemma "member_nth[PolynomialList]")
                            (("1"
                              (inst -1 "pl"
                               "a2l__Bern_split_right_mono(ppl, dm)(splitVar)")
                              (("1" (assert)
                                (("1" (skeep - :preds? t)
                                  (("1"
                                    (reveal
                                     "polynomiallists_represents_polynomial")
                                    (("1" (inst - "i")
                                      (("1"
                                        (expand "polynomial__represents")
                                        (("1"
                                          (inst
                                           1
                                           "original.Bern_split_right_mono(pp, dm)(splitVar)(i)")
                                          (("1"
                                            (replace -4 1 RL :hide? t)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (hide -3 -4)
                                          (("2"
                                            (typepred "ppl")
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (expand
                                                 "polyproduct__represents")
                                                (("2"
                                                  (expand "represents")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide -1 -3)
                                                      (("2"
                                                        (expand
                                                         "a2l__Bern_split_right_mono")
                                                        (("2"
                                                          (lemma
                                                           "map_with_index__preserves_length[PolynomialList,PolynomialList]")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (variable: nat, p: PolynomialList):
                     IF variable >= length(ppl) THEN null
                     ELSIF splitVar /= variable THEN nth(ppl, variable)
                     ELSE map_with_index[real, real]
                              (LAMBDA (degree: nat, coefficient: real):
                                 IF degree > dm(splitVar) THEN 0
                                 ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                       sigma[subrange(0, dm(splitVar) - degree)]
                                           (0, dm(splitVar) - degree,
                                            LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                              C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                 ENDIF)
                              (p)
                     ENDIF"
                                                             "ppl")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (hide -1)
                                  (("2" (expand "a2l__Bern_split_right_mono")
                                    (("2"
                                      (lemma
                                       "map_with_index__preserves_length[PolynomialList,PolynomialList]")
                                      (("2"
                                        (inst
                                         -
                                         "LAMBDA (variable: nat, p: PolynomialList):
                     IF variable >= length(ppl) THEN null
                     ELSIF splitVar /= variable THEN nth(ppl, variable)
                     ELSE map_with_index[real, real]
                              (LAMBDA (degree: nat, coefficient: real):
                                 IF degree > dm(splitVar) THEN 0
                                 ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                       sigma[subrange(0, dm(splitVar) - degree)]
                                           (0, dm(splitVar) - degree,
                                            LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                              C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                 ENDIF)
                              (p)
                     ENDIF"
                                         "ppl")
                                        (("2"
                                          (replace -1 1 RL :hide? t)
                                          (("2"
                                            (typepred "ppl")
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (expand
                                                 "polyproduct__represents")
                                                (("2"
                                                  (expand "represents")
                                                  (("2"
                                                    (flatten)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "a2l__Bern_split_right_mono")
                    (("2"
                      (lemma
                       "map_with_index__preserves_length[PolynomialList,PolynomialList]")
                      (("2"
                        (inst - "LAMBDA (variable: nat, p: PolynomialList):
                     IF variable >= length(ppl) THEN null
                     ELSIF splitVar /= variable THEN nth(ppl, variable)
                     ELSE map_with_index[real, real]
                              (LAMBDA (degree: nat, coefficient: real):
                                 IF degree > dm(splitVar) THEN 0
                                 ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                       sigma[subrange(0, dm(splitVar) - degree)]
                                           (0, dm(splitVar) - degree,
                                            LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                              C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                 ENDIF)
                              (p)
                     ENDIF" "ppl")
                        (("2" (replace -1 1 RL :hide? t)
                          (("2" (typepred "ppl")
                            (("2" (hide -1)
                              (("2" (expand "polyproduct__represents")
                                (("2" (expand "represents")
                                  (("2" (flatten) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (hide -)
                      (("3" (skeep :preds? t)
                        (("3" (expand "represents")
                          (("3" (typepred "ppl")
                            (("3" (hide -1)
                              (("3" (expand "polyproduct__represents")
                                (("3" (expand "represents")
                                  (("3" (flatten)
                                    (("3" (hide -1 -2)
                                      (("3"
                                        (inst - "i")
                                        (("3"
                                          (expand "represents")
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (case
                                               "FORALL (i_1: below(1 + maximum_degree(dm, nvars))):
                        (nth(nth(a2l__Bern_split_right_mono(ppl, dm)(splitVar), i), i_1)
                          = original.Bern_split_right_mono(pp, dm)(splitVar)(i)(i_1))")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (expand
                                                   "representationList?")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (expand
                                                       "representation?")
                                                      (("1"
                                                        (hide -3 -4 -5 -6)
                                                        (("1"
                                                          (lemma
                                                           "member_nth[Coefficient]")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "a"
                                                             " nth(a2l__Bern_split_right_mono(ppl, dm)(splitVar), i)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skeep
                                                                 -1
                                                                 :preds?
                                                                 t)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "i_1")
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     -5
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "original.Bern_split_right_mono(pp, dm)(splitVar)(i)(i_1)")
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-2 1))
                                                                      (("2"
                                                                        (expand
                                                                         "a2l__Bern_split_right_mono")
                                                                        (("2"
                                                                          (lemma
                                                                           "map_with_index__nth[PolynomialList,PolynomialList]")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "LAMBDA (variable: nat, p: PolynomialList):
                         IF variable >= length(ppl) THEN null
                         ELSIF splitVar /= variable THEN nth(ppl, variable)
                         ELSE map_with_index[real, real]
                                  (LAMBDA (degree: nat, coefficient: real):
                                     IF degree > dm(splitVar) THEN 0
                                     ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                           sigma[subrange(0, dm(splitVar) - degree)]
                                               (0, dm(splitVar) - degree,
                                                LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                  C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                     ENDIF)
                                  (p)
                         ENDIF"
                                                                             "ppl"
                                                                             "i")
                                                                            (("1"
                                                                              (reveal
                                                                               -10
                                                                               -13)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -3
                                                                                   -4
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (case
                                                                                     "splitVar /= i")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         -9)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "map_with_index__preserves_length[real,real]")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "LAMBDA (degree: nat, coefficient: real):
                     IF degree > dm(splitVar) THEN 0
                     ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                           sigma[subrange(0, dm(splitVar) - degree)]
                               (0, dm(splitVar) - degree,
                                LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                  C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                     ENDIF"
                                                                                           "nth(ppl,i)")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             -4
                                                                                             RL
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (reveal
                                                                                               -11)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (reveal
                                                                                             -21)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "i")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (reveal
                                                                                             -20)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -
                                                                                               "i")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (reveal
                                                                                             -19)
                                                                                            (("4"
                                                                                              (inst
                                                                                               -
                                                                                               "i")
                                                                                              (("4"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("5"
                                                                                            (reveal
                                                                                             -18)
                                                                                            (("5"
                                                                                              (inst
                                                                                               -
                                                                                               "i")
                                                                                              (("5"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("4"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("5"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("6"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("7"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (typepred
                                                                 "ppl")
                                                                (("2"
                                                                  (hide -1)
                                                                  (("2"
                                                                    (expand
                                                                     "polyproduct__represents")
                                                                    (("2"
                                                                      (expand
                                                                       "represents")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "i")
                                                                            (("2"
                                                                              (expand
                                                                               "represents")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -3)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "a2l__Bern_split_right_mono")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "map_with_index__nth[PolynomialList,PolynomialList]")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "LAMBDA (variable: nat, p: PolynomialList):
                       IF variable >= length(ppl) THEN null
                       ELSIF splitVar /= variable THEN nth(ppl, variable)
                       ELSE map_with_index[real, real]
                                (LAMBDA (degree: nat, coefficient: real):
                                   IF degree > dm(splitVar) THEN 0
                                   ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                         sigma[subrange(0, dm(splitVar) - degree)]
                                             (0, dm(splitVar) - degree,
                                              LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                   ENDIF)
                                (p)
                       ENDIF"
                                                                                         "ppl"
                                                                                         "i")
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "i")
                                                                                          (("1"
                                                                                            (reveal
                                                                                             -12)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -3
                                                                                                 1
                                                                                                 :hide?
                                                                                                 t)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "splitVar/=i")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "map_with_index__preserves_length[real,real]")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "LAMBDA (degree: nat, coefficient: real):
                  IF degree > dm(splitVar) THEN 0
                  ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                        sigma[subrange(0, dm(splitVar) - degree)]
                            (0, dm(splitVar) - degree,
                             LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                               C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                  ENDIF"
                                                                                                         "nth(ppl,i)")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           2
                                                                                                           RL)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           -20)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "splitVar")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (reveal
                                                                                                           -19)
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "splitVar")
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("4"
                                                                                                          (reveal
                                                                                                           -18)
                                                                                                          (("4"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "splitVar")
                                                                                                            (("4"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("5"
                                                                                                          (reveal
                                                                                                           -17)
                                                                                                          (("5"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "splitVar")
                                                                                                            (("5"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("4"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("5"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("6"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("7"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 -2 -4)
                                                  (("2"
                                                    (hide -1 -2)
                                                    (("2"
                                                      (expand
                                                       "a2l__Bern_split_right_mono")
                                                      (("2"
                                                        (lemma
                                                         "map_with_index__nth[PolynomialList,PolynomialList]")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "LAMBDA (variable: nat, p: PolynomialList):
                        IF variable >= length(ppl) THEN null
                        ELSIF splitVar /= variable THEN nth(ppl, variable)
                        ELSE map_with_index[real, real]
                                 (LAMBDA (degree: nat, coefficient: real):
                                    IF degree > dm(splitVar) THEN 0
                                    ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                          sigma[subrange(0, dm(splitVar) - degree)]
                                              (0, dm(splitVar) - degree,
                                               LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                 C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                    ENDIF)
                                 (p)
                        ENDIF"
                                                           "ppl"
                                                           "i")
                                                          (("1"
                                                            (reveal -2 -9)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 1
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (case
                                                                   "splitVar/=i")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "map_with_index__preserves_length[real,real]")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "LAMBDA (degree: nat, coefficient: real):
                    IF degree > dm(splitVar) THEN 0
                    ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                          sigma[subrange(0, dm(splitVar) - degree)]
                              (0, dm(splitVar) - degree,
                               LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                 C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                    ENDIF"
                                                                         "nth(ppl,i)")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           2
                                                                           RL
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (reveal
                                                                           -17)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "splitVar")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (reveal
                                                                           -16)
                                                                          (("3"
                                                                            (inst
                                                                             -
                                                                             "splitVar")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (reveal
                                                                           -15)
                                                                          (("4"
                                                                            (inst
                                                                             -
                                                                             "splitVar")
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("5"
                                                                          (reveal
                                                                           -14)
                                                                          (("5"
                                                                            (inst
                                                                             -
                                                                             "splitVar")
                                                                            (("5"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("5"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("6"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("7"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3" (propax) nil nil))
                                                nil)
                                               ("2"
                                                (skeep :preds? t)
                                                (("2"
                                                  (reveal -11)
                                                  (("2"
                                                    (expand
                                                     "polynomial__represents")
                                                    (("2"
                                                      (inst - "i")
                                                      (("2"
                                                        (expand "represents")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (skeep :preds? t)
                                                  (("3"
                                                    (expand
                                                     "a2l__Bern_split_right_mono")
                                                    (("3"
                                                      (lemma
                                                       "map_with_index__nth[PolynomialList,PolynomialList]")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         "LAMBDA (variable: nat, p: PolynomialList):
                        IF variable >= length(ppl) THEN null
                        ELSIF splitVar /= variable THEN nth(ppl, variable)
                        ELSE map_with_index[real, real]
                                 (LAMBDA (degree: nat, coefficient: real):
                                    IF degree > dm(splitVar) THEN 0
                                    ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                          sigma[subrange(0, dm(splitVar) - degree)]
                                              (0, dm(splitVar) - degree,
                                               LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                 C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                    ENDIF)
                                 (p)
                        ENDIF"
                                                         "ppl"
                                                         "i")
                                                        (("1"
                                                          (reveal -4)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (case
                                                                 "splitVar/=i")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "map_with_index__preserves_length[real,real]")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "LAMBDA (degree: nat, coefficient: real):
                   IF degree > dm(splitVar) THEN 0
                   ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                         sigma[subrange(0, dm(splitVar) - degree)]
                             (0, dm(splitVar) - degree,
                              LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                   ENDIF"
                                                                       "nth(ppl,i)")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         2
                                                                         RL
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (reveal
                                                                         -12)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "splitVar")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (reveal
                                                                         -11)
                                                                        (("3"
                                                                          (inst
                                                                           -1
                                                                           "splitVar")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (reveal
                                                                         -10)
                                                                        (("4"
                                                                          (inst
                                                                           -1
                                                                           "splitVar")
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (reveal
                                                                         -9)
                                                                        (("5"
                                                                          (inst
                                                                           -1
                                                                           "splitVar")
                                                                          (("5"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("4"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("5"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("6"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("7"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (hide 2)
                                                (("4"
                                                  (skeep :preds? t)
                                                  (("4"
                                                    (expand
                                                     "a2l__Bern_split_right_mono")
                                                    (("4"
                                                      (lemma
                                                       "map_with_index__preserves_length[PolynomialList,PolynomialList]")
                                                      (("4"
                                                        (inst
                                                         -
                                                         "LAMBDA (variable: nat, p: PolynomialList):
                   IF variable >= length(ppl) THEN null
                   ELSIF splitVar /= variable THEN nth(ppl, variable)
                   ELSE map_with_index[real, real]
                            (LAMBDA (degree: nat, coefficient: real):
                               IF degree > dm(splitVar) THEN 0
                               ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                     sigma[subrange(0, dm(splitVar) - degree)]
                                         (0, dm(splitVar) - degree,
                                          LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                            C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                               ENDIF)
                            (p)
                   ENDIF"
                                                         "ppl")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1
                                                           RL
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (reveal -5)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("4"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("5"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("6"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("7"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("5"
                                                (hide 2)
                                                (("5" (postpone) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil)
             ("4" (postpone) nil nil))
            nil)
           ("2" (postpone) nil nil) ("3" (postpone) nil nil)
           ("4" (postpone) nil nil) ("5" (postpone) nil nil)
           ("6" (postpone) nil nil) ("7" (postpone) nil nil)
           ("8" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (a2l__Bern_split_right_mono__homomorphism-1 nil 3686666771
   ("" (skeep)
    (("" (expand "polyproduct__represents")
      (("" (expand "represents")
        ((""
          (case "
   FORALL (variable: nat):
        NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
         (FORALL (degree: nat):
            NOT degree > dm(splitVar) IMPLIES
             (FORALL (k: subrange(0, dm(splitVar) - degree)): splitVar < length[list[Coefficient]](ppl)))"
            "FORALL (variable: nat):
        NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
         (FORALL (degree: nat):
            NOT degree > dm(splitVar) IMPLIES
             (FORALL (x: subrange(0, dm(splitVar) - degree), y: subrange(0, dm(splitVar) - degree)), (z: integer):
                x <= z AND z <= y IMPLIES 0 <= z AND z <= dm(splitVar) - degree))"
            "FORALL (variable: nat):
        NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
         (FORALL (degree: nat):
            NOT degree > dm(splitVar) IMPLIES
             (FORALL (k: subrange(0, dm(splitVar) - degree)):
                dm(splitVar) - k < length[Coefficient](nth[list[Coefficient]](ppl, splitVar))))"
            "FORALL (variable: nat):
        NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
         (FORALL (degree: nat):
            NOT degree > dm(splitVar) IMPLIES
             0 <= dm(splitVar) - degree OR (EXISTS (j: subrange(0, dm(splitVar) - degree)): dm(splitVar) - degree <= j))"
            "FORALL (variable: nat):
        NOT splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
         (FORALL (degree: nat):
            NOT degree > dm(splitVar) IMPLIES
             0 <= dm(splitVar) - degree OR (EXISTS (j: subrange(0, dm(splitVar) - degree)): j <= 0))"
            "FORALL (variable: nat):
                splitVar /= variable AND NOT variable >= length(ppl) IMPLIES
                 variable < length[list[Coefficient]](ppl)")
          (("1"
            (case "FORALL (i: below(nvars)): polynomial__represents[terms,nvars,maximum_degree(dm,nvars)](nth(a2l__Bern_split_right_mono(ppl,dm)(splitVar),i),original.Bern_split_right_mono(pp,dm)(splitVar)(i))")
            (("1" (label "polynomiallists_represents_polynomial" -1)
              (("1" (hide -1)
                (("1" (split)
                  (("1" (expand "representationList?")
                    (("1" (skolem 1 "pl")
                      (("1" (flatten)
                        (("1" (expand "representation?")
                          (("1" (lemma "member_nth[PolynomialList]")
                            (("1"
                              (inst -1 "pl"
                               "a2l__Bern_split_right_mono(ppl, dm)(splitVar)")
                              (("1" (assert)
                                (("1" (skeep - :preds? t)
                                  (("1"
                                    (reveal
                                     "polynomiallists_represents_polynomial")
                                    (("1" (inst - "i")
                                      (("1"
                                        (expand "polynomial__represents")
                                        (("1"
                                          (inst
                                           1
                                           "original.Bern_split_right_mono(pp, dm)(splitVar)(i)")
                                          (("1"
                                            (replace -4 1 RL :hide? t)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (hide -3 -4)
                                          (("2"
                                            (typepred "ppl")
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (expand
                                                 "polyproduct__represents")
                                                (("2"
                                                  (expand "represents")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide -1 -3)
                                                      (("2"
                                                        (expand
                                                         "a2l__Bern_split_right_mono")
                                                        (("2"
                                                          (lemma
                                                           "map_with_index__preserves_length[PolynomialList,PolynomialList]")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "LAMBDA (variable: nat, p: PolynomialList):
                     IF variable >= length(ppl) THEN null
                     ELSIF splitVar /= variable THEN nth(ppl, variable)
                     ELSE map_with_index[real, real]
                              (LAMBDA (degree: nat, coefficient: real):
                                 IF degree > dm(splitVar) THEN 0
                                 ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                       sigma[subrange(0, dm(splitVar) - degree)]
                                           (0, dm(splitVar) - degree,
                                            LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                              C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                 ENDIF)
                              (p)
                     ENDIF"
                                                             "ppl")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (hide -1)
                                  (("2" (expand "a2l__Bern_split_right_mono")
                                    (("2"
                                      (lemma
                                       "map_with_index__preserves_length[PolynomialList,PolynomialList]")
                                      (("2"
                                        (inst
                                         -
                                         "LAMBDA (variable: nat, p: PolynomialList):
                     IF variable >= length(ppl) THEN null
                     ELSIF splitVar /= variable THEN nth(ppl, variable)
                     ELSE map_with_index[real, real]
                              (LAMBDA (degree: nat, coefficient: real):
                                 IF degree > dm(splitVar) THEN 0
                                 ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                       sigma[subrange(0, dm(splitVar) - degree)]
                                           (0, dm(splitVar) - degree,
                                            LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                              C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                 ENDIF)
                              (p)
                     ENDIF"
                                         "ppl")
                                        (("2"
                                          (replace -1 1 RL :hide? t)
                                          (("2"
                                            (typepred "ppl")
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (expand
                                                 "polyproduct__represents")
                                                (("2"
                                                  (expand "represents")
                                                  (("2"
                                                    (flatten)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "a2l__Bern_split_right_mono")
                    (("2"
                      (lemma
                       "map_with_index__preserves_length[PolynomialList,PolynomialList]")
                      (("2"
                        (inst - "LAMBDA (variable: nat, p: PolynomialList):
                     IF variable >= length(ppl) THEN null
                     ELSIF splitVar /= variable THEN nth(ppl, variable)
                     ELSE map_with_index[real, real]
                              (LAMBDA (degree: nat, coefficient: real):
                                 IF degree > dm(splitVar) THEN 0
                                 ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                       sigma[subrange(0, dm(splitVar) - degree)]
                                           (0, dm(splitVar) - degree,
                                            LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                              C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                 ENDIF)
                              (p)
                     ENDIF" "ppl")
                        (("2" (replace -1 1 RL :hide? t)
                          (("2" (typepred "ppl")
                            (("2" (hide -1)
                              (("2" (expand "polyproduct__represents")
                                (("2" (expand "represents")
                                  (("2" (flatten) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (hide -)
                      (("3" (skeep :preds? t)
                        (("3" (expand "represents")
                          (("3" (typepred "ppl")
                            (("3" (hide -1)
                              (("3" (expand "polyproduct__represents")
                                (("3" (expand "represents")
                                  (("3" (flatten)
                                    (("3" (hide -1 -2)
                                      (("3"
                                        (inst - "i")
                                        (("3"
                                          (expand "represents")
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (case
                                               "FORALL (i_1: below(1 + maximum_degree(dm, nvars))):
                        (nth(nth(a2l__Bern_split_right_mono(ppl, dm)(splitVar), i), i_1)
                          = original.Bern_split_right_mono(pp, dm)(splitVar)(i)(i_1))")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (expand
                                                   "representationList?")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (expand
                                                       "representation?")
                                                      (("1"
                                                        (hide -3 -4 -5 -6)
                                                        (("1"
                                                          (lemma
                                                           "member_nth[Coefficient]")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "a"
                                                             " nth(a2l__Bern_split_right_mono(ppl, dm)(splitVar), i)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skeep
                                                                 -1
                                                                 :preds?
                                                                 t)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "i_1")
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     -5
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "original.Bern_split_right_mono(pp, dm)(splitVar)(i)(i_1)")
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-2 1))
                                                                      (("2"
                                                                        (expand
                                                                         "a2l__Bern_split_right_mono")
                                                                        (("2"
                                                                          (lemma
                                                                           "map_with_index__nth[PolynomialList,PolynomialList]")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "LAMBDA (variable: nat, p: PolynomialList):
                         IF variable >= length(ppl) THEN null
                         ELSIF splitVar /= variable THEN nth(ppl, variable)
                         ELSE map_with_index[real, real]
                                  (LAMBDA (degree: nat, coefficient: real):
                                     IF degree > dm(splitVar) THEN 0
                                     ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                           sigma[subrange(0, dm(splitVar) - degree)]
                                               (0, dm(splitVar) - degree,
                                                LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                  C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                     ENDIF)
                                  (p)
                         ENDIF"
                                                                             "ppl"
                                                                             "i")
                                                                            (("1"
                                                                              (reveal
                                                                               -10
                                                                               -13)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -3
                                                                                   -4
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (case
                                                                                     "splitVar /= i")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         -9)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "map_with_index__preserves_length[real,real]")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "LAMBDA (degree: nat, coefficient: real):
                     IF degree > dm(splitVar) THEN 0
                     ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                           sigma[subrange(0, dm(splitVar) - degree)]
                               (0, dm(splitVar) - degree,
                                LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                  C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                     ENDIF"
                                                                                           "nth(ppl,i)")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             -4
                                                                                             RL
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (reveal
                                                                                               -11)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (reveal
                                                                                             -21)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "i")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (reveal
                                                                                             -20)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -
                                                                                               "i")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (reveal
                                                                                             -19)
                                                                                            (("4"
                                                                                              (inst
                                                                                               -
                                                                                               "i")
                                                                                              (("4"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("5"
                                                                                            (reveal
                                                                                             -18)
                                                                                            (("5"
                                                                                              (inst
                                                                                               -
                                                                                               "i")
                                                                                              (("5"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("4"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("5"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("6"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("7"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (typepred
                                                                 "ppl")
                                                                (("2"
                                                                  (hide -1)
                                                                  (("2"
                                                                    (expand
                                                                     "polyproduct__represents")
                                                                    (("2"
                                                                      (expand
                                                                       "represents")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "i")
                                                                            (("2"
                                                                              (expand
                                                                               "represents")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -3)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "a2l__Bern_split_right_mono")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "map_with_index__nth[PolynomialList,PolynomialList]")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "LAMBDA (variable: nat, p: PolynomialList):
                       IF variable >= length(ppl) THEN null
                       ELSIF splitVar /= variable THEN nth(ppl, variable)
                       ELSE map_with_index[real, real]
                                (LAMBDA (degree: nat, coefficient: real):
                                   IF degree > dm(splitVar) THEN 0
                                   ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                         sigma[subrange(0, dm(splitVar) - degree)]
                                             (0, dm(splitVar) - degree,
                                              LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                   ENDIF)
                                (p)
                       ENDIF"
                                                                                         "ppl"
                                                                                         "i")
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "i")
                                                                                          (("1"
                                                                                            (reveal
                                                                                             -12)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -3
                                                                                                 1
                                                                                                 :hide?
                                                                                                 t)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "splitVar/=i")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "map_with_index__preserves_length[real,real]")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "LAMBDA (degree: nat, coefficient: real):
                  IF degree > dm(splitVar) THEN 0
                  ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                        sigma[subrange(0, dm(splitVar) - degree)]
                            (0, dm(splitVar) - degree,
                             LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                               C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                  ENDIF"
                                                                                                         "nth(ppl,i)")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           2
                                                                                                           RL)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           -20)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "splitVar")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (reveal
                                                                                                           -19)
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "splitVar")
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("4"
                                                                                                          (reveal
                                                                                                           -18)
                                                                                                          (("4"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "splitVar")
                                                                                                            (("4"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("5"
                                                                                                          (reveal
                                                                                                           -17)
                                                                                                          (("5"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "splitVar")
                                                                                                            (("5"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("4"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("5"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("6"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("7"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 -2 -4)
                                                  (("2"
                                                    (hide -1 -2)
                                                    (("2"
                                                      (expand
                                                       "a2l__Bern_split_right_mono")
                                                      (("2"
                                                        (lemma
                                                         "map_with_index__nth[PolynomialList,PolynomialList]")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "LAMBDA (variable: nat, p: PolynomialList):
                        IF variable >= length(ppl) THEN null
                        ELSIF splitVar /= variable THEN nth(ppl, variable)
                        ELSE map_with_index[real, real]
                                 (LAMBDA (degree: nat, coefficient: real):
                                    IF degree > dm(splitVar) THEN 0
                                    ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                          sigma[subrange(0, dm(splitVar) - degree)]
                                              (0, dm(splitVar) - degree,
                                               LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                 C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                    ENDIF)
                                 (p)
                        ENDIF"
                                                           "ppl"
                                                           "i")
                                                          (("1"
                                                            (reveal -2 -9)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 1
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (case
                                                                   "splitVar/=i")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "map_with_index__preserves_length[real,real]")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "LAMBDA (degree: nat, coefficient: real):
                    IF degree > dm(splitVar) THEN 0
                    ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                          sigma[subrange(0, dm(splitVar) - degree)]
                              (0, dm(splitVar) - degree,
                               LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                 C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                    ENDIF"
                                                                         "nth(ppl,i)")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           2
                                                                           RL
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (reveal
                                                                           -17)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "splitVar")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (reveal
                                                                           -16)
                                                                          (("3"
                                                                            (inst
                                                                             -
                                                                             "splitVar")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (reveal
                                                                           -15)
                                                                          (("4"
                                                                            (inst
                                                                             -
                                                                             "splitVar")
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("5"
                                                                          (reveal
                                                                           -14)
                                                                          (("5"
                                                                            (inst
                                                                             -
                                                                             "splitVar")
                                                                            (("5"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("5"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("6"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("7"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3" (propax) nil nil))
                                                nil)
                                               ("2"
                                                (skeep :preds? t)
                                                (("2"
                                                  (reveal -11)
                                                  (("2"
                                                    (expand
                                                     "polynomial__represents")
                                                    (("2"
                                                      (inst - "i")
                                                      (("2"
                                                        (expand "represents")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (skeep :preds? t)
                                                  (("3"
                                                    (expand
                                                     "a2l__Bern_split_right_mono")
                                                    (("3"
                                                      (lemma
                                                       "map_with_index__nth[PolynomialList,PolynomialList]")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         "LAMBDA (variable: nat, p: PolynomialList):
                        IF variable >= length(ppl) THEN null
                        ELSIF splitVar /= variable THEN nth(ppl, variable)
                        ELSE map_with_index[real, real]
                                 (LAMBDA (degree: nat, coefficient: real):
                                    IF degree > dm(splitVar) THEN 0
                                    ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                          sigma[subrange(0, dm(splitVar) - degree)]
                                              (0, dm(splitVar) - degree,
                                               LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                                 C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                                    ENDIF)
                                 (p)
                        ENDIF"
                                                         "ppl"
                                                         "i")
                                                        (("1"
                                                          (reveal -4)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (case
                                                                 "splitVar/=i")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "map_with_index__preserves_length[real,real]")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "LAMBDA (degree: nat, coefficient: real):
                   IF degree > dm(splitVar) THEN 0
                   ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                         sigma[subrange(0, dm(splitVar) - degree)]
                             (0, dm(splitVar) - degree,
                              LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                   ENDIF"
                                                                       "nth(ppl,i)")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         2
                                                                         RL
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (reveal
                                                                         -12)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "splitVar")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (reveal
                                                                         -11)
                                                                        (("3"
                                                                          (inst
                                                                           -1
                                                                           "splitVar")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (reveal
                                                                         -10)
                                                                        (("4"
                                                                          (inst
                                                                           -1
                                                                           "splitVar")
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (reveal
                                                                         -9)
                                                                        (("5"
                                                                          (inst
                                                                           -1
                                                                           "splitVar")
                                                                          (("5"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("4"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("5"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("6"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("7"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (hide 2)
                                                (("4"
                                                  (skeep :preds? t)
                                                  (("4"
                                                    (expand
                                                     "a2l__Bern_split_right_mono")
                                                    (("4"
                                                      (lemma
                                                       "map_with_index__preserves_length[PolynomialList,PolynomialList]")
                                                      (("4"
                                                        (inst
                                                         -
                                                         "LAMBDA (variable: nat, p: PolynomialList):
                   IF variable >= length(ppl) THEN null
                   ELSIF splitVar /= variable THEN nth(ppl, variable)
                   ELSE map_with_index[real, real]
                            (LAMBDA (degree: nat, coefficient: real):
                               IF degree > dm(splitVar) THEN 0
                               ELSE (1 / 2 ^ (dm(splitVar) - degree)) *
                                     sigma[subrange(0, dm(splitVar) - degree)]
                                         (0, dm(splitVar) - degree,
                                          LAMBDA (k: subrange(0, dm(splitVar) - degree)):
                                            C(dm(splitVar) - degree, k) * nth(nth(ppl, splitVar), dm(splitVar) - k))
                               ENDIF)
                            (p)
                   ENDIF"
                                                         "ppl")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1
                                                           RL
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (reveal -5)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("4"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("5"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("6"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("7"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("5"
                                                (assert)
                                                (("5"
                                                  (hide-all-but 1)
                                                  (("5"
                                                    (typepred "ppl")
                                                    (("5"
                                                      (hide -1)
                                                      (("5"
                                                        (expand
                                                         "polyproduct__represents")
                                                        (("5"
                                                          (expand
                                                           "represents")
                                                          (("5"
                                                            (flatten)
                                                            (("5"
                                                              (hide -1 -2)
                                                              (("5"
                                                                (skosimp*
                                                                 :preds?
                                                                 t)
                                                                (("5"
                                                                  (inst
                                                                   -
                                                                   "i!2")
                                                                  (("1"
                                                                    (expand
                                                                     "represents")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         -3
                                                                         -5)
                                                                        (("1"
                                                                          (typepred
                                                                           "maximum_degree(dm,nvars)")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "i!2")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "i")
                                                                              (("2"
                                                                                (postpone)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil)
             ("4" (postpone) nil nil))
            nil)
           ("2" (postpone) nil nil) ("3" (postpone) nil nil)
           ("4" (postpone) nil nil) ("5" (postpone) nil nil)
           ("6" (postpone) nil nil) ("7" (postpone) nil nil)
           ("8" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((represents const-decl "bool" arrays_into_lists structures)
    (PolynomialList type-eq-decl nil a2l__util nil)
    (polynomial__represents const-decl "bool" multibernstein_into_polylist
     nil)
    (Bern_split_right_mono const-decl "real" multi_bernstein nil)
    (map_with_index__nth formula-decl nil map_with_index structures)
    (C const-decl "posnat" binomial reals) (sigma def-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (map_with_index const-decl "list[T1]" map_with_index structures)
    (map_with_index__preserves_length formula-decl nil map_with_index
     structures)
    (representation? const-decl "bool" arrays_into_lists structures)
    (Coefficient type-eq-decl nil a2l__util nil)
    (PolyproductList type-eq-decl nil a2l__util nil)
    (Polynomial type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (CoeffMono type-eq-decl nil util nil)
    (maximum_degree def-decl
     "{n: nat | FORALL (i: below(nvars)): coeffmono(i) <= n}" a2l__util nil)
    (DegreeMono type-eq-decl nil util nil)
    (polyproduct__represents const-decl "bool" multibernstein_into_polylist
     nil))
   nil))
 (a2l__Bern_split_left_mpoly__homomorphism 0
  (a2l__Bern_split_left_mpoly__homomorphism-1 nil 3686655420
   ("" (skeep :preds? t)
    (("" (hide -4)
      (("" (expand "multipolynomial__represents")
        (("" (expand "represents")
          (("" (flatten)
            ((""
              (case "length(a2l__Bern_split_left_mpoly(pl, dm)(splitVar))=length(pl)"
                "FORALL (pp_i: below(terms)): length(nth(a2l__Bern_split_left_mpoly(pl,dm)(splitVar),pp_i))=length(nth(pl,pp_i))")
              (("1" (split)
                (("1" (expand "represents")
                  (("1" (skeep :preds? t)
                    (("1" (expand "a2l__Bern_split_left_mpoly")
                      (("1"
                        (invoke
                         (rewrite-lemma
                          "map_nth_rw[PolyproductList,PolyproductList]"
                          ("f" "%1" "l" "%2" "i" "%3"))
                         (! 1 1 1 0 1) (! 1 1 1 1) (! 1 1 2))
                        (("1"
                          (lemma "a2l__Bern_split_left_mono__homomorphism")
                          (("1"
                            (inst -1 "nvars" "terms" "dm" "splitVar" "mb(i)"
                             "nth(pl,i)")
                            (("1" (expand "polyproduct__represents")
                              (("1" (flatten) nil nil)) nil)
                             ("2" (expand "polyproduct__represents")
                              (("2" (split)
                                (("1" (inst -7 "i") nil nil)
                                 ("2" (inst -9 "i")
                                  (("2" (replace -3 -1)
                                    (("2" (replace -8 1)
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("3" (skeep :preds? t)
                                  (("3" (inst -11 "i" "var_i")
                                    (("3" (replace -4 -2)
                                      (("3"
                                        (replace -9 1)
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -2 1) (("2" (propax) nil nil)) nil)
                 ("3" (skeep :preds? t)
                  (("3" (inst -2 "pp_i")
                    (("3" (replace -2 1) (("3" (inst -9 "pp_i") nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (expand "a2l__Bern_split_left_mpoly" 1)
                  (("4" (skeep :preds? t)
                    (("4"
                      (invoke
                       (rewrite-lemma
                        "map_nth_rw[PolyproductList,PolyproductList]"
                        ("f" "%1" "l" "%2" "i" "%3"))
                       (! 1 1 1 1 1 0 1) (! 1 1 1 1 1 1) (! 1 1 1 1 2))
                      (("4" (expand "a2l__Bern_split_left_mono")
                        (("4"
                          (lemma
                           "map_with_index__nth[PolynomialList,PolynomialList]")
                          (("4"
                            (invoke (inst -1 "%1" "%2" "%3") (! 1 1 1 1 0 1)
                             (! 1 1 1 1 1) (! 1 1 1 2))
                            (("1" (inst -11 "pp_i")
                              (("1" (assert)
                                (("1" (replace -1 1 :hide? t)
                                  (("1" (case "splitVar = var_i")
                                    (("1" (assert)
                                      (("1"
                                        (invoke
                                         (rewrite-lemma
                                          "map_with_index__preserves_length[real,real]"
                                          ("f" "%1" "a" "%2")
                                          1
                                          RL)
                                         (! 1 1 1 0 1)
                                         (! 1 1 1 1))
                                        (("1"
                                          (inst -12 "pp_i" "var_i")
                                          nil
                                          nil)
                                         ("2"
                                          (skosimp* :preds? t)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert)
                                      (("2"
                                        (expand "nth_ext")
                                        (("2"
                                          (inst -11 "pp_i" "var_i")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp* :preds? t)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep :preds? t)
                  (("2" (expand "a2l__Bern_split_left_mpoly")
                    (("2"
                      (invoke
                       (rewrite-lemma
                        "map_nth_rw[PolyproductList,PolyproductList]"
                        ("f" "%1" "l" "%2" "i" "%3"))
                       (! 1 1 1 1 0 1) (! 1 1 1 1 1) (! 1 1 1 2))
                      (("2" (expand "a2l__Bern_split_left_mono" 1)
                        (("2"
                          (invoke
                           (rewrite-lemma
                            "map_with_index__preserves_length[PolynomialList,PolynomialList]"
                            ("f" "%1" "a" "%2") 1 RL)
                           (! 1 1 1 0 1) (! 1 1 1 1))
                          (("2" (skosimp* :preds? t) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (expand "a2l__Bern_split_left_mpoly")
                  (("3"
                    (invoke
                     (rewrite-lemma
                      "map_length[PolyproductList,PolyproductList]"
                      ("f" "%1" "l" "%2"))
                     (! 1 1 1 0 1) (! 1 1 1 1))
                    nil nil))
                  nil))
                nil)
               ("4" (hide 2)
                (("4" (replace -5 1 RL :hide? t)
                  (("4" (skeep :preds? t) nil nil)) nil))
                nil)
               ("5" (hide 2)
                (("5" (skeep :preds? t)
                  (("5" (expand "a2l__Bern_split_left_mpoly")
                    (("5"
                      (invoke
                       (rewrite-lemma
                        "map_length[PolyproductList,PolyproductList]"
                        ("f" "%1" "l" "%2"))
                       (! 1 2 1 0 1) (! 1 2 1 1))
                      (("5" (replace -6 1 RL :hide? t)
                        (("5" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((represents const-decl "bool" multibernstein_into_polylist nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (MultiBernstein type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (a2l__Bern_split_left_mpoly const-decl "PolyList" a2l__multi_bernstein
     nil)
    (DegreeMono type-eq-decl nil util nil)
    (PolyList type-eq-decl nil util nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (map_with_index__nth formula-decl nil map_with_index structures)
    (PolynomialList type-eq-decl nil a2l__util nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (map_with_index__preserves_length formula-decl nil map_with_index
     structures)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil) (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nth_ext const-decl "T" nth_ext structures)
    (map_with_index const-decl "list[T1]" map_with_index structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals) (C const-decl "posnat" binomial reals)
    (represents const-decl "bool" arrays_into_lists structures)
    (a2l__Bern_split_left_mono__homomorphism formula-decl nil
     a2l__multi_bernstein nil)
    (terms skolem-const-decl "posnat" a2l__multi_bernstein nil)
    (nvars skolem-const-decl "posnat" a2l__multi_bernstein nil)
    (dm skolem-const-decl "DegreeMono" a2l__multi_bernstein nil)
    (polyproduct__represents const-decl "bool" multibernstein_into_polylist
     nil)
    (mb skolem-const-decl "MultiBernstein" a2l__multi_bernstein nil)
    (pl skolem-const-decl
     "{pl: PolyList | multipolynomial__represents[terms, nvars, dm](pl, mb)}"
     a2l__multi_bernstein nil)
    (splitVar skolem-const-decl "{splitVar: nat | splitVar < nvars}"
     a2l__multi_bernstein nil)
    (i skolem-const-decl
       "below(length(a2l__Bern_split_left_mpoly(pl, dm)(splitVar)))"
       a2l__multi_bernstein nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (PolyproductList type-eq-decl nil a2l__util nil)
    (a2l__Bern_split_left_mono const-decl "PolyproductList"
     a2l__multi_bernstein nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (map_length formula-decl nil more_map_props nil)
    (multipolynomial__represents const-decl "bool"
     multibernstein_into_polylist nil))
   shostak))
 (a2l__Bern_split_right_mpoly__homomorphism 0
  (a2l__Bern_split_right_mpoly__homomorphism-4 "" 3790098025
   ("" (skeep :preds? t)
    (("" (hide -4)
      (("" (expand "multipolynomial__represents")
        (("" (expand "represents")
          (("" (flatten)
            ((""
              (case "length(a2l__Bern_split_right_mpoly(pl, dm)(splitVar))=length(pl)"
                "FORALL (pp_i: below(terms)): length(nth(a2l__Bern_split_right_mpoly(pl,dm)(splitVar),pp_i))=length(nth(pl,pp_i))")
              (("1" (split)
                (("1" (expand "represents")
                  (("1" (skeep :preds? t)
                    (("1" (expand "a2l__Bern_split_right_mpoly")
                      (("1"
                        (invoke
                         (rewrite-lemma
                          "map_nth_rw[PolyproductList,PolyproductList]"
                          ("f" "%1" "l" "%2" "i" "%3"))
                         (! 1 1 1 0 1) (! 1 1 1 1) (! 1 1 2))
                        (("1"
                          (lemma "a2l__Bern_split_right_mono__homomorphism")
                          (("1"
                            (inst -1 "nvars" "terms" "dm" "splitVar" "mb(i)"
                             "nth(pl,i)")
                            (("1" (expand "polyproduct__represents")
                              (("1" (flatten) nil nil)) nil)
                             ("2" (expand "polyproduct__represents")
                              (("2" (split)
                                (("1" (inst -7 "i") nil nil)
                                 ("2" (inst -9 "i")
                                  (("2" (replace -3 -1)
                                    (("2" (replace -8 1)
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("3" (skeep :preds? t)
                                  (("3" (inst -11 "i" "var_i")
                                    (("3" (replace -4 -2)
                                      (("3"
                                        (replace -9 1)
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -2 1) (("2" (propax) nil nil)) nil)
                 ("3" (skeep :preds? t)
                  (("3" (inst -2 "pp_i")
                    (("3" (replace -2 1) (("3" (inst -9 "pp_i") nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (expand "a2l__Bern_split_right_mpoly" 1)
                  (("4" (skeep :preds? t)
                    (("4"
                      (invoke
                       (rewrite-lemma
                        "map_nth_rw[PolyproductList,PolyproductList]"
                        ("f" "%1" "l" "%2" "i" "%3"))
                       (! 1 1 1 1 1 0 1) (! 1 1 1 1 1 1) (! 1 1 1 1 2))
                      (("4" (expand "a2l__Bern_split_right_mono")
                        (("4"
                          (lemma
                           "map_with_index__nth[PolynomialList,PolynomialList]")
                          (("4"
                            (invoke (inst -1 "%1" "%2" "%3") (! 1 1 1 1 0 1)
                             (! 1 1 1 1 1) (! 1 1 1 2))
                            (("1" (inst -11 "pp_i")
                              (("1" (assert)
                                (("1" (replace -1 1 :hide? t)
                                  (("1" (case "splitVar = var_i")
                                    (("1" (assert)
                                      (("1"
                                        (invoke
                                         (rewrite-lemma
                                          "map_with_index__preserves_length[real,real]"
                                          ("f" "%1" "a" "%2")
                                          1
                                          RL)
                                         (! 1 1 1 0 1)
                                         (! 1 1 1 1))
                                        (("1"
                                          (inst -12 "pp_i" "var_i")
                                          nil
                                          nil)
                                         ("2"
                                          (skosimp* :preds? t)
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (skosimp* :preds? t)
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (skosimp* :preds? t)
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert)
                                      (("2"
                                        (expand "nth_ext")
                                        (("2"
                                          (inst -11 "pp_i" "var_i")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp* :preds? t)
                              (("2" (assert) nil nil)) nil)
                             ("3" (skosimp* :preds? t)
                              (("3" (assert) nil nil)) nil)
                             ("4" (skosimp* :preds? t)
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep :preds? t)
                  (("2" (expand "a2l__Bern_split_right_mpoly")
                    (("2"
                      (invoke
                       (rewrite-lemma
                        "map_nth_rw[PolyproductList,PolyproductList]"
                        ("f" "%1" "l" "%2" "i" "%3"))
                       (! 1 1 1 1 0 1) (! 1 1 1 1 1) (! 1 1 1 2))
                      (("2" (expand "a2l__Bern_split_right_mono" 1)
                        (("2"
                          (invoke
                           (rewrite-lemma
                            "map_with_index__preserves_length[PolynomialList,PolynomialList]"
                            ("f" "%1" "a" "%2") 1 RL)
                           (! 1 1 1 0 1) (! 1 1 1 1))
                          (("1" (skosimp* :preds? t) (("1" (assert) nil nil))
                            nil)
                           ("2" (skosimp* :preds? t) (("2" (assert) nil nil))
                            nil)
                           ("3" (skosimp* :preds? t) (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (expand "a2l__Bern_split_right_mpoly")
                  (("3"
                    (invoke
                     (rewrite-lemma
                      "map_length[PolyproductList,PolyproductList]"
                      ("f" "%1" "l" "%2"))
                     (! 1 1 1 0 1) (! 1 1 1 1))
                    nil nil))
                  nil))
                nil)
               ("4" (hide 2)
                (("4" (replace -5 1 RL :hide? t)
                  (("4" (skeep :preds? t) nil nil)) nil))
                nil)
               ("5" (hide 2)
                (("5" (skeep :preds? t)
                  (("5" (expand "a2l__Bern_split_right_mpoly")
                    (("5"
                      (invoke
                       (rewrite-lemma
                        "map_length[PolyproductList,PolyproductList]"
                        ("f" "%1" "l" "%2"))
                       (! 1 2 1 0 1) (! 1 2 1 1))
                      (("5" (replace -6 1 RL :hide? t)
                        (("5" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (a2l__Bern_split_right_mpoly__homomorphism-3 nil 3687260058
   ("" (skeep :preds? t)
    (("" (hide -4)
      (("" (expand "multipolynomial__represents")
        (("" (expand "represents")
          (("" (flatten)
            ((""
              (case "length(a2l__Bern_split_right_mpoly(pl, dm)(splitVar))=length(pl)"
                "FORALL (pp_i: below(terms)): length(nth(a2l__Bern_split_right_mpoly(pl,dm)(splitVar),pp_i))=length(nth(pl,pp_i))")
              (("1" (split)
                (("1" (expand "represents")
                  (("1" (skeep :preds? t)
                    (("1" (expand "a2l__Bern_split_right_mpoly")
                      (("1"
                        (invoke
                         (rewrite-lemma
                          "map_nth_rw[PolyproductList,PolyproductList]"
                          ("f" "%1" "l" "%2" "i" "%3"))
                         (! 1 1 1 0 1) (! 1 1 1 1) (! 1 1 2))
                        (("1"
                          (lemma "a2l__Bern_split_right_mono__homomorphism")
                          (("1"
                            (inst -1 "nvars" "terms" "dm" "splitVar" "mb(i)"
                             "nth(pl,i)")
                            (("1" (expand "polyproduct__represents")
                              (("1" (flatten) nil nil)) nil)
                             ("2" (expand "polyproduct__represents")
                              (("2" (split)
                                (("1" (inst -7 "i") nil nil)
                                 ("2" (inst -9 "i")
                                  (("2" (replace -3 -1)
                                    (("2" (replace -8 1)
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("3" (skeep :preds? t)
                                  (("3" (inst -11 "i" "var_i")
                                    (("3" (replace -4 -2)
                                      (("3"
                                        (replace -9 1)
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -2 1) (("2" (propax) nil nil)) nil)
                 ("3" (skeep :preds? t)
                  (("3" (inst -2 "pp_i")
                    (("3" (replace -2 1) (("3" (inst -9 "pp_i") nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (expand "a2l__Bern_split_right_mpoly" 1)
                  (("4" (skeep :preds? t)
                    (("4"
                      (invoke
                       (rewrite-lemma
                        "map_nth_rw[PolyproductList,PolyproductList]"
                        ("f" "%1" "l" "%2" "i" "%3"))
                       (! 1 1 1 1 1 0 1) (! 1 1 1 1 1 1) (! 1 1 1 1 2))
                      (("4" (expand "a2l__Bern_split_right_mono")
                        (("4"
                          (lemma
                           "map_with_index__nth[PolynomialList,PolynomialList]")
                          (("4"
                            (invoke (inst -1 "%1" "%2" "%3") (! 1 1 1 1 0 1)
                             (! 1 1 1 1 1) (! 1 1 1 2))
                            (("1" (inst -11 "pp_i")
                              (("1" (assert)
                                (("1" (replace -1 1 :hide? t)
                                  (("1" (case "splitVar = var_i")
                                    (("1" (assert)
                                      (("1"
                                        (invoke
                                         (rewrite-lemma
                                          "map_with_index__preserves_length[real,real]"
                                          ("f" "%1" "a" "%2")
                                          1
                                          RL)
                                         (! 1 1 1 0 1)
                                         (! 1 1 1 1))
                                        (("1"
                                          (inst -12 "pp_i" "var_i")
                                          nil
                                          nil)
                                         ("2"
                                          (skosimp* :preds? t)
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (skosimp* :preds? t)
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (skosimp* :preds? t)
                                          (("4" (assert) nil nil))
                                          nil)
                                         ("5"
                                          (skosimp* :preds? t)
                                          (("5" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert)
                                      (("2"
                                        (expand "nth_ext")
                                        (("2"
                                          (inst -11 "pp_i" "var_i")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp* :preds? t)
                              (("2" (assert) nil nil)) nil)
                             ("3" (skosimp* :preds? t)
                              (("3" (assert) nil nil)) nil)
                             ("4" (skosimp* :preds? t)
                              (("4" (assert) nil nil)) nil)
                             ("5" (skosimp* :preds? t)
                              (("5" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep :preds? t)
                  (("2" (expand "a2l__Bern_split_right_mpoly")
                    (("2"
                      (invoke
                       (rewrite-lemma
                        "map_nth_rw[PolyproductList,PolyproductList]"
                        ("f" "%1" "l" "%2" "i" "%3"))
                       (! 1 1 1 1 0 1) (! 1 1 1 1 1) (! 1 1 1 2))
                      (("2" (expand "a2l__Bern_split_right_mono" 1)
                        (("2"
                          (invoke
                           (rewrite-lemma
                            "map_with_index__preserves_length[PolynomialList,PolynomialList]"
                            ("f" "%1" "a" "%2") 1 RL)
                           (! 1 1 1 0 1) (! 1 1 1 1))
                          (("1" (skosimp* :preds? t) (("1" (assert) nil nil))
                            nil)
                           ("2" (skosimp* :preds? t) (("2" (assert) nil nil))
                            nil)
                           ("3" (skosimp* :preds? t) (("3" (assert) nil nil))
                            nil)
                           ("4" (skosimp* :preds? t) (("4" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (expand "a2l__Bern_split_right_mpoly")
                  (("3"
                    (invoke
                     (rewrite-lemma
                      "map_length[PolyproductList,PolyproductList]"
                      ("f" "%1" "l" "%2"))
                     (! 1 1 1 0 1) (! 1 1 1 1))
                    nil nil))
                  nil))
                nil)
               ("4" (hide 2)
                (("4" (replace -5 1 RL :hide? t)
                  (("4" (skeep :preds? t) nil nil)) nil))
                nil)
               ("5" (hide 2)
                (("5" (skeep :preds? t)
                  (("5" (expand "a2l__Bern_split_right_mpoly")
                    (("5"
                      (invoke
                       (rewrite-lemma
                        "map_length[PolyproductList,PolyproductList]"
                        ("f" "%1" "l" "%2"))
                       (! 1 2 1 0 1) (! 1 2 1 1))
                      (("5" (replace -6 1 RL :hide? t)
                        (("5" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((represents const-decl "bool" multibernstein_into_polylist nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (MultiBernstein type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (a2l__Bern_split_right_mpoly const-decl "PolyList" a2l__multi_bernstein
     nil)
    (DegreeMono type-eq-decl nil util nil)
    (PolyList type-eq-decl nil util nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (map_with_index__nth formula-decl nil map_with_index structures)
    (PolynomialList type-eq-decl nil a2l__util nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (map_with_index__preserves_length formula-decl nil map_with_index
     structures)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nth_ext const-decl "T" nth_ext structures)
    (map_with_index const-decl "list[T1]" map_with_index structures)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals) (C const-decl "posnat" binomial reals)
    (represents const-decl "bool" arrays_into_lists structures)
    (a2l__Bern_split_right_mono__homomorphism formula-decl nil
     a2l__multi_bernstein nil)
    (terms skolem-const-decl "posnat" a2l__multi_bernstein nil)
    (nvars skolem-const-decl "posnat" a2l__multi_bernstein nil)
    (dm skolem-const-decl "DegreeMono" a2l__multi_bernstein nil)
    (polyproduct__represents const-decl "bool" multibernstein_into_polylist
     nil)
    (mb skolem-const-decl "MultiBernstein" a2l__multi_bernstein nil)
    (pl skolem-const-decl
     "{pl: PolyList | multipolynomial__represents[terms, nvars, dm](pl, mb)}"
     a2l__multi_bernstein nil)
    (splitVar skolem-const-decl "{splitVar: nat | splitVar < nvars}"
     a2l__multi_bernstein nil)
    (i skolem-const-decl
       "below(length(a2l__Bern_split_right_mpoly(pl, dm)(splitVar)))"
       a2l__multi_bernstein nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (PolyproductList type-eq-decl nil a2l__util nil)
    (a2l__Bern_split_right_mono const-decl "PolyproductList"
     a2l__multi_bernstein nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (map_length formula-decl nil more_map_props nil)
    (multipolynomial__represents const-decl "bool"
     multibernstein_into_polylist nil))
   nil)
  (a2l__Bern_split_right_mpoly__homomorphism-2 nil 3687260011
   ("" (skeep :preds? t)
    (("" (hide -4)
      (("" (expand "multipolynomial__represents")
        (("" (expand "represents")
          (("" (flatten)
            ((""
              (case "length(a2l__Bern_split_left_mpoly(pl, dm)(splitVar))=length(pl)"
                "FORALL (pp_i: below(terms)): length(nth(a2l__Bern_split_left_mpoly(pl,dm)(splitVar),pp_i))=length(nth(pl,pp_i))")
              (("1" (split)
                (("1" (expand "represents")
                  (("1" (skeep :preds? t)
                    (("1" (expand "a2l__Bern_split_left_mpoly")
                      (("1"
                        (invoke
                         (rewrite-lemma
                          "map_nth_rw[PolyproductList,PolyproductList]"
                          ("f" "%1" "l" "%2" "i" "%3"))
                         (! 1 1 1 0 1) (! 1 1 1 1) (! 1 1 2))
                        (("1"
                          (lemma "a2l__Bern_split_left_mono__homomorphism")
                          (("1"
                            (inst -1 "nvars" "terms" "dm" "splitVar" "mb(i)"
                             "nth(pl,i)")
                            (("1" (expand "polyproduct__represents")
                              (("1" (flatten) nil)))
                             ("2" (expand "polyproduct__represents")
                              (("2" (split)
                                (("1" (inst -7 "i") nil)
                                 ("2" (inst -9 "i")
                                  (("2" (replace -3 -1)
                                    (("2" (replace -8 1)
                                      (("2" (propax) nil)))))))
                                 ("3" (skeep :preds? t)
                                  (("3" (inst -11 "i" "var_i")
                                    (("3" (replace -4 -2)
                                      (("3"
                                        (replace -9 1)
                                        (("3"
                                          (propax)
                                          nil)))))))))))))))))))))))))
                 ("2" (replace -2 1) (("2" (propax) nil)))
                 ("3" (skeep :preds? t)
                  (("3" (inst -2 "pp_i")
                    (("3" (replace -2 1) (("3" (inst -9 "pp_i") nil)))))))
                 ("4" (expand "a2l__Bern_split_left_mpoly" 1)
                  (("4" (skeep :preds? t)
                    (("4"
                      (invoke
                       (rewrite-lemma
                        "map_nth_rw[PolyproductList,PolyproductList]"
                        ("f" "%1" "l" "%2" "i" "%3"))
                       (! 1 1 1 1 1 0 1) (! 1 1 1 1 1 1) (! 1 1 1 1 2))
                      (("4" (expand "a2l__Bern_split_left_mono")
                        (("4"
                          (lemma
                           "map_with_index__nth[PolynomialList,PolynomialList]")
                          (("4"
                            (invoke (inst -1 "%1" "%2" "%3") (! 1 1 1 1 0 1)
                             (! 1 1 1 1 1) (! 1 1 1 2))
                            (("1" (inst -11 "pp_i")
                              (("1" (assert)
                                (("1" (replace -1 1 :hide? t)
                                  (("1" (case "splitVar = var_i")
                                    (("1" (assert)
                                      (("1"
                                        (invoke
                                         (rewrite-lemma
                                          "map_with_index__preserves_length[real,real]"
                                          ("f" "%1" "a" "%2")
                                          1
                                          RL)
                                         (! 1 1 1 0 1)
                                         (! 1 1 1 1))
                                        (("1" (inst -12 "pp_i" "var_i") nil)
                                         ("2"
                                          (skosimp* :preds? t)
                                          (("2" (assert) nil)))))))
                                     ("2" (assert)
                                      (("2"
                                        (expand "nth_ext")
                                        (("2"
                                          (inst -11 "pp_i" "var_i")
                                          nil)))))))))))))
                             ("2" (skosimp* :preds? t)
                              (("2" (assert) nil)))))))))))))))))
               ("2" (hide 2)
                (("2" (skeep :preds? t)
                  (("2" (expand "a2l__Bern_split_left_mpoly")
                    (("2"
                      (invoke
                       (rewrite-lemma
                        "map_nth_rw[PolyproductList,PolyproductList]"
                        ("f" "%1" "l" "%2" "i" "%3"))
                       (! 1 1 1 1 0 1) (! 1 1 1 1 1) (! 1 1 1 2))
                      (("2" (expand "a2l__Bern_split_left_mono" 1)
                        (("2"
                          (invoke
                           (rewrite-lemma
                            "map_with_index__preserves_length[PolynomialList,PolynomialList]"
                            ("f" "%1" "a" "%2") 1 RL)
                           (! 1 1 1 0 1) (! 1 1 1 1))
                          (("2" (skosimp* :preds? t)
                            (("2" (assert) nil)))))))))))))))
               ("3" (hide 2)
                (("3" (expand "a2l__Bern_split_left_mpoly")
                  (("3"
                    (invoke
                     (rewrite-lemma
                      "map_length[PolyproductList,PolyproductList]"
                      ("f" "%1" "l" "%2"))
                     (! 1 1 1 0 1) (! 1 1 1 1))
                    nil)))))
               ("4" (hide 2)
                (("4" (replace -5 1 RL :hide? t)
                  (("4" (skeep :preds? t) nil)))))
               ("5" (hide 2)
                (("5" (skeep :preds? t)
                  (("5" (expand "a2l__Bern_split_left_mpoly")
                    (("5"
                      (invoke
                       (rewrite-lemma
                        "map_length[PolyproductList,PolyproductList]"
                        ("f" "%1" "l" "%2"))
                       (! 1 2 1 0 1) (! 1 2 1 1))
                      (("5" (replace -6 1 RL :hide? t)
                        (("5" (propax) nil))))))))))))))))))))))
    nil)
   nil nil)
  (a2l__Bern_split_right_mpoly__homomorphism-1 nil 3686989030
   ("" (skeep)
    (("" (expand "multipolynomial__represents")
      (("" (expand "represents")
        ((""
          (case "(FORALL (i: below(terms)):
                  polyproduct__represents[terms,nvars,maximum_degree(dm,nvars)]
                      (nth(a2l__Bern_split_right_mpoly(pl, dm)(splitVar), i),
                       Bern_split_right_mono(mb(i), dm)(splitVar)))")
          (("1" (label "polyproductlists_represents_polyproducts" -1)
            (("1" (hide -1)
              (("1" (split)
                (("1" (expand "representationList?")
                  (("1" (skeep)
                    (("1" (expand "representation?")
                      (("1" (lemma "member_nth[PolyproductList]")
                        (("1"
                          (inst - "a"
                           "a2l__Bern_split_right_mpoly(pl, dm)(splitVar)")
                          (("1" (replace -1 -2 :hide? t)
                            (("1" (skeep - :preds? t)
                              (("1"
                                (reveal
                                 "polyproductlists_represents_polyproducts")
                                (("1" (inst - "i")
                                  (("1" (expand "polyproduct__represents")
                                    (("1"
                                      (inst
                                       1
                                       "Bern_split_right_mono(mb(i), dm)(splitVar)")
                                      (("1"
                                        (replace -4 1 RL :hide? t)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide 2)
                                    (("2"
                                      (expand
                                       "a2l__Bern_split_right_mpoly"
                                       -2)
                                      (("2"
                                        (rewrite-lemma
                                         "map_length"
                                         ("f"
                                          "LAMBDA (ppl: PolyproductList):
                               a2l__Bern_split_right_mono(ppl, dm)(splitVar)"
                                          "l"
                                          "pl"))
                                        (("2"
                                          (typepred "pl")
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (expand
                                               "multipolynomial__represents")
                                              (("2"
                                                (expand "represents")
                                                (("2"
                                                  (flatten)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (typepred "pl")
                              (("2" (hide -1)
                                (("2" (expand "multipolynomial__represents")
                                  (("2" (expand "represents")
                                    (("2" (flatten)
                                      (("2"
                                        (hide -1 -3)
                                        (("2"
                                          (typepred "terms")
                                          (("2"
                                            (expand
                                             "a2l__Bern_split_right_mpoly"
                                             1)
                                            (("2"
                                              (rewrite-lemma
                                               "map_length"
                                               ("f"
                                                "LAMBDA (ppl: PolyproductList):
                             a2l__Bern_split_right_mono(ppl, dm)(splitVar)"
                                                "l"
                                                "pl"))
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "a2l__Bern_split_right_mpoly")
                  (("2"
                    (rewrite-lemma "map_length"
                     ("f" "LAMBDA (ppl: PolyproductList):
                           a2l__Bern_split_right_mono(ppl, dm)(splitVar)" "l"
                      "pl"))
                    (("2" (typepred "pl")
                      (("2" (hide -1)
                        (("2" (expand "multipolynomial__represents")
                          (("2" (expand "represents")
                            (("2" (flatten) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep :preds? t)
                  (("3" (reveal "polyproductlists_represents_polyproducts")
                    (("3" (inst - "i")
                      (("3" (expand "polyproduct__represents")
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skeep :preds? t)
              (("2" (expand "polyproduct__represents")
                (("2" (typepred "pl")
                  (("2" (hide -1)
                    (("2" (expand "multipolynomial__represents")
                      (("2" (expand "represents" -1)
                        (("2" (flatten)
                          (("2" (inst - "i")
                            (("2"
                              (lemma
                               "a2l__Bern_split_right_mono__homomorphism")
                              (("2"
                                (inst - "nvars" "terms" "dm" "splitVar"
                                 "mb(i)" "nth(pl, i)")
                                (("1" (expand "polyproduct__represents")
                                  (("1" (expand "a2l__Bern_split_right_mpoly")
                                    (("1"
                                      (lemma
                                       "map_nth_rw[PolyproductList,PolyproductList]")
                                      (("1"
                                        (inst
                                         -
                                         "LAMBDA (ppl: PolyproductList):
                           a2l__Bern_split_right_mono(ppl, dm)(splitVar)"
                                         "pl"
                                         "i")
                                        (("1"
                                          (replace -1 1 :hide? t)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (expand "polyproduct__represents")
                                    (("2" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep :preds? t)
              (("3" (expand "a2l__Bern_split_right_mpoly")
                (("3" (lemma "map_length[PolyproductList,PolyproductList]")
                  (("3"
                    (inst - "LAMBDA (ppl: PolyproductList):
                      a2l__Bern_split_right_mono(ppl, dm)(splitVar)" "pl")
                    (("3" (replace -1 1 :hide? t)
                      (("3" (typepred "pl")
                        (("3" (hide -1)
                          (("3" (expand "multipolynomial__represents")
                            (("3" (expand "represents")
                              (("3" (flatten) (("3" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((multipolynomial__represents const-decl "bool"
     multibernstein_into_polylist nil)
    (Bern_split_right_mono const-decl "real" multi_bernstein nil)
    (MultiBernstein type-eq-decl nil util nil)
    (PolyList type-eq-decl nil util nil)
    (polyproduct__represents const-decl "bool" multibernstein_into_polylist
     nil)
    (DegreeMono type-eq-decl nil util nil)
    (maximum_degree def-decl
     "{n: nat | FORALL (i: below(nvars)): coeffmono(i) <= n}" a2l__util nil)
    (CoeffMono type-eq-decl nil util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (PolyproductList type-eq-decl nil a2l__util nil)
    (representation? const-decl "bool" arrays_into_lists structures)
    (represents const-decl "bool" arrays_into_lists structures))
   nil)))


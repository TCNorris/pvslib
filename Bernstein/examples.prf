(examples
 (zumkeller1a__TCC1 0
  (zumkeller1a__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (zumkeller1a_ subtype "2"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (zumkeller1a__TCC2 0
  (zumkeller1a__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (zumkeller1a_ subtype "4"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (zumkeller1a__TCC3 0
  (zumkeller1a__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (zumkeller1a_ subtype "6"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (zumkeller1a__TCC4 0
  (zumkeller1a__TCC4-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (zumkeller1a_ subtype "2"
    "{i: integers.int | booleans.OR(examples.y /= 0, reals.>=(i, 0))}")))
 (zumkeller1a__TCC5 0
  (zumkeller1a__TCC5-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (zumkeller1a_ subtype "4"
    "{i: integers.int | booleans.OR(examples.y /= 0, reals.>=(i, 0))}")))
 (zumkeller1a_ 0
  (zumkeller1a_-1 nil 3517323621 ("" (bernstein) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MVars type-eq-decl nil MPoly nil) (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (Outcome type-decl nil Outcome_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PolyList type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil)
    (a2l__multipoly_strategy const-decl "Outcome" strat_util nil)
    (a2l__MaxVarMinDir const-decl "[bool, nat]" a2l__vardirselector nil)
    (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt nil)
    (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil)
    (forall_X_poly_interval const-decl "bool" multi_polynomial nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (boxbetween? const-decl "bool" util nil)
    (interval_between? const-decl "bool" util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (multipoly_eval const-decl "real" multi_polynomial nil)
    (polyproduct_eval const-decl "real" multi_polynomial nil)
    (mc_9 skolem-const-decl "Coeff" examples nil)
    (md_8 skolem-const-decl "DegreeMono" examples nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (expt_x1 formula-decl nil exponentiation nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (mp_7 skolem-const-decl "MultiPolynomial" examples nil)
    (vars_Pb__ skolem-const-decl "[nat -> real]" examples nil)
    (product def-decl "real" product reals)
    (sigma def-decl "real" sigma reals)
    (Pb__ skolem-const-decl "MPolyRel" examples nil)
    (vsPb__ skolem-const-decl "MVars" examples nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (a2l__multipoly_strategy_true formula-decl nil strat_util nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (MPolyRel type-eq-decl nil MPoly nil)
    (RealOrder type-eq-decl nil real_orders reals)
    (MultiPolynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   shostak))
 (zumkeller1b_ 0
  (zumkeller1b_-1 nil 3517323621 ("" (bernstein) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MVars type-eq-decl nil MPoly nil) (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (Outcome type-decl nil Outcome_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PolyList type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil)
    (a2l__multipoly_strategy const-decl "Outcome" strat_util nil)
    (a2l__MaxVarMaxDir const-decl "[bool, nat]" a2l__vardirselector nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt nil)
    (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list2array def-decl "T" array2list structures)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (MPolyRel type-eq-decl nil MPoly nil)
    (RealOrder type-eq-decl nil real_orders reals)
    (MultiPolynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   shostak))
 (zumkeller2__TCC1 0
  (zumkeller2__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (zumkeller2_ subtype "2"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (zumkeller2__TCC2 0
  (zumkeller2__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)) nil
   (zumkeller2_ subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(examples.y, exponentiation.^(examples.x, 2))) /= 0, reals.>=(i, 0))}")))
 (zumkeller2__TCC3 0
  (zumkeller2__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (zumkeller2_ subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(1, examples.x)) /= 0, reals.>=(i, 0))}")))
 (zumkeller2_ 0
  (zumkeller2_-1 nil 3517323621 ("" (bernstein) nil nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Vars type-eq-decl nil util nil) (MVars type-eq-decl nil MPoly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (FALSE const-decl "bool" booleans nil)
    (Outcome type-decl nil Outcome_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PolyList type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil)
    (a2l__multipoly_strategy const-decl "Outcome" strat_util nil)
    (a2l__MaxVarMinDir const-decl "[bool, nat]" a2l__vardirselector nil)
    (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt nil)
    (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil)
    (forall_X_poly_interval const-decl "bool" multi_polynomial nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boxbetween? const-decl "bool" util nil)
    (interval_between? const-decl "bool" util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (multipoly_eval const-decl "real" multi_polynomial nil)
    (polyproduct_eval const-decl "real" multi_polynomial nil)
    (mc_12 skolem-const-decl "Coeff" examples nil)
    (md_11 skolem-const-decl "DegreeMono" examples nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (expt_x1 formula-decl nil exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (mp_10 skolem-const-decl "MultiPolynomial" examples nil)
    (vars_Pb__ skolem-const-decl "[nat -> real]" examples nil)
    (product def-decl "real" product reals)
    (sigma def-decl "real" sigma reals)
    (Pb__ skolem-const-decl "MPolyRel" examples nil)
    (vsPb__ skolem-const-decl "MVars" examples nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (a2l__multipoly_strategy_true formula-decl nil strat_util nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (MPolyRel type-eq-decl nil MPoly nil)
    (RealOrder type-eq-decl nil real_orders reals)
    (MultiPolynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
     nil))
   shostak))
 (smith__TCC1 0
  (smith__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (smith_ subtype "2"
    "{i: integers.int | booleans.OR(examples.x1 /= 0, reals.>=(i, 0))}")))
 (smith__TCC2 0
  (smith__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (smith_ subtype "3"
    "{i: integers.int | booleans.OR(examples.x2 /= 0, reals.>=(i, 0))}")))
 (smith__TCC3 0
  (smith__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (smith_ subtype "4"
    "{i: integers.int | booleans.OR(examples.x3 /= 0, reals.>=(i, 0))}")))
 (smith__TCC4 0
  (smith__TCC4-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (smith_ subtype "3"
    "{i: integers.int | booleans.OR(examples.x1 /= 0, reals.>=(i, 0))}")))
 (smith__TCC5 0
  (smith__TCC5-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (smith_ subtype "5"
    "{i: integers.int | booleans.OR(examples.x4 /= 0, reals.>=(i, 0))}")))
 (smith__TCC6 0
  (smith__TCC6-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (smith_ subtype "3"
    "{i: integers.int | booleans.OR(examples.x5 /= 0, reals.>=(i, 0))}")))
 (smith_ 0
  (smith_-1 nil 3517323621 ("" (bernstein) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MVars type-eq-decl nil MPoly nil) (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (Outcome type-decl nil Outcome_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PolyList type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil)
    (a2l__multipoly_strategy const-decl "Outcome" strat_util nil)
    (a2l__MaxVarMaxDir const-decl "[bool, nat]" a2l__vardirselector nil)
    (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt nil)
    (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil)
    (forall_X_poly_interval const-decl "bool" multi_polynomial nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (boxbetween? const-decl "bool" util nil)
    (interval_between? const-decl "bool" util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (multipoly_eval const-decl "real" multi_polynomial nil)
    (polyproduct_eval const-decl "real" multi_polynomial nil)
    (mc_15 skolem-const-decl "Coeff" examples nil)
    (md_14 skolem-const-decl "DegreeMono" examples nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (expt_x1 formula-decl nil exponentiation nil)
    (mp_13 skolem-const-decl "MultiPolynomial" examples nil)
    (vars_Pb__ skolem-const-decl "[nat -> real]" examples nil)
    (product def-decl "real" product reals)
    (sigma def-decl "real" sigma reals)
    (Pb__ skolem-const-decl "MPolyRel" examples nil)
    (vsPb__ skolem-const-decl "MVars" examples nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (a2l__multipoly_strategy_true formula-decl nil strat_util nil)
    (MPolyRel type-eq-decl nil MPoly nil)
    (RealOrder type-eq-decl nil real_orders reals)
    (MultiPolynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   shostak))
 (beale1a__TCC1 0
  (beale1a__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (beale1a_ subtype "2"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.+)(3/2, number_fields.*(examples.x, examples.y)), examples.x) = 0), reals.>=(i, 0))}")))
 (beale1a__TCC2 0
  (beale1a__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (beale1a_ subtype "2"
    "{i: integers.int | booleans.OR(examples.y /= 0, reals.>=(i, 0))}")))
 (beale1a__TCC3 0
  (beale1a__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil))
   nil
   (beale1a_ subtype "2"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.+)(9/4, number_fields.*(examples.x, exponentiation.^(examples.y, 2))), examples.x) = 0), reals.>=(i, 0))}")))
 (beale1a__TCC4 0
  (beale1a__TCC4-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (beale1a_ subtype "3"
    "{i: integers.int | booleans.OR(examples.y /= 0, reals.>=(i, 0))}")))
 (beale1a__TCC5 0
  (beale1a__TCC5-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil))
   nil
   (beale1a_ subtype "2"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.+)(21/8, number_fields.*(examples.x, exponentiation.^(examples.y, 3))), examples.x) = 0), reals.>=(i, 0))}")))
 (beale1a_ 0
  (beale1a_-1 nil 3517323621 ("" (bernstein) nil nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Vars type-eq-decl nil util nil) (MVars type-eq-decl nil MPoly nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (FALSE const-decl "bool" booleans nil)
    (Outcome type-decl nil Outcome_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PolyList type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil)
    (a2l__multipoly_strategy const-decl "Outcome" strat_util nil)
    (a2l__MaxVarMinDir const-decl "[bool, nat]" a2l__vardirselector nil)
    (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt nil)
    (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil)
    (forall_X_poly_interval const-decl "bool" multi_polynomial nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (boxbetween? const-decl "bool" util nil)
    (interval_between? const-decl "bool" util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (multipoly_eval const-decl "real" multi_polynomial nil)
    (polyproduct_eval const-decl "real" multi_polynomial nil)
    (mc_18 skolem-const-decl "Coeff" examples nil)
    (md_17 skolem-const-decl "DegreeMono" examples nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (expt_x1 formula-decl nil exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (mp_16 skolem-const-decl "MultiPolynomial" examples nil)
    (vars_Pb__ skolem-const-decl "[nat -> real]" examples nil)
    (product def-decl "real" product reals)
    (sigma def-decl "real" sigma reals)
    (Pb__ skolem-const-decl "MPolyRel" examples nil)
    (vsPb__ skolem-const-decl "MVars" examples nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (a2l__multipoly_strategy_true formula-decl nil strat_util nil)
    (MPolyRel type-eq-decl nil MPoly nil)
    (RealOrder type-eq-decl nil real_orders reals)
    (MultiPolynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
     nil))
   shostak))
 (beale1b_ 0
  (beale1b_-1 nil 3517323622 ("" (bernstein) nil nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Vars type-eq-decl nil util nil) (MVars type-eq-decl nil MPoly nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (FALSE const-decl "bool" booleans nil)
    (Outcome type-decl nil Outcome_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PolyList type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil)
    (a2l__multipoly_strategy const-decl "Outcome" strat_util nil)
    (a2l__MaxVarMinDir const-decl "[bool, nat]" a2l__vardirselector nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt nil)
    (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list2array def-decl "T" array2list structures)
    (MPolyRel type-eq-decl nil MPoly nil)
    (RealOrder type-eq-decl nil real_orders reals)
    (MultiPolynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil))
   shostak))
 (crespo1a__TCC1 0
  (crespo1a__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo1a_ subtype "5"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (crespo1a__TCC2 0
  (crespo1a__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo1a_ subtype "2"
    "{i: integers.int | booleans.OR(examples.y /= 0, reals.>=(i, 0))}")))
 (crespo1a__TCC3 0
  (crespo1a__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo1a_ subtype "4"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (crespo1a__TCC4 0
  (crespo1a__TCC4-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo1a_ subtype "3"
    "{i: integers.int | booleans.OR(examples.y /= 0, reals.>=(i, 0))}")))
 (crespo1a__TCC5 0
  (crespo1a__TCC5-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo1a_ subtype "2"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (crespo1a_ 0
  (crespo1a_-1 nil 3517323622 ("" (bernstein) nil nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MVars type-eq-decl nil MPoly nil) (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (Outcome type-decl nil Outcome_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PolyList type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil)
    (a2l__multipoly_strategy const-decl "Outcome" strat_util nil)
    (a2l__MaxVarMaxDir const-decl "[bool, nat]" a2l__vardirselector nil)
    (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt nil)
    (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil)
    (forall_X_poly_interval const-decl "bool" multi_polynomial nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boxbetween? const-decl "bool" util nil)
    (interval_between? const-decl "bool" util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (multipoly_eval const-decl "real" multi_polynomial nil)
    (polyproduct_eval const-decl "real" multi_polynomial nil)
    (mc_21 skolem-const-decl "Coeff" examples nil)
    (md_20 skolem-const-decl "DegreeMono" examples nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (expt_x1 formula-decl nil exponentiation nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (mp_19 skolem-const-decl "MultiPolynomial" examples nil)
    (vars_Pb__ skolem-const-decl "[nat -> real]" examples nil)
    (product def-decl "real" product reals)
    (sigma def-decl "real" sigma reals)
    (Pb__ skolem-const-decl "MPolyRel" examples nil)
    (vsPb__ skolem-const-decl "MVars" examples nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (a2l__multipoly_strategy_true formula-decl nil strat_util nil)
    (< const-decl "bool" reals nil) (MPolyRel type-eq-decl nil MPoly nil)
    (RealOrder type-eq-decl nil real_orders reals)
    (MultiPolynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   shostak))
 (crespo1b__TCC1 0
  (crespo1b__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo1b_ subtype "5"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (crespo1b__TCC2 0
  (crespo1b__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo1b_ subtype "2"
    "{i: integers.int | booleans.OR(examples.y /= 0, reals.>=(i, 0))}")))
 (crespo1b__TCC3 0
  (crespo1b__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo1b_ subtype "4"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (crespo1b__TCC4 0
  (crespo1b__TCC4-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo1b_ subtype "3"
    "{i: integers.int | booleans.OR(examples.y /= 0, reals.>=(i, 0))}")))
 (crespo1b__TCC5 0
  (crespo1b__TCC5-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo1b_ subtype "2"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (crespo1b_ 0
  (crespo1b_-1 nil 3517323622 ("" (bernstein) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Vars type-eq-decl nil util nil) (MVars type-eq-decl nil MPoly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (FALSE const-decl "bool" booleans nil)
    (Outcome type-decl nil Outcome_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PolyList type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil)
    (a2l__multipoly_strategy const-decl "Outcome" strat_util nil)
    (a2l__MaxVarMinDir const-decl "[bool, nat]" a2l__vardirselector nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt nil)
    (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list2array def-decl "T" array2list structures)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (MPolyRel type-eq-decl nil MPoly nil)
    (RealOrder type-eq-decl nil real_orders reals)
    (MultiPolynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
     nil))
   shostak))
 (crespo2a__TCC1 0
  (crespo2a__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo2a_ subtype "5"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (crespo2a__TCC2 0
  (crespo2a__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo2a_ subtype "2"
    "{i: integers.int | booleans.OR(examples.y /= 0, reals.>=(i, 0))}")))
 (crespo2a__TCC3 0
  (crespo2a__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo2a_ subtype "4"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (crespo2a__TCC4 0
  (crespo2a__TCC4-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo2a_ subtype "3"
    "{i: integers.int | booleans.OR(examples.y /= 0, reals.>=(i, 0))}")))
 (crespo2a__TCC5 0
  (crespo2a__TCC5-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo2a_ subtype "2"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (crespo2a__TCC6 0
  (crespo2a__TCC6-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo2a_ subtype "2"
    "{i: integers.int | booleans.OR(examples.z /= 0, reals.>=(i, 0))}")))
 (crespo2a_ 0
  (crespo2a_-1 nil 3517323622 ("" (bernstein) nil nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MVars type-eq-decl nil MPoly nil) (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (Outcome type-decl nil Outcome_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PolyList type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil)
    (a2l__multipoly_strategy const-decl "Outcome" strat_util nil)
    (a2l__MaxVarMaxDir const-decl "[bool, nat]" a2l__vardirselector nil)
    (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt nil)
    (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil)
    (forall_X_poly_interval const-decl "bool" multi_polynomial nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (boxbetween? const-decl "bool" util nil)
    (interval_between? const-decl "bool" util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (multipoly_eval const-decl "real" multi_polynomial nil)
    (polyproduct_eval const-decl "real" multi_polynomial nil)
    (mc_24 skolem-const-decl "Coeff" examples nil)
    (md_23 skolem-const-decl "DegreeMono" examples nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (expt_x1 formula-decl nil exponentiation nil)
    (mp_22 skolem-const-decl "MultiPolynomial" examples nil)
    (vars_Pb__ skolem-const-decl "[nat -> real]" examples nil)
    (product def-decl "real" product reals)
    (sigma def-decl "real" sigma reals)
    (Pb__ skolem-const-decl "MPolyRel" examples nil)
    (vsPb__ skolem-const-decl "MVars" examples nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (a2l__multipoly_strategy_true formula-decl nil strat_util nil)
    (MPolyRel type-eq-decl nil MPoly nil)
    (RealOrder type-eq-decl nil real_orders reals)
    (MultiPolynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   shostak))
 (crespo2b__TCC1 0
  (crespo2b__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo2b_ subtype "5"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (crespo2b__TCC2 0
  (crespo2b__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo2b_ subtype "2"
    "{i: integers.int | booleans.OR(examples.y /= 0, reals.>=(i, 0))}")))
 (crespo2b__TCC3 0
  (crespo2b__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo2b_ subtype "4"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (crespo2b__TCC4 0
  (crespo2b__TCC4-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo2b_ subtype "3"
    "{i: integers.int | booleans.OR(examples.y /= 0, reals.>=(i, 0))}")))
 (crespo2b__TCC5 0
  (crespo2b__TCC5-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo2b_ subtype "2"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (crespo2b__TCC6 0
  (crespo2b__TCC6-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo2b_ subtype "2"
    "{i: integers.int | booleans.OR(examples.z /= 0, reals.>=(i, 0))}")))
 (crespo2b_ 0
  (crespo2b_-1 nil 3517323622 ("" (bernstein) nil nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MVars type-eq-decl nil MPoly nil) (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (Outcome type-decl nil Outcome_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PolyList type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil)
    (a2l__multipoly_strategy const-decl "Outcome" strat_util nil)
    (a2l__MaxVarMaxDir const-decl "[bool, nat]" a2l__vardirselector nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt nil)
    (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list2array def-decl "T" array2list structures)
    (MPolyRel type-eq-decl nil MPoly nil)
    (RealOrder type-eq-decl nil real_orders reals)
    (MultiPolynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   shostak))
 (crespo3a__TCC1 0
  (crespo3a__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo3a_ subtype "3"
    "{i: integers.int | booleans.OR(examples.y /= 0, reals.>=(i, 0))}")))
 (crespo3a__TCC2 0
  (crespo3a__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo3a_ subtype "2"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (crespo3a__TCC3 0
  (crespo3a__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo3a_ subtype "3"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (crespo3a__TCC4 0
  (crespo3a__TCC4-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo3a_ subtype "2"
    "{i: integers.int | booleans.OR(examples.y /= 0, reals.>=(i, 0))}")))
 (crespo3a__TCC5 0
  (crespo3a__TCC5-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo3a_ subtype "2"
    "{i: integers.int | booleans.OR(examples.z /= 0, reals.>=(i, 0))}")))
 (crespo3a_ 0
  (crespo3a_-1 nil 3517323622 ("" (bernstein) nil nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MVars type-eq-decl nil MPoly nil) (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (Outcome type-decl nil Outcome_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PolyList type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil)
    (a2l__multipoly_strategy const-decl "Outcome" strat_util nil)
    (a2l__MaxVarMaxDir const-decl "[bool, nat]" a2l__vardirselector nil)
    (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt nil)
    (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil)
    (forall_X_poly_interval const-decl "bool" multi_polynomial nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (boxbetween? const-decl "bool" util nil)
    (interval_between? const-decl "bool" util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (multipoly_eval const-decl "real" multi_polynomial nil)
    (polyproduct_eval const-decl "real" multi_polynomial nil)
    (mc_27 skolem-const-decl "Coeff" examples nil)
    (md_26 skolem-const-decl "DegreeMono" examples nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (expt_x1 formula-decl nil exponentiation nil)
    (mp_25 skolem-const-decl "MultiPolynomial" examples nil)
    (vars_Pb__ skolem-const-decl "[nat -> real]" examples nil)
    (product def-decl "real" product reals)
    (sigma def-decl "real" sigma reals)
    (Pb__ skolem-const-decl "MPolyRel" examples nil)
    (vsPb__ skolem-const-decl "MVars" examples nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (a2l__multipoly_strategy_true formula-decl nil strat_util nil)
    (MPolyRel type-eq-decl nil MPoly nil)
    (RealOrder type-eq-decl nil real_orders reals)
    (MultiPolynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   shostak))
 (crespo3b__TCC1 0
  (crespo3b__TCC1-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo3b_ subtype "3"
    "{i: integers.int | booleans.OR(examples.y /= 0, reals.>=(i, 0))}")))
 (crespo3b__TCC2 0
  (crespo3b__TCC2-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo3b_ subtype "2"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (crespo3b__TCC3 0
  (crespo3b__TCC3-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo3b_ subtype "3"
    "{i: integers.int | booleans.OR(examples.x /= 0, reals.>=(i, 0))}")))
 (crespo3b__TCC4 0
  (crespo3b__TCC4-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo3b_ subtype "2"
    "{i: integers.int | booleans.OR(examples.y /= 0, reals.>=(i, 0))}")))
 (crespo3b__TCC5 0
  (crespo3b__TCC5-1 nil 3517323583 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (crespo3b_ subtype "2"
    "{i: integers.int | booleans.OR(examples.z /= 0, reals.>=(i, 0))}")))
 (crespo3b_ 0
  (crespo3b_-1 nil 3517323623 ("" (bernstein) nil nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MVars type-eq-decl nil MPoly nil) (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (Outcome type-decl nil Outcome_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PolyList type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil)
    (a2l__multipoly_strategy const-decl "Outcome" strat_util nil)
    (a2l__MaxVarMinDir const-decl "[bool, nat]" a2l__vardirselector nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt nil)
    (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list2array def-decl "T" array2list structures)
    (MPolyRel type-eq-decl nil MPoly nil)
    (RealOrder type-eq-decl nil real_orders reals)
    (MultiPolynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   shostak)))


(tests
 (multipoly_eval_test_1 0
  (multipoly_eval_test_1-1 nil 3499783217 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (multipoly_eval_test2 0
  (multipoly_eval_test2-1 nil 3499783230 ("" (eval-formula) nil nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (multipoly_eval_test3_TCC1 0
  (multipoly_eval_test3_TCC1-1 nil 3499783122 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (multipoly_eval_test3 subtype "2"
    "{i: integers.int | booleans.OR(tests.x /= 0, reals.>=(i, 0))}")))
 (multipoly_eval_test3_TCC2 0
  (multipoly_eval_test3_TCC2-1 nil 3499783122 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (multipoly_eval_test3 subtype "3"
    "{i: integers.int | booleans.OR(tests.y /= 0, reals.>=(i, 0))}")))
 (multipoly_eval_test3 0
  (multipoly_eval_test3-1 nil 3499783186
   ("" (skeep)
    (("" (expand "multipoly_eval")
      (("" (expand "sigma")
        (("" (expand "sigma")
          (("" (expand "sigma")
            (("" (expand "sigma")
              (("" (expand "polyproduct_eval")
                (("" (expand "product")
                  (("" (expand "product")
                    (("" (expand "product")
                      (("" (expand "mvpex1")
                        (("" (expand "dgmex1")
                          (("" (expand "pprodex1")
                            (("" (expand "pprodex2")
                              (("" (expand "pprodex3")
                                (("" (expand "polynomial")
                                  (("" (expand "sigma")
                                    (("" (expand "sigma")
                                      ((""
                                        (expand "sigma")
                                        ((""
                                          (expand "sigma")
                                          ((""
                                            (expand "sigma")
                                            ((""
                                              (expand "pseqex")
                                              ((""
                                                (expand "cfex1")
                                                ((""
                                                  (assert)
                                                  (("" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (multipoly_eval const-decl "real" multi_polynomial nil)
    (product def-decl "real" product reals)
    (dgmex1 const-decl "DegreeMono" tests nil)
    (pprodex2 const-decl "Polyproduct" tests nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (pseqex const-decl "Polynomial" tests nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (cfex1 const-decl "Coeff" tests nil)
    (pprodex3 const-decl "Polyproduct" tests nil)
    (pprodex1 const-decl "Polyproduct" tests nil)
    (mvpex1 const-decl "MultiPolynomial" tests nil)
    (polyproduct_eval const-decl "real" multi_polynomial nil)
    (sigma def-decl "real" sigma reals))
   nil))
 (bspoly_convert_poly_test 0
  (bspoly_convert_poly_test-1 nil 3499798757 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (test_forall_TCC1 0
  (test_forall_TCC1-1 nil 3503666517 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (test_forall subtype "4"
    "{i: integers.int | booleans.OR(tests.x /= 0, reals.>=(i, 0))}")))
 (test_forall_TCC2 0
  (test_forall_TCC2-1 nil 3503666517 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (test_forall subtype "6"
    "{i: integers.int | booleans.OR(tests.x /= 0, reals.>=(i, 0))}")))
 (test_forall_TCC3 0
  (test_forall_TCC3-1 nil 3503666517 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (test_forall subtype "2"
    "{i: integers.int | booleans.OR(tests.y /= 0, reals.>=(i, 0))}")))
 (test_forall_TCC4 0
  (test_forall_TCC4-1 nil 3503666517 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (test_forall subtype "4"
    "{i: integers.int | booleans.OR(tests.y /= 0, reals.>=(i, 0))}")))
 (test_forall 0
  (test_forall-1 nil 3503666517 ("" (bernstein) nil nil)
   ((nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MVars type-eq-decl nil MPoly nil) (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (Outcome type-decl nil Outcome_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PolyList type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil)
    (a2l__multipoly_strategy const-decl "Outcome" strat_util nil)
    (a2l__MaxVarMinDir const-decl "[bool, nat]" a2l__vardirselector nil)
    (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt nil)
    (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil)
    (forall_X_poly_interval const-decl "bool" multi_polynomial nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (boxbetween? const-decl "bool" util nil)
    (interval_between? const-decl "bool" util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (multipoly_eval const-decl "real" multi_polynomial nil)
    (polyproduct_eval const-decl "real" multi_polynomial nil)
    (mc_3 skolem-const-decl "Coeff" tests nil)
    (md_2 skolem-const-decl "DegreeMono" tests nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (expt_x1 formula-decl nil exponentiation nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (mp_1 skolem-const-decl "MultiPolynomial" tests nil)
    (vars_Pb__ skolem-const-decl "[nat -> real]" tests nil)
    (product def-decl "real" product reals)
    (sigma def-decl "real" sigma reals)
    (Pb__ skolem-const-decl "MPolyRel" tests nil)
    (vsPb__ skolem-const-decl "MVars" tests nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (a2l__multipoly_strategy_true formula-decl nil strat_util nil)
    (> const-decl "bool" reals nil) (MPolyRel type-eq-decl nil MPoly nil)
    (RealOrder type-eq-decl nil real_orders reals)
    (MultiPolynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (test_exists 0
  (test_exists-1 nil 3503666526 ("" (bernstein) nil nil)
   ((nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MVars type-eq-decl nil MPoly nil) (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (Outcome type-decl nil Outcome_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PolyList type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil)
    (a2l__multipoly_strategy const-decl "Outcome" strat_util nil)
    (a2l__MaxVarMinDir const-decl "[bool, nat]" a2l__vardirselector nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt nil)
    (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list2array def-decl "T" array2list structures)
    (> const-decl "bool" reals nil) (MPolyRel type-eq-decl nil MPoly nil)
    (RealOrder type-eq-decl nil real_orders reals)
    (MultiPolynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (test_exists_open 0
  (test_exists_open-1 nil 3503943487 ("" (bernstein) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MVars type-eq-decl nil MPoly nil) (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (Outcome type-decl nil Outcome_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PolyList type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil)
    (a2l__multipoly_strategy const-decl "Outcome" strat_util nil)
    (a2l__MaxVarMinDir const-decl "[bool, nat]" a2l__vardirselector nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt nil)
    (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list2array def-decl "T" array2list structures)
    (> const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (MPolyRel type-eq-decl nil MPoly nil)
    (RealOrder type-eq-decl nil real_orders reals)
    (MultiPolynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
     nil))
   shostak))
 (test_forall_unbounded 0
  (test_forall_unbounded-1 nil 3503943513 ("" (bernstein) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MVars type-eq-decl nil MPoly nil) (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (Outcome type-decl nil Outcome_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PolyList type-eq-decl nil util nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil)
    (a2l__multipoly_strategy const-decl "Outcome" strat_util nil)
    (a2l__MaxVarMinDir const-decl "[bool, nat]" a2l__vardirselector nil)
    (istrue? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt nil)
    (IsTrue adt-constructor-decl "(istrue?)" Outcome_adt nil)
    (forall_X_poly_interval const-decl "bool" multi_polynomial nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boxbetween? const-decl "bool" util nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (interval_between? const-decl "bool" util nil)
    (Polyproduct type-eq-decl nil util nil)
    (Polynomial type-eq-decl nil util nil)
    (multipoly_eval const-decl "real" multi_polynomial nil)
    (polyproduct_eval const-decl "real" multi_polynomial nil)
    (mc_6 skolem-const-decl "Coeff" tests nil)
    (md_5 skolem-const-decl "DegreeMono" tests nil)
    (polynomial const-decl "[real -> real]" polynomials reals)
    (expt_x1 formula-decl nil exponentiation nil)
    (mp_4 skolem-const-decl "MultiPolynomial" tests nil)
    (vars_Pb__ skolem-const-decl "[nat -> real]" tests nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (product def-decl "real" product reals)
    (sigma def-decl "real" sigma reals)
    (Pb__ skolem-const-decl "MPolyRel" tests nil)
    (vsPb__ skolem-const-decl "MVars" tests nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (a2l__multipoly_strategy_true formula-decl nil strat_util nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (MPolyRel type-eq-decl nil MPoly nil)
    (RealOrder type-eq-decl nil real_orders reals)
    (MultiPolynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (test_exists_unbounded_TCC1 0
  (test_exists_unbounded_TCC1-1 nil 3503943900 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (test_exists_unbounded subtype "4"
    "{i: integers.int | booleans.OR(tests.x /= 0, reals.>=(i, 0))}")))
 (test_exists_unbounded 0
  (test_exists_unbounded-1 nil 3503943902 ("" (bernstein :depth 200) nil nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MVars type-eq-decl nil MPoly nil) (Vars type-eq-decl nil util nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IntervalEndpoints type-eq-decl nil util nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Counterexample adt-constructor-decl "[(cons?) -> (isfalse?)]" Outcome_adt
     nil)
    (isfalse? adt-recognizer-decl "[Outcome -> boolean]" Outcome_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (a2l__MaxVarMinDir const-decl "[bool, nat]" a2l__vardirselector nil)
    (a2l__multipoly_strategy const-decl "Outcome" strat_util nil)
    (a2l__VarSelector type-eq-decl nil a2l__vardirselector nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (PolyList type-eq-decl nil util nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (Outcome type-decl nil Outcome_adt nil)
    (list2array def-decl "T" array2list structures)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (MPolyRel type-eq-decl nil MPoly nil)
    (RealOrder type-eq-decl nil real_orders reals)
    (MultiPolynomial type-eq-decl nil util nil)
    (DegreeMono type-eq-decl nil util nil) (Coeff type-eq-decl nil util nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   shostak)))


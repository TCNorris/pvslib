(minmax
 (between_combine_lr 0
  (between_combine_lr-1 nil 3512333812 ("" (grind) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (combine const-decl "Outminmax" minmax nil)
    (between? const-decl "bool" minmax nil)
    (outminmax_translate const-decl "Outminmax" minmax nil)
    (combine_lr const-decl "Outminmax" minmax nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (false_globalexit_inv 0
  (false_globalexit_inv-1 nil 3512246910 ("" (grind) nil nil)
   ((false_globalexit const-decl "bool" minmax nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (combine const-decl "Outminmax" minmax nil)
    (outminmax_translate const-decl "Outminmax" minmax nil)
    (globalexit_inv? const-decl "bool" minmax nil))
   shostak
   (false_globalexit_inv subtype "minmax.false_globalexit"
    "(minmax.globalexit_inv?)")))
 (rel_globalexit_inv 0
  (rel_globalexit_inv-1 nil 3512242508 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (realorder? const-decl "bool" real_orders reals)
    (RealOrder type-eq-decl nil real_orders reals)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (length def-decl "nat" list_props nil)
    (setnth def-decl "{sl: listn(length(l)) |
   FORALL (i: below(length(l))):
     IF i = n THEN nth(sl, i) = f(nth(l, i))
     ELSE nth(sl, i) = nth(l, i)
     ENDIF}" listn structures)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rel_counterex const-decl "bool" minmax nil)
    (rel_globalexit const-decl "bool" minmax nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (combine const-decl "Outminmax" minmax nil)
    (outminmax_translate const-decl "Outminmax" minmax nil)
    (globalexit_inv? const-decl "bool" minmax nil))
   shostak))
 (eps_localexit_inv 0
  (eps_localexit_inv-1 nil 3512247090 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (length def-decl "nat" list_props nil)
    (setnth def-decl "{sl: listn(length(l)) |
   FORALL (i: below(length(l))):
     IF i = n THEN nth(sl, i) = f(nth(l, i))
     ELSE nth(sl, i) = nth(l, i)
     ENDIF}" listn structures)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eps_localexit const-decl "bool" minmax nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (combine const-decl "Outminmax" minmax nil)
    (outminmax_translate const-decl "Outminmax" minmax nil)
    (localexit_inv? const-decl "bool" minmax nil))
   nil
   (eps_localexit_inv subtype "minmax.eps_localexit(minmax.e)"
    "(minmax.localexit_inv?)")))
 (rel_localexit_inv 0
  (rel_localexit_inv-1 nil 3512247469 ("" (grind) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rel_localexit const-decl "bool" minmax nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (combine const-decl "Outminmax" minmax nil)
    (outminmax_translate const-decl "Outminmax" minmax nil)
    (localexit_inv? const-decl "bool" minmax nil))
   nil
   (rel_localexit_inv subtype "minmax.rel_localexit(minmax.rel)"
    "(minmax.localexit_inv?)"))))


(sqrt_two
 (even_or_odd 0
  (even_or_odd-1 nil 3451978115
   ("" (skosimp)
    (("" (lemma "even_plus1")
      (("" (inst - "n!1")
        (("" (case "FORALL (n: nat): even?(n) IFF divides(2, n)")
          (("1" (inst-cp -1 "n!1")
            (("1" (inst -1 "n!1 + 1") (("1" (prop) nil nil)) nil)) nil)
           ("2" (hide-all-but 1)
            (("2" (skosimp)
              (("2" (expand "even?")
                (("2" (expand "divides") (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_plus1 formula-decl nil naturalnumbers nil)
    (divides const-decl "bool" divides nil)
    (even? const-decl "bool" integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (two_divides_sq_TCC1 0
  (two_divides_sq_TCC1-1 nil 3451976286 ("" (subtype-tcc) nil nil)
   ((sq const-decl "nonneg_real" sq reals)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil (two_divides_sq subtype "sq.sq(sqrt_two.n)" "int")))
 (two_divides_sq 0
  (two_divides_sq-1 nil 3451976288
   ("" (skosimp)
    (("" (prop)
      (("1" (lemma "even_or_odd")
        (("1" (inst-cp - "n!1")
          (("1" (inst - "sq(n!1)")
            (("1" (replace -1 :hide? t)
              (("1" (replace -1 :hide? t)
                (("1" (expand "divides")
                  (("1" (skosimp)
                    (("1" (inst + "2 * sq(x!1) - n!1")
                      (("1" (rewrite "sq_eq" -1 :dir rl)
                        (("1" (rewrite "sq_times")
                          (("1" (rewrite "sq_plus")
                            (("1" (expand "sq" -1 2) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "sq") (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (expand "sq") (("2" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (expand "divides")
        (("2" (skosimp)
          (("2" (inst + "2 * sq(x!1)")
            (("1" (rewrite "sq_eq" -1 :dir rl)
              (("1" (rewrite "sq_times")
                (("1" (expand "sq" -1 2) (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (expand "sq") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (divides const-decl "bool" divides nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "int" sqrt_two nil)
    (sq_times formula-decl nil sq reals) (sq_1 formula-decl nil sq reals)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sq_plus formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (sq_eq formula-decl nil sq reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (n!1 skolem-const-decl "nat" sqrt_two nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (even_or_odd formula-decl nil sqrt_two nil)
    (x!1 skolem-const-decl "int" sqrt_two nil))
   shostak))
 (sqrt2_is_irrational 0
  (sqrt2_is_irrational-1 nil 3449215355
   ("" (lemma "quotient_fully_cancelled")
    (("" (inst - "sqrt(2)")
      (("1" (skosimp)
        (("1" (cross-mult -2)
          (("1" (lemma "sq_eq")
            (("1" (inst - "sqrt(2) * q!1" "p!1")
              (("1" (flatten)
                (("1" (hide -1)
                  (("1" (split -1)
                    (("1" (rewrite "sq_times")
                      (("1" (lemma "two_divides_sq")
                        (("1" (inst-cp - "p!1")
                          (("1" (flatten)
                            (("1" (hide -3)
                              (("1" (prop)
                                (("1" (hide -5)
                                  (("1" (expand "divides" -1)
                                    (("1" (skosimp)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (rewrite "sq_times")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst - "q!1")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide -3)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (expand "divides")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (lemma
                                                             "gcd_times")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "2"
                                                               "x!1"
                                                               "x!2")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "q!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "divides")
                                                      (("2"
                                                        (inst + "sq(x!1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand "sq")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "sq")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "divides")
                                  (("2" (inst + "sq(q!1)")
                                    (("1" (assert) nil nil)
                                     ("2" (assert)
                                      (("2"
                                        (expand "sq")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (> const-decl "bool" reals nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (div_cancel4 formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_times formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq_sqrt formula-decl nil sqrt reals)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (q!1 skolem-const-decl "posint" sqrt_two nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (x!1 skolem-const-decl "int" sqrt_two nil)
    (sq const-decl "nonneg_real" sq reals)
    (x!2 skolem-const-decl "int" sqrt_two nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (gcd_times formula-decl nil gcd ints)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (divides const-decl "bool" divides nil)
    (two_divides_sq formula-decl nil sqrt_two nil)
    (sq_eq formula-decl nil sq reals)
    (quotient_fully_cancelled formula-decl nil gcd_fractions ints))
   shostak)))


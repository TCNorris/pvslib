(nat_list_enum (sum_upto_floor_search_TCC1 0
                (sum_upto_floor_search_TCC1-1 nil 3707492247
                 ("" (subtype-tcc) nil nil)
                 ((nnint_plus_posint_is_posint application-judgement "posint"
                   integers nil)
                  (even_times_int_is_even application-judgement "even_int"
                   integers nil)
                  (nnint_times_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil))
                 nil
                 (sum_upto_floor_search subtype
                   "(number_fields.-)(number_fields.*(4, nat_list_enum.n), nat_list_enum.k)"
                   "naturalnumber")))
               (sum_upto_floor_search_TCC2 0
                (sum_upto_floor_search_TCC2-1 nil 3707492247
                 ("" (subtype-tcc) nil nil)
                 ((boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (NOT const-decl "[bool -> bool]" booleans nil)
                  (number nonempty-type-decl nil numbers nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (>= const-decl "bool" reals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (<= const-decl "bool" reals nil)
                  (numfield nonempty-type-eq-decl nil number_fields nil)
                  (+ const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (* const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (posrat_div_posrat_is_posrat application-judgement "posrat"
                   rationals nil)
                  (real_lt_is_strict_total_order name-judgement
                   "(strict_total_order?[real])" real_props nil)
                  (real_gt_is_strict_total_order name-judgement
                   "(strict_total_order?[real])" real_props nil)
                  (real_le_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (real_ge_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (nnint_plus_posint_is_posint application-judgement "posint"
                   integers nil)
                  (even_times_int_is_even application-judgement "even_int"
                   integers nil)
                  (nnint_times_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil)
                  (nnint_plus_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil))
                 nil
                 (sum_upto_floor_search subtype "nat_list_enum.k"
                   "{j | booleans.AND(reals.<=(number_fields./((number_fields.+)(nat_list_enum.j, number_fields.*(nat_list_enum.j, nat_list_enum.j)), 2), nat_list_enum.n), reals.<(nat_list_enum.n, number_fields./((number_fields.+)((number_fields.+)(2, nat_list_enum.j), (number_fields.+)(number_fields.*(2, nat_list_enum.j), number_fields.*(nat_list_enum.j, nat_list_enum.j))), 2)))}")))
               (sum_upto_floor_search_TCC3 0
                (sum_upto_floor_search_TCC3-1 nil 3707492247
                 ("" (subtype-tcc) nil nil)
                 ((boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (NOT const-decl "[bool -> bool]" booleans nil)
                  (number nonempty-type-decl nil numbers nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (>= const-decl "bool" reals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (<= const-decl "bool" reals nil)
                  (numfield nonempty-type-eq-decl nil number_fields nil)
                  (+ const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (* const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (real_gt_is_strict_total_order name-judgement
                   "(strict_total_order?[real])" real_props nil)
                  (real_le_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (real_ge_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (nnint_plus_posint_is_posint application-judgement "posint"
                   integers nil)
                  (even_times_int_is_even application-judgement "even_int"
                   integers nil)
                  (nnint_times_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil)
                  (nnint_plus_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil))
                 nil
                 (sum_upto_floor_search subtype
                   "(number_fields.+)(nat_list_enum.k, 1)"
                   "{k | reals.<=((number_fields.+)(nat_list_enum.k, number_fields.*(nat_list_enum.k, nat_list_enum.k)), number_fields.*(2, nat_list_enum.n))}")))
               (sum_upto_floor_search_TCC4 0
                (sum_upto_floor_search_TCC4-1 nil 3707492247
                 ("" (termination-tcc) nil nil)
                 ((nnint_plus_posint_is_posint application-judgement "posint"
                   integers nil)
                  (even_times_int_is_even application-judgement "even_int"
                   integers nil)
                  (nnint_times_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil)
                  (nnint_plus_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (even_minus_odd_is_odd application-judgement "odd_int"
                   integers nil))
                 nil
                 (sum_upto_floor_search termination
                   "nat_list_enum.sum_upto_floor_search(nat_list_enum.n, (number_fields.+)(nat_list_enum.k, 1))"
                   "nil")))
               (sum_upto_floor_TCC1 0
                (sum_upto_floor_TCC1-1 nil 3707492310
                 ("" (subtype-tcc) nil nil)
                 ((boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (NOT const-decl "[bool -> bool]" booleans nil)
                  (number nonempty-type-decl nil numbers nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (>= const-decl "bool" reals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil))
                 nil
                 (sum_upto_floor subtype "0"
                                 "{j | booleans.AND(reals.<=(number_fields./((number_fields.+)(nat_list_enum.j, number_fields.*(nat_list_enum.j, nat_list_enum.j)), 2), nat_list_enum.n), reals.<(nat_list_enum.n, number_fields./((number_fields.+)((number_fields.+)(2, nat_list_enum.j), (number_fields.+)(number_fields.*(2, nat_list_enum.j), number_fields.*(nat_list_enum.j, nat_list_enum.j))), 2)))}")))
               (sum_upto_floor_TCC2 0
                (sum_upto_floor_TCC2-1 nil 3707492310
                 ("" (skeep*)
                  (("" (expand "max")
                    (("" (lift-if)
                      (("" (ground)
                        (("" (name "x" "sqrt_lb(2*n,4)")
                          (("" (replace -1)
                            (("" (typepred "x")
                              (("" (lemma "sq_le")
                                (("" (inst - "floor(x)" "x")
                                  (("" (expand "sq") (("" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ((max const-decl "{p: real | p >= m AND p >= n}" real_defs
                       nil)
                  (real_ge_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (real_le_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (even_plus_even_is_even application-judgement "even_int"
                   integers nil)
                  (nnint_plus_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (int_times_even_is_even application-judgement "even_int"
                   integers nil)
                  (nnint_times_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (even_times_int_is_even application-judgement "even_int"
                   integers nil)
                  (int_minus_int_is_int application-judgement "int" integers
                   nil)
                  (real_lt_is_strict_total_order name-judgement
                   "(strict_total_order?[real])" real_props nil)
                  (int_plus_int_is_int application-judgement "int" integers
                   nil)
                  (int_times_int_is_int application-judgement "int" integers
                   nil)
                  (sq_le formula-decl nil sq reals)
                  (nnreal_times_nnreal_is_nnreal application-judgement
                   "nnreal" real_types nil)
                  (integer nonempty-type-from-decl nil integers nil)
                  (AND const-decl "[bool, bool -> bool]" booleans nil)
                  (<= const-decl "bool" reals nil)
                  (< const-decl "bool" reals nil)
                  (+ const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
                  (NOT const-decl "[bool -> bool]" booleans nil)
                  (number nonempty-type-decl nil numbers nil)
                  (= const-decl "[T, T -> boolean]" equalities nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (>= const-decl "bool" reals nil)
                  (nnreal type-eq-decl nil real_types nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (nonneg_real nonempty-type-eq-decl nil real_types nil)
                  (sq const-decl "nonneg_real" sq reals)
                  (sqrt_lb const-decl "{zz | x >= sq(zz)}" sqrt_approx reals)
                  (numfield nonempty-type-eq-decl nil number_fields nil)
                  (* const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (TRUE const-decl "bool" booleans nil)
                  (nonneg_floor_is_nat application-judgement "nat" floor_ceil
                   nil))
                 nil
                 (sum_upto_floor subtype
                                 "real_defs.max((number_fields.-)(floor_ceil.floor(sqrt_approx.sqrt_lb(number_fields.*(2, nat_list_enum.n), 4)), 1), 0)"
                                 "{k | reals.<=((number_fields.+)(nat_list_enum.k, number_fields.*(nat_list_enum.k, nat_list_enum.k)), number_fields.*(2, nat_list_enum.n))}")))
               (sum_upto_floor_unique 0
                (sum_upto_floor_unique-1 nil 3707498323
                 ("" (skeep*)
                  (("" (name "d" "sum_upto_floor(n)")
                    (("" (replace -1)
                      (("" (typepred "d")
                        (("" (name "F" "LAMBDA (g:real): g*(g+1)")
                          ((""
                            (case "FORALL (g,h:nnreal): g<=h IMPLIES F(g)<=F(h)")
                            (("1" (case "d<j")
                              (("1" (inst - "d+1" "j")
                                (("1" (assert)
                                  (("1" (expand "F") (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst - "j+1" "d")
                                (("2" (assert)
                                  (("2" (expand "F") (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (skeep*)
                                (("2" (expand "F")
                                  (("2" (lemma "sq_le")
                                    (("2" (inst - "g" "h")
                                      (("2"
                                        (expand "sq")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ((sum_upto_floor const-decl
                                  "{j | j * (j + 1) / 2 <= n AND n < (j + 1) * (j + 2) / 2}"
                                  nat_list_enum nil)
                  (< const-decl "bool" reals nil)
                  (* const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (+ const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (/ const-decl "[numfield, nznum -> numfield]" number_fields
                     nil)
                  (nznum nonempty-type-eq-decl nil number_fields nil)
                  (/= const-decl "boolean" notequal nil)
                  (numfield nonempty-type-eq-decl nil number_fields nil)
                  (<= const-decl "bool" reals nil)
                  (AND const-decl "[bool, bool -> bool]" booleans nil)
                  (>= const-decl "bool" reals nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (= const-decl "[T, T -> boolean]" equalities nil)
                  (number nonempty-type-decl nil numbers nil)
                  (NOT const-decl "[bool -> bool]" booleans nil)
                  (nnreal type-eq-decl nil real_types nil)
                  (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
                  (F skolem-const-decl "[real -> real]" nat_list_enum nil)
                  (real_lt_is_strict_total_order name-judgement
                   "(strict_total_order?[real])" real_props nil)
                  (real_le_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (nnrat_div_posrat_is_nnrat application-judgement
                   "nonneg_rat" rationals nil)
                  (posrat_div_posrat_is_posrat application-judgement "posrat"
                   rationals nil)
                  (even_times_int_is_even application-judgement "even_int"
                   integers nil)
                  (sq_le formula-decl nil sq reals)
                  (sq const-decl "nonneg_real" sq reals)
                  (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
                   real_types nil)
                  (nnreal_times_nnreal_is_nnreal application-judgement
                   "nnreal" real_types nil)
                  (nonneg_real nonempty-type-eq-decl nil real_types nil)
                  (real_times_real_is_real application-judgement "real" reals
                   nil)
                  (posint_times_posint_is_posint application-judgement
                   "posint" integers nil)
                  (nnint_plus_posint_is_posint application-judgement "posint"
                   integers nil)
                  (boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (TRUE const-decl "bool" booleans nil)
                  (nnint_times_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (nnint_plus_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil))
                 shostak))
               (double_nat_enum_TCC1 0
                (double_nat_enum_TCC1-1 nil 3707493010
                 ("" (skeep*)
                  (("" (lemma "even_or_odd")
                    (("" (inst - "k")
                      (("" (ground)
                        (("1" (expand "even?")
                          (("1" (skeep)
                            (("1" (replace -1)
                              (("1" (assert)
                                (("1" (case "(4*(j*j)+2*j)/2=2*(j*j)+j")
                                  (("1" (replaces -1) (("1" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "odd?")
                          (("2" (skeep)
                            (("2" (replaces -1)
                              (("2" (assert)
                                (("2"
                                  (case "(2 + 4 * (j * j) + 4 * j + 2 * j) / 2 = (1 + 2 * (j * j) + 2 * j +   j)")
                                  (("1" (replaces -1) (("1" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ((even_or_odd formula-decl nil naturalnumbers nil)
                  (real_ge_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (rat_minus_rat_is_rat application-judgement "rat" rationals
                   nil)
                  (nnrat_div_posrat_is_nnrat application-judgement
                   "nonneg_rat" rationals nil)
                  (nnint_plus_posint_is_posint application-judgement "posint"
                   integers nil)
                  (int_times_int_is_int application-judgement "int" integers
                   nil)
                  (int_times_even_is_even application-judgement "even_int"
                   integers nil)
                  (even_plus_even_is_even application-judgement "even_int"
                   integers nil)
                  (rat_div_nzrat_is_rat application-judgement "rat" rationals
                   nil)
                  (even_times_int_is_even application-judgement "even_int"
                   integers nil)
                  (int_minus_int_is_int application-judgement "int" integers
                   nil)
                  (= const-decl "[T, T -> boolean]" equalities nil)
                  (int_plus_int_is_int application-judgement "int" integers
                   nil)
                  (even? const-decl "bool" integers nil)
                  (odd_times_odd_is_odd application-judgement "odd_int"
                   integers nil)
                  (odd_plus_odd_is_even application-judgement "even_int"
                   integers nil)
                  (odd_plus_even_is_odd application-judgement "odd_int"
                   integers nil)
                  (odd? const-decl "bool" integers nil)
                  (< const-decl "bool" reals nil)
                  (* const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (+ const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (/ const-decl "[numfield, nznum -> numfield]" number_fields
                     nil)
                  (nznum nonempty-type-eq-decl nil number_fields nil)
                  (/= const-decl "boolean" notequal nil)
                  (numfield nonempty-type-eq-decl nil number_fields nil)
                  (<= const-decl "bool" reals nil)
                  (AND const-decl "[bool, bool -> bool]" booleans nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (>= const-decl "bool" reals nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (number nonempty-type-decl nil numbers nil)
                  (boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (TRUE const-decl "bool" booleans nil)
                  (nnint_times_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (nnint_plus_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil))
                 nil (double_nat_enum subtype "nat_list_enum.fix" "nat")))
               (double_nat_enum_TCC2 0
                (double_nat_enum_TCC2-1 nil 3707493010
                 ("" (skeep*)
                  (("" (assert)
                    (("" (case "NOT k-fix>=0")
                      (("1" (hide 2)
                        (("1" (case "fix>k")
                          (("1" (replace -3 -1)
                            (("1" (case "NOT (k+1)*(k+2)/2<n+1")
                              (("1" (assert) nil nil)
                               ("2" (case "(k+1)*(k+2)/2<=n")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (case "FORALL (zz:nat): zz<n+1 IMPLIES zz<=n")
                                  (("1" (inst - "(k+1)*(k+2)/2")
                                    (("1" (assert) nil nil)
                                     ("2" (lemma "even_or_odd")
                                      (("2"
                                        (inst - "k")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (ground)
                                            (("1"
                                              (expand "even?")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (replaces -1)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "odd?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (replaces -1)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skeep) (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (replace -3)
                          (("2" (assert)
                            (("2" (lemma "even_or_odd")
                              (("2" (inst - "k")
                                (("2" (assert)
                                  (("2" (ground)
                                    (("1" (expand "even?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "(4 * (j * j) + 2 * j) / 2 = 2*(j*j)+j")
                                                (("1"
                                                  (replaces -1)
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (expand "odd?")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (replaces -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "(2 + 4 * (j * j) + 4 * j + 2 * j) / 2=(1 + 2 * (j * j) + 2 * j +  j)")
                                              (("1"
                                                (replaces -1)
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ((nnint_plus_posint_is_posint application-judgement "posint"
                   integers nil)
                  (nnrat_div_posrat_is_nnrat application-judgement
                   "nonneg_rat" rationals nil)
                  (rat_minus_rat_is_rat application-judgement "rat" rationals
                   nil)
                  (rat_plus_rat_is_rat application-judgement "rat" rationals
                   nil)
                  (int_plus_int_is_int application-judgement "int" integers
                   nil)
                  (= const-decl "[T, T -> boolean]" equalities nil)
                  (int_minus_int_is_int application-judgement "int" integers
                   nil)
                  (real_le_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (real_ge_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (n skolem-const-decl "nat" nat_list_enum nil)
                  (k skolem-const-decl
                   "{j | (j + j * j) / 2 <= n AND n < (2 + 3 * j + j * j) / 2}"
                   nat_list_enum nil)
                  (int_times_int_is_int application-judgement "int" integers
                   nil)
                  (int_times_even_is_even application-judgement "even_int"
                   integers nil)
                  (even_plus_even_is_even application-judgement "even_int"
                   integers nil)
                  (rat_div_nzrat_is_rat application-judgement "rat" rationals
                   nil)
                  (even? const-decl "bool" integers nil)
                  (nzint_times_nzint_is_nzint application-judgement "nzint"
                   integers nil)
                  (odd_times_odd_is_odd application-judgement "odd_int"
                   integers nil)
                  (even_plus_odd_is_odd application-judgement "odd_int"
                   integers nil)
                  (odd_plus_odd_is_even application-judgement "even_int"
                   integers nil)
                  (odd_plus_even_is_odd application-judgement "odd_int"
                   integers nil)
                  (odd? const-decl "bool" integers nil)
                  (even_or_odd formula-decl nil naturalnumbers nil)
                  (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
                  (real_gt_is_strict_total_order name-judgement
                   "(strict_total_order?[real])" real_props nil)
                  (even_times_int_is_even application-judgement "even_int"
                   integers nil)
                  (posint_times_posint_is_posint application-judgement
                   "posint" integers nil)
                  (real_lt_is_strict_total_order name-judgement
                   "(strict_total_order?[real])" real_props nil)
                  (posrat_div_posrat_is_posrat application-judgement "posrat"
                   rationals nil)
                  (> const-decl "bool" reals nil)
                  (NOT const-decl "[bool -> bool]" booleans nil)
                  (number nonempty-type-decl nil numbers nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (>= const-decl "bool" reals nil)
                  (numfield nonempty-type-eq-decl nil number_fields nil)
                  (- const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (AND const-decl "[bool, bool -> bool]" booleans nil)
                  (<= const-decl "bool" reals nil)
                  (/= const-decl "boolean" notequal nil)
                  (nznum nonempty-type-eq-decl nil number_fields nil)
                  (/ const-decl "[numfield, nznum -> numfield]" number_fields
                     nil)
                  (+ const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (* const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (< const-decl "bool" reals nil)
                  (rat nonempty-type-eq-decl nil rationals nil)
                  (boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (TRUE const-decl "bool" booleans nil)
                  (nnint_times_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (nnint_plus_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil))
                 nil
                 (double_nat_enum subtype
                                  "(number_fields.-)(nat_list_enum.k, nat_list_enum.fix)"
                                  "nat")))
               (double_nat_enum_inv_TCC1 0
                (double_nat_enum_inv_TCC1-1 nil 3707492310
                 ("" (skeep)
                  (("" (lemma "even_or_odd")
                    (("" (inst - "n+m")
                      (("" (split +)
                        (("1" (flatten)
                          (("1" (split -)
                            (("1" (replace 1)
                              (("1" (expand "even?")
                                (("1" (skeep -)
                                  (("1" (replace -1)
                                    (("1" (assert)
                                      (("1"
                                        (case
                                         "(2 + 2 * j + (4 * (j * j) + 4 * j)) / 2 = (1 + 1 * j + (2 * (j * j) + 2 * j)) ")
                                        (("1"
                                          (replaces -1)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace 1)
                              (("2" (expand "odd?")
                                (("2" (skeep)
                                  (("2" (replaces -1)
                                    (("2" (assert)
                                      (("2"
                                        (case
                                         "(6 + 4 * j + (4 * (j * j) + 6 * j)) / 2 = (3 + 2 * j + (2 * (j * j) + 3 * j)) ")
                                        (("1"
                                          (replaces -1)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1)
                          (("2" (case "n = 0")
                            (("1" (assert) nil nil) ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ((even_or_odd formula-decl nil naturalnumbers nil)
                  (even? const-decl "bool" integers nil)
                  (nnint_plus_posint_is_posint application-judgement "posint"
                   integers nil)
                  (posint_times_posint_is_posint application-judgement
                   "posint" integers nil)
                  (posrat_div_posrat_is_posrat application-judgement "posrat"
                   rationals nil)
                  (rat_minus_rat_is_rat application-judgement "rat" rationals
                   nil)
                  (int_plus_int_is_int application-judgement "int" integers
                   nil)
                  (= const-decl "[T, T -> boolean]" equalities nil)
                  (/= const-decl "boolean" notequal nil)
                  (nznum nonempty-type-eq-decl nil number_fields nil)
                  (/ const-decl "[numfield, nznum -> numfield]" number_fields
                     nil)
                  (* const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (int_minus_int_is_int application-judgement "int" integers
                   nil)
                  (TRUE const-decl "bool" booleans nil)
                  (odd_plus_even_is_odd application-judgement "odd_int"
                   integers nil)
                  (even_times_int_is_even application-judgement "even_int"
                   integers nil)
                  (rat_div_nzrat_is_rat application-judgement "rat" rationals
                   nil)
                  (int_times_even_is_even application-judgement "even_int"
                   integers nil)
                  (even_plus_odd_is_odd application-judgement "odd_int"
                   integers nil)
                  (even_plus_even_is_even application-judgement "even_int"
                   integers nil)
                  (int_times_int_is_int application-judgement "int" integers
                   nil)
                  (odd? const-decl "bool" integers nil)
                  (odd_plus_odd_is_even application-judgement "even_int"
                   integers nil)
                  (real_ge_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (nnint_times_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (>= const-decl "bool" reals nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (+ const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (numfield nonempty-type-eq-decl nil number_fields nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (boolean nonempty-type-decl nil booleans nil)
                  (number nonempty-type-decl nil numbers nil)
                  (nnint_plus_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil))
                 nil
                 (double_nat_enum_inv subtype
                  "(number_fields.-)((number_fields.-)(number_fields./(number_fields.*(((number_fields.+)((number_fields.+)(nat_list_enum.n, nat_list_enum.m), 1)), ((number_fields.+)((number_fields.+)(nat_list_enum.n, nat_list_enum.m), 2))), 2), 1), nat_list_enum.m)"
                  "nat")))
               (double_nat_enum_inv_def 0
                (double_nat_enum_inv_def-1 nil 3707497961
                 ("" (skeep*)
                  (("" (expand "double_nat_enum_inv" :assert? none)
                    ((""
                      (case "EXISTS (A:nat): A = (n + m + 1) * (n + m + 2) / 2 - 1 - m")
                      (("1" (skeep -)
                        (("1" (replace -1 :dir rl)
                          (("1" (expand "double_nat_enum")
                            (("1" (case "NOT sum_upto_floor(A) = n+m")
                              (("1" (hide 2)
                                (("1" (lemma "sum_upto_floor_unique")
                                  (("1" (inst - "n+m" "A")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (replace -1) (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "even_or_odd")
                        (("2" (inst - "n+m")
                          (("2" (flatten)
                            (("2" (split -)
                              (("1" (replace 1)
                                (("1" (expand "even?")
                                  (("1" (skeep)
                                    (("1" (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           +
                                           "(1 + 1 * j + (2 * (j * j) + 2 * j)) - 1 - m")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (div-by -1 "2")
                                              (("2"
                                                (replace -1 1 :dir rl)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (replace 1)
                                (("2" (expand "odd?")
                                  (("2" (skeep)
                                    (("2" (replace -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst
                                           +
                                           "(3 + 2 * j + (2* (j * j) + 3 * j))  - 1 - m")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (both-sides "-" "1" -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (div-by -1 "2")
                                                  (("2"
                                                    (replace -1 1 :dir rl)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide (2 3))
                                                        (("2"
                                                          (grind)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             1
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (grind)
                                                                (("2"
                                                                  (grind)
                                                                  (("2"
                                                                    (real-props)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ((double_nat_enum_inv const-decl "nat" nat_list_enum nil)
                  (even_or_odd formula-decl nil naturalnumbers nil)
                  (odd_plus_odd_is_even application-judgement "even_int"
                   integers nil)
                  (odd_plus_even_is_odd application-judgement "odd_int"
                   integers nil)
                  (times_div1 formula-decl nil real_props nil)
                  (div_times formula-decl nil real_props nil)
                  (even_minus_even_is_even application-judgement "even_int"
                   integers nil)
                  (rat_times_rat_is_rat application-judgement "rat" rationals
                   nil)
                  (real_gt_is_strict_total_order name-judgement
                   "(strict_total_order?[real])" real_props nil)
                  (> const-decl "bool" reals nil)
                  (odd_minus_odd_is_even application-judgement "even_int"
                   integers nil)
                  (j skolem-const-decl "int" nat_list_enum nil)
                  (odd? const-decl "bool" integers nil)
                  (int_times_int_is_int application-judgement "int" integers
                   nil)
                  (even_plus_even_is_even application-judgement "even_int"
                   integers nil)
                  (even_plus_odd_is_odd application-judgement "odd_int"
                   integers nil)
                  (int_times_even_is_even application-judgement "even_int"
                   integers nil)
                  (rat_div_nzrat_is_rat application-judgement "rat" rationals
                   nil)
                  (nnrat_times_nnrat_is_nnrat application-judgement
                   "nonneg_rat" rationals nil)
                  (times_div_cancel1 formula-decl nil extra_real_props nil)
                  (nonzero_real nonempty-type-eq-decl nil reals nil)
                  (both_sides_div1 formula-decl nil real_props nil)
                  (m skolem-const-decl "nat" nat_list_enum nil)
                  (j skolem-const-decl "int" nat_list_enum nil)
                  (int_minus_int_is_int application-judgement "int" integers
                   nil)
                  (real_ge_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (int_plus_int_is_int application-judgement "int" integers
                   nil)
                  (even? const-decl "bool" integers nil)
                  (nnint_times_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil)
                  (nnrat_div_posrat_is_nnrat application-judgement
                   "nonneg_rat" rationals nil)
                  (nnrat_plus_nnrat_is_nnrat application-judgement
                   "nonneg_rat" rationals nil)
                  (double_nat_enum const-decl "[nat, nat]" nat_list_enum nil)
                  (rat_plus_rat_is_rat application-judgement "rat" rationals
                   nil)
                  (even_times_int_is_even application-judgement "even_int"
                   integers nil)
                  (real_le_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (real_lt_is_strict_total_order name-judgement
                   "(strict_total_order?[real])" real_props nil)
                  (sum_upto_floor_unique formula-decl nil nat_list_enum nil)
                  (sum_upto_floor const-decl
                                  "{j | j * (j + 1) / 2 <= n AND n < (j + 1) * (j + 2) / 2}"
                                  nat_list_enum nil)
                  (< const-decl "bool" reals nil)
                  (<= const-decl "bool" reals nil)
                  (AND const-decl "[bool, bool -> bool]" booleans nil)
                  (NOT const-decl "[bool -> bool]" booleans nil)
                  (posrat_div_posrat_is_posrat application-judgement "posrat"
                   rationals nil)
                  (posint_times_posint_is_posint application-judgement
                   "posint" integers nil)
                  (nnint_plus_posint_is_posint application-judgement "posint"
                   integers nil)
                  (nnint_plus_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (rat_minus_rat_is_rat application-judgement "rat" rationals
                   nil)
                  (number nonempty-type-decl nil numbers nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (>= const-decl "bool" reals nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (= const-decl "[T, T -> boolean]" equalities nil)
                  (numfield nonempty-type-eq-decl nil number_fields nil)
                  (- const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (/= const-decl "boolean" notequal nil)
                  (nznum nonempty-type-eq-decl nil number_fields nil)
                  (/ const-decl "[numfield, nznum -> numfield]" number_fields
                     nil)
                  (* const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (+ const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (TRUE const-decl "bool" booleans nil))
                 shostak))
               (double_nat_enum_inv_def2 0
                (double_nat_enum_inv_def2-1 nil 3707498906
                 ("" (skeep*)
                  (("" (expand "double_nat_enum" :assert? none)
                    (("" (name "kz" "sum_upto_floor(n)")
                      (("" (replace -1)
                        (("" (assert)
                          (("" (expand "double_nat_enum_inv")
                            (("" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ((nnint_times_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (nnint_plus_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil)
                  (double_nat_enum const-decl "[nat, nat]" nat_list_enum nil)
                  (nnint_plus_posint_is_posint application-judgement "posint"
                   integers nil)
                  (nnrat_div_posrat_is_nnrat application-judgement
                   "nonneg_rat" rationals nil)
                  (even_times_int_is_even application-judgement "even_int"
                   integers nil)
                  (double_nat_enum_inv const-decl "nat" nat_list_enum nil)
                  (nonneg_floor_is_nat application-judgement "nat" floor_ceil
                   nil)
                  (real_lt_is_strict_total_order name-judgement
                   "(strict_total_order?[real])" real_props nil)
                  (posrat_exp application-judgement "posrat" exponentiation
                   nil)
                  (rat_times_rat_is_rat application-judgement "rat" rationals
                   nil)
                  (posint_exp application-judgement "posint" exponentiation
                   nil)
                  (nnrat_times_nnrat_is_nnrat application-judgement
                   "nonneg_rat" rationals nil)
                  (minus_int_is_int application-judgement "int" integers nil)
                  (nonneg_ceiling_is_nat application-judgement "nat"
                   floor_ceil nil)
                  (posnat_expt application-judgement "posnat" exponentiation
                   nil)
                  (posint_times_posint_is_posint application-judgement
                   "posint" integers nil)
                  (posreal_div_posreal_is_posreal application-judgement
                   "posreal" real_types nil)
                  (posrat_div_posrat_is_posrat application-judgement "posrat"
                   rationals nil)
                  (sqrt_lb const-decl "{zz | x >= sq(zz)}" sqrt_approx reals)
                  (sq const-decl "nonneg_real" sq reals)
                  (sqrt_int_lb const-decl "{zz | x >= sq(zz)}" sqrt_approx
                               reals)
                  (sqrt_int_lower const-decl
                                  "{z | sq(z) <= x AND z <= 2 ^ (M + 1) AND z >= 2 ^ M}"
                                  sqrt_approx reals)
                  (sqrt_newton_interv_lower const-decl "{z | X >= sq(z)}"
                    sqrt_approx reals)
                  (^ const-decl "real" exponentiation nil)
                  (expt def-decl "real" exponentiation nil)
                  (max const-decl "{p: real | p >= m AND p >= n}" real_defs
                       nil)
                  (log_int const-decl
                           "[z: int, {y: real | y < p AND y >= 1 AND x = p ^ z * y}]"
                           log_int reals)
                  (rat_minus_rat_is_rat application-judgement "rat" rationals
                   nil)
                  (number nonempty-type-decl nil numbers nil)
                  (= const-decl "[T, T -> boolean]" equalities nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (>= const-decl "bool" reals nil)
                  (AND const-decl "[bool, bool -> bool]" booleans nil)
                  (<= const-decl "bool" reals nil)
                  (numfield nonempty-type-eq-decl nil number_fields nil)
                  (/= const-decl "boolean" notequal nil)
                  (nznum nonempty-type-eq-decl nil number_fields nil)
                  (/ const-decl "[numfield, nznum -> numfield]" number_fields
                     nil)
                  (+ const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (* const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (< const-decl "bool" reals nil)
                  (sum_upto_floor const-decl
                                  "{j | j * (j + 1) / 2 <= n AND n < (j + 1) * (j + 2) / 2}"
                                  nat_list_enum nil)
                  (boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (TRUE const-decl "bool" booleans nil))
                 shostak))
               (nat_pair_to_list_length_TCC1 0
                (nat_pair_to_list_length_TCC1-1 nil 3707556885
                 ("" (skeep*) (("" (grind) nil nil)) nil)
                 ((length def-decl "nat" list_props nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil)
                  (nnint_plus_posint_is_posint application-judgement "posint"
                   integers nil)
                  (boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (TRUE const-decl "bool" booleans nil))
                 nil
                 (nat_pair_to_list_length subtype
                   "list_adt[nat].cons(nat_list_enum.m, list_adt[nat].null)"
                   "{l: list_adt[nat].list | list_props[nat].length(l) = (number_fields.+)(1, nat_list_enum.n)}")))
               (nat_pair_to_list_length_TCC2 0
                (nat_pair_to_list_length_TCC2-1 nil 3707556885
                 ("" (subtype-tcc) nil nil)
                 ((boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (NOT const-decl "[bool -> bool]" booleans nil)
                  (number nonempty-type-decl nil numbers nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (>= const-decl "bool" reals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (int_minus_int_is_int application-judgement "int" integers
                   nil)
                  (real_lt_is_strict_total_order name-judgement
                   "(strict_total_order?[real])" real_props nil)
                  (real_ge_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (rat_minus_rat_is_rat application-judgement "rat" rationals
                   nil)
                  (double_nat_enum const-decl "[nat, nat]" nat_list_enum nil)
                  (nnint_times_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (nnint_plus_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil)
                  (nnrat_div_posrat_is_nnrat application-judgement
                   "nonneg_rat" rationals nil)
                  (nnrat_plus_nnrat_is_nnrat application-judgement
                   "nonneg_rat" rationals nil))
                 nil
                 (nat_pair_to_list_length subtype
                   "(number_fields.-)(nat_list_enum.n, 1)" "nat")))
               (nat_pair_to_list_length_TCC3 0
                (nat_pair_to_list_length_TCC3-1 nil 3707556885
                 ("" (termination-tcc) nil nil)
                 ((nnint_times_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (nnint_plus_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil)
                  (nonneg_floor_is_nat application-judgement "nat" floor_ceil
                   nil)
                  (posrat_exp application-judgement "posrat" exponentiation
                   nil)
                  (rat_times_rat_is_rat application-judgement "rat" rationals
                   nil)
                  (posint_exp application-judgement "posint" exponentiation
                   nil)
                  (even_times_int_is_even application-judgement "even_int"
                   integers nil)
                  (nnrat_times_nnrat_is_nnrat application-judgement
                   "nonneg_rat" rationals nil)
                  (minus_int_is_int application-judgement "int" integers nil)
                  (posnat_expt application-judgement "posnat" exponentiation
                   nil)
                  (posint_times_posint_is_posint application-judgement
                   "posint" integers nil)
                  (posreal_div_posreal_is_posreal application-judgement
                   "posreal" real_types nil)
                  (double_nat_enum const-decl "[nat, nat]" nat_list_enum nil)
                  (sum_upto_floor const-decl
                                  "{j | j * (j + 1) / 2 <= n AND n < (j + 1) * (j + 2) / 2}"
                                  nat_list_enum nil)
                  (sqrt_lb const-decl "{zz | x >= sq(zz)}" sqrt_approx reals)
                  (sq const-decl "nonneg_real" sq reals)
                  (sqrt_int_lb const-decl "{zz | x >= sq(zz)}" sqrt_approx
                               reals)
                  (sqrt_int_lower const-decl
                                  "{z | sq(z) <= x AND z <= 2 ^ (M + 1) AND z >= 2 ^ M}"
                                  sqrt_approx reals)
                  (sqrt_newton_interv_lower const-decl "{z | X >= sq(z)}"
                    sqrt_approx reals)
                  (^ const-decl "real" exponentiation nil)
                  (expt def-decl "real" exponentiation nil)
                  (max const-decl "{p: real | p >= m AND p >= n}" real_defs
                       nil)
                  (log_int const-decl
                           "[z: int, {y: real | y < p AND y >= 1 AND x = p ^ z * y}]"
                           log_int reals))
                 nil
                 (nat_pair_to_list_length termination
                   "nat_list_enum.nat_pair_to_list_length((number_fields.-)(nat_list_enum.n, 1), nat_list_enum.i)"
                   "nil")))
               (nat_pair_to_list_length_TCC4 0
                (nat_pair_to_list_length_TCC4-1 nil 3707556885
                 ("" (skeep*)
                  (("" (typepred "v(n-1,i)")
                    (("1" (hide -1)
                      (("1" (expand "length" +) (("1" (propax) nil nil)) nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ((- const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (+ const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (numfield nonempty-type-eq-decl nil number_fields nil)
                  (length def-decl "nat" list_props nil)
                  (= const-decl "[T, T -> boolean]" equalities nil)
                  (< const-decl "bool" reals nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (>= const-decl "bool" reals nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (AND const-decl "[bool, bool -> bool]" booleans nil)
                  (every adt-def-decl "boolean" list_adt nil)
                  (list type-decl nil list_adt nil)
                  (PRED type-eq-decl nil defined_types nil)
                  (number nonempty-type-decl nil numbers nil)
                  (NOT const-decl "[bool -> bool]" booleans nil)
                  (int_minus_int_is_int application-judgement "int" integers
                   nil)
                  (real_ge_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (TRUE const-decl "bool" booleans nil))
                 nil
                 (nat_pair_to_list_length subtype
                   "list_adt[nat].cons(nat_list_enum.j, nat_list_enum.nat_pair_to_list_length((number_fields.-)(nat_list_enum.n, 1), nat_list_enum.i))"
                   "{l: list_adt[nat].list | list_props[nat].length(l) = (number_fields.+)(1, nat_list_enum.n)}")))
               (nat_pair_to_list_length_inv_TCC1 0
                (nat_pair_to_list_length_inv_TCC1-1 nil 3707557421
                 ("" (grind) nil nil)
                 ((boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (NOT const-decl "[bool -> bool]" booleans nil)
                  (number nonempty-type-decl nil numbers nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (>= const-decl "bool" reals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (PRED type-eq-decl nil defined_types nil)
                  (list type-decl nil list_adt nil)
                  (every adt-def-decl "boolean" list_adt nil)
                  (AND const-decl "[bool, bool -> bool]" booleans nil)
                  (= const-decl "[T, T -> boolean]" equalities nil)
                  (length def-decl "nat" list_props nil)
                  (numfield nonempty-type-eq-decl nil number_fields nil)
                  (+ const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (real_ge_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (odd_plus_even_is_odd application-judgement "odd_int"
                   integers nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil))
                 nil
                 (nat_pair_to_list_length_inv subtype "nat_list_enum.l"
                  "(list_adt[nat].cons?)")))
               (nat_pair_to_list_length_inv_TCC2 0
                (nat_pair_to_list_length_inv_TCC2-1 nil 3707557421
                 ("" (subtype-tcc) nil nil)
                 ((boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (NOT const-decl "[bool -> bool]" booleans nil)
                  (number nonempty-type-decl nil numbers nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (>= const-decl "bool" reals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (PRED type-eq-decl nil defined_types nil)
                  (list type-decl nil list_adt nil)
                  (every adt-def-decl "boolean" list_adt nil)
                  (AND const-decl "[bool, bool -> bool]" booleans nil)
                  (= const-decl "[T, T -> boolean]" equalities nil)
                  (length def-decl "nat" list_props nil)
                  (numfield nonempty-type-eq-decl nil number_fields nil)
                  (+ const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (int_minus_int_is_int application-judgement "int" integers
                   nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil)
                  (real_ge_is_total_order name-judgement
                   "(total_order?[real])" real_props nil))
                 nil
                 (nat_pair_to_list_length_inv subtype
                  "(number_fields.-)(nat_list_enum.n, 1)" "nat")))
               (nat_pair_to_list_length_inv_TCC3 0
                (nat_pair_to_list_length_inv_TCC3-1 nil 3707557421
                 ("" (grind) nil nil)
                 ((boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (NOT const-decl "[bool -> bool]" booleans nil)
                  (number nonempty-type-decl nil numbers nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (>= const-decl "bool" reals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (PRED type-eq-decl nil defined_types nil)
                  (list type-decl nil list_adt nil)
                  (every adt-def-decl "boolean" list_adt nil)
                  (AND const-decl "[bool, bool -> bool]" booleans nil)
                  (= const-decl "[T, T -> boolean]" equalities nil)
                  (length def-decl "nat" list_props nil)
                  (numfield nonempty-type-eq-decl nil number_fields nil)
                  (+ const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil)
                  (real_ge_is_total_order name-judgement
                   "(total_order?[real])" real_props nil))
                 nil
                 (nat_pair_to_list_length_inv subtype "nat_list_enum.l"
                  "(list_adt[nat].cons?)")))
               (nat_pair_to_list_length_inv_TCC4 0
                (nat_pair_to_list_length_inv_TCC4-1 nil 3707557421
                 ("" (skeep*)
                  (("" (typepred "l")
                    (("" (expand "length" -2)
                      (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ((+ const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (numfield nonempty-type-eq-decl nil number_fields nil)
                  (length def-decl "nat" list_props nil)
                  (= const-decl "[T, T -> boolean]" equalities nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (>= const-decl "bool" reals nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (AND const-decl "[bool, bool -> bool]" booleans nil)
                  (every adt-def-decl "boolean" list_adt nil)
                  (list type-decl nil list_adt nil)
                  (PRED type-eq-decl nil defined_types nil)
                  (number nonempty-type-decl nil numbers nil)
                  (NOT const-decl "[bool -> bool]" booleans nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil)
                  (nnint_plus_posint_is_posint application-judgement "posint"
                   integers nil)
                  (boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (TRUE const-decl "bool" booleans nil))
                 nil
                 (nat_pair_to_list_length_inv subtype
                  "list_adt[nat].cdr(nat_list_enum.l)"
                  "{l: list_adt[nat].list | list_props[nat].length(l) = nat_list_enum.n}")))
               (nat_pair_to_list_length_inv_TCC5 0
                (nat_pair_to_list_length_inv_TCC5-1 nil 3707557421
                 ("" (termination-tcc) nil nil) nil nil
                 (nat_pair_to_list_length_inv termination
                  "nat_list_enum.nat_pair_to_list_length_inv((number_fields.-)(nat_list_enum.n, 1), list_adt[nat].cdr(nat_list_enum.l))"
                  "nil")))
               (nat_pair_to_list_length_inv_def_TCC1 0
                (nat_pair_to_list_length_inv_def_TCC1-1 nil 3707558331
                 ("" (subtype-tcc) nil nil) nil nil
                 (nat_pair_to_list_length_inv_def subtype "nat_list_enum.l"
                  "{l: list_adt[nat].list | list_props[nat].length(l) = (number_fields.+)(1, nat_list_enum.n)}")))
               (nat_pair_to_list_length_inv_def 0
                (nat_pair_to_list_length_inv_def-1 nil 3707558374
                 ("" (induct "n")
                  (("1" (skeep*)
                    (("1" (typepred "l")
                      (("1" (hide -1)
                        (("1" (expand "nat_pair_to_list_length_inv")
                          (("1" (expand "nat_pair_to_list_length")
                            (("1" (case "NOT l = cons(car(l),cdr(l))")
                              (("1" (assert)
                                (("1" (decompose-equality 1) nil nil)) nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skolem 1 "n")
                    (("2" (flatten)
                      (("2" (skeep*)
                        (("2" (typepred "l")
                          (("2" (hide -1)
                            (("2" (expand "nat_pair_to_list_length_inv")
                              (("2" (inst - "cdr(l)")
                                (("2" (assert)
                                  (("2" (lift-if)
                                    (("2" (ground)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand
                                             "nat_pair_to_list_length_inv")
                                            (("1"
                                              (expand
                                               "nat_pair_to_list_length"
                                               +)
                                              (("1"
                                                (lemma
                                                 "double_nat_enum_inv_def")
                                                (("1"
                                                  (rewrite -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "nat_pair_to_list_length")
                                                      (("1"
                                                        (decompose-equality 1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand
                                         "nat_pair_to_list_length_inv"
                                         +)
                                        (("2"
                                          (expand "nat_pair_to_list_length" +)
                                          (("2"
                                            (lemma "double_nat_enum_inv_def")
                                            (("2"
                                              (rewrite -1)
                                              (("2"
                                                (replace -2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (decompose-equality 2)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ((double_nat_enum_inv const-decl "nat" nat_list_enum nil)
                  (- const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (real_ge_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (double_nat_enum_inv_def formula-decl nil nat_list_enum nil)
                  (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
                  (null adt-constructor-decl "(null?)" list_adt nil)
                  (even_plus_even_is_even application-judgement "even_int"
                   integers nil)
                  (odd_plus_even_is_odd application-judgement "odd_int"
                   integers nil)
                  (int_minus_int_is_int application-judgement "int" integers
                   nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil)
                  (TRUE const-decl "bool" booleans nil)
                  (nnint_plus_posint_is_posint application-judgement "posint"
                   integers nil)
                  (list_cons_extensionality formula-decl nil list_adt nil)
                  (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
                  (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
                  (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt
                        nil)
                  (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
                  (NOT const-decl "[bool -> bool]" booleans nil)
                  (nat_induction formula-decl nil naturalnumbers nil)
                  (nat_pair_to_list_length_inv def-decl "[nat, nat]"
                   nat_list_enum nil)
                  (nat_pair_to_list_length def-decl
                    "{l: list[nat] | length(l) = n + 1}" nat_list_enum nil)
                  (+ const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (numfield nonempty-type-eq-decl nil number_fields nil)
                  (length def-decl "nat" list_props nil)
                  (= const-decl "[T, T -> boolean]" equalities nil)
                  (AND const-decl "[bool, bool -> bool]" booleans nil)
                  (every adt-def-decl "boolean" list_adt nil)
                  (PRED type-eq-decl nil defined_types nil)
                  (list type-decl nil list_adt nil)
                  (pred type-eq-decl nil defined_types nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (>= const-decl "bool" reals nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (boolean nonempty-type-decl nil booleans nil)
                  (number nonempty-type-decl nil numbers nil))
                 shostak))
               (nat_pair_to_list_length_inv_def2 0
                (nat_pair_to_list_length_inv_def2-1 nil 3707561777
                 ("" (induct "n")
                  (("1" (skeep*)
                    (("1" (expand "nat_pair_to_list_length_inv")
                      (("1" (expand "nat_pair_to_list_length")
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (skolem 1 "n")
                    (("2" (flatten)
                      (("2" (skeep)
                        (("2" (expand "nat_pair_to_list_length" +)
                          (("2" (assert)
                            (("2" (expand "nat_pair_to_list_length_inv" +)
                              (("2" (assert)
                                (("2" (rewrite -1)
                                  (("2" (assert)
                                    (("2" (lemma "double_nat_enum_inv_def2")
                                      (("2"
                                        (inst - "m")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ((posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil)
                  (double_nat_enum_inv_def2 formula-decl nil nat_list_enum
                   nil)
                  (double_nat_enum const-decl "[nat, nat]" nat_list_enum nil)
                  (TRUE const-decl "bool" booleans nil)
                  (nat_induction formula-decl nil naturalnumbers nil)
                  (nat_pair_to_list_length def-decl
                    "{l: list[nat] | length(l) = n + 1}" nat_list_enum nil)
                  (nat_pair_to_list_length_inv def-decl "[nat, nat]"
                   nat_list_enum nil)
                  (+ const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (numfield nonempty-type-eq-decl nil number_fields nil)
                  (length def-decl "nat" list_props nil)
                  (AND const-decl "[bool, bool -> bool]" booleans nil)
                  (every adt-def-decl "boolean" list_adt nil)
                  (PRED type-eq-decl nil defined_types nil)
                  (list type-decl nil list_adt nil)
                  (= const-decl "[T, T -> boolean]" equalities nil)
                  (pred type-eq-decl nil defined_types nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (>= const-decl "bool" reals nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (boolean nonempty-type-decl nil booleans nil)
                  (number nonempty-type-decl nil numbers nil))
                 shostak))
               (nat_list_enum_TCC1 0
                (nat_list_enum_TCC1-1 nil 3707563144
                 ("" (subtype-tcc) nil nil)
                 ((boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (NOT const-decl "[bool -> bool]" booleans nil)
                  (number nonempty-type-decl nil numbers nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (>= const-decl "bool" reals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (int_minus_int_is_int application-judgement "int" integers
                   nil)
                  (real_ge_is_total_order name-judgement
                   "(total_order?[real])" real_props nil))
                 nil
                 (nat_list_enum subtype
                                "(number_fields.-)(nat_list_enum.n, 1)"
                                "nat")))
               (nat_list_enum_inv_TCC1 0
                (nat_list_enum_inv_TCC1-1 nil 3707563319 ("" (grind) nil nil)
                 ((boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (NOT const-decl "[bool -> bool]" booleans nil)
                  (number nonempty-type-decl nil numbers nil)
                  (PRED type-eq-decl nil defined_types nil)
                  (list type-decl nil list_adt nil)
                  (every adt-def-decl "boolean" list_adt nil)
                  (AND const-decl "[bool, bool -> bool]" booleans nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (>= const-decl "bool" reals nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (length def-decl "nat" list_props nil)
                  (nnint_plus_posint_is_posint application-judgement "posint"
                   integers nil)
                  (int_minus_int_is_int application-judgement "int" integers
                   nil)
                  (real_ge_is_total_order name-judgement
                   "(total_order?[real])" real_props nil))
                 nil
                 (nat_list_enum_inv subtype
                  "(number_fields.-)(list_props[nat].length(nat_list_enum.l), 1)"
                  "nat")))
               (nat_list_enum_inv_def 0
                (nat_list_enum_inv_def-1 nil 3707563451
                 ("" (skeep*)
                  (("" (expand "nat_list_enum_inv")
                    (("" (expand "nat_list_enum")
                      (("" (lift-if)
                        (("" (ground)
                          (("" (lemma "double_nat_enum_inv_def")
                            ((""
                              (inst -
                               "(nat_pair_to_list_length_inv(length(l) - 1, l)`2)"
                               "(nat_pair_to_list_length_inv(length(l) - 1, l)`1)")
                              (("1" (replaces -1)
                                (("1" (assert)
                                  (("1"
                                    (lemma "nat_pair_to_list_length_inv_def")
                                    (("1" (inst - "length(l)-1" "l")
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (hide (2 3))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide (2 3)) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ((nat_list_enum_inv const-decl "nat" nat_list_enum nil)
                  (double_nat_enum_inv_def formula-decl nil nat_list_enum nil)
                  (nat_pair_to_list_length_inv_def formula-decl nil
                   nat_list_enum nil)
                  (double_nat_enum_inv const-decl "nat" nat_list_enum nil)
                  (even_times_int_is_even application-judgement "even_int"
                   integers nil)
                  (nnint_times_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (nnint_plus_nnint_is_nnint application-judgement
                   "nonneg_int" integers nil)
                  (posint_times_posint_is_posint application-judgement
                   "posint" integers nil)
                  (posrat_div_posrat_is_posrat application-judgement "posrat"
                   rationals nil)
                  (rat_minus_rat_is_rat application-judgement "rat" rationals
                   nil)
                  (nnint_plus_posint_is_posint application-judgement "posint"
                   integers nil)
                  (nat_pair_to_list_length_inv def-decl "[nat, nat]"
                   nat_list_enum nil)
                  (+ const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (= const-decl "[T, T -> boolean]" equalities nil)
                  (number nonempty-type-decl nil numbers nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (>= const-decl "bool" reals nil)
                  (numfield nonempty-type-eq-decl nil number_fields nil)
                  (- const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (list type-decl nil list_adt nil)
                  (PRED type-eq-decl nil defined_types nil)
                  (every adt-def-decl "boolean" list_adt nil)
                  (AND const-decl "[bool, bool -> bool]" booleans nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (length def-decl "nat" list_props nil)
                  (l skolem-const-decl "list[nat]" nat_list_enum nil)
                  (real_ge_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil)
                  (int_minus_int_is_int application-judgement "int" integers
                   nil)
                  (nat_list_enum const-decl "list[nat]" nat_list_enum nil)
                  (boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (TRUE const-decl "bool" booleans nil))
                 shostak))
               (nat_list_enum_inv_def2 0
                (nat_list_enum_inv_def2-1 nil 3707563978
                 ("" (skeep)
                  (("" (expand "nat_list_enum")
                    (("" (expand "nat_list_enum_inv")
                      (("" (lift-if)
                        (("" (ground)
                          (("1"
                            (typepred
                             "nat_pair_to_list_length(double_nat_enum(n - 1)`1,
                                    double_nat_enum(n - 1)`2)")
                            (("1" (hide -1)
                              (("1" (expand "length") (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (typepred
                             "nat_pair_to_list_length(double_nat_enum(n - 1)`1,
                                    double_nat_enum(n - 1)`2)")
                            (("2" (lemma "nat_pair_to_list_length_inv_def2")
                              (("2"
                                (inst - "double_nat_enum(n - 1)`2"
                                 "double_nat_enum(n - 1)`1")
                                (("2" (replace -3)
                                  (("2" (assert)
                                    (("2" (replace -1)
                                      (("2"
                                        (lemma "double_nat_enum_inv_def2")
                                        (("2"
                                          (inst - "n-1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ((nat_list_enum const-decl "list[nat]" nat_list_enum nil)
                  (double_nat_enum_inv_def2 formula-decl nil nat_list_enum
                   nil)
                  (nat_pair_to_list_length_inv_def2 formula-decl nil
                   nat_list_enum nil)
                  (- const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (double_nat_enum const-decl "[nat, nat]" nat_list_enum nil)
                  (nat_pair_to_list_length def-decl
                    "{l: list[nat] | length(l) = n + 1}" nat_list_enum nil)
                  (+ const-decl "[numfield, numfield -> numfield]"
                     number_fields nil)
                  (numfield nonempty-type-eq-decl nil number_fields nil)
                  (length def-decl "nat" list_props nil)
                  (= const-decl "[T, T -> boolean]" equalities nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (>= const-decl "bool" reals nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (AND const-decl "[bool, bool -> bool]" booleans nil)
                  (every adt-def-decl "boolean" list_adt nil)
                  (list type-decl nil list_adt nil)
                  (PRED type-eq-decl nil defined_types nil)
                  (number nonempty-type-decl nil numbers nil)
                  (NOT const-decl "[bool -> bool]" booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (boolean nonempty-type-decl nil booleans nil)
                  (real_ge_is_total_order name-judgement
                   "(total_order?[real])" real_props nil)
                  (posint_plus_nnint_is_posint application-judgement "posint"
                   integers nil)
                  (int_minus_int_is_int application-judgement "int" integers
                   nil)
                  (nat_list_enum_inv const-decl "nat" nat_list_enum nil))
                 shostak))
               (nat_list_enum_inv_bijective 0
                (nat_list_enum_inv_bijective-1 nil 3707569657
                 ("" (lemma "nat_list_enum_inv_def")
                  (("" (lemma "nat_list_enum_inv_def2")
                    (("" (expand "bijective?")
                      (("" (expand "injective?")
                        (("" (expand "surjective?")
                          (("" (split)
                            (("1" (skeep)
                              (("1" (inst-cp - "x1")
                                (("1" (inst - "x2") (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep*)
                              (("2" (inst -2 "y") (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ((nat_list_enum_inv_def2 formula-decl nil nat_list_enum nil)
                  (injective? const-decl "bool" functions nil)
                  (number nonempty-type-decl nil numbers nil)
                  (boolean nonempty-type-decl nil booleans nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (number_field nonempty-type-from-decl nil number_fields nil)
                  (real_pred const-decl "[number_field -> boolean]" reals nil)
                  (real nonempty-type-from-decl nil reals nil)
                  (rational_pred const-decl "[real -> boolean]" rationals nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (integer_pred const-decl "[rational -> boolean]" integers
                                nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (>= const-decl "bool" reals nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (list type-decl nil list_adt nil)
                  (PRED type-eq-decl nil defined_types nil)
                  (every adt-def-decl "boolean" list_adt nil)
                  (AND const-decl "[bool, bool -> bool]" booleans nil)
                  (nat_list_enum_inv const-decl "nat" nat_list_enum nil)
                  (TRUE const-decl "bool" booleans nil)
                  (surjective? const-decl "bool" functions nil)
                  (bijective? const-decl "bool" functions nil)
                  (nat_list_enum_inv_def formula-decl nil nat_list_enum nil))
                 shostak))
               (nat_list_enum_test 0
                (nat_list_enum_test-1 nil 3707570009
                 ("" (eval-formula) nil nil)
                 ((boolean nonempty-type-decl nil booleans nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (bijective? const-decl "bool" functions nil)
                  (id const-decl "(bijective?[T, T])" identity nil)
                  (TRUE const-decl "bool" booleans nil))
                 shostak)))


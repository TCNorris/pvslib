(primes_sum_squares
 (sum_of_two_squares?_TCC1 0
  (sum_of_two_squares?_TCC1-1 nil 3501936852 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (sum_of_two_squares? subtype "2"
    "{i: integers.int | booleans.OR(primes_sum_squares.a /= 0, reals.>=(i, 0))}")))
 (sots_int?_TCC1 0
  (sots_int?_TCC1-1 nil 3501939999 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (sots_int? subtype "2"
    "{i: integers.int | booleans.OR(primes_sum_squares.ai /= 0, reals.>=(i, 0))}")))
 (sots_int_def 0
  (sots_int_def-1 nil 3501939999
   ("" (skeep)
    (("" (expand "sum_of_two_squares?")
      (("" (expand "sots_int?")
        (("" (skosimp*)
          (("" (inst + "abs(ai!1)" "abs(bi!1)")
            (("" (replace -1) (("" (hide -) (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat_exp application-judgement "nat" exponentiation nil)
    (sum_of_two_squares? const-decl "bool" primes_sum_squares nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_expt application-judgement "int" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (sots_int? const-decl "bool" primes_sum_squares nil)
    (int_exp application-judgement "int" exponentiation nil))
   shostak))
 (Brahmagupta_Fibonacci 0
  (Brahmagupta_Fibonacci-1 nil 3501936852
   ("" (skeep)
    (("" (typepred "ns")
      (("" (typepred "ms")
        (("" (expand "sum_of_two_squares?")
          (("" (skosimp*)
            (("" (name "vv" "(a!1*b!2-b!1*a!2)")
              (("" (case "vv>=0")
                (("1" (inst + "(a!1*a!2 + b!1*b!2)" "vv")
                  (("1" (replace -3)
                    (("1" (replace -4)
                      (("1" (hide -)
                        (("1" (expand "vv") (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst + "(a!1*a!2 + b!1*b!2)" "-vv")
                  (("1" (replace -2)
                    (("1" (replace -3)
                      (("1" (expand "vv" +)
                        (("1" (hide-all-but 2) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sum_of_two_squares? const-decl "bool" primes_sum_squares nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (vv skolem-const-decl "int" primes_sum_squares nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_expt application-judgement "int" exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   shostak))
 (prime_divides 0
  (prime_divides-1 nil 3501939374
   ("" (case "FORALL (k,r:int): divides(k,r) IFF divides(k,-r)")
    (("1" (label "intlem" -1)
      (("1" (hide "intlem")
        (("1"
          (case "FORALL (nn, mm: posnat, p: (prime?)):
                                          divides(p, nn * mm) IMPLIES (divides(p, nn) OR divides(p, mm))")
          (("1" (skeep)
            (("1" (case "ai = 0 OR bi=0")
              (("1" (split -)
                (("1" (replace -1) (("1" (assert) nil nil)) nil)
                 ("2" (replace -1) (("2" (assert) nil nil)) nil))
                nil)
               ("2" (flatten)
                (("2"
                  (case "FORALL (nn, mm: posnat, p: (prime?)):
                                                          divides(p, (-nn) * mm) IMPLIES (divides(p, (-nn)) OR divides(p, mm))")
                  (("1"
                    (case "FORALL (nn, mm: posnat, p: (prime?)):
                                                                  divides(p, (-nn) * (-mm)) IMPLIES (divides(p, (-nn)) OR divides(p, (-mm)))")
                    (("1" (case "ai<0")
                      (("1" (case "bi<0")
                        (("1" (assert)
                          (("1" (inst -3 "-ai" "-bi" "p")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (inst -3 "-ai" "bi" "p")
                          (("1" (assert) nil nil) ("2" (assert) nil nil)
                           ("3" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (case "bi<0")
                        (("1" (inst -3 "-bi" "ai" "p")
                          (("1" (assert) nil nil) ("2" (assert) nil nil)
                           ("3" (assert) nil nil))
                          nil)
                         ("2" (inst -3 "ai" "bi" "p")
                          (("1" (assert) nil nil) ("2" (assert) nil nil)
                           ("3" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide (2 3 4 5 6))
                      (("2" (skosimp*)
                        (("2" (inst - "nn!1" "mm!1" "p!1")
                          (("2" (assert)
                            (("2" (split -)
                              (("1" (reveal "intlem")
                                (("1" (inst?) (("1" (assert) nil nil)) nil))
                                nil)
                               ("2" (reveal "intlem")
                                (("2" (inst?) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (2 3 4 5 6))
                    (("2" (skosimp*)
                      (("2" (inst - "nn!1" "mm!1" "p!1")
                        (("2" (assert)
                          (("2" (split -)
                            (("1" (reveal "intlem")
                              (("1" (inst?) (("1" (assert) nil nil)) nil))
                              nil)
                             ("2" (reveal "intlem")
                              (("2" (inst?) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skeep)
              (("2" (expand "divides" -)
                (("2" (skolem -1 "r")
                  (("2"
                    (case "FORALL (kr:posnat): (NOT divides(p,kr)) IMPLIES gcd(p,kr) = 1")
                    (("1" (inst - "mm")
                      (("1" (assert)
                        (("1" (lemma "gcd_factors")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1" (skosimp*)
                                (("1" (replace -2)
                                  (("1" (mult-by -1 "nn")
                                    (("1" (assert)
                                      (("1"
                                        (expand "divides" 1)
                                        (("1"
                                          (name "vv" "ip!1*nn + jp!1*r")
                                          (("1"
                                            (case "nn=p*vv")
                                            (("1"
                                              (case "vv > 0")
                                              (("1" (inst + "vv") nil nil)
                                               ("2"
                                                (lemma
                                                 "posreal_times_posreal_is_posreal")
                                                (("2"
                                                  (inst - "p" "-vv")
                                                  (("1" (assert) nil nil)
                                                   ("2" (assert) nil nil)
                                                   ("3"
                                                    (typepred "p")
                                                    (("3"
                                                      (expand "prime?")
                                                      (("3" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (skeep)
                        (("2" (typepred "gcd(p,kr)")
                          (("2" (typepred "p")
                            (("2" (expand "prime?")
                              (("2" (flatten)
                                (("2" (inst - "gcd(p,kr)")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (case "FORALL (k, r: int): divides(k, r) IMPLIES divides(k, -r)")
        (("1" (skeep)
          (("1" (ground)
            (("1" (inst - "k" "r") (("1" (assert) nil nil)) nil)
             ("2" (inst - "k" "-r") (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2" (expand "divides")
              (("2" (skosimp*)
                (("2" (inst + "-x!1") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (prime? const-decl "bool" primes ints)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ai skolem-const-decl "int" primes_sum_squares nil)
    (bi skolem-const-decl "int" primes_sum_squares nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gcd_factors formula-decl nil gcd ints)
    (p skolem-const-decl "(prime?)" primes_sum_squares nil)
    (vv skolem-const-decl "int" primes_sum_squares nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd ints)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (divides const-decl "bool" divides nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   nil))
 (sots_div_prime_closed_TCC1 0
  (sots_div_prime_closed_TCC1-1 nil 3501939374 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sum_of_two_squares? const-decl "bool" primes_sum_squares nil)
    (prime_sum_of_two_squares? const-decl "bool" primes_sum_squares nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prime? const-decl "bool" primes ints)
    (^ const-decl "real" exponentiation nil)
    (divides const-decl "bool" divides nil)
    (/= const-decl "boolean" notequal nil))
   nil (sots_div_prime_closed subtype "primes_sum_squares.ps" "nznum")))
 (sots_div_prime_closed_TCC2 0
  (sots_div_prime_closed_TCC2-2 "" 3790091415
   ("" (skeep)
    (("" (expand "divides")
      (("" (skosimp*)
        (("" (case "ns/ps = x!1")
          (("1" (assert) (("1" (cross-mult 1) nil nil)) nil)
           ("2" (cross-mult 1) (("2" (assert) nil nil)) nil)
           ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (sots_div_prime_closed subtype
    "number_fields./(primes_sum_squares.ns, primes_sum_squares.ps)" "nat"))
  (sots_div_prime_closed_TCC2-1 nil 3501939374
   ("" (skeep)
    (("" (expand "divides")
      (("" (skosimp*)
        (("" (case "ns/ps = x!1")
          (("1" (assert) (("1" (cross-mult 1) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (cross-mult 1) (("2" (assert) nil nil)) nil)
           ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((divides const-decl "bool" divides nil)
    (prime_sum_of_two_squares? const-decl "bool" primes_sum_squares nil)
    (sum_of_two_squares? const-decl "bool" primes_sum_squares nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel3 formula-decl nil real_props nil))
   nil
   (sots_div_prime_closed subtype
    "number_fields./(primes_sum_squares.ns, primes_sum_squares.ps)" "nat")))
 (sots_div_prime_closed 0
  (sots_div_prime_closed-2 "" 3790091425
   (""
    (case "FORALL (rr:nzint,rs:int): divides(rr,rs) IMPLIES integer_pred(rs/rr)")
    (("1" (label "integerpredlem" -1)
      (("1" (hide "integerpredlem")
        (("1" (case "FORALL (rr,rs:int): divides(rr,rs) IFF divides(rr,-rs)")
          (("1" (label "intlem" -1)
            (("1" (hide "intlem")
              (("1" (skeep)
                (("1" (typepred "ns")
                  (("1" (typepred "ps")
                    (("1"
                      (case "EXISTS (a,b,pp,qq:nat): ns = a^2+b^2 AND ps = pp^2+qq^2")
                      (("1" (skeep -1)
                        (("1" (hide -3)
                          (("1" (hide -3)
                            (("1" (case "divides(ps,(pp*b-a*qq)*(pp*b+a*qq))")
                              (("1" (lemma "prime_divides")
                                (("1" (inst?)
                                  (("1" (assert)
                                    (("1" (hide -2)
                                      (("1"
                                        (split -)
                                        (("1"
                                          (case "divides(ps,(a*pp+b*qq)^2)")
                                          (("1"
                                            (case
                                             "divides(ps^2,(a*pp+b*qq)^2)")
                                            (("1"
                                              (name "f1" "(a*pp+b*qq)/ps")
                                              (("1"
                                                (name "f2" "(a*qq-b*pp)/ps")
                                                (("1"
                                                  (lemma "sots_int_def")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (case
                                                           "integer_pred(f1) and integer_pred(f2)")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "sots_int?")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "f1"
                                                                 "f2")
                                                                (("1"
                                                                  (replace
                                                                   -8
                                                                   +)
                                                                  (("1"
                                                                    (replace
                                                                     -9
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       "f1"
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         "f2"
                                                                         +)
                                                                        (("1"
                                                                          (replace
                                                                           -9
                                                                           +
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (case
                                                                             "ps*(a^2+b^2) = (a * qq - b * pp)^2+(a * pp + b * qq)^2")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("1"
                                                                                (name
                                                                                 "pz"
                                                                                 "a^2+b^2")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (name
                                                                                       "zz"
                                                                                       "(a * qq - b * pp)")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (name
                                                                                           "sz"
                                                                                           "(a * pp + b * qq)")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  (("1"
                                                                                                    (mult-by
                                                                                                     1
                                                                                                     "ps^2")
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      (("1"
                                                                                                        (field)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (typepred
                                                                                                       "ps")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "prime_sum_of_two_squares?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "prime?")
                                                                                                          (("2"
                                                                                                            (ground)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "posreal_times_posreal_is_posreal")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (replace
                                                                                 -9
                                                                                 +)
                                                                                (("2"
                                                                                  (hide
                                                                                   -)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (reveal
                                                             "integerpredlem")
                                                            (("2"
                                                              (split +)
                                                              (("1"
                                                                (expand
                                                                 "f1"
                                                                 +)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "prime_divides")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "a*pp+b*qq"
                                                                         "a*pp+b*qq"
                                                                         "ps")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "^")
                                                                            (("1"
                                                                              (expand
                                                                               "expt")
                                                                              (("1"
                                                                                (expand
                                                                                 "expt")
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "f2"
                                                                 +)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (reveal
                                                                       "intlem")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (reveal
                                                       "integerpredlem")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred "ps")
                                                            (("2"
                                                              (expand
                                                               "prime_sum_of_two_squares?")
                                                              (("2"
                                                                (expand
                                                                 "prime?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (cross-mult
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "prime_divides")
                                              (("2"
                                                (inst
                                                 -
                                                 "a*pp+b*qq"
                                                 "a*pp+b*qq"
                                                 "ps")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case
                                                     "divides(ps, a * pp + b * qq)")
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (expand
                                                         "divides"
                                                         (-1 1))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst + "x!1^2")
                                                            (("1"
                                                              (replace -1)
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "^")
                                                        (("2"
                                                          (expand "expt" -1)
                                                          (("2"
                                                            (expand "expt" -1)
                                                            (("2"
                                                              (expand
                                                               "expt"
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "divides_sum")
                                            (("2"
                                              (inst
                                               -
                                               "ns*ps"
                                               "-(a*qq-b*pp)^2"
                                               "ps")
                                              (("2"
                                                (split -)
                                                (("1"
                                                  (replace -3 -1)
                                                  (("1"
                                                    (replace -4 -1)
                                                    (("1"
                                                      (grind
                                                       :exclude
                                                       ("divides"
                                                        "sum_of_two_squares?"))
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-1 1))
                                                  (("2"
                                                    (expand "divides")
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst
                                                         +
                                                         "x!1*(-pp*b+a*qq)")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (expand "divides")
                                                    (("3"
                                                      (inst?)
                                                      (("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "divides(ps,(a*pp-b*qq)^2)")
                                          (("1"
                                            (case
                                             "divides(ps^2,(a*pp-b*qq)^2)")
                                            (("1"
                                              (name "f1" "(a*pp-b*qq)/ps")
                                              (("1"
                                                (name "f2" "(a*qq+b*pp)/ps")
                                                (("1"
                                                  (lemma "sots_int_def")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (case
                                                           "integer_pred(f1) and integer_pred(f2)")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "sots_int?")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "f1"
                                                                 "f2")
                                                                (("1"
                                                                  (replace
                                                                   -8
                                                                   +)
                                                                  (("1"
                                                                    (replace
                                                                     -9
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       "f1"
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         "f2"
                                                                         +)
                                                                        (("1"
                                                                          (replace
                                                                           -9
                                                                           +
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (case
                                                                             "ps*(a ^ 2 + b ^ 2) =
                                                             (a * pp - b * qq) ^ 2 + (a * qq + b * pp) ^ 2")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("1"
                                                                                (name
                                                                                 "pz"
                                                                                 "a^2+b^2")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (name
                                                                                       "zz"
                                                                                       "(a * pp - b * qq)")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (name
                                                                                           "sz"
                                                                                           "(a * qq + b * pp)")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  (("1"
                                                                                                    (mult-by
                                                                                                     1
                                                                                                     "ps^2")
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      (("1"
                                                                                                        (field)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (typepred
                                                                                                       "ps")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "prime_sum_of_two_squares?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "prime?")
                                                                                                          (("2"
                                                                                                            (ground)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "posreal_times_posreal_is_posreal")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (replace
                                                                                 -9
                                                                                 +)
                                                                                (("2"
                                                                                  (hide
                                                                                   -)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (split +)
                                                            (("1"
                                                              (expand "f1" +)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "prime_divides")
                                                                  (("1"
                                                                    (case
                                                                     "FORALL (i:int,p:(prime?)): divides(p,i^2) IMPLIES divides(p,i)")
                                                                    (("1"
                                                                      (reveal
                                                                       "integerpredlem")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "a*pp-b*qq"
                                                                             "ps")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1 1))
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (case
                                                                           "i!1>=0")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "i!1"
                                                                             "i!1"
                                                                             "p!1")
                                                                            (("1"
                                                                              (expand
                                                                               "^")
                                                                              (("1"
                                                                                (expand
                                                                                 "expt")
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "expt")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -
                                                                             "-i!1"
                                                                             "-i!1"
                                                                             "p!1")
                                                                            (("2"
                                                                              (expand
                                                                               "^")
                                                                              (("2"
                                                                                (expand
                                                                                 "expt")
                                                                                (("2"
                                                                                  (expand
                                                                                   "expt")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "expt")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (reveal
                                                                                         "intlem")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "p!1"
                                                                                           "i!1")
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "f2"
                                                                 +)
                                                                (("2"
                                                                  (reveal
                                                                   "integerpredlem")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (reveal
                                                       "integerpredlem")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred "ps")
                                                            (("2"
                                                              (expand
                                                               "prime_sum_of_two_squares?")
                                                              (("2"
                                                                (expand
                                                                 "prime?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (cross-mult
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "prime_divides")
                                              (("2"
                                                (case
                                                 "FORALL (i:int,p:(prime?)): divides(p,i^2) IMPLIES divides(p,i)")
                                                (("1"
                                                  (inst - "a*pp-b*qq" "ps")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (expand
                                                           "divides"
                                                           (-1 1))
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (inst + "x!1^2")
                                                              (("1"
                                                                (replace -1)
                                                                (("1"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-1 1))
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (case "i!1>=0")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "i!1"
                                                         "i!1"
                                                         "p!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (grind
                                                             :exclude
                                                             ("divides"))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         -
                                                         "-i!1"
                                                         "-i!1"
                                                         "p!1")
                                                        (("2"
                                                          (reveal "intlem")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "p!1"
                                                             "i!1")
                                                            (("2"
                                                              (grind
                                                               :exclude
                                                               ("divides"))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (lemma "divides_sum")
                                              (("2"
                                                (inst
                                                 -
                                                 "ns*ps"
                                                 "-(a*qq+b*pp)^2"
                                                 "ps")
                                                (("2"
                                                  (split -)
                                                  (("1"
                                                    (replace -3 -1)
                                                    (("1"
                                                      (replace -4 -1)
                                                      (("1"
                                                        (grind
                                                         :exclude
                                                         ("divides"
                                                          "sum_of_two_squares?"))
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but (-1 1))
                                                    (("2"
                                                      (expand "divides")
                                                      (("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (inst
                                                           +
                                                           "-x!1*(pp*b+a*qq)")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (expand "divides")
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "divides")
                                (("2" (skosimp*)
                                  (("2" (inst + "pp^2*x!1-a^2")
                                    (("2" (hide 2) (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "prime_sum_of_two_squares?")
                        (("2" (expand "sum_of_two_squares?")
                          (("2" (flatten)
                            (("2" (skosimp*)
                              (("2" (inst + "a!2" "b!2" "a!1" "b!1")
                                (("2" (hide (-1 -4 2)) (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2"
              (case "FORALL (rr, rs: int): divides(rr, rs) IMPLIES divides(rr, -rs)")
              (("1" (skeep)
                (("1" (ground)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)
                   ("2" (inst - "rr" "-rs") (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep)
                  (("2" (expand "divides")
                    (("2" (skosimp*)
                      (("2" (inst + "-x!1") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (expand "divides")
          (("2" (skosimp*)
            (("2" (case "rs/rr=x!1")
              (("1" (assert) (("1" (replace -1) (("1" (assert) nil nil)) nil))
                nil)
               ("2" (cross-mult 1) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (sots_div_prime_closed-1 nil 3501939558
   (""
    (case "FORALL (rr:nzint,rs:int): divides(rr,rs) IMPLIES integer_pred(rs/rr)")
    (("1" (label "integerpredlem" -1)
      (("1" (hide "integerpredlem")
        (("1" (case "FORALL (rr,rs:int): divides(rr,rs) IFF divides(rr,-rs)")
          (("1" (label "intlem" -1)
            (("1" (hide "intlem")
              (("1" (skeep)
                (("1" (typepred "ns")
                  (("1" (typepred "ps")
                    (("1"
                      (case "EXISTS (a,b,pp,qq:nat): ns = a^2+b^2 AND ps = pp^2+qq^2")
                      (("1" (skeep -1)
                        (("1" (hide -3)
                          (("1" (hide -3)
                            (("1" (case "divides(ps,(pp*b-a*qq)*(pp*b+a*qq))")
                              (("1" (lemma "prime_divides")
                                (("1" (inst?)
                                  (("1" (assert)
                                    (("1" (hide -2)
                                      (("1"
                                        (split -)
                                        (("1"
                                          (case "divides(ps,(a*pp+b*qq)^2)")
                                          (("1"
                                            (case
                                             "divides(ps^2,(a*pp+b*qq)^2)")
                                            (("1"
                                              (name "f1" "(a*pp+b*qq)/ps")
                                              (("1"
                                                (name "f2" "(a*qq-b*pp)/ps")
                                                (("1"
                                                  (lemma "sots_int_def")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (case
                                                           "integer_pred(f1) and integer_pred(f2)")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "sots_int?")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "f1"
                                                                 "f2")
                                                                (("1"
                                                                  (replace
                                                                   -8
                                                                   +)
                                                                  (("1"
                                                                    (replace
                                                                     -9
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       "f1"
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         "f2"
                                                                         +)
                                                                        (("1"
                                                                          (replace
                                                                           -9
                                                                           +
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (case
                                                                             "ps*(a^2+b^2) = (a * qq - b * pp)^2+(a * pp + b * qq)^2")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("1"
                                                                                (name
                                                                                 "pz"
                                                                                 "a^2+b^2")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (name
                                                                                       "zz"
                                                                                       "(a * qq - b * pp)")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (name
                                                                                           "sz"
                                                                                           "(a * pp + b * qq)")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  (("1"
                                                                                                    (mult-by
                                                                                                     1
                                                                                                     "ps^2")
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      (("1"
                                                                                                        (field)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (typepred
                                                                                                       "ps")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "prime_sum_of_two_squares?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "prime?")
                                                                                                          (("2"
                                                                                                            (ground)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "posreal_times_posreal_is_posreal")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (replace
                                                                                 -9
                                                                                 +)
                                                                                (("2"
                                                                                  (hide
                                                                                   -)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (reveal
                                                             "integerpredlem")
                                                            (("2"
                                                              (split +)
                                                              (("1"
                                                                (expand
                                                                 "f1"
                                                                 +)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "prime_divides")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "a*pp+b*qq"
                                                                         "a*pp+b*qq"
                                                                         "ps")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "^")
                                                                            (("1"
                                                                              (expand
                                                                               "expt")
                                                                              (("1"
                                                                                (expand
                                                                                 "expt")
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "ps")
                                                                          (("2"
                                                                            (expand
                                                                             "prime_sum_of_two_squares?")
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "f2"
                                                                 +)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (reveal
                                                                       "intlem")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (reveal
                                                       "integerpredlem")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred "ps")
                                                            (("2"
                                                              (expand
                                                               "prime_sum_of_two_squares?")
                                                              (("2"
                                                                (expand
                                                                 "prime?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (cross-mult
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "prime_divides")
                                              (("2"
                                                (inst
                                                 -
                                                 "a*pp+b*qq"
                                                 "a*pp+b*qq"
                                                 "ps")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "divides(ps, a * pp + b * qq)")
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (expand
                                                         "divides"
                                                         (-1 1))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst + "x!1^2")
                                                            (("1"
                                                              (replace -1)
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "^")
                                                        (("2"
                                                          (expand "expt" -1)
                                                          (("2"
                                                            (expand "expt" -1)
                                                            (("2"
                                                              (expand
                                                               "expt"
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "ps")
                                                  (("2"
                                                    (expand
                                                     "prime_sum_of_two_squares?")
                                                    (("2" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "divides_sum")
                                            (("2"
                                              (inst
                                               -
                                               "ns*ps"
                                               "-(a*qq-b*pp)^2"
                                               "ps")
                                              (("2"
                                                (split -)
                                                (("1"
                                                  (replace -3 -1)
                                                  (("1"
                                                    (replace -4 -1)
                                                    (("1"
                                                      (grind
                                                       :exclude
                                                       ("divides"
                                                        "sum_of_two_squares?"))
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-1 1))
                                                  (("2"
                                                    (expand "divides")
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst
                                                         +
                                                         "x!1*(-pp*b+a*qq)")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (expand "divides")
                                                    (("3"
                                                      (inst?)
                                                      (("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "divides(ps,(a*pp-b*qq)^2)")
                                          (("1"
                                            (case
                                             "divides(ps^2,(a*pp-b*qq)^2)")
                                            (("1"
                                              (name "f1" "(a*pp-b*qq)/ps")
                                              (("1"
                                                (name "f2" "(a*qq+b*pp)/ps")
                                                (("1"
                                                  (lemma "sots_int_def")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (case
                                                           "integer_pred(f1) and integer_pred(f2)")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "sots_int?")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "f1"
                                                                 "f2")
                                                                (("1"
                                                                  (replace
                                                                   -8
                                                                   +)
                                                                  (("1"
                                                                    (replace
                                                                     -9
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       "f1"
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         "f2"
                                                                         +)
                                                                        (("1"
                                                                          (replace
                                                                           -9
                                                                           +
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (case
                                                                             "ps*(a ^ 2 + b ^ 2) =
                                                             (a * pp - b * qq) ^ 2 + (a * qq + b * pp) ^ 2")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("1"
                                                                                (name
                                                                                 "pz"
                                                                                 "a^2+b^2")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (name
                                                                                       "zz"
                                                                                       "(a * pp - b * qq)")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (name
                                                                                           "sz"
                                                                                           "(a * qq + b * pp)")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  (("1"
                                                                                                    (mult-by
                                                                                                     1
                                                                                                     "ps^2")
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      (("1"
                                                                                                        (field)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (typepred
                                                                                                       "ps")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "prime_sum_of_two_squares?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "prime?")
                                                                                                          (("2"
                                                                                                            (ground)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "posreal_times_posreal_is_posreal")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (replace
                                                                                 -9
                                                                                 +)
                                                                                (("2"
                                                                                  (hide
                                                                                   -)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (split +)
                                                            (("1"
                                                              (expand "f1" +)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "prime_divides")
                                                                  (("1"
                                                                    (case
                                                                     "FORALL (i:int,p:(prime?)): divides(p,i^2) IMPLIES divides(p,i)")
                                                                    (("1"
                                                                      (reveal
                                                                       "integerpredlem")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "a*pp-b*qq"
                                                                             "ps")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "ps")
                                                                              (("2"
                                                                                (expand
                                                                                 "prime_sum_of_two_squares?")
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1 1))
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (case
                                                                           "i!1>=0")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "i!1"
                                                                             "i!1"
                                                                             "p!1")
                                                                            (("1"
                                                                              (expand
                                                                               "^")
                                                                              (("1"
                                                                                (expand
                                                                                 "expt")
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "expt")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -
                                                                             "-i!1"
                                                                             "-i!1"
                                                                             "p!1")
                                                                            (("2"
                                                                              (expand
                                                                               "^")
                                                                              (("2"
                                                                                (expand
                                                                                 "expt")
                                                                                (("2"
                                                                                  (expand
                                                                                   "expt")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "expt")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (reveal
                                                                                         "intlem")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "p!1"
                                                                                           "i!1")
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "f2"
                                                                 +)
                                                                (("2"
                                                                  (reveal
                                                                   "integerpredlem")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (reveal
                                                       "integerpredlem")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred "ps")
                                                            (("2"
                                                              (expand
                                                               "prime_sum_of_two_squares?")
                                                              (("2"
                                                                (expand
                                                                 "prime?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (cross-mult
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "prime_divides")
                                              (("2"
                                                (case
                                                 "FORALL (i:int,p:(prime?)): divides(p,i^2) IMPLIES divides(p,i)")
                                                (("1"
                                                  (inst - "a*pp-b*qq" "ps")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (expand
                                                           "divides"
                                                           (-1 1))
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (inst + "x!1^2")
                                                              (("1"
                                                                (replace -1)
                                                                (("1"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "ps")
                                                    (("2"
                                                      (expand
                                                       "prime_sum_of_two_squares?")
                                                      (("2" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-1 1))
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (case "i!1>=0")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "i!1"
                                                         "i!1"
                                                         "p!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (grind
                                                             :exclude
                                                             ("divides"))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         -
                                                         "-i!1"
                                                         "-i!1"
                                                         "p!1")
                                                        (("2"
                                                          (reveal "intlem")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "p!1"
                                                             "i!1")
                                                            (("2"
                                                              (grind
                                                               :exclude
                                                               ("divides"))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (lemma "divides_sum")
                                              (("2"
                                                (inst
                                                 -
                                                 "ns*ps"
                                                 "-(a*qq+b*pp)^2"
                                                 "ps")
                                                (("2"
                                                  (split -)
                                                  (("1"
                                                    (replace -3 -1)
                                                    (("1"
                                                      (replace -4 -1)
                                                      (("1"
                                                        (grind
                                                         :exclude
                                                         ("divides"
                                                          "sum_of_two_squares?"))
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but (-1 1))
                                                    (("2"
                                                      (expand "divides")
                                                      (("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (inst
                                                           +
                                                           "-x!1*(pp*b+a*qq)")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (expand "divides")
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (typepred "ps")
                                    (("2" (expand "prime_sum_of_two_squares?")
                                      (("2" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "divides")
                                (("2" (skosimp*)
                                  (("2" (inst + "pp^2*x!1-a^2")
                                    (("2" (hide 2) (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "prime_sum_of_two_squares?")
                        (("2" (expand "sum_of_two_squares?")
                          (("2" (flatten)
                            (("2" (skosimp*)
                              (("2" (inst + "a!2" "b!2" "a!1" "b!1")
                                (("2" (hide (-1 -4 2)) (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2"
              (case "FORALL (rr, rs: int): divides(rr, rs) IMPLIES divides(rr, -rs)")
              (("1" (skeep)
                (("1" (ground)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)
                   ("2" (inst - "rr" "-rs") (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep)
                  (("2" (expand "divides")
                    (("2" (skosimp*)
                      (("2" (inst + "-x!1") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (expand "divides")
          (("2" (skosimp*)
            (("2" (case "rs/rr=x!1")
              (("1" (assert) (("1" (replace -1) (("1" (assert) nil nil)) nil))
                nil)
               ("2" (cross-mult 1) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_int_is_int application-judgement "int" integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sum_of_two_squares? const-decl "bool" primes_sum_squares nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (prime? const-decl "bool" primes ints)
    (f2 skolem-const-decl "rat" primes_sum_squares nil)
    (f1 skolem-const-decl "rat" primes_sum_squares nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (sots_int_def formula-decl nil primes_sum_squares nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (int_exp application-judgement "int" exponentiation nil)
    (sots_int? const-decl "bool" primes_sum_squares nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_expt application-judgement "rat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_times formula-decl nil real_props nil)
    (nonzero_times3 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (f2 skolem-const-decl "rat" primes_sum_squares nil)
    (f1 skolem-const-decl "rat" primes_sum_squares nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (ps skolem-const-decl "(prime_sum_of_two_squares?)" primes_sum_squares
        nil)
    (ns skolem-const-decl "(sum_of_two_squares?)" primes_sum_squares nil)
    (divides_sum formula-decl nil divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (prime_divides formula-decl nil primes_sum_squares nil)
    (prime_sum_of_two_squares? const-decl "bool" primes_sum_squares nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (divides const-decl "bool" divides nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil))
   shostak))
 (sots_div_quot_factor_TCC1 0
  (sots_div_quot_factor_TCC1-1 nil 3502100866 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (divides const-decl "bool" divides nil)
    (^ const-decl "real" exponentiation nil)
    (sum_of_two_squares? const-decl "bool" primes_sum_squares nil)
    (/= const-decl "boolean" notequal nil)
    (nat_expt application-judgement "nat" exponentiation nil))
   nil (sots_div_quot_factor subtype "primes_sum_squares.m" "nznum")))
 (sots_div_quot_factor_TCC2 0
  (sots_div_quot_factor_TCC2-1 nil 3502100866 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (divides const-decl "bool" divides nil)
    (^ const-decl "real" exponentiation nil)
    (sum_of_two_squares? const-decl "bool" primes_sum_squares nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   nil
   (sots_div_quot_factor subtype
    "number_fields./(primes_sum_squares.ns, primes_sum_squares.m)" "int")))
 (sots_div_quot_factor 0
  (sots_div_quot_factor-2 "" 3790091426
   (""
    (case "FORALL (iii,jjj:int): integer_pred(iii*jjj) and rational_pred(iii*jjj) and rational_pred(iii)")
    (("1" (label "intlem" -1)
      (("1" (hide "intlem")
        (("1" (skeep)
          (("1" (case "ns /= 0")
            (("1" (label "nsnz" -1)
              (("1" (hide "nsnz")
                (("1" (expand "divides" -)
                  (("1" (skolem -2 "rr")
                    (("1" (lemma "prime_factors")
                      (("1" (inst - "rr")
                        (("1" (skosimp*)
                          (("1" (replace -1)
                            (("1" (expand "product " -4)
                              (("1" (lift-if)
                                (("1" (ground)
                                  (("1" (expand "ordered_list_of_primes?")
                                    (("1" (flatten)
                                      (("1"
                                        (expand "list_of_primes?")
                                        (("1"
                                          (case
                                           "FORALL (jj:nat,zz:nat): jj+zz<=length(fs!1)-1 IMPLIES m*product[nat](jj,jj+zz,fs!1`seq)>0")
                                          (("1"
                                            (label "prodposm" -1)
                                            (("1"
                                              (hide "prodposm")
                                              (("1"
                                                (case
                                                 "FORALL (ii:nat): ii<=length(fs!1) IMPLIES sum_of_two_squares?(m * product(0, length(fs!1) - 1-ii, fs!1`seq))")
                                                (("1"
                                                  (inst - "length(fs!1)")
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (induct "ii")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "product" -1)
                                                        (("2"
                                                          (lemma
                                                           "sots_div_prime_closed")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "m *
                                                                                                                                                       (fs!1`seq(length(fs!1) - 1 - j) *
                                                                                                                                                         product(0, length(fs!1) - 2 - j, fs!1`seq))"
                                                             "fs!1`seq(length(fs!1) - 1 - j)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "divides"
                                                                 1)
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "m *
                                                                                                                                               product(0, length(fs!1) - 2 - j, fs!1`seq)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "prime_sum_of_two_squares?")
                                                              (("2"
                                                                (case
                                                                 "prime?(fs!1`seq(length(fs!1) - 1 - j))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "fs!1`seq(length(fs!1) - 1 - j)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "divides"
                                                                         +)
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "product[nat](0,length(fs!1) - 2 - j,fs!1`seq)*product(length(fs!1)-j,length(fs!1)-1,fs!1`seq)")
                                                                          (("1"
                                                                            (case
                                                                             "fs!1`seq(length(fs!1) - 1 - j) *
                                                                                                                                                       (product[nat](0, length(fs!1) - 2 - j, fs!1`seq) *
                                                                                                                                                         product(length(fs!1) - j, length(fs!1) - 1, fs!1`seq)) = product(0, length(fs!1) - 1, fs!1`seq)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (lemma
                                                                                 "product_split")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "fs!1`seq"
                                                                                   "length(fs!1)-1"
                                                                                   "0"
                                                                                   "length(fs!1)-1-j")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "product"
                                                                                       -
                                                                                       2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (reveal
                                                                   "intlem")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (inst
                                                                             -5
                                                                             "length(fs!1)-1-j")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (induct "zz")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand "product" +)
                                                  (("1"
                                                    (expand "product" +)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred
                                                         "fs!1`seq(jj)")
                                                        (("1"
                                                          (mult-by -1 "m")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skolem 1 "zz")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst - "jj")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "product" +)
                                                        (("2"
                                                          (mult-by
                                                           -1
                                                           "fs!1`seq(1+jj+zz)")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case "rr>0")
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2" (case "rr = ns/m")
                                (("1" (replace -1 +)
                                  (("1" (hide -1)
                                    (("1" (cross-mult 1)
                                      (("1"
                                        (reveal "nsnz")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (cross-mult 1) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (replace -1)
                (("2" (inst + "m") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (skeep) (("2" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak)
  (sots_div_quot_factor-1 nil 3502100866
   (""
    (case "FORALL (iii,jjj:int): integer_pred(iii*jjj) and rational_pred(iii*jjj) and rational_pred(iii)")
    (("1" (label "intlem" -1)
      (("1" (hide "intlem")
        (("1" (skeep)
          (("1" (case "ns /= 0")
            (("1" (label "nsnz" -1)
              (("1" (hide "nsnz")
                (("1" (expand "divides" -)
                  (("1" (skolem -2 "rr")
                    (("1" (lemma "prime_factors")
                      (("1" (inst - "rr")
                        (("1" (skosimp*)
                          (("1" (replace -1)
                            (("1" (expand "product " -4)
                              (("1" (lift-if)
                                (("1" (ground)
                                  (("1" (expand "ordered_list_of_primes?")
                                    (("1" (flatten)
                                      (("1"
                                        (expand "list_of_primes?")
                                        (("1"
                                          (case
                                           "FORALL (jj:nat,zz:nat): jj+zz<=length(fs!1)-1 IMPLIES m*product[nat](jj,jj+zz,fs!1`seq)>0")
                                          (("1"
                                            (label "prodposm" -1)
                                            (("1"
                                              (hide "prodposm")
                                              (("1"
                                                (case
                                                 "FORALL (ii:nat): ii<=length(fs!1) IMPLIES sum_of_two_squares?(m * product(0, length(fs!1) - 1-ii, fs!1`seq))")
                                                (("1"
                                                  (inst - "length(fs!1)")
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (induct "ii")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "product" -1)
                                                        (("2"
                                                          (lemma
                                                           "sots_div_prime_closed")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "m *
                                                                                                                                                       (fs!1`seq(length(fs!1) - 1 - j) *
                                                                                                                                                         product(0, length(fs!1) - 2 - j, fs!1`seq))"
                                                             "fs!1`seq(length(fs!1) - 1 - j)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "divides"
                                                                 1)
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "m *
                                                                                                                                               product(0, length(fs!1) - 2 - j, fs!1`seq)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "prime_sum_of_two_squares?")
                                                              (("2"
                                                                (case
                                                                 "prime?(fs!1`seq(length(fs!1) - 1 - j))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "fs!1`seq(length(fs!1) - 1 - j)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "divides"
                                                                         +)
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "product[nat](0,length(fs!1) - 2 - j,fs!1`seq)*product(length(fs!1)-j,length(fs!1)-1,fs!1`seq)")
                                                                          (("1"
                                                                            (case
                                                                             "fs!1`seq(length(fs!1) - 1 - j) *
                                                                                                                                                       (product[nat](0, length(fs!1) - 2 - j, fs!1`seq) *
                                                                                                                                                         product(length(fs!1) - j, length(fs!1) - 1, fs!1`seq)) = product(0, length(fs!1) - 1, fs!1`seq)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (lemma
                                                                                 "product_split")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "fs!1`seq"
                                                                                   "length(fs!1)-1"
                                                                                   "0"
                                                                                   "length(fs!1)-1-j")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "product"
                                                                                       -
                                                                                       2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (reveal
                                                                   "intlem")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (inst
                                                                             -5
                                                                             "length(fs!1)-1-j")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    (("3"
                                                      (skeep)
                                                      (("3"
                                                        (inst + "2")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (assert)
                                                    (("4"
                                                      (skosimp*)
                                                      (("4" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (assert)
                                                  (("3"
                                                    (skosimp*)
                                                    (("3" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (induct "zz")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand "product" +)
                                                  (("1"
                                                    (expand "product" +)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred
                                                         "fs!1`seq(jj)")
                                                        (("1"
                                                          (mult-by -1 "m")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skolem 1 "zz")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst - "jj")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "product" +)
                                                        (("2"
                                                          (mult-by
                                                           -1
                                                           "fs!1`seq(1+jj+zz)")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case "rr>0")
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2" (case "rr = ns/m")
                                (("1" (replace -1 +)
                                  (("1" (hide -1)
                                    (("1" (cross-mult 1)
                                      (("1"
                                        (reveal "nsnz")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (cross-mult 1) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (replace -1)
                (("2" (inst + "m") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (skeep) (("2" (assert) nil nil)) nil)) nil))
    nil)
   ((divides const-decl "bool" divides nil)
    (prime_factors formula-decl nil prime_factorization nil)
    (div_cancel4 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (product const-decl "posnat" product_fseq_posnat reals)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (prod_posnat application-judgement "posnat" product_nat reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (barray type-eq-decl nil fseqs structures)
    (fseq type-eq-decl nil fseqs structures)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil product reals)
    (T_high type-eq-decl nil product reals)
    (product def-decl "real" product reals)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (sots_div_prime_closed formula-decl nil primes_sum_squares nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (product_split formula-decl nil product reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (prime? const-decl "bool" primes ints)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (prime_sum_of_two_squares? const-decl "bool" primes_sum_squares nil)
    (j skolem-const-decl "nat" primes_sum_squares nil)
    (fs!1 skolem-const-decl "fseq[posnat]" primes_sum_squares nil)
    (m skolem-const-decl "nat" primes_sum_squares nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (product_0_neg formula-decl nil product_nat reals)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_of_primes? const-decl "bool" prime_factorization nil)
    (ordered_list_of_primes? const-decl "bool" prime_factorization nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (rr skolem-const-decl "int" primes_sum_squares nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sum_of_two_squares? const-decl "bool" primes_sum_squares nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil))
   shostak))
 (rel_prime_sos_factor_TCC1 0
  (rel_prime_sos_factor_TCC1-1 nil 3502105281 ("" (subtype-tcc) nil nil) nil
   nil
   (rel_prime_sos_factor subtype "primes_sum_squares.pb"
    "{jj: integers.int | booleans.=>(primes_sum_squares.pa = 0, jj /= 0)}")))
 (rel_prime_sos_factor_TCC2 0
  (rel_prime_sos_factor_TCC2-1 nil 3502105281 ("" (subtype-tcc) nil nil)
   ((divides const-decl "bool" divides nil)
    (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd ints)
    (rel_prime const-decl "bool" gcd ints))
   nil
   (rel_prime_sos_factor subtype "2"
    "{i: integers.int | booleans.OR(primes_sum_squares.pa /= 0, reals.>=(i, 0))}")))
 (rel_prime_sos_factor_TCC3 0
  (rel_prime_sos_factor_TCC3-1 nil 3502105281 ("" (subtype-tcc) nil nil)
   ((divides const-decl "bool" divides nil)
    (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd ints)
    (rel_prime const-decl "bool" gcd ints))
   nil
   (rel_prime_sos_factor subtype "2"
    "{i: integers.int | booleans.OR(primes_sum_squares.pb /= 0, reals.>=(i, 0))}")))
 (rel_prime_sos_factor 0
  (rel_prime_sos_factor-3 "" 3790091437
   (""
    (case "FORALL (m:nat, n: nat, pa, pb: int): n<=m AND
                                                                              (NOT (pa=0 AND pb=0)) AND rel_prime(pa, pb) AND divides(n, pa ^ 2 + pb ^ 2) IMPLIES
                                                                               sum_of_two_squares?(n)")
    (("1" (skeep)
      (("1" (inst - "n" "n" "pa" "pb") (("1" (assert) nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "m")
        (("1" (skeep)
          (("1" (case "n = 0")
            (("1" (replace -1)
              (("1" (hide -)
                (("1" (expand "sum_of_two_squares?")
                  (("1" (inst + "0" "0") (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (label "papbnz" 1)
              (("2" (case "NOT j = n-1")
                (("1" (inst - "n" "pa" "pb") (("1" (assert) nil nil)) nil)
                 ("2" (hide "papbnz")
                  (("2" (replace -1)
                    (("2" (hide -3)
                      (("2" (name "xx" "n")
                        (("2" (replace -1)
                          (("2" (case "xx > 0")
                            (("1" (label "xxpos" -1)
                              (("1" (hide "xxpos")
                                (("1" (label "hyp" -3)
                                  (("1" (hide (-1 -2))
                                    (("1" (hide "hyp")
                                      (("1"
                                        (case
                                         "divides(xx,pa) AND divides(xx,pb)")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (lemma "divides_gcd")
                                            (("1"
                                              (inst - "pa" "pb" "xx")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "rel_prime")
                                                  (("1"
                                                    (replace -4)
                                                    (("1"
                                                      (case "xx = 1")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -)
                                                          (("1"
                                                            (expand
                                                             "sum_of_two_squares?")
                                                            (("1"
                                                              (inst + "0" "1")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but (-1 1))
                                                        (("2"
                                                          (reveal "papbnz")
                                                          (("2"
                                                            (split -)
                                                            (("1"
                                                              (expand
                                                               "divides")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (case
                                                                   "x!1 > 1")
                                                                  (("1"
                                                                    (mult-by
                                                                     -1
                                                                     "xx")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "x!1 = 1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "posreal_times_posreal_is_posreal")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "-x!1"
                                                                         "xx")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (hide -)
                                                      (("2"
                                                        (expand
                                                         "sum_of_two_squares?")
                                                        (("2"
                                                          (inst + "0" "0")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (label "xxdivpapb" 1)
                                          (("2"
                                            (hide "xxdivpapb")
                                            (("2"
                                              (label "divxx" -2)
                                              (("2"
                                                (label "papbrp" -1)
                                                (("2"
                                                  (case
                                                   "EXISTS (cc,dd:int,mm,nn:int): abs(cc)<=xx/2 AND abs(dd)<=xx/2 AND pa = mm*xx+cc AND pb = nn*xx+dd")
                                                  (("1"
                                                    (skeep -1)
                                                    (("1"
                                                      (label "ccabs" -1)
                                                      (("1"
                                                        (label "ddabs" -2)
                                                        (("1"
                                                          (label "ccdef" -3)
                                                          (("1"
                                                            (label "dddef" -4)
                                                            (("1"
                                                              (case
                                                               "(cc = 0 AND dd = 0)")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (reveal
                                                                       "xxdivpapb")
                                                                      (("1"
                                                                        (expand
                                                                         "divides"
                                                                         +)
                                                                        (("1"
                                                                          (split
                                                                           +)
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "mm")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             +
                                                                             "nn")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (label
                                                                 "ccddnz"
                                                                 1)
                                                                (("2"
                                                                  (hide
                                                                   "ccddnz")
                                                                  (("2"
                                                                    (case
                                                                     "EXISTS (AA:int): pa^2 + pb^2 = AA*xx + (cc^2 + dd^2)")
                                                                    (("1"
                                                                      (label
                                                                       "AAdef"
                                                                       -1)
                                                                      (("1"
                                                                        (skeep
                                                                         -1)
                                                                        (("1"
                                                                          (case
                                                                           "NOT rel_prime(gcd(cc,dd),xx)")
                                                                          (("1"
                                                                            (expand
                                                                             "rel_prime"
                                                                             +)
                                                                            (("1"
                                                                              (case
                                                                               "divides(gcd(cc,dd),pa) AND divides(gcd(cc,dd),pb)")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "divides_gcd")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "pa"
                                                                                     "pb"
                                                                                     "gcd(cc,dd)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "rel_prime")
                                                                                          (("1"
                                                                                            (replace
                                                                                             "papbrp")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "divides"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "x!1 > 1")
                                                                                                    (("1"
                                                                                                      (mult-by
                                                                                                       -1
                                                                                                       "gcd(cc,dd)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "x!1 = 1")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (hide-all-but
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "gcd(1,xx)")
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   (-1
                                                                                                                    -3))
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "divides")
                                                                                                                    (("1"
                                                                                                                      (skosimp*)
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "x!2 > 1")
                                                                                                                        (("1"
                                                                                                                          (mult-by
                                                                                                                           -1
                                                                                                                           "gcd(1,xx)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (case
                                                                                                                           "x!2 = 1")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (case
                                                                                                                               "x!2 < 0")
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "posreal_times_posreal_is_posreal")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "-x!2"
                                                                                                                                   "gcd(1,xx)")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "posreal_times_posreal_is_posreal")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "-x!1"
                                                                                                             "gcd(cc,dd)")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (reveal
                                                                                           "papbnz")
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "FORALL (ab1,mn1,cd1,dg1:int): divides(dg1,cd1) AND divides(dg1,xx) AND ab1 = mn1*xx + cd1 IMPLIES divides(dg1,ab1)")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -
                                                                                   "pa"
                                                                                   "mm"
                                                                                   "cc"
                                                                                   "gcd(gcd(cc,dd),xx)")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "pb"
                                                                                     "nn"
                                                                                     "dd"
                                                                                     "gcd(gcd(cc,dd),xx)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "FORALL (rrz,xxz,ccz:int): divides(rrz,xxz) AND divides(xxz,ccz) IMPLIES divides(rrz,ccz)")
                                                                                        (("1"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (split
                                                                                             -)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -3)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (copy
                                                                                                   "papbrp")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "rel_prime"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "divides_gcd")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "pa"
                                                                                                         "pb"
                                                                                                         "gcd(gcd(cc,dd),xx)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 (-1
                                                                                                                  2))
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "divides")
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "x!1 > 1")
                                                                                                                      (("1"
                                                                                                                        (mult-by
                                                                                                                         -1
                                                                                                                         "gcd(gcd(cc,dd),xx)")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (case
                                                                                                                         "x!1 = 1")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (lemma
                                                                                                                           "posreal_times_posreal_is_posreal")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "-x!1"
                                                                                                                             "gcd(gcd(cc,dd),xx)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (ground)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (reveal
                                                                                                               "papbnz")
                                                                                                              (("2"
                                                                                                                (ground)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (-2
                                                                                                1))
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "gcd(gcd(cc,dd),xx)"
                                                                                                 "gcd(cc,dd)"
                                                                                                 "cc")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              1))
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "gcd(gcd(cc,dd),xx)"
                                                                                               "gcd(cc,dd)"
                                                                                               "dd")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "divides")
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "x!1*x!2")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "divides")
                                                                                      (("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "mn1*x!2 + x!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "divides(xx,cc^2 + dd^2)")
                                                                            (("1"
                                                                              (label
                                                                               "ccddxxrp"
                                                                               -2)
                                                                              (("1"
                                                                                (label
                                                                                 "xxccdddiv"
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "divides"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (skolem
                                                                                     -1
                                                                                     "yy")
                                                                                    (("1"
                                                                                      (case
                                                                                       "divides(gcd(cc,dd)^2,yy)")
                                                                                      (("1"
                                                                                        (label
                                                                                         "ccddsqyydiv"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "divides"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (case
                                                                                               "EXISTS (ee,ff:int): ee = cc/gcd(cc,dd) AND ff = dd/gcd(cc,dd)")
                                                                                              (("1"
                                                                                                (skeep
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (label
                                                                                                   "eedef"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (label
                                                                                                     "ffdef"
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "(ee = 0 AND ff = 0)")
                                                                                                      (("1"
                                                                                                        (reveal
                                                                                                         "ccddnz")
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (-1
                                                                                                            -2
                                                                                                            -3
                                                                                                            1))
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (cross-mult
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (cross-mult
                                                                                                                     -4)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (label
                                                                                                         "eeffnz"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "ee^2 + ff^2 > 0")
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             "eeffnz")
                                                                                                            (("1"
                                                                                                              (label
                                                                                                               "eeffsqpos"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "divides(xx,ee^2 + ff^2)")
                                                                                                                (("1"
                                                                                                                  (copy
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "divides"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (skolem
                                                                                                                       -1
                                                                                                                       "zz")
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "zz > 0")
                                                                                                                        (("1"
                                                                                                                          (label
                                                                                                                           "zzpos"
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (label
                                                                                                                             "zzdef"
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "abs(zz) <= xx/2")
                                                                                                                              (("1"
                                                                                                                                (label
                                                                                                                                 "abszz"
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "rel_prime(ee,ff)")
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "sots_div_quot_factor")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "xx"
                                                                                                                                       "ee^2 + ff^2")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -)
                                                                                                                                          (("1"
                                                                                                                                            (skeep
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (reveal
                                                                                                                                               "hyp")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "b"
                                                                                                                                                 "ee"
                                                                                                                                                 "ff")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "b <=zz")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (reveal
                                                                                                                                                         "eeffnz")
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (hide
                                                                                                                                                             "eeffnz")
                                                                                                                                                            (("1"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               (-2
                                                                                                                                                                1))
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "divides")
                                                                                                                                                                (("1"
                                                                                                                                                                  (skosimp*)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (cross-mult
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst
                                                                                                                                                                       +
                                                                                                                                                                       "x!2*xx")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (replace
                                                                                                                                                         "zzdef")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "divides"
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("2"
                                                                                                                                                              (cross-mult
                                                                                                                                                               -1)
                                                                                                                                                              (("2"
                                                                                                                                                                (mult-by
                                                                                                                                                                 1
                                                                                                                                                                 "xx")
                                                                                                                                                                (("2"
                                                                                                                                                                  (case
                                                                                                                                                                   "x!2 > 1")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (mult-by
                                                                                                                                                                     -1
                                                                                                                                                                     "b*xx")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (case
                                                                                                                                                                     "x!2 = 1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "posreal_times_posreal_is_posreal")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         -
                                                                                                                                                                         "b*xx"
                                                                                                                                                                         "-x!2")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil)
                                                                                                                                                                         ("3"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "sum_of_two_squares?")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 +
                                                                                                                                                 "abs(ee)"
                                                                                                                                                 "abs(ff)")
                                                                                                                                                (("2"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (hide-all-but
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "sum_of_two_squares?")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               +
                                                                                                                                               "abs(ee)"
                                                                                                                                               "abs(ff)")
                                                                                                                                              (("2"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-1
                                                                                                                                      -2
                                                                                                                                      -3
                                                                                                                                      -4
                                                                                                                                      -5
                                                                                                                                      -6
                                                                                                                                      -7
                                                                                                                                      "eedef"
                                                                                                                                      "ffdef"
                                                                                                                                      1))
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "gcd_factors")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "cc"
                                                                                                                                         "dd")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (reveal
                                                                                                                                             "ccddnz")
                                                                                                                                            (("2"
                                                                                                                                              (split
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (hide
                                                                                                                                                 "ccddnz")
                                                                                                                                                (("1"
                                                                                                                                                  (skosimp*)
                                                                                                                                                  (("1"
                                                                                                                                                    (rewrite
                                                                                                                                                     "rel_prime_lem")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       +
                                                                                                                                                       "jp!1"
                                                                                                                                                       "ip!1")
                                                                                                                                                      (("1"
                                                                                                                                                        (mult-by
                                                                                                                                                         1
                                                                                                                                                         "gcd(cc,dd)")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (reveal
                                                                                                                                                       "eeffnz")
                                                                                                                                                      (("2"
                                                                                                                                                        (ground)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (ground)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (reveal
                                                                                                                                     "eeffnz")
                                                                                                                                    (("3"
                                                                                                                                      (ground)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (case
                                                                                                                                 "xx*zz <= xx^2/2")
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "zz <= xx/2")
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "zz>=0")
                                                                                                                                    (("1"
                                                                                                                                      (hide-all-but
                                                                                                                                       (-1
                                                                                                                                        -2
                                                                                                                                        1))
                                                                                                                                      (("1"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (reveal
                                                                                                                                     "xxpos")
                                                                                                                                    (("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       (-1
                                                                                                                                        -2
                                                                                                                                        1))
                                                                                                                                      (("2"
                                                                                                                                        (mult-by
                                                                                                                                         1
                                                                                                                                         "xx")
                                                                                                                                        (("2"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (case
                                                                                                                                   "ee^2 <= cc^2 AND ff^2 <= dd^2 AND cc^2<=xx^2/4 AND dd^2 <= xx^2/4")
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (case
                                                                                                                                     "gcd(cc,dd)^2 >=1")
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       +)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         "eedef"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (rewrite
                                                                                                                                           "div_expt")
                                                                                                                                          (("1"
                                                                                                                                            (cross-mult
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (mult-by
                                                                                                                                               -1
                                                                                                                                               "cc^2")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "nnreal_times_nnreal_is_nnreal")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "abs(cc)"
                                                                                                                                                     "abs(cc)")
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (replace
                                                                                                                                         "ffdef"
                                                                                                                                         +)
                                                                                                                                        (("2"
                                                                                                                                          (rewrite
                                                                                                                                           "div_expt")
                                                                                                                                          (("2"
                                                                                                                                            (cross-mult
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (mult-by
                                                                                                                                               -1
                                                                                                                                               "dd^2")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "nnreal_times_nnreal_is_nnreal")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "abs(dd)"
                                                                                                                                                     "abs(dd)")
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (copy
                                                                                                                                         "ccabs")
                                                                                                                                        (("3"
                                                                                                                                          (copy
                                                                                                                                           -1)
                                                                                                                                          (("3"
                                                                                                                                            (mult-ineq
                                                                                                                                             -1
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "^"
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "expt"
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "expt"
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "expt"
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       (-1
                                                                                                                                                        1))
                                                                                                                                                      (("1"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("4"
                                                                                                                                        (copy
                                                                                                                                         "ddabs")
                                                                                                                                        (("4"
                                                                                                                                          (copy
                                                                                                                                           -1)
                                                                                                                                          (("4"
                                                                                                                                            (mult-ineq
                                                                                                                                             -1
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (hide-all-but
                                                                                                                                               (-1
                                                                                                                                                1))
                                                                                                                                              (("1"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (case
                                                                                                                                       "gcd(cc,dd) >= 1")
                                                                                                                                      (("1"
                                                                                                                                        (copy
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (mult-ineq
                                                                                                                                           -1
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "^"
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "expt"
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "expt"
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "expt"
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (reveal
                                                                                                                           "xxpos")
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "posreal_times_posreal_is_posreal")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "-zz"
                                                                                                                               "xx")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (copy
                                                                                                                   "xxccdddiv")
                                                                                                                  (("2"
                                                                                                                    (copy
                                                                                                                     "eedef")
                                                                                                                    (("2"
                                                                                                                      (cross-mult
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         -2
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (copy
                                                                                                                             "ffdef")
                                                                                                                            (("2"
                                                                                                                              (cross-mult
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (case
                                                                                                                                 "dd^2 = (ff*gcd(cc,dd))^2")
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   -3)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     (-1
                                                                                                                                      -2))
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "rel_prime_div_prod")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "xx"
                                                                                                                                         "gcd(cc,dd)"
                                                                                                                                         "gcd(cc,dd)*(ee^2 + ff^2)")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             -)
                                                                                                                                            (("1"
                                                                                                                                              (lemma
                                                                                                                                               "rel_prime_div_prod")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "xx"
                                                                                                                                                 "gcd(cc,dd)"
                                                                                                                                                 "ee^2 + ff^2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (rewrite
                                                                                                                                                     "rel_prime_sym"
                                                                                                                                                     +)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (rewrite
                                                                                                                                               "rel_prime_sym"
                                                                                                                                               +)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("3"
                                                                                                                                              (hide-all-but
                                                                                                                                               (-1
                                                                                                                                                1))
                                                                                                                                              (("3"
                                                                                                                                                (expand
                                                                                                                                                 "divides")
                                                                                                                                                (("3"
                                                                                                                                                  (inst
                                                                                                                                                   +
                                                                                                                                                   "yy")
                                                                                                                                                  (("3"
                                                                                                                                                    (grind
                                                                                                                                                     :exclude
                                                                                                                                                     "gcd")
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (1
                                                                                                              2))
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "nnreal_times_nnreal_is_nnreal")
                                                                                                              (("2"
                                                                                                                (inst-cp
                                                                                                                 -
                                                                                                                 "abs(ee)"
                                                                                                                 "abs(ee)")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "abs(ff)"
                                                                                                                   "abs(ff)")
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "ee^2 = 0 IMPLIES ee = 0")
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "ff^2 = 0 IMPLIES ff = 0")
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (lemma
                                                                                                                         "nzreal_times_nzreal_is_nzreal")
                                                                                                                        (("2"
                                                                                                                          (hide-all-but
                                                                                                                           (-1
                                                                                                                            1))
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "^")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "expt")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "expt")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "expt")
                                                                                                                                    (("2"
                                                                                                                                      (inst?)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "nzreal_times_nzreal_is_nzreal")
                                                                                                                        (("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "^")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "expt")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "expt")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "expt")
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "gcd(cc,dd)")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "divides")
                                                                                                    (("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         +
                                                                                                         "x!2"
                                                                                                         "x!3")
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (cross-mult
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (cross-mult
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case
                                                                                         "rel_prime(gcd(cc,dd)^2,xx)")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "rel_prime_div_prod")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "gcd(cc,dd)^2"
                                                                                             "xx"
                                                                                             "yy")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 "xxccdddiv"
                                                                                                 +
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "gcd(cc,dd)")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "divides")
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (mult-eq
                                                                                                           -2
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (mult-eq
                                                                                                             -4
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "^")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "expt")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "expt")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "expt")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           +
                                                                                                                           "x!1^2 + x!2^2")
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -)
                                                                                                                            (("1"
                                                                                                                              (grind
                                                                                                                               :exclude
                                                                                                                               "gcd")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "^"
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "expt"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "expt"
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "expt"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "rel_prime_mult_left")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               ("AAdef"
                                                                                "divxx"
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 "divides")
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (replace
                                                                                     "divxx")
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "x!1-AA")
                                                                                      (("2"
                                                                                        (grind
                                                                                         :exclude
                                                                                         "^")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (assert)
                                                                            (("4"
                                                                              (flatten)
                                                                              (("4"
                                                                                (assert)
                                                                                (("4"
                                                                                  (reveal
                                                                                   "ccddnz")
                                                                                  (("4"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       "ccdef"
                                                                       +)
                                                                      (("2"
                                                                        (replace
                                                                         "dddef"
                                                                         +)
                                                                        (("2"
                                                                          (expand
                                                                           "^"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "expt"
                                                                             +)
                                                                            (("2"
                                                                              (expand
                                                                               "expt"
                                                                               +)
                                                                              (("2"
                                                                                (expand
                                                                                 "expt"
                                                                                 +)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "mm*mm*xx + nn*nn*xx +2*cc*mm+2*dd*nn")
                                                                                    (("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (reveal "xxpos")
                                                      (("2"
                                                        (case
                                                         "FORALL (aa:int): EXISTS (nn,kk:int): abs(kk)<=xx/2 AND aa = nn*xx+kk")
                                                        (("1"
                                                          (inst-cp - "pa")
                                                          (("1"
                                                            (inst - "pb")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "kk!2"
                                                                 "kk!1"
                                                                 "nn!2"
                                                                 "nn!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (case
                                                               "EXISTS (nn:int): nn*xx <= aa AND (nn+1)*xx > aa")
                                                              (("1"
                                                                (skeep -1)
                                                                (("1"
                                                                  (copy 1)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "nn"
                                                                     "aa-nn*xx")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "nn+1"
                                                                       "aa-(nn+1)*xx")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (case
                                                                   "FORALL (a:nat): EXISTS (nn: int): nn * xx <= a AND (nn + 1) * xx > a")
                                                                  (("1"
                                                                    (case
                                                                     "NOT aa < 0")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "aa")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "-aa")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (case
                                                                           "nn!1*xx = -aa")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "-nn!1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             +
                                                                             "-nn!1-1")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (lemma
                                                                       "axiom_of_archimedes")
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (case
                                                                           "FORALL (ii:nat): ii*xx <= a")
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "a/xx")
                                                                            (("1"
                                                                              (case
                                                                               "EXISTS (i:nat): a/xx < i")
                                                                              (("1"
                                                                                (hide
                                                                                 -3)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (cross-mult
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "i!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "nnreal_div_posreal_is_nnreal")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "a"
                                                                                     "xx")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "i!1")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (induct
                                                                             "ii")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (inst
                                                                                 +
                                                                                 "j!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2) (("3" (skosimp*) (("3" (ground) nil nil)) nil)) nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skosimp*) (("3" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak)
  (rel_prime_sos_factor-2 "" 3539699252
   (""
    (case "FORALL (m:nat, n: nat, pa, pb: int): n<=m AND
                                                                              (NOT (pa=0 AND pb=0)) AND rel_prime(pa, pb) AND divides(n, pa ^ 2 + pb ^ 2) IMPLIES
                                                                               sum_of_two_squares?(n)")
    (("1" (skeep)
      (("1" (inst - "n" "n" "pa" "pb") (("1" (assert) nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "m")
        (("1" (skeep)
          (("1" (case "n = 0")
            (("1" (replace -1)
              (("1" (hide -)
                (("1" (expand "sum_of_two_squares?")
                  (("1" (inst + "0" "0") (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (label "papbnz" 1)
              (("2" (case "NOT j = n-1")
                (("1" (inst - "n" "pa" "pb") (("1" (assert) nil nil)) nil)
                 ("2" (hide "papbnz")
                  (("2" (replace -1)
                    (("2" (hide -3)
                      (("2" (name "xx" "n")
                        (("2" (replace -1)
                          (("2" (case "xx > 0")
                            (("1" (label "xxpos" -1)
                              (("1" (hide "xxpos")
                                (("1" (label "hyp" -3)
                                  (("1" (hide (-1 -2))
                                    (("1" (hide "hyp")
                                      (("1"
                                        (case
                                         "divides(xx,pa) AND divides(xx,pb)")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (lemma "divides_gcd")
                                            (("1"
                                              (inst - "pa" "pb" "xx")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "rel_prime")
                                                  (("1"
                                                    (replace -4)
                                                    (("1"
                                                      (case "xx = 1")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -)
                                                          (("1"
                                                            (expand
                                                             "sum_of_two_squares?")
                                                            (("1"
                                                              (inst + "0" "1")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but (-1 1))
                                                        (("2"
                                                          (reveal "papbnz")
                                                          (("2"
                                                            (split -)
                                                            (("1"
                                                              (expand
                                                               "divides")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (case
                                                                   "x!1 > 1")
                                                                  (("1"
                                                                    (mult-by
                                                                     -1
                                                                     "xx")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "x!1 = 1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "posreal_times_posreal_is_posreal")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "-x!1"
                                                                         "xx")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (hide -)
                                                      (("2"
                                                        (expand
                                                         "sum_of_two_squares?")
                                                        (("2"
                                                          (inst + "0" "0")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (label "xxdivpapb" 1)
                                          (("2"
                                            (hide "xxdivpapb")
                                            (("2"
                                              (label "divxx" -2)
                                              (("2"
                                                (label "papbrp" -1)
                                                (("2"
                                                  (case
                                                   "EXISTS (cc,dd:int,mm,nn:int): abs(cc)<=xx/2 AND abs(dd)<=xx/2 AND pa = mm*xx+cc AND pb = nn*xx+dd")
                                                  (("1"
                                                    (skeep -1)
                                                    (("1"
                                                      (label "ccabs" -1)
                                                      (("1"
                                                        (label "ddabs" -2)
                                                        (("1"
                                                          (label "ccdef" -3)
                                                          (("1"
                                                            (label "dddef" -4)
                                                            (("1"
                                                              (case
                                                               "(cc = 0 AND dd = 0)")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (reveal
                                                                       "xxdivpapb")
                                                                      (("1"
                                                                        (expand
                                                                         "divides"
                                                                         +)
                                                                        (("1"
                                                                          (split
                                                                           +)
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "mm")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             +
                                                                             "nn")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (label
                                                                 "ccddnz"
                                                                 1)
                                                                (("2"
                                                                  (hide
                                                                   "ccddnz")
                                                                  (("2"
                                                                    (case
                                                                     "EXISTS (AA:int): pa^2 + pb^2 = AA*xx + (cc^2 + dd^2)")
                                                                    (("1"
                                                                      (label
                                                                       "AAdef"
                                                                       -1)
                                                                      (("1"
                                                                        (skeep
                                                                         -1)
                                                                        (("1"
                                                                          (case
                                                                           "NOT rel_prime(gcd(cc,dd),xx)")
                                                                          (("1"
                                                                            (expand
                                                                             "rel_prime"
                                                                             +)
                                                                            (("1"
                                                                              (case
                                                                               "divides(gcd(cc,dd),pa) AND divides(gcd(cc,dd),pb)")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "divides_gcd")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "pa"
                                                                                     "pb"
                                                                                     "gcd(cc,dd)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "rel_prime")
                                                                                          (("1"
                                                                                            (replace
                                                                                             "papbrp")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "divides"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "x!1 > 1")
                                                                                                    (("1"
                                                                                                      (mult-by
                                                                                                       -1
                                                                                                       "gcd(cc,dd)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "x!1 = 1")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "gcd(1,xx)")
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     (-1
                                                                                                                      -3))
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "divides")
                                                                                                                      (("1"
                                                                                                                        (skosimp*)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "x!2 > 1")
                                                                                                                          (("1"
                                                                                                                            (mult-by
                                                                                                                             -1
                                                                                                                             "gcd(1,xx)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (case
                                                                                                                             "x!2 = 1")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (case
                                                                                                                                 "x!2 < 0")
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "posreal_times_posreal_is_posreal")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "-x!2"
                                                                                                                                     "gcd(1,xx)")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "posreal_times_posreal_is_posreal")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "-x!1"
                                                                                                             "gcd(cc,dd)")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (reveal
                                                                                           "papbnz")
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "FORALL (ab1,mn1,cd1,dg1:int): divides(dg1,cd1) AND divides(dg1,xx) AND ab1 = mn1*xx + cd1 IMPLIES divides(dg1,ab1)")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -
                                                                                   "pa"
                                                                                   "mm"
                                                                                   "cc"
                                                                                   "gcd(gcd(cc,dd),xx)")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "pb"
                                                                                     "nn"
                                                                                     "dd"
                                                                                     "gcd(gcd(cc,dd),xx)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "FORALL (rrz,xxz,ccz:int): divides(rrz,xxz) AND divides(xxz,ccz) IMPLIES divides(rrz,ccz)")
                                                                                        (("1"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (split
                                                                                             -)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -3)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (copy
                                                                                                   "papbrp")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "rel_prime"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "divides_gcd")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "pa"
                                                                                                         "pb"
                                                                                                         "gcd(gcd(cc,dd),xx)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 (-1
                                                                                                                  2))
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "divides")
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "x!1 > 1")
                                                                                                                      (("1"
                                                                                                                        (mult-by
                                                                                                                         -1
                                                                                                                         "gcd(gcd(cc,dd),xx)")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (case
                                                                                                                         "x!1 = 1")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (lemma
                                                                                                                           "posreal_times_posreal_is_posreal")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "-x!1"
                                                                                                                             "gcd(gcd(cc,dd),xx)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (ground)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (reveal
                                                                                                               "papbnz")
                                                                                                              (("2"
                                                                                                                (ground)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (-2
                                                                                                1))
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "gcd(gcd(cc,dd),xx)"
                                                                                                 "gcd(cc,dd)"
                                                                                                 "cc")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              1))
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "gcd(gcd(cc,dd),xx)"
                                                                                               "gcd(cc,dd)"
                                                                                               "dd")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "divides")
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "x!1*x!2")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "divides")
                                                                                      (("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "mn1*x!2 + x!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "divides(xx,cc^2 + dd^2)")
                                                                            (("1"
                                                                              (label
                                                                               "ccddxxrp"
                                                                               -2)
                                                                              (("1"
                                                                                (label
                                                                                 "xxccdddiv"
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "divides"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (skolem
                                                                                     -1
                                                                                     "yy")
                                                                                    (("1"
                                                                                      (case
                                                                                       "divides(gcd(cc,dd)^2,yy)")
                                                                                      (("1"
                                                                                        (label
                                                                                         "ccddsqyydiv"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "divides"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (case
                                                                                               "EXISTS (ee,ff:int): ee = cc/gcd(cc,dd) AND ff = dd/gcd(cc,dd)")
                                                                                              (("1"
                                                                                                (skeep
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (label
                                                                                                   "eedef"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (label
                                                                                                     "ffdef"
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "(ee = 0 AND ff = 0)")
                                                                                                      (("1"
                                                                                                        (reveal
                                                                                                         "ccddnz")
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (-1
                                                                                                            -2
                                                                                                            -3
                                                                                                            1))
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (cross-mult
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (cross-mult
                                                                                                                     -4)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (label
                                                                                                         "eeffnz"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "ee^2 + ff^2 > 0")
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             "eeffnz")
                                                                                                            (("1"
                                                                                                              (label
                                                                                                               "eeffsqpos"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "divides(xx,ee^2 + ff^2)")
                                                                                                                (("1"
                                                                                                                  (copy
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "divides"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (skolem
                                                                                                                       -1
                                                                                                                       "zz")
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "zz > 0")
                                                                                                                        (("1"
                                                                                                                          (label
                                                                                                                           "zzpos"
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (label
                                                                                                                             "zzdef"
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "abs(zz) <= xx/2")
                                                                                                                              (("1"
                                                                                                                                (label
                                                                                                                                 "abszz"
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "rel_prime(ee,ff)")
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "sots_div_quot_factor")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "xx"
                                                                                                                                       "ee^2 + ff^2")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -)
                                                                                                                                          (("1"
                                                                                                                                            (skeep
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (reveal
                                                                                                                                               "hyp")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "b"
                                                                                                                                                 "ee"
                                                                                                                                                 "ff")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "b <=zz")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (reveal
                                                                                                                                                         "eeffnz")
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (hide
                                                                                                                                                             "eeffnz")
                                                                                                                                                            (("1"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               (-2
                                                                                                                                                                1))
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "divides")
                                                                                                                                                                (("1"
                                                                                                                                                                  (skosimp*)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (cross-mult
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst
                                                                                                                                                                       +
                                                                                                                                                                       "x!2*xx")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (replace
                                                                                                                                                         "zzdef")
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "divides"
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (("2"
                                                                                                                                                                (cross-mult
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (mult-by
                                                                                                                                                                   1
                                                                                                                                                                   "xx")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (case
                                                                                                                                                                     "x!2 > 1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (mult-by
                                                                                                                                                                       -1
                                                                                                                                                                       "b*xx")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (case
                                                                                                                                                                       "x!2 = 1")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (lemma
                                                                                                                                                                         "posreal_times_posreal_is_posreal")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -
                                                                                                                                                                           "b*xx"
                                                                                                                                                                           "-x!2")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("3"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "sum_of_two_squares?")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 +
                                                                                                                                                 "abs(ee)"
                                                                                                                                                 "abs(ff)")
                                                                                                                                                (("2"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (hide-all-but
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "sum_of_two_squares?")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               +
                                                                                                                                               "abs(ee)"
                                                                                                                                               "abs(ff)")
                                                                                                                                              (("2"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-1
                                                                                                                                      -2
                                                                                                                                      -3
                                                                                                                                      -4
                                                                                                                                      -5
                                                                                                                                      -6
                                                                                                                                      -7
                                                                                                                                      "eedef"
                                                                                                                                      "ffdef"
                                                                                                                                      1))
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "gcd_factors")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "cc"
                                                                                                                                         "dd")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (reveal
                                                                                                                                             "ccddnz")
                                                                                                                                            (("2"
                                                                                                                                              (split
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (hide
                                                                                                                                                 "ccddnz")
                                                                                                                                                (("1"
                                                                                                                                                  (skosimp*)
                                                                                                                                                  (("1"
                                                                                                                                                    (rewrite
                                                                                                                                                     "rel_prime_lem")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       +
                                                                                                                                                       "jp!1"
                                                                                                                                                       "ip!1")
                                                                                                                                                      (("1"
                                                                                                                                                        (mult-by
                                                                                                                                                         1
                                                                                                                                                         "gcd(cc,dd)")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (reveal
                                                                                                                                                       "eeffnz")
                                                                                                                                                      (("2"
                                                                                                                                                        (ground)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (ground)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (reveal
                                                                                                                                     "eeffnz")
                                                                                                                                    (("3"
                                                                                                                                      (ground)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (case
                                                                                                                                 "xx*zz <= xx^2/2")
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "zz <= xx/2")
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "zz>=0")
                                                                                                                                    (("1"
                                                                                                                                      (hide-all-but
                                                                                                                                       (-1
                                                                                                                                        -2
                                                                                                                                        1))
                                                                                                                                      (("1"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (reveal
                                                                                                                                     "xxpos")
                                                                                                                                    (("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       (-1
                                                                                                                                        -2
                                                                                                                                        1))
                                                                                                                                      (("2"
                                                                                                                                        (mult-by
                                                                                                                                         1
                                                                                                                                         "xx")
                                                                                                                                        (("2"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (case
                                                                                                                                   "ee^2 <= cc^2 AND ff^2 <= dd^2 AND cc^2<=xx^2/4 AND dd^2 <= xx^2/4")
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (case
                                                                                                                                     "gcd(cc,dd)^2 >=1")
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       +)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         "eedef"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (rewrite
                                                                                                                                           "div_expt")
                                                                                                                                          (("1"
                                                                                                                                            (cross-mult
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (mult-by
                                                                                                                                               -1
                                                                                                                                               "cc^2")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "nnreal_times_nnreal_is_nnreal")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "abs(cc)"
                                                                                                                                                     "abs(cc)")
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (replace
                                                                                                                                         "ffdef"
                                                                                                                                         +)
                                                                                                                                        (("2"
                                                                                                                                          (rewrite
                                                                                                                                           "div_expt")
                                                                                                                                          (("2"
                                                                                                                                            (cross-mult
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (mult-by
                                                                                                                                               -1
                                                                                                                                               "dd^2")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "nnreal_times_nnreal_is_nnreal")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "abs(dd)"
                                                                                                                                                     "abs(dd)")
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (copy
                                                                                                                                         "ccabs")
                                                                                                                                        (("3"
                                                                                                                                          (copy
                                                                                                                                           -1)
                                                                                                                                          (("3"
                                                                                                                                            (mult-ineq
                                                                                                                                             -1
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "^"
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "expt"
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "expt"
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "expt"
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       (-1
                                                                                                                                                        1))
                                                                                                                                                      (("1"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("4"
                                                                                                                                        (copy
                                                                                                                                         "ddabs")
                                                                                                                                        (("4"
                                                                                                                                          (copy
                                                                                                                                           -1)
                                                                                                                                          (("4"
                                                                                                                                            (mult-ineq
                                                                                                                                             -1
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (hide-all-but
                                                                                                                                               (-1
                                                                                                                                                1))
                                                                                                                                              (("1"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (case
                                                                                                                                       "gcd(cc,dd) >= 1")
                                                                                                                                      (("1"
                                                                                                                                        (copy
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (mult-ineq
                                                                                                                                           -1
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "^"
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "expt"
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "expt"
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "expt"
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (reveal
                                                                                                                           "xxpos")
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "posreal_times_posreal_is_posreal")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "-zz"
                                                                                                                               "xx")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (copy
                                                                                                                   "xxccdddiv")
                                                                                                                  (("2"
                                                                                                                    (copy
                                                                                                                     "eedef")
                                                                                                                    (("2"
                                                                                                                      (cross-mult
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         -2
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (copy
                                                                                                                             "ffdef")
                                                                                                                            (("2"
                                                                                                                              (cross-mult
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (case
                                                                                                                                 "dd^2 = (ff*gcd(cc,dd))^2")
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   -3)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     (-1
                                                                                                                                      -2))
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "rel_prime_div_prod")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "xx"
                                                                                                                                         "gcd(cc,dd)"
                                                                                                                                         "gcd(cc,dd)*(ee^2 + ff^2)")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             -)
                                                                                                                                            (("1"
                                                                                                                                              (lemma
                                                                                                                                               "rel_prime_div_prod")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "xx"
                                                                                                                                                 "gcd(cc,dd)"
                                                                                                                                                 "ee^2 + ff^2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (rewrite
                                                                                                                                                     "rel_prime_sym"
                                                                                                                                                     +)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (rewrite
                                                                                                                                               "rel_prime_sym"
                                                                                                                                               +)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("3"
                                                                                                                                              (hide-all-but
                                                                                                                                               (-1
                                                                                                                                                1))
                                                                                                                                              (("3"
                                                                                                                                                (expand
                                                                                                                                                 "divides")
                                                                                                                                                (("3"
                                                                                                                                                  (inst
                                                                                                                                                   +
                                                                                                                                                   "yy")
                                                                                                                                                  (("3"
                                                                                                                                                    (grind
                                                                                                                                                     :exclude
                                                                                                                                                     "gcd")
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (1
                                                                                                              2))
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "nnreal_times_nnreal_is_nnreal")
                                                                                                              (("2"
                                                                                                                (inst-cp
                                                                                                                 -
                                                                                                                 "abs(ee)"
                                                                                                                 "abs(ee)")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "abs(ff)"
                                                                                                                   "abs(ff)")
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "ee^2 = 0 IMPLIES ee = 0")
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "ff^2 = 0 IMPLIES ff = 0")
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (lemma
                                                                                                                         "nzreal_times_nzreal_is_nzreal")
                                                                                                                        (("2"
                                                                                                                          (hide-all-but
                                                                                                                           (-1
                                                                                                                            1))
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "^")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "expt")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "expt")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "expt")
                                                                                                                                    (("2"
                                                                                                                                      (inst?)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "nzreal_times_nzreal_is_nzreal")
                                                                                                                        (("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "^")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "expt")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "expt")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "expt")
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "gcd(cc,dd)")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "divides")
                                                                                                    (("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         +
                                                                                                         "x!2"
                                                                                                         "x!3")
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (cross-mult
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (cross-mult
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case
                                                                                         "rel_prime(gcd(cc,dd)^2,xx)")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "rel_prime_div_prod")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "gcd(cc,dd)^2"
                                                                                             "xx"
                                                                                             "yy")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 "xxccdddiv"
                                                                                                 +
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "gcd(cc,dd)")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "divides")
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (mult-eq
                                                                                                           -2
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (mult-eq
                                                                                                             -4
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "^")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "expt")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "expt")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "expt")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           +
                                                                                                                           "x!1^2 + x!2^2")
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -)
                                                                                                                            (("1"
                                                                                                                              (grind
                                                                                                                               :exclude
                                                                                                                               "gcd")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "^"
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "expt"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "expt"
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "expt"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "rel_prime_mult_left")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               ("AAdef"
                                                                                "divxx"
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 "divides")
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (replace
                                                                                     "divxx")
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "x!1-AA")
                                                                                      (("2"
                                                                                        (grind
                                                                                         :exclude
                                                                                         "^")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (assert)
                                                                            (("4"
                                                                              (flatten)
                                                                              (("4"
                                                                                (assert)
                                                                                (("4"
                                                                                  (reveal
                                                                                   "ccddnz")
                                                                                  (("4"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       "ccdef"
                                                                       +)
                                                                      (("2"
                                                                        (replace
                                                                         "dddef"
                                                                         +)
                                                                        (("2"
                                                                          (expand
                                                                           "^"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "expt"
                                                                             +)
                                                                            (("2"
                                                                              (expand
                                                                               "expt"
                                                                               +)
                                                                              (("2"
                                                                                (expand
                                                                                 "expt"
                                                                                 +)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "mm*mm*xx + nn*nn*xx +2*cc*mm+2*dd*nn")
                                                                                    (("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (reveal "xxpos")
                                                      (("2"
                                                        (case
                                                         "FORALL (aa:int): EXISTS (nn,kk:int): abs(kk)<=xx/2 AND aa = nn*xx+kk")
                                                        (("1"
                                                          (inst-cp - "pa")
                                                          (("1"
                                                            (inst - "pb")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "kk!2"
                                                                 "kk!1"
                                                                 "nn!2"
                                                                 "nn!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (case
                                                               "EXISTS (nn:int): nn*xx <= aa AND (nn+1)*xx > aa")
                                                              (("1"
                                                                (skeep -1)
                                                                (("1"
                                                                  (copy 1)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "nn"
                                                                     "aa-nn*xx")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "nn+1"
                                                                       "aa-(nn+1)*xx")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (case
                                                                   "FORALL (a:nat): EXISTS (nn: int): nn * xx <= a AND (nn + 1) * xx > a")
                                                                  (("1"
                                                                    (case
                                                                     "NOT aa < 0")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "aa")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "-aa")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (case
                                                                           "nn!1*xx = -aa")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "-nn!1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             +
                                                                             "-nn!1-1")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (lemma
                                                                       "axiom_of_archimedes")
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (case
                                                                           "FORALL (ii:nat): ii*xx <= a")
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "a/xx")
                                                                            (("1"
                                                                              (case
                                                                               "EXISTS (i:nat): a/xx < i")
                                                                              (("1"
                                                                                (hide
                                                                                 -3)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (cross-mult
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "i!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "nnreal_div_posreal_is_nnreal")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "a"
                                                                                     "xx")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "i!1")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (induct
                                                                             "ii")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (inst
                                                                                 +
                                                                                 "j!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2) (("3" (skosimp*) (("3" (ground) nil nil)) nil)) nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skosimp*) (("3" (ground) nil nil)) nil)) nil))
    nil)
   ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs_0_rew formula-decl nil abs_rews ints)
    (gcd const-decl "{k: posnat | divides(k, i) AND divides(k, j)}" gcd ints)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "int" primes_sum_squares nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (div_cancel4 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (rel_prime_div_prod formula-decl nil gcd ints)
    (rel_prime_sym formula-decl nil gcd ints)
    (zz skolem-const-decl "int" primes_sum_squares nil)
    (ee skolem-const-decl "int" primes_sum_squares nil)
    (ff skolem-const-decl "int" primes_sum_squares nil)
    (abs_nat_rew formula-decl nil abs_rews ints)
    (b skolem-const-decl "nat" primes_sum_squares nil)
    (x!2 skolem-const-decl "int" primes_sum_squares nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (int_expt application-judgement "int" exponentiation nil)
    (sots_div_quot_factor formula-decl nil primes_sum_squares nil)
    (gcd_factors formula-decl nil gcd ints)
    (both_sides_times1 formula-decl nil real_props nil)
    (rel_prime_lem formula-decl nil gcd ints)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (div_expt formula-decl nil exponentiation nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (cc skolem-const-decl "int" primes_sum_squares nil)
    (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (dd skolem-const-decl "int" primes_sum_squares nil)
    (rat_abs_is_nonneg application-judgement "{r: nonneg_rat | r >= q}"
     real_defs nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)
    (rel_prime_mult_left formula-decl nil gcd ints)
    (aa skolem-const-decl "int" primes_sum_squares nil)
    (axiom_of_archimedes formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nnreal_div_posreal_is_nnreal judgement-tcc nil real_types nil)
    (xx skolem-const-decl "nat" primes_sum_squares nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (x!1 skolem-const-decl "int" primes_sum_squares nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (divides_gcd formula-decl nil gcd ints)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (rel_prime const-decl "bool" gcd ints)
    (divides const-decl "bool" divides nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (sum_of_two_squares? const-decl "bool" primes_sum_squares nil))
   nil)
  (new "" 3539694599
   (""
    (case "FORALL (m:nat, n: nat, pa, pb: posnat): n<=m AND
                      rel_prime(pa, pb) AND divides(n, pa ^ 2 + pb ^ 2) IMPLIES
                       sum_of_two_squares?(n)")
    (("1" (skeep)
      (("1" (inst - "n" "n" "pa" "pb") (("1" (assert) nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "m")
        (("1" (skeep)
          (("1" (case "n = 0")
            (("1" (replace -1)
              (("1" (hide -)
                (("1" (expand "sum_of_two_squares?")
                  (("1" (inst + "0" "0") (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (case "NOT j = n-1")
              (("1" (inst - "n" "pa" "pb") (("1" (assert) nil nil)) nil)
               ("2" (replace -1)
                (("2" (hide -3)
                  (("2" (name "xx" "n")
                    (("2" (replace -1)
                      (("2" (label "hyp" -3)
                        (("2" (hide (-1 -2))
                          (("2" (hide "hyp")
                            (("2" (case "divides(xx,pa) AND divides(xx,pb)")
                              (("1" (flatten)
                                (("1" (lemma "divides_gcd")
                                  (("1" (inst - "pa" "pb" "xx")
                                    (("1" (assert)
                                      (("1"
                                        (expand "rel_prime")
                                        (("1"
                                          (replace -4)
                                          (("1"
                                            (case "xx = 1")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (hide -)
                                                (("1"
                                                  (expand
                                                   "sum_of_two_squares?")
                                                  (("1"
                                                    (inst + "0" "1")
                                                    (("1" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-1 1))
                                              (("2"
                                                (expand "divides")
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (case "x!1 > 1")
                                                    (("1"
                                                      (mult-by -1 "xx")
                                                      (("1" (assert) nil nil))
                                                      nil)
                                                     ("2"
                                                      (case "x!1 = 1")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (lemma
                                                         "posreal_times_posreal_is_posreal")
                                                        (("2"
                                                          (inst - "-x!1" "xx")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (hide -)
                                            (("2"
                                              (expand "sum_of_two_squares?")
                                              (("2"
                                                (inst + "0" "0")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (label "xxdivpapb" 1)
                                (("2" (hide "xxdivpapb")
                                  (("2" (label "divxx" -2)
                                    (("2" (label "papbrp" -1)
                                      (("2"
                                        (case
                                         "EXISTS (cc,dd,mm,nn:nat): abs(cc)<=xx/2 AND abs(dd)<=xx/2 AND pa = mm*xx+cc AND pb = nn*xx+dd")
                                        (("1"
                                          (skeep -1)
                                          (("1"
                                            (case "(cc = 0 AND dd = 0)")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (reveal "xxdivpapb")
                                                    (("1"
                                                      (expand "divides" +)
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (inst + "mm")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst + "nn")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (label "ccddnz" 1)
                                              (("2"
                                                (hide "ccddnz")
                                                (("2"
                                                  (case
                                                   "EXISTS (AA:int): pa^2 + pb^2 = AA*xx + (cc^2 + dd^2)")
                                                  (("1"
                                                    (skeep -1)
                                                    (("1"
                                                      (case
                                                       "NOT rel_prime(gcd(cc,dd),xx)")
                                                      (("1"
                                                        (expand "rel_prime" +)
                                                        (("1"
                                                          (case
                                                           "divides(gcd(cc,dd),pa) AND divides(gcd(cc,dd),pb)")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "divides_gcd")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "pa"
                                                                 "pb"
                                                                 "gcd(cc,dd)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "rel_prime")
                                                                    (("1"
                                                                      (replace
                                                                       "papbrp")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "divides"
                                                                           -1)
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (case
                                                                               "x!1 > 1")
                                                                              (("1"
                                                                                (mult-by
                                                                                 -1
                                                                                 "gcd(cc,dd)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "x!1 = 1")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           2)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "gcd(1,xx)")
                                                                                            (("1"
                                                                                              (hide
                                                                                               (-1
                                                                                                -3))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "divides")
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "x!2 > 1")
                                                                                                    (("1"
                                                                                                      (mult-by
                                                                                                       -1
                                                                                                       "gcd(1,xx)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "x!2 = 1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "x!2 < 0")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "posreal_times_posreal_is_posreal")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "-x!2"
                                                                                                               "gcd(1,xx)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "posreal_times_posreal_is_posreal")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "-x!1"
                                                                                       "gcd(cc,dd)")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "FORALL (ab1,mn1,cd1,dg1:nat): divides(dg1,cd1) AND divides(dg1,xx) AND ab1 = mn1*xx + cd1 IMPLIES divides(dg1,ab1)")
                                                            (("1"
                                                              (inst-cp
                                                               -
                                                               "pa"
                                                               "mm"
                                                               "cc"
                                                               "gcd(gcd(cc,dd),xx)")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "pb"
                                                                 "nn"
                                                                 "dd"
                                                                 "gcd(gcd(cc,dd),xx)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "FORALL (rrz,xxz,ccz:int): divides(rrz,xxz) AND divides(xxz,ccz) IMPLIES divides(rrz,ccz)")
                                                                    (("1"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (hide
                                                                           -3)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (copy
                                                                               "papbrp")
                                                                              (("1"
                                                                                (expand
                                                                                 "rel_prime"
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "divides_gcd")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "pa"
                                                                                     "pb"
                                                                                     "gcd(gcd(cc,dd),xx)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            2))
                                                                                          (("1"
                                                                                            (expand
                                                                                             "divides")
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "x!1 > 1")
                                                                                                (("1"
                                                                                                  (mult-by
                                                                                                   -1
                                                                                                   "gcd(gcd(cc,dd),xx)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "x!1 = 1")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (lemma
                                                                                                     "posreal_times_posreal_is_posreal")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "-x!1"
                                                                                                       "gcd(gcd(cc,dd),xx)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (ground)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-2
                                                                            1))
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "gcd(gcd(cc,dd),xx)"
                                                                             "gcd(cc,dd)"
                                                                             "cc")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-1
                                                                          1))
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "gcd(gcd(cc,dd),xx)"
                                                                           "gcd(cc,dd)"
                                                                           "dd")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (expand
                                                                           "divides")
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (replace
                                                                               -1)
                                                                              (("2"
                                                                                (inst
                                                                                 +
                                                                                 "x!1*x!2")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "divides")
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (replace
                                                                         -2)
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "mn1*x!2 + x!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "divides(xx,cc^2 + dd^2)")
                                                        (("1"
                                                          (expand
                                                           "divides"
                                                           -1)
                                                          (("1"
                                                            (skolem -1 "yy")
                                                            (("1"
                                                              (case
                                                               "divides(gcd(cc,dd)^2,yy)")
                                                              (("1"
                                                                (expand
                                                                 "divides"
                                                                 -1)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (case
                                                                     "EXISTS (ee,ff:nat): ee = cc/gcd(cc,dd) AND ff = dd/gcd(cc,dd)")
                                                                    (("1"
                                                                      (skeep
                                                                       -1)
                                                                      (("1"
                                                                        (case
                                                                         "(ee = 0 AND ff = 0)")
                                                                        (("1"
                                                                          (reveal
                                                                           "ccddnz")
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-1
                                                                              -2
                                                                              -3
                                                                              1))
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("1"
                                                                                    (cross-mult
                                                                                     -3)
                                                                                    (("1"
                                                                                      (cross-mult
                                                                                       -4)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (label
                                                                           "eeffnz"
                                                                           1)
                                                                          (("2"
                                                                            (hide
                                                                             "eeffnz")
                                                                            (("2"
                                                                              (case
                                                                               "ee <= cc AND ff <= dd")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (case
                                                                                   "divides(xx,ee^2 + ff^2)")
                                                                                  (("1"
                                                                                    (copy
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "divides"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (skolem
                                                                                         -1
                                                                                         "zz")
                                                                                        (("1"
                                                                                          (case
                                                                                           "abs(zz) <= xx/2")
                                                                                          (("1"
                                                                                            (case
                                                                                             "rel_prime(ee,ff)")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "sots_div_quot_factor")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "xx"
                                                                                                 "ee^2 + ff^2")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -)
                                                                                                    (("1"
                                                                                                      (skeep
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (reveal
                                                                                                         "hyp")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "b"
                                                                                                           "ee"
                                                                                                           "ff")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "zz>=0")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "abs")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "b <=zz")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (hide-all-but
                                                                                                                         (-3
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "divides")
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (cross-mult
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 +
                                                                                                                                 "x!2*xx")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "zz = 0")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 -6)
                                                                                                                                (("1"
                                                                                                                                  (reveal
                                                                                                                                   "eeffnz")
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "FORALL (ee1:real): ee1^2 >= 0")
                                                                                                                                    (("1"
                                                                                                                                      (inst-cp
                                                                                                                                       -
                                                                                                                                       "ee")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "ff")
                                                                                                                                        (("1"
                                                                                                                                          (case
                                                                                                                                           "FORALL (xr:real): xr^2 =0 IMPLIES xr = 0")
                                                                                                                                          (("1"
                                                                                                                                            (inst-cp
                                                                                                                                             -
                                                                                                                                             "ee")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "ff")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (skeep)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "nzreal_times_nzreal_is_nzreal")
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -
                                                                                                                                                   "xr"
                                                                                                                                                   "xr")
                                                                                                                                                  (("1"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (label
                                                                                                                               "zzero"
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (postpone)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (postpone)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (postpone)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (postpone)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (postpone)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (postpone)
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (postpone)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (postpone)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("4"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (postpone) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (rel_prime_sos_factor-1 nil 3502105281
   (""
    (case "FORALL (m: nat): FORALL (n:nat, pa, pb: posnat): n<=m AND
                      rel_prime(pa, pb) AND divides(n, pa ^ 2 + pb ^ 2) IMPLIES
                       sum_of_two_squares?(n)")
    (("1" (skeep)
      (("1" (inst - "n")
        (("1" (inst - "n" "pa" "pb") (("1" (assert) nil nil)) nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "m")
        (("1" (skeep)
          (("1" (case "n = 0")
            (("1" (replace -1)
              (("1" (hide -)
                (("1" (expand "sum_of_two_squares?")
                  (("1" (inst + "0" "0") (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (skeep)
            (("2" (assert)
              (("2" (label "oldlem" -1)
                (("2" (skeep)
                  (("2" (name "xx" "n")
                    (("2" (replace -1)
                      (("2" (hide -1)
                        (("2" (case "xx > 0")
                          (("1" (label "xxpos" -1)
                            (("1"
                              (case "NOT (FORALL (kk:posnat): kk >= 2 IMPLIES NOT divides(kk^2,xx))")
                              (("1" (skeep)
                                (("1" (case "kk^2 >= 4")
                                  (("1" (case "kk^2 < xx")
                                    (("1" (label "divideskkx" -4)
                                      (("1"
                                        (label "kge2" -3)
                                        (("1"
                                          (label "kkge4" -2)
                                          (("1"
                                            (label "kkltx" -1)
                                            (("1"
                                              (case
                                               "EXISTS (nn:posnat): nn = xx/kk^2")
                                              (("1"
                                                (skeep -1)
                                                (("1"
                                                  (case "nn < xx")
                                                  (("1"
                                                    (label "nndef" -2)
                                                    (("1"
                                                      (label "nnltx" -1)
                                                      (("1"
                                                        (case
                                                         "divides(nn,pa^2 + pb^2)")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "nn"
                                                           "pa"
                                                           "pb")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide-all-but
                                                               (-3
                                                                -5
                                                                "oldlem"
                                                                +))
                                                              (("1"
                                                                (expand
                                                                 "sum_of_two_squares?")
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (copy
                                                                       "oldlem")
                                                                      (("1"
                                                                        (cross-mult
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "a!1*kk"
                                                                           "b!1*kk")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             +)
                                                                            (("1"
                                                                              (hide
                                                                               -)
                                                                              (("1"
                                                                                (expand
                                                                                 "^")
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "expt")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "expt")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "FORALL (a1,b1,c1:nat): divides(a1,b1) AND divides(b1,c1) IMPLIES divides(a1,c1)")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "nn"
                                                             "xx"
                                                             "pa^2 + pb^2")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "divides"
                                                                 1)
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "kk^2")
                                                                  (("1"
                                                                    (mult-by
                                                                     -2
                                                                     "kk^2")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but 1)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "divides")
                                                                (("2"
                                                                  (skeep -1)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (skeep
                                                                       -2)
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "x*x_1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1)
                                                    (("2"
                                                      (cross-mult 1)
                                                      (("2"
                                                        (copy "kkge4")
                                                        (("2"
                                                          (mult-by -1 "xx")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (copy "divideskkx")
                                                (("2"
                                                  (expand "divides" -1)
                                                  (("2"
                                                    (skeep -1)
                                                    (("2"
                                                      (inst + "x")
                                                      (("1"
                                                        (cross-mult 1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "posreal_times_posreal_is_posreal")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "-x"
                                                             "kk^2")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (case "kk^2 = xx")
                                      (("1"
                                        (replace -1 + :dir rl)
                                        (("1"
                                          (hide -)
                                          (("1"
                                            (expand "sum_of_two_squares?")
                                            (("1"
                                              (inst + "0" "kk")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "^")
                                                  (("1"
                                                    (expand "expt")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "divides" -3)
                                        (("2"
                                          (skeep -3)
                                          (("2"
                                            (replace -3 +)
                                            (("2"
                                              (case "x > 1")
                                              (("1"
                                                (mult-by -1 "kk^2")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (case "x = 1")
                                                  (("1"
                                                    (replace -1)
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "posreal_times_posreal_is_posreal")
                                                    (("2"
                                                      (inst - "-x" "kk^2")
                                                      (("1" (assert) nil nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but (-1 1))
                                    (("2" (copy -1)
                                      (("2"
                                        (mult-by -2 "kk")
                                        (("2"
                                          (expand "^")
                                          (("2"
                                            (expand "expt")
                                            (("2"
                                              (expand "expt")
                                              (("2"
                                                (expand "expt")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (label "xdivsq" -1)
                                (("2" (label "xxlt" -4)
                                  (("2"
                                    (hide ("xdivsq" "xxpos" "oldlem" "xxlt"))
                                    (("2"
                                      (case
                                       "EXISTS (cc,dd,mm,nn:nat): abs(cc)<=xx/2 AND abs(dd)<=xx/2 AND pa = mm*xx+cc AND pb = nn*xx+dd")
                                      (("1"
                                        (skeep -1)
                                        (("1"
                                          (case "NOT divides(xx,cc^2+dd^2)")
                                          (("1"
                                            (label "ccdef" -1)
                                            (("1"
                                              (label "dddef" -2)
                                              (("1"
                                                (label "relprime" -5)
                                                (("1"
                                                  (label "dividesab" -6)
                                                  (("1"
                                                    (lemma "divides_sum")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "(mm * xx + cc) ^ 2 + (nn * xx + dd) ^ 2"
                                                       "-(mm * xx + cc) ^ 2 - (nn * xx + dd) ^ 2+cc^2+dd^2"
                                                       "xx")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide-all-but 1)
                                                          (("1"
                                                            (grind
                                                             :exclude
                                                             "divides")
                                                            (("1"
                                                              (expand
                                                               "divides")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "-(mm * mm * xx + cc * mm + (cc * mm)) -
                                                               nn * nn * xx
                                                               - 2 * (dd * nn)")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "divides" -1)
                                            (("2"
                                              (skolem -1 "yy")
                                              (("2"
                                                (case "NOT rel_prime(cc,dd)")
                                                (("1"
                                                  (case
                                                   "divides(gcd(cc,dd),xx)")
                                                  (("1"
                                                    (expand "rel_prime" +)
                                                    (("1"
                                                      (case
                                                       "divides(gcd(cc,dd),pa) AND divides(gcd(cc,dd),pb)")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (lemma
                                                           "divides_gcd")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "pa"
                                                             "pb"
                                                             "gcd(cc,dd)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "rel_prime")
                                                                (("1"
                                                                  (replace
                                                                   -10)
                                                                  (("1"
                                                                    (expand
                                                                     "divides"
                                                                     -1)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "x!1>1")
                                                                          (("1"
                                                                            (mult-by
                                                                             -1
                                                                             "gcd(cc,dd)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "x!1 <=0")
                                                                            (("1"
                                                                              (lemma
                                                                               "nnreal_times_nnreal_is_nnreal")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "-x!1"
                                                                                 "gcd(cc,dd)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "FORALL (nnz,xxz,ccz,rrz:int): divides(rrz,xxz) AND divides(rrz,ccz) IMPLIES divides(rrz,nnz*xxz+ccz)")
                                                        (("1"
                                                          (inst-cp
                                                           -
                                                           "nn"
                                                           "xx"
                                                           "dd"
                                                           "gcd(cc,dd)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "mm"
                                                               "xx"
                                                               "cc"
                                                               "gcd(cc,dd)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (expand
                                                               "divides")
                                                              (("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (replace -1)
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "nnz*x!1+x!2")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (postpone) nil nil))
                                                  nil)
                                                 ("2" (postpone) nil nil)
                                                 ("3" (postpone) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (fermat_prime_sos_finite_set 0
  (fermat_prime_sos_finite_set-1 nil 3539964928
   (""
    (case "FORALL (ig:nat,ez1,pr2:int): abs(ez1)<ig AND pr2/=0 IMPLIES ez1/=ig*pr2")
    (("1" (label "lem1" -1)
      (("1" (hide "lem1")
        (("1" (skeep)
          (("1" (name "CC" "LAMBDA (x,y,z:nat): x<=p AND y<=p AND z<=p")
            (("1" (case "finite_sets[[nat, nat, nat]].is_finite(CC)")
              (("1"
                (case "EXISTS (FF:[(fermat_prime_sos_set(p)) -> (CC)]): injective?(FF)")
                (("1" (skeep -1)
                  (("1" (expand "is_finite")
                    (("1" (skosimp*)
                      (("1" (inst + "N!1" "f!1 o FF")
                        (("1"
                          (lemma
                           "composition_injective[(fermat_prime_sos_set(p)),(CC),below(N!1)]")
                          (("1" (inst - "FF" "f!1") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (inst + "LAMBDA (xyz:(fermat_prime_sos_set(p))): xyz")
                    (("1" (expand "injective?") (("1" (skosimp*) nil nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (expand "CC")
                        (("2" (typepred "xyz!1")
                          (("2" (expand "fermat_prime_sos_set")
                            (("2"
                              (case "xyz!1`1 >= 1 AND xyz!1`2 >= 1 AND xyz!1`3 >= 1")
                              (("1" (flatten)
                                (("1" (copy -1)
                                  (("1" (mult-by -1 "xyz!1`1")
                                    (("1" (copy -3)
                                      (("1"
                                        (mult-by -1 "xyz!1`3")
                                        (("1"
                                          (copy -5)
                                          (("1"
                                            (mult-by -1 "xyz!1`2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (expand "expt")
                                                  (("1"
                                                    (expand "expt")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (case "xyz!1`1 = 0")
                                  (("1" (assert)
                                    (("1" (hide +)
                                      (("1"
                                        (grind)
                                        (("1"
                                          (typepred "p")
                                          (("1"
                                            (expand "prime?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst - "2")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     +
                                                     "2*xyz!1`2*xyz!1`3")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (case "xyz!1`2 = 0 OR xyz!1`3 = 0")
                                    (("1" (case "xyz!1`2 * xyz!1`3 = 0")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide (-1 -2))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "p")
                                              (("1"
                                                (expand "prime?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst - "xyz!1`1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -)
                                                        (("1"
                                                          (expand "divides")
                                                          (("1"
                                                            (inst + "xyz!1`1")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (replace -1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (flatten)
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (replace -1)
                                                              (("3"
                                                                (case "p > 1")
                                                                (("1"
                                                                  (mult-by
                                                                   -1
                                                                   "p")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (ground) nil nil))
                                      nil)
                                     ("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (expand "is_finite")
                  (("2"
                    (inst + "(p+1)^3"
                     "LAMBDA (xyz:(CC)): LET x = xyz`1, y = xyz`2, z = xyz`3 IN x*(p+1)^2 + y*(p+1) + z")
                    (("1" (expand "injective?")
                      (("1" (skeep)
                        (("1" (label "hyp" -1)
                          (("1" (typepred "x1")
                            (("1" (typepred "x2")
                              (("1" (expand "CC")
                                (("1" (flatten)
                                  (("1" (case "x1`3=x2`3")
                                    (("1" (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case "x1`2 = x2`2")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case "(1+p)^2 > 0")
                                                (("1"
                                                  (copy "hyp")
                                                  (("1"
                                                    (case "x1`1 = x2`1")
                                                    (("1"
                                                      (decompose-equality +)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (mult-by
                                                         -1
                                                         "1/(1+p)^2")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "posreal_times_posreal_is_posreal")
                                                  (("2"
                                                    (hide-all-but (-1 1))
                                                    (("2"
                                                      (inst - "1+p" "1+p")
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "(x1`1-x2`1)*(1+p) = x2`2 - x1`2")
                                            (("1"
                                              (reveal "lem1")
                                              (("1"
                                                (inst
                                                 -
                                                 "1+p"
                                                 "x2`2-x1`2"
                                                 "x1`1-x2`1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "abs")
                                                    (("1"
                                                      (lift-if)
                                                      (("1" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (mult-by 1 "1+p")
                                              (("2"
                                                (expand "^")
                                                (("2"
                                                  (expand "expt")
                                                  (("2"
                                                    (expand "expt")
                                                    (("2"
                                                      (expand "expt")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (reveal "lem1")
                                      (("2"
                                        (inst
                                         -
                                         "1+p"
                                         "x1`3-x2`3"
                                         "(x2`1-x1`1)*(1+p) + (x2`2-x1`2)")
                                        (("1"
                                          (split -)
                                          (("1"
                                            (hide-all-but ("lem1" "hyp"))
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (expand "abs")
                                              (("2"
                                                (lift-if)
                                                (("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (flatten)
                                            (("3"
                                              (reveal "lem1")
                                              (("3"
                                                (inst
                                                 -
                                                 "1+p"
                                                 "x2`2-x1`2"
                                                 "x1`1-x2`1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "abs")
                                                    (("1"
                                                      (lift-if)
                                                      (("1" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (assert)
                        (("2" (lemma "expt_pos")
                          (("2" (inst - "2" "1+p")
                            (("1" (case "(1+p)^2 >= 0")
                              (("1" (hide -2)
                                (("1" (mult-by -1 "x!1")
                                  (("1" (case "1+p>=0")
                                    (("1" (mult-by -1 "y!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide (-1 -2))
                                          (("1"
                                            (typepred "xyz!1")
                                            (("1"
                                              (expand "CC")
                                              (("1"
                                                (replace -2 :dir rl)
                                                (("1"
                                                  (replace -3 :dir rl)
                                                  (("1"
                                                    (replace -4 :dir rl)
                                                    (("1"
                                                      (hide-all-but (-1 1))
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (mult-by
                                                           -1
                                                           "(1+p)^2")
                                                          (("1"
                                                            (mult-by -2 "1+p")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma "expt_pos")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert)
                                      (("2"
                                        (typepred "p")
                                        (("2"
                                          (expand "prime?")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (assert)
                              (("2" (typepred "p")
                                (("2" (expand "prime?")
                                  (("2" (ground) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (lemma "expt_pos")
                      (("3" (inst?)
                        (("1" (assert) nil nil)
                         ("2" (typepred "p")
                          (("2" (expand "prime?") (("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp*)
        (("2" (replace -2)
          (("2" (rewrite "abs_mult")
            (("2" (case "abs(pr2!1)>=1")
              (("1" (mult-by -1 "ig!1") (("1" (assert) nil nil)) nil)
               ("2" (hide -) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs_nat_rew formula-decl nil abs_rews ints)
    (abs_mult formula-decl nil real_props nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (divides const-decl "bool" divides nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (int_expt application-judgement "int" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (CC skolem-const-decl "[[nat, nat, nat] -> boolean]" primes_sum_squares
     nil)
    (p skolem-const-decl "(prime?)" primes_sum_squares nil)
    (composition_injective formula-decl nil func_composition finite_sets)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (O const-decl "T3" function_props nil)
    (injective? const-decl "bool" functions nil)
    (fermat_prime_sos_set const-decl "bool" primes_sum_squares nil)
    (expt_pos formula-decl nil exponentiation nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (prime? const-decl "bool" primes ints) (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil))
   shostak))
 (involution_odd_has_fixedpoint 0
  (involution_odd_has_fixedpoint-1 nil 3540030950
   (""
    (case "FORALL (n:nat,invol: [below(2*n+1) -> below(2*n+1)]):
                             (FORALL (i:below(2*n+1)): invol(invol(i)) = i)IMPLIES
                              (EXISTS (i: below(2*n+1)): invol(i) = i)")
    (("1" (skeep)
      (("1" (expand "odd?")
        (("1" (skosimp*)
          (("1" (inst - "j!1" "invol")
            (("1" (assert)
              (("1" (split -)
                (("1" (skosimp*) (("1" (inst + "i!1") nil nil)) nil)
                 ("2" (skosimp*) (("2" (inst - "i!1") nil nil)) nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (replace -1 :dir rl)
                (("2" (assert) (("2" (skosimp*) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (assert)
        (("2" (induct "n")
          (("1" (skeep) (("1" (inst + "0") (("1" (assert) nil nil)) nil)) nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (label "involution" -2)
                (("2" (label "indhyp" -1)
                  (("2" (inst-cp + "0")
                    (("2"
                      (name "FF"
                            "(LAMBDA (ii:below(1+2*j)): IF ii+1 < invol(0) THEN ii+1 ELSE ii+2 ENDIF)")
                      (("2" (case "FORALl (ii:below(1+2*j)): FF(ii) < 3+2*j")
                        (("1" (label "FFdef" -1)
                          (("1" (hide -2)
                            (("1"
                              (name "GG"
                                    "LAMBDA (ii:below(3+2*j)): IF (ii = 0 OR ii=invol(0)) THEN 0 ELSIF ii<invol(0) THEN ii-1 ELSE ii-2 ENDIF")
                              (("1"
                                (case "FORALL (ii:below(3+2*j)): GG(ii) >= 0 AND GG(ii)<1+2*j")
                                (("1" (label "GGdef" -1)
                                  (("1" (hide -2)
                                    (("1"
                                      (case
                                       "FORALL (ii:below(1+2*j)): GG(FF(ii)) = ii")
                                      (("1"
                                        (label "ggff" -1)
                                        (("1"
                                          (case
                                           "FORALL (ii:below(3+2*j)): (ii/=0 AND ii/=invol(0)) IMPLIES FF(GG(ii)) = ii")
                                          (("1"
                                            (label "ffgg" -1)
                                            (("1"
                                              (inst
                                               "indhyp"
                                               "GG o invol o FF")
                                              (("1"
                                                (split -)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (inst + "FF(i!1)")
                                                    (("1"
                                                      (case
                                                       "FF((GG o invol o FF)(i!1)) = FF(i!1)")
                                                      (("1"
                                                        (inst
                                                         "ffgg"
                                                         "invol(FF(i!1))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -)
                                                            (("1"
                                                              (expand "o")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (copy
                                                                 "involution")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "FF(i!1)")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (expand
                                                                       "FF"
                                                                       -1)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              (("3"
                                                                (flatten)
                                                                (("3"
                                                                  (case
                                                                   "invol(invol(FF(i!1))) = invol(invol(0))")
                                                                  (("1"
                                                                    (copy
                                                                     "involution")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -
                                                                       "FF(i!1)")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "0")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "o")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand "o" +)
                                                        (("3"
                                                          (inst
                                                           "GGdef"
                                                           "invol(FF(i!1))")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst "FFdef" "i!1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand "o")
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst? "ffgg")
                                                        (("2"
                                                          (split -)
                                                          (("1"
                                                            (replace "ffgg")
                                                            (("1"
                                                              (copy
                                                               "involution")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "ggff")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (case
                                                               "FF(i!1) = invol(0)")
                                                              (("1"
                                                                (expand
                                                                 "FF"
                                                                 -1)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (copy
                                                                 "involution")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "FF(i!1)")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (flatten)
                                                            (("3"
                                                              (copy
                                                               "involution")
                                                              (("3"
                                                                (inst-cp
                                                                 -
                                                                 "FF(i!1)")
                                                                (("3"
                                                                  (inst - "0")
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (expand "o")
                                                  (("2"
                                                    (inst? "GGdef")
                                                    (("2"
                                                      (inst? "FFdef")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (expand "FF" 3)
                                              (("2"
                                                (expand "GG" 3)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skosimp*)
                                            (("3"
                                              (inst "GGdef" "ii!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (expand "GG" 1)
                                          (("2"
                                            (expand "FF" 1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (lift-if)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide -)
                                  (("2" (expand "GG") (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -)
                          (("2" (expand "FF") (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (j skolem-const-decl "nat" primes_sum_squares nil)
    (FF skolem-const-decl "[below(1 + 2 * j) -> posint]" primes_sum_squares
     nil)
    (O const-decl "T3" function_props nil)
    (GG skolem-const-decl "[below(3 + 2 * j) -> int]" primes_sum_squares nil)
    (invol skolem-const-decl "[below(3 + 2 * j) -> below(3 + 2 * j)]"
     primes_sum_squares nil)
    (i!1 skolem-const-decl "below(1 + 2 * j)" primes_sum_squares nil)
    (x1!1 skolem-const-decl "below(1 + 2 * j)" primes_sum_squares nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N skolem-const-decl "posnat" primes_sum_squares nil)
    (invol skolem-const-decl "[below(N) -> below(N)]" primes_sum_squares nil)
    (j!1 skolem-const-decl "int" primes_sum_squares nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (odd? const-decl "bool" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (involution_one_fixedpoint_odd 0
  (involution_one_fixedpoint_odd-2 nil 3540046099
   (""
    (case "FORALL (n:nat): LET N = 2*(n+1) IN FORALL (invol: [below(N) -> below(N)]): ((FORALL (i: below(N)): invol(invol(i)) = i) IMPLIES
                                            (FORALL (j: below(N)): invol(j) = j IMPLIES EXISTS (i:below(N)): i/=j AND invol(i) = i))")
    (("1" (skeep)
      (("1" (case "even?(N)")
        (("1" (expand "even?")
          (("1" (skosimp*)
            (("1" (inst - "j!1-1")
              (("1" (assert)
                (("1" (inst - "invol")
                  (("1" (split -)
                    (("1" (case "invol(j!2) = j!2")
                      (("1" (inst - "j!2")
                        (("1" (assert)
                          (("1" (skosimp*)
                            (("1" (inst - "i!1")
                              (("1" (inst - "i!1") (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst - "j!2")
                        (("2" (inst - "j!2")
                          (("2" (inst - "j!2") (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*) (("2" (inst - "i!1") nil nil)) nil))
                    nil)
                   ("2" (replace -1 :dir rl)
                    (("2" (assert)
                      (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (hide -)
          (("2" (assert)
            (("2" (lemma "even_or_odd")
              (("2" (inst?) (("2" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (assert) nil nil)
         ("2" (skosimp*)
          (("2" (case "FORALL (i:below(2)): invol!1(i) = 0 OR invol!1(i) = 1")
            (("1" (inst-cp - "0")
              (("1" (inst - "1")
                (("1" (inst-cp - "0")
                  (("1" (inst - "1")
                    (("1" (inst-cp + "0")
                      (("1" (inst + "1") (("1" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*) (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("3" (skosimp*)
          (("3"
            (case "EXISTS (q:below(4+2*j!1)): 1<=q AND q < invol!1(q) AND q/=j!2 AND invol!1(q)/=j!2")
            (("1" (skosimp*)
              (("1" (label "q1" -1)
                (("1" (hide "q1")
                  (("1" (label "involution" -3)
                    (("1" (label "indhype" -2)
                      (("1"
                        (name "FF"
                              "LAMBDA (i:below(2+2*j!1)): IF i < q!1 THEN i ELSIF i+1 < invol!1(q!1) THEN i+1 ELSE i+2 ENDIF")
                        (("1"
                          (case "FORALL (ii:below(2+2*j!1)): FF(ii) < 4+2*j!1")
                          (("1" (label "FFdef" -1)
                            (("1" (hide -2)
                              (("1"
                                (name "GG"
                                      "LAMBDA (i:below(4+2*j!1)): IF i = q!1 OR i = invol!1(q!1) THEN 0 ELSIF i < q!1 THEN i ELSIF i<invol!1(q!1) THEN i-1 ELSE i-2 ENDIF")
                                (("1"
                                  (case "FORALL (ii:below(4+2*j!1)): GG(ii)>=0 AND GG(ii) < 2+2*j!1")
                                  (("1" (label "GGdef" -1)
                                    (("1" (hide -2)
                                      (("1"
                                        (case
                                         "FORALL (ii:below(2+2*j!1)): GG(FF(ii)) = ii")
                                        (("1"
                                          (label "ggff" -1)
                                          (("1"
                                            (case
                                             "FORALL (ii:below(4+2*j!1)): (ii/=q!1 AND ii/=invol!1(q!1)) IMPLIES FF(GG(ii)) = ii")
                                            (("1"
                                              (label "ffgg" -1)
                                              (("1"
                                                (inst
                                                 "indhype"
                                                 "GG o invol!1 o FF")
                                                (("1"
                                                  (split -)
                                                  (("1"
                                                    (inst - "GG(j!2)")
                                                    (("1"
                                                      (split -)
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst + "FF(i!1)")
                                                          (("1"
                                                            (split +)
                                                            (("1"
                                                              (label "FFij" 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "GG(FF(i!1)) = GG(j!2)")
                                                                  (("1"
                                                                    (rewrite
                                                                     "ggff"
                                                                     -1)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (inst?
                                                                     "FFdef")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand "o")
                                                              (("2"
                                                                (case
                                                                 "FF(GG(invol!1(FF(i!1)))) = FF(i!1)")
                                                                (("1"
                                                                  (inst?
                                                                   "ffgg")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       +)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (case
                                                                           "FF(i!1) = invol!1(q!1)")
                                                                          (("1"
                                                                            (reveal
                                                                             "q1")
                                                                            (("1"
                                                                              (case
                                                                               "GG(q!1) = i!1")
                                                                              (("1"
                                                                                (expand
                                                                                 "GG"
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "FF"
                                                                                       -3)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -2
                                                                                 "indhype")
                                                                                (("2"
                                                                                  (copy
                                                                                   "involution")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "q!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -1
                                                                             +
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (copy
                                                                               "involution")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (case
                                                                           "FF(i!1) = q!1")
                                                                          (("1"
                                                                            (expand
                                                                             "FF"
                                                                             -1)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (copy
                                                                             "involution")
                                                                            (("2"
                                                                              (inst-cp
                                                                               -
                                                                               "FF(i!1)")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "q!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (inst? "FFdef")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "o" +)
                                                        (("2"
                                                          (inst? "ffgg")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (inst? "GGdef")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (expand "o" +)
                                                        (("2"
                                                          (inst? "ffgg")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split -)
                                                              (("1"
                                                                (replace
                                                                 "ffgg")
                                                                (("1"
                                                                  (copy
                                                                   "involution")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (rewrite
                                                                         "ggff")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (case
                                                                   "FF(i!1) = invol!1(q!1)")
                                                                  (("1"
                                                                    (reveal
                                                                     "q1")
                                                                    (("1"
                                                                      (case
                                                                       "GG(q!1) = i!1")
                                                                      (("1"
                                                                        (expand
                                                                         "GG"
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (expand
                                                                               "FF"
                                                                               -3)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "i!1 = GG(invol!1(q!1))")
                                                                        (("1"
                                                                          (expand
                                                                           "GG"
                                                                           (-1
                                                                            1))
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -2
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (rewrite
                                                                             "ggff")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     "ffgg"
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (copy
                                                                       "involution")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (flatten)
                                                                (("3"
                                                                  (case
                                                                   "FF(i!1) = q!1")
                                                                  (("1"
                                                                    (expand
                                                                     "FF"
                                                                     -1)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (copy
                                                                     "involution")
                                                                    (("2"
                                                                      (inst-cp
                                                                       -
                                                                       "FF(i!1)")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "q!1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "o" +)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst? "GGdef")
                                                      (("2"
                                                        (inst? "FFdef")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-4 1))
                                              (("2"
                                                (expand "GG")
                                                (("2"
                                                  (expand "FF")
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide-all-but (-4 1))
                                              (("3"
                                                (expand "GG")
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-3 1))
                                          (("2"
                                            (expand "FF")
                                            (("2"
                                              (expand "GG")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but (-3 1))
                                    (("2" (expand "GG")
                                      (("2" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-2 1))
                            (("2" (expand "FF") (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "j!2 = 0")
              (("1" (replace -1)
                (("1" (assert)
                  (("1" (inst + "1")
                    (("1" (case "invol!1(1) /= 0")
                      (("1" (assert)
                        (("1" (inst + "1") (("1" (assert) nil nil)) nil)) nil)
                       ("2" (flatten)
                        (("2" (inst -4 "1") (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "invol!1(0) = 1")
                (("1" (case "invol!1(1) = 0")
                  (("1" (case "j!2 = 2")
                    (("1" (inst + "3")
                      (("1" (assert)
                        (("1" (assert)
                          (("1" (case "3 < invol!1(3)")
                            (("1" (assert) nil nil)
                             ("2" (hide 3)
                              (("2" (inst -5 "3")
                                (("2" (inst + "3") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst + "2")
                      (("2" (assert)
                        (("2" (case "2 < invol!1(2)")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1" (copy -6)
                                (("1" (inst-cp - "0")
                                  (("1" (inst-cp - "1")
                                    (("1" (inst-cp - "2")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (hide 4)
                              (("2" (copy -4)
                                (("2" (inst - "2")
                                  (("2" (inst + "2") (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -3 "0") (("2" (assert) nil nil)) nil))
                  nil)
                 ("2" (case "invol!1(0) = 0")
                  (("1" (inst 4 "0") (("1" (assert) nil nil)) nil)
                   ("2" (case "j!2 = 1")
                    (("1" (case "invol!1(0) = 2")
                      (("1" (inst + "3")
                        (("1" (assert)
                          (("1" (case "3 < invol!1(3)")
                            (("1" (assert) nil nil)
                             ("2" (hide 5)
                              (("2" (copy -4)
                                (("2" (inst-cp - "0")
                                  (("2" (inst + "3")
                                    (("2" (inst-cp - "1")
                                      (("2"
                                        (inst-cp - "2")
                                        (("2"
                                          (inst - "3")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst + "2")
                        (("2" (assert)
                          (("2" (case "2 < invol!1(2)")
                            (("1" (inst + "2") (("1" (assert) nil nil)) nil)
                             ("2" (copy -3)
                              (("2" (inst-cp - "0")
                                (("2" (inst-cp - "1")
                                  (("2" (inst - "2")
                                    (("2" (inst + "2")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst + "1")
                      (("2" (assert)
                        (("2" (case "1 < invol!1(1)")
                          (("1" (assert)
                            (("1" (inst + "1")
                              (("1" (inst -3 "1") (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (hide 6)
                              (("2" (copy -2)
                                (("2" (inst-cp - "0")
                                  (("2" (inst - "1")
                                    (("2" (inst + "1")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (x1!1 skolem-const-decl "below(2 + 2 * j!1)" primes_sum_squares nil)
    (i!1 skolem-const-decl "below(2 + 2 * j!1)" primes_sum_squares nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (j!2 skolem-const-decl "below(4 + 2 * j!1)" primes_sum_squares nil)
    (invol!1 skolem-const-decl "[below(4 + 2 * j!1) -> below(4 + 2 * j!1)]"
     primes_sum_squares nil)
    (GG skolem-const-decl "[below(4 + 2 * j!1) -> int]" primes_sum_squares
     nil)
    (O const-decl "T3" function_props nil)
    (FF skolem-const-decl "[below(2 + 2 * j!1) -> nat]" primes_sum_squares
     nil)
    (j!1 skolem-const-decl "nat" primes_sum_squares nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j!1 skolem-const-decl "int" primes_sum_squares nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (N skolem-const-decl "posnat" primes_sum_squares nil)
    (invol skolem-const-decl "[below(N) -> below(N)]" primes_sum_squares nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (even_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil))
   nil)
  (involution_one_fixedpoint_odd-1 nil 3540045421
   (""
    (case "FORALL (N: posnat, invol: [below(N) -> below(N)]):
               (FORALL (i: below(N)): invol(invol(i)) = i) AND
                (NOT EXISTS (j: below(N)):invol(j)=j)
                IMPLIES even?(N)")
    (("1" (skeep)
      (("1" (skosimp*)
        (("1"
          (name "FF"
                "LAMBDA (i:below(N-1)): IF i < j!1 THEN invol(i) ELSE invol(i+1) ENDIF")
          (("1" (inst - "N-1" "FF")
            (("1" (split -)
              (("1" (expand "even?")
                (("1" (expand "odd?")
                  (("1" (skosimp*)
                    (("1" (inst + "j!2") (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (expand "FF" +)
                  (("2" (lift-if)
                    (("2" (lift-if)
                      (("2" (lift-if)
                        (("2" (ground)
                          (("1" (inst?) nil nil) ("2" (postpone) nil nil)
                           ("3" (postpone) nil nil) ("4" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (postpone) nil nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (postpone) nil nil))
    nil)
   nil shostak))
 (involution_fermat_set_one_fp_invol_TCC1 0
  (involution_fermat_set_one_fp_invol_TCC1-1 nil 3540127668
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (involution_fermat_set_one_fp_invol subtype
    "(number_fields.-)((number_fields.-)(primes_sum_squares.y, primes_sum_squares.x), primes_sum_squares.z)"
    "nat")))
 (involution_fermat_set_one_fp_invol_TCC2 0
  (involution_fermat_set_one_fp_invol_TCC2-1 nil 3540127668
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (involution_fermat_set_one_fp_invol subtype
    "(number_fields.-)(number_fields.*(2, primes_sum_squares.y), primes_sum_squares.x)"
    "nat")))
 (involution_fermat_set_one_fp_invol_TCC3 0
  (involution_fermat_set_one_fp_invol_TCC3-1 nil 3540127668
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (involution_fermat_set_one_fp_invol subtype
    "(number_fields.+)((number_fields.-)(primes_sum_squares.x, primes_sum_squares.y), primes_sum_squares.z)"
    "nat")))
 (involution_fermat_set_one_fp_invol_TCC4 0
  (involution_fermat_set_one_fp_invol_TCC4-1 nil 3540127668
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (involution_fermat_set_one_fp_invol subtype
    "(number_fields.-)(primes_sum_squares.x, number_fields.*(2, primes_sum_squares.y))"
    "nat")))
 (involution_fermat_set_one_fp_invol_TCC5 0
  (involution_fermat_set_one_fp_invol_TCC5-1 nil 3540127668
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (involution_fermat_set_one_fp_invol subtype
    "(number_fields.+)((number_fields.-)(primes_sum_squares.x, primes_sum_squares.y), primes_sum_squares.z)"
    "nat")))
 (involution_fermat_set_one_fp_invol 0
  (involution_fermat_set_one_fp_invol-1 nil 3540127669
   ("" (skeep)
    (("" (skoletin 1)
      (("" (skeep)
        (("" (name "spred" "LAMBDA (x,y,z:nat): NOT (x = y-z OR x = 2*y)")
          (("" (case "subset?(fermat_prime_sos_set(p),spred)")
            (("1" (case "fermat_prime_sos_set(p)(invol(x, y, z))")
              (("1" (assert)
                (("1" (hide -3)
                  (("1" (expand "subset?")
                    (("1" (inst-cp - "(x,y,z)")
                      (("1" (inst - "invol(x,y,z)")
                        (("1" (expand "member")
                          (("1" (hide (-1 -4))
                            (("1" (replace -3)
                              (("1" (expand "spred")
                                (("1" (flatten)
                                  (("1" (assert) (("1" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace -4 1)
                          (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-3 1))
                (("2" (expand "invol") (("2" (grind) nil nil)) nil)) nil)
               ("3" (hide-all-but 1)
                (("3" (expand "invol") (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (expand "subset?")
                (("2" (skosimp*)
                  (("2" (expand "member")
                    (("2" (expand "spred")
                      (("2" (expand "fermat_prime_sos_set")
                        (("2" (split -)
                          (("1" (replace -1)
                            (("1" (case "NOT (EXISTS (nn:nat): p = nn^2)")
                              (("1" (inst + "x!1`2+x!1`3")
                                (("1" (grind) nil nil)) nil)
                               ("2" (typepred "p")
                                (("2" (skosimp*)
                                  (("2" (expand "prime?")
                                    (("2" (flatten)
                                      (("2"
                                        (case "nn!1 = 0")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "^")
                                              (("1"
                                                (expand "expt")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst - "nn!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -)
                                              (("1"
                                                (expand "divides")
                                                (("1"
                                                  (inst + "nn!1")
                                                  (("1" (grind) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case "1^2 = 1")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (flatten)
                                                (("3"
                                                  (replace -1)
                                                  (("3"
                                                    (mult-by -2 "p")
                                                    (("3"
                                                      (hide -5)
                                                      (("3" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -1)
                            (("2" (case "divides(4,p)")
                              (("1" (hide-all-but -1)
                                (("1" (expand "divides")
                                  (("1" (skosimp*)
                                    (("1" (typepred "p")
                                      (("1"
                                        (expand "prime?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst - "2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "divides")
                                                (("1"
                                                  (inst + "2*x!2")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "divides")
                                (("2" (inst + "x!1`2^2 + x!1`2*x!1`3")
                                  (("2" (grind) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (prime? const-decl "bool" primes ints)
    (fermat_prime_sos_set const-decl "bool" primes_sum_squares nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil)
    (nn!1 skolem-const-decl "nat" primes_sum_squares nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (divides const-decl "bool" divides nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (member const-decl "bool" sets nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (spred skolem-const-decl "[[nat, nat, nat] -> bool]" primes_sum_squares
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (z skolem-const-decl "nat" primes_sum_squares nil)
    (y skolem-const-decl "nat" primes_sum_squares nil)
    (x skolem-const-decl "nat" primes_sum_squares nil)
    (invol skolem-const-decl "[[nat, nat, nat] -> [int, int, int]]"
     primes_sum_squares nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (int_expt application-judgement "int" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (subset? const-decl "bool" sets nil) (set type-eq-decl nil sets nil))
   shostak))
 (invol_fermat_TCC1 0
  (invol_fermat_TCC1-1 nil 3540130658
   ("" (lemma "involution_fermat_set_one_fp_invol")
    (("" (skeep)
      (("" (inst - "p")
        (("" (assert)
          (("" (inst - "x" "y" "z")
            (("" (assert)
              (("" (hide 2)
                (("" (typepred "xyz")
                  (("" (expand "fermat_prime_sos_set") (("" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fermat_prime_sos_set const-decl "bool" primes_sum_squares nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prime? const-decl "bool" primes ints)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (involution_fermat_set_one_fp_invol formula-decl nil primes_sum_squares
     nil))
   nil
   (invol_fermat subtype
    "((number_fields.+)(primes_sum_squares.x, number_fields.*(2, primes_sum_squares.z)), primes_sum_squares.z, (number_fields.-)((number_fields.-)(primes_sum_squares.y, primes_sum_squares.x), primes_sum_squares.z))"
    "(primes_sum_squares.fermat_prime_sos_set(primes_sum_squares.p))")))
 (invol_fermat_TCC2 0
  (invol_fermat_TCC2-1 nil 3540130658
   ("" (lemma "involution_fermat_set_one_fp_invol")
    (("" (skeep)
      (("" (inst - "p")
        (("" (assert)
          (("" (inst - "x" "y" "z")
            (("" (assert)
              (("" (hide 3)
                (("" (typepred "xyz")
                  (("" (expand "fermat_prime_sos_set") (("" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fermat_prime_sos_set const-decl "bool" primes_sum_squares nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prime? const-decl "bool" primes ints)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (involution_fermat_set_one_fp_invol formula-decl nil primes_sum_squares
     nil))
   nil
   (invol_fermat subtype
    "((number_fields.-)(number_fields.*(2, primes_sum_squares.y), primes_sum_squares.x), primes_sum_squares.y, (number_fields.+)((number_fields.-)(primes_sum_squares.x, primes_sum_squares.y), primes_sum_squares.z))"
    "(primes_sum_squares.fermat_prime_sos_set(primes_sum_squares.p))")))
 (invol_fermat_TCC3 0
  (invol_fermat_TCC3-1 nil 3540130658
   ("" (lemma "involution_fermat_set_one_fp_invol")
    (("" (skeep)
      (("" (inst - "p")
        (("" (assert)
          (("" (inst - "x" "y" "z")
            (("" (assert)
              (("" (hide 4)
                (("" (typepred "xyz")
                  (("" (expand "fermat_prime_sos_set") (("" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fermat_prime_sos_set const-decl "bool" primes_sum_squares nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prime? const-decl "bool" primes ints)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (involution_fermat_set_one_fp_invol formula-decl nil primes_sum_squares
     nil))
   nil
   (invol_fermat subtype
    "((number_fields.-)(primes_sum_squares.x, number_fields.*(2, primes_sum_squares.y)), (number_fields.+)((number_fields.-)(primes_sum_squares.x, primes_sum_squares.y), primes_sum_squares.z), primes_sum_squares.y)"
    "(primes_sum_squares.fermat_prime_sos_set(primes_sum_squares.p))")))
 (invol_fermat_one_fp 0
  (invol_fermat_one_fp-1 nil 3540131105
   ("" (skeep)
    (("" (skeep)
      (("" (case "xyz = (1,1,k)")
        (("1" (replace -1)
          (("1" (assert)
            (("1" (expand "invol_fermat") (("1" (propax) nil nil)) nil)) nil))
          nil)
         ("2" (assert)
          (("2" (replace 1)
            (("2" (assert)
              (("2" (expand "invol_fermat")
                (("2" (lift-if)
                  (("2" (assert)
                    (("2" (ground)
                      (("2" (typepred "xyz")
                        (("2" (case "xyz`1 = xyz`2")
                          (("1" (expand "fermat_prime_sos_set")
                            (("1" (replace -1 :dir rl)
                              (("1" (assert)
                                (("1" (case "xyz`1 = 1")
                                  (("1" (replace -1)
                                    (("1" (assert)
                                      (("1"
                                        (expand "^")
                                        (("1"
                                          (expand "expt")
                                          (("1"
                                            (expand "expt")
                                            (("1"
                                              (expand "expt")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (typepred "p")
                                    (("2" (expand "prime?")
                                      (("2"
                                        (inst - "xyz`1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -)
                                            (("1"
                                              (expand "divides")
                                              (("1"
                                                (inst + "xyz`1 + 4*xyz`3")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (case "p + 4*xyz`3 > 1")
                                                  (("1"
                                                    (mult-by -1 "p")
                                                    (("1" (grind) nil nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case "xyz`1 = 0")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (case "(2 * xyz`2 - xyz`1, xyz`2, xyz`1 - xyz`2 + xyz`3)`3 = xyz`3")
                            (("1" (assert) nil nil)
                             ("2" (replace -3) (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (int_expt application-judgement "int" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (divides const-decl "bool" divides nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (xyz skolem-const-decl "(fermat_prime_sos_set(p))" primes_sum_squares nil)
    (p skolem-const-decl "(prime?)" primes_sum_squares nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (invol_fermat const-decl "(fermat_prime_sos_set(p))" primes_sum_squares
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (prime? const-decl "bool" primes ints)
    (fermat_prime_sos_set const-decl "bool" primes_sum_squares nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak))
 (fermat_prime_mod_4_TCC1 0
  (fermat_prime_mod_4_TCC1-1 nil 3539952865 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (prime? const-decl "bool" primes ints)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (divides const-decl "bool" divides nil) (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil (fermat_prime_mod_4 subtype "primes_sum_squares.p" "nat")))
 (fermat_prime_mod_4 0
  (fermat_prime_mod_4-1 nil 3539952866
   ("" (skeep)
    (("" (case "EXISTS (k:posnat): p = 4*k+1")
      (("1" (skeep -1)
        (("1" (lemma "fermat_prime_sos_finite_set")
          (("1" (inst?)
            (("1"
              (case "EXISTS (N:nat, f: [(fermat_prime_sos_set(p)) -> below[N]]): bijective?(f)")
              (("1" (hide -2)
                (("1" (skosimp*)
                  (("1" (name "g" "inverse(f!1)")
                    (("1" (case "N!1 > 0")
                      (("1" (lemma "involution_one_fixedpoint_odd")
                        (("1" (inst - "N!1" "f!1 o invol_fermat(p) o g")
                          (("1" (assert)
                            (("1" (split -)
                              (("1"
                                (name "newinvol"
                                      "LAMBDA (xyz:(fermat_prime_sos_set(p))): (xyz`1,xyz`3,xyz`2)")
                                (("1"
                                  (case "FORALL (xyz:(fermat_prime_sos_set(p))): fermat_prime_sos_set(p)(xyz)")
                                  (("1"
                                    (lemma "involution_odd_has_fixedpoint")
                                    (("1" (inst - "N!1" "f!1 o newinvol o g")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (case
                                               "newinvol(g(i!1)) = g(i!1)")
                                              (("1"
                                                (inst - "g(i!1)")
                                                (("1"
                                                  (expand
                                                   "fermat_prime_sos_set")
                                                  (("1"
                                                    (expand "newinvol" -1)
                                                    (("1"
                                                      (case
                                                       "g(i!1)`2 = g(i!1)`3")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide (-1 -2 -3))
                                                          (("1"
                                                            (expand
                                                             "sum_of_two_squares?")
                                                            (("1"
                                                              (inst
                                                               +
                                                               "g(i!1)`1"
                                                               "2*g(i!1)`3")
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1 1))
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "g((f!1 o newinvol o g)(i!1)) = g(i!1)")
                                                (("1"
                                                  (expand "o" -1)
                                                  (("1"
                                                    (lemma
                                                     "inverse_injective[(fermat_prime_sos_set(p)),below[N!1]]")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "newinvol(g(i!1))"
                                                       "f!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -8)
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "bijective?")
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (expand "o" +)
                                              (("2"
                                                (lemma
                                                 "inverse_injective[(fermat_prime_sos_set(p)),below[N!1]]")
                                                (("2"
                                                  (inst
                                                   -
                                                   "newinvol(g(i!1))"
                                                   "f!1")
                                                  (("1"
                                                    (replace -6)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (case
                                                         "newinvol(newinvol(g(i!1))) = g(i!1)")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (lemma
                                                             "inverse_surjective[(fermat_prime_sos_set(p)),below[N!1]]")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "i!1"
                                                               "f!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "bijective?")
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (expand
                                                             "newinvol")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "bijective?")
                                                    (("2" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (typepred "x1")
                                              (("2"
                                                (expand "newinvol")
                                                (("2"
                                                  (expand
                                                   "fermat_prime_sos_set")
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skosimp*) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skosimp*)
                                (("2" (expand "o" +)
                                  (("2"
                                    (lemma
                                     "inverse_injective[(fermat_prime_sos_set(p)),below[N!1]]")
                                    (("2"
                                      (inst - "invol_fermat(p)(g(i!1))" "f!1")
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (case
                                             "FORALL (xyz:(fermat_prime_sos_set(p))): invol_fermat(p)(invol_fermat(p)(xyz)) = xyz")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (lemma
                                                   "inverse_surjective[(fermat_prime_sos_set(p)),below[N!1]]")
                                                  (("1"
                                                    (inst - "i!1" "f!1")
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (expand "bijective?")
                                                      (("2" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-5 1))
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (typepred "xyz")
                                                  (("2"
                                                    (expand
                                                     "fermat_prime_sos_set")
                                                    (("2"
                                                      (expand "invol_fermat")
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (ground)
                                                                  (("1"
                                                                    (case
                                                                     "xyz`1 = 0")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "^")
                                                                          (("1"
                                                                            (expand
                                                                             "expt")
                                                                            (("1"
                                                                              (typepred
                                                                               "p")
                                                                              (("1"
                                                                                (expand
                                                                                 "prime?")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "2")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "divides")
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "2*xyz`2*xyz`3")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "xyz`3 = 0")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (typepred
                                                                           "p")
                                                                          (("1"
                                                                            (expand
                                                                             "prime?")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "xyz`1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "divides")
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "xyz`1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "^")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "expt")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "expt")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "expt")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "^")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "expt")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "expt")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "expt")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (flatten)
                                                                                    (("3"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("3"
                                                                                        (case
                                                                                         "p > 1")
                                                                                        (("1"
                                                                                          (mult-by
                                                                                           -1
                                                                                           "p")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "^")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "expt")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "expt")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "expt")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "bijective?")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (inst + "f!1((1,1,k))")
                                (("1" (skosimp*)
                                  (("1" (ground)
                                    (("1" (expand "o" -1)
                                      (("1"
                                        (case
                                         "invol_fermat(p)(g(i!1)) = g(i!1)")
                                        (("1"
                                          (lemma "invol_fermat_one_fp")
                                          (("1"
                                            (inst - "k" "p")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst - "g(i!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "f!1(g(i!1)) = f!1((1,1,k))")
                                                    (("1"
                                                      (lemma
                                                       "inverse_surjective[(fermat_prime_sos_set(p)),below[N!1]]")
                                                      (("1"
                                                        (inst - "i!1" "f!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "bijective?")
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case
                                           "g(f!1(invol_fermat(p)(g(i!1)))) = g(i!1)")
                                          (("1"
                                            (lemma
                                             "inverse_injective[(fermat_prime_sos_set(p)),below[N!1]]")
                                            (("1"
                                              (inst
                                               -
                                               "invol_fermat(p)(g(i!1))"
                                               "f!1")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (expand "bijective?")
                                                (("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (replace -1)
                                      (("2"
                                        (expand "o" +)
                                        (("2"
                                          (lemma
                                           "inverse_injective[(fermat_prime_sos_set(p)),below[N!1]]")
                                          (("2"
                                            (inst - "(1,1,k)" "f!1")
                                            (("1"
                                              (replace -4)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (case
                                                   "invol_fermat(p)(1,1,k) = (1,1,k)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1)
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "invol_fermat" 1)
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "bijective?")
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "fermat_prime_sos_set")
                                  (("2" (expand "^")
                                    (("2" (expand "expt")
                                      (("2"
                                        (expand "expt")
                                        (("2"
                                          (expand "expt")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "NOT N!1 = 0")
                        (("1" (assert) nil nil)
                         ("2" (hide 1)
                          (("2" (case "fermat_prime_sos_set(p)((1,1,k))")
                            (("1" (typepred "f!1((1,1,k))")
                              (("1" (assert) nil nil) ("2" (propax) nil nil))
                              nil)
                             ("2" (expand "fermat_prime_sos_set")
                              (("2" (expand "^")
                                (("2" (expand "expt")
                                  (("2" (expand "expt")
                                    (("2" (expand "expt")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst + "(1,1,k)")
                      (("2" (expand "fermat_prime_sos_set")
                        (("2" (expand "^")
                          (("2" (expand "expt")
                            (("2" (expand "expt")
                              (("2" (expand "expt") (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "Card_bijection[[nat,nat,nat]]")
                (("2"
                  (inst - "fermat_prime_sos_set(p)"
                   "Card(fermat_prime_sos_set(p))")
                  (("2" (assert)
                    (("2" (skeep -1)
                      (("2" (inst + "Card(fermat_prime_sos_set(p))" "f") nil
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "p >= 5")
        (("1" (expand "mod")
          (("1" (inst?)
            (("1" (assert) nil nil)
             ("2" (hide 2) (("2" (hide -2) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (case "NOT (p = 2 OR p = 3 OR p = 4)")
            (("1" (flatten)
              (("1" (assert)
                (("1" (case "p > 1")
                  (("1" (assert) nil nil)
                   ("2" (assert)
                    (("2" (typepred "p")
                      (("2" (expand "prime?") (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (split -)
              (("1" (hide +) (("1" (replace -1) (("1" (grind) nil nil)) nil))
                nil)
               ("2" (hide +) (("2" (replace -1) (("2" (grind) nil nil)) nil))
                nil)
               ("3" (hide +) (("3" (replace -1) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (prime? const-decl "bool" primes ints)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (fermat_prime_sos_finite_set formula-decl nil primes_sum_squares nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fermat_prime_sos_set const-decl "bool" primes_sum_squares nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (bijective? const-decl "bool" functions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (N!1 skolem-const-decl "nat" primes_sum_squares nil)
    (invol_fermat const-decl "(fermat_prime_sos_set(p))" primes_sum_squares
     nil)
    (O const-decl "T3" function_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (p skolem-const-decl "(prime?)" primes_sum_squares nil)
    (newinvol skolem-const-decl
     "[(fermat_prime_sos_set(p)) -> [nat, nat, nat]]" primes_sum_squares nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (sum_of_two_squares? const-decl "bool" primes_sum_squares nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (injective? const-decl "bool" functions nil)
    (f!1 skolem-const-decl "[(fermat_prime_sos_set(p)) -> below[N!1]]"
     primes_sum_squares nil)
    (inverse_injective formula-decl nil function_inverse nil)
    (surjective? const-decl "bool" functions nil)
    (inverse_surjective formula-decl nil function_inverse nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (x1 skolem-const-decl "(fermat_prime_sos_set(p))" primes_sum_squares nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (involution_odd_has_fixedpoint formula-decl nil primes_sum_squares nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (divides const-decl "bool" divides nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (invol_fermat_one_fp formula-decl nil primes_sum_squares nil)
    (k skolem-const-decl "posnat" primes_sum_squares nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (nil application-judgement "below(m)" mod nil)
    (involution_one_fixedpoint_odd formula-decl nil primes_sum_squares nil)
    (TRUE const-decl "bool" booleans nil)
    (inverse const-decl "D" function_inverse nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Card_bijection formula-decl nil finite_sets nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   shostak)))


(tuple2nat
 (tuple2nat_TCC1 0
  (tuple2nat_TCC1-1 nil 3704201569
   ("" (skeep)
    (("" (case "rem(2)(m+n) = 0")
      (("1" (typepred "rem(2)(m+n)")
        (("1" (replace -3)
          (("1" (skeep)
            (("1" (replace -2)
              (("1" (lemma "times_div1")
                (("1" (inst -1 "2" "2*q+0+1" "2*q+0")
                  (("1" (replace -1 :dir rl)
                    (("1"
                      (case "(2 * q + 0) / 2 = q
")
                      (("1" (replace -1) (("1" (assert) nil nil)) nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "rem(2)(m + n) = 1")
        (("1" (typepred "rem(2)(m+n)")
          (("1" (replace -3)
            (("1" (skeep)
              (("1" (replace -2)
                (("1" (lemma "times_div2")
                  (("1" (inst -1 "2" "2*q+1+1" "2*q+1")
                    (("1" (replace -1 :dir rl)
                      (("1" (case "(2 * q + 1 + 1) / 2 = q +1")
                        (("1" (replace -1) (("1" (assert) nil nil)) nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "rem(2)(m+n)") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic
         nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (times_div1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (times_div2 formula-decl nil real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers nil))
   nil
   (tuple2nat subtype
    "(number_fields.+)(number_fields./(number_fields.*(((number_fields.+)((number_fields.+)(tuple2nat.m, tuple2nat.n), 1)), ((number_fields.+)(tuple2nat.m, tuple2nat.n))), 2), tuple2nat.n)"
    "nat")))
 (tuple2nat2_TCC1 0
  (tuple2nat2_TCC1-1 nil 3711206892 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (tuple2nat2 subtype "(number_fields.-)(tuple2nat.m, 1)" "nat")))
 (tuple2nat2_TCC2 0
  (tuple2nat2_TCC2-1 nil 3711206892 ("" (termination-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tuple2nat const-decl "nat" tuple2nat nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil))
   nil
   (tuple2nat2 termination
    "tuple2nat.tuple2nat2(0, (number_fields.-)(tuple2nat.m, 1))" "nil")))
 (tuple2nat2_TCC3 0
  (tuple2nat2_TCC3-1 nil 3711206892 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (tuple2nat2 subtype "(number_fields.-)(tuple2nat.n, 1)" "nat")))
 (tuple2nat2_TCC4 0
  (tuple2nat2_TCC4-1 nil 3711206892 ("" (termination-tcc) nil nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (tuple2nat const-decl "nat" tuple2nat nil))
   nil
   (tuple2nat2 termination
    "tuple2nat.tuple2nat2((number_fields.+)(tuple2nat.m, 1), (number_fields.-)(tuple2nat.n, 1))"
    "nil")))
 (tuple2nat_eq 0
  (tuple2nat_eq-1 nil 3711207030
   ("" (measure-induct+ "tuple2nat(m,n)" ("m" "n"))
    (("" (expand "tuple2nat2" 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (grind) nil nil)
           ("2" (assert)
            (("2" (inst -2 "0" "x!1-1")
              (("2" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil)
           ("3" (assert)
            (("3" (inst -1 "1+x!1" "x!2-1")
              (("3" (prop)
                (("1" (replaces -1 :dir rl) (("1" (grind) nil nil)) nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil)
           ("4" (assert)
            (("4" (inst -1 "1+x!1" "x!2-1")
              (("4" (prop)
                (("1" (replaces -1 :dir rl) (("1" (grind) nil nil)) nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (tuple2nat2 def-decl "nat" tuple2nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (tuple2nat const-decl "nat" tuple2nat nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (nat2tuple_TCC1 0
  (nat2tuple_TCC1-1 nil 3704808898 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (nat2tuple subtype "(number_fields.-)(tuple2nat.i, 1)" "nat")))
 (nat2tuple_TCC2 0
  (nat2tuple_TCC2-1 nil 3704808898 ("" (termination-tcc) nil nil) nil nil
   (nat2tuple termination
    "tuple2nat.nat2tuple((number_fields.-)(tuple2nat.i, 1))" "nil")))
 (nat2tuple_TCC3 0
  (nat2tuple_TCC3-1 nil 3704808898 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (nat2tuple subtype
    "(number_fields.-)(tuple2nat.nat2tuple((number_fields.-)(tuple2nat.i, 1))`1, 1)"
    "nat")))
 (nat2tuple_first 0
  (nat2tuple_first-1 nil 3711124252
   ("" (measure-induct+ "n" "n")
    (("" (expand "nat2tuple" 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (inst -2 "x!1-1")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
           ("4" (assert) nil nil)
           ("5" (inst -1 "x!1-1")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
           ("6" (inst -1 "x!1-1")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (x!1 skolem-const-decl "nat" tuple2nat nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat2tuple def-decl "[nat, nat]" tuple2nat nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (tuple2nat_nat2tuple 0
  (tuple2nat_nat2tuple-1 nil 3711198773
   ("" (measure-induct+ "n" "n")
    (("" (expand "nat2tuple" 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (grind) nil nil)
           ("2" (inst -2 "x!1-1")
            (("1" (assert)
              (("1" (expand "tuple2nat" -2)
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (expand "tuple2nat" 1) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil)
           ("3" (inst -1 "x!1-1")
            (("1" (assert)
              (("1" (expand "tuple2nat") (("1" (assert) nil nil)) nil)) nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (x!1 skolem-const-decl "nat" tuple2nat nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat" rationals nil)
    (nat2tuple def-decl "[nat, nat]" tuple2nat nil)
    (tuple2nat const-decl "nat" tuple2nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (nat2tuple_tuple2nat 0
  (nat2tuple_tuple2nat-1 nil 3711198530
   ("" (skeep)
    (("" (rewrite "tuple2nat_eq")
      (("" (generalize-skolem-constants)
        (("" (measure-induct+ "tuple2nat2(m_1,n_1)" ("m_1" "n_1"))
          (("" (expand "tuple2nat2" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (assert)
                  (("2" (expand "nat2tuple" 1)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (grind) nil nil)
                         ("2" (inst -2 "0" "x!1-1")
                          (("2" (prop)
                            (("1" (grind) nil nil) ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert)
                  (("3" (expand "nat2tuple" 2)
                    (("3" (lift-if)
                      (("3" (prop)
                        (("1" (inst -2 "1+x!1" "x!2-1")
                          (("1" (prop)
                            (("1" (decompose-equality -1)
                              (("1" (assert) nil nil)) nil)
                             ("2" (hide-all-but (1 3 4))
                              (("2" (lemma "tuple2nat_eq")
                                (("2" (copy -1)
                                  (("2" (inst?)
                                    (("2" (inst -2 "x!1" "x!2")
                                      (("2"
                                        (replaces -1 :dir rl)
                                        (("2"
                                          (replaces -1 :dir rl)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -1 "1+x!1" "x!2-1")
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (lemma "tuple2nat_eq")
                              (("2" (copy -1)
                                (("2" (inst?)
                                  (("2" (inst -2 "x!1" "x!2")
                                    (("2" (replaces -1 :dir rl)
                                      (("2"
                                        (replaces -1 :dir rl)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (assert)
                  (("4" (expand "nat2tuple" 2)
                    (("4" (lift-if)
                      (("4" (prop)
                        (("1" (inst -2 "1+x!1" "x!2-1")
                          (("1" (prop)
                            (("1" (decompose-equality -1)
                              (("1" (assert) nil nil)) nil)
                             ("2" (lemma "tuple2nat_eq")
                              (("2" (copy -1)
                                (("2" (inst?)
                                  (("2" (inst -2 "x!1" "x!2")
                                    (("2" (replaces -1 :dir rl)
                                      (("2"
                                        (replaces -1 :dir rl)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -1 "1+x!1" "x!2-1")
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (lemma "tuple2nat_eq")
                              (("2" (copy -1)
                                (("2" (inst?)
                                  (("2" (inst -2 "x!1" "x!2")
                                    (("2" (replaces -1 :dir rl)
                                      (("2"
                                        (replaces -1 :dir rl)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tuple2nat_eq formula-decl nil tuple2nat nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (tuple2nat const-decl "nat" tuple2nat nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (tuple2nat2 def-decl "nat" tuple2nat nil)
    (nat2tuple def-decl "[nat, nat]" tuple2nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak)))


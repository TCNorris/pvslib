(foursquare (mod_eq 0 (mod_eq-1 nil 3628343427 ("" (skeep) (("" (ground) (("1" (expand "divides") (("1" (expand "mod") (("1" (inst + "floor(e/pn)-floor(f/pn)") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (expand "divides") (("2" (skolem - "i") (("2" (case "NOT e = f + pn*i") (("1" (assert) nil nil) ("2" (replaces -1) (("2" (hide -1) (("2" (expand "mod") (("2" (case "(pn*i + f)/pn = i + f/pn") (("1" (replaces -1) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "below(m)" mod nil) (int_times_int_is_int application-judgement "int" integers nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (integer nonempty-type-from-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (divides const-decl "bool" divides nil) (TRUE const-decl "bool" booleans nil) (rat_plus_rat_is_rat application-judgement "rat" rationals nil) (int_plus_int_is_int application-judgement "int" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil)) shostak)) (Euler_four_square_TCC1 0 (Euler_four_square_TCC1-1 nil 3628336262 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (Euler_four_square subtype "2" "{i: integers.int | booleans.OR(foursquare.i1 /= 0, reals.>=(i, 0))}"))) (Euler_four_square_TCC2 0 (Euler_four_square_TCC2-1 nil 3628336262 ("" (subtype-tcc) nil nil) ((int_times_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (/= const-decl "boolean" notequal nil)) nil (Euler_four_square subtype "2" "{i: integers.int | booleans.OR(((number_fields.+)((number_fields.+)((number_fields.+)(number_fields.*(foursquare.i1, foursquare.j1), number_fields.*(foursquare.i2, foursquare.j2)), number_fields.*(foursquare.i3, foursquare.j3)), number_fields.*(foursquare.i4, foursquare.j4))) /= 0, reals.>=(i, 0))}"))) (Euler_four_square_TCC3 0 (Euler_four_square_TCC3-1 nil 3628336262 ("" (subtype-tcc) nil nil) ((int_times_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (Euler_four_square subtype "2" "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)((number_fields.-)((number_fields.+)(number_fields.*(foursquare.i1, foursquare.j2), number_fields.*(foursquare.i3, foursquare.j4)), number_fields.*(foursquare.i2, foursquare.j1)), number_fields.*(foursquare.i4, foursquare.j3))) = 0), reals.>=(i, 0))}"))) (Euler_four_square_TCC4 0 (Euler_four_square_TCC4-1 nil 3628336262 ("" (subtype-tcc) nil nil) ((int_times_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (Euler_four_square subtype "2" "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.-)((number_fields.+)(number_fields.*(foursquare.i1, foursquare.j3), number_fields.*(foursquare.i4, foursquare.j2)), number_fields.*(foursquare.i2, foursquare.j4)), number_fields.*(foursquare.i3, foursquare.j1)) = 0), reals.>=(i, 0))}"))) (Euler_four_square_TCC5 0 (Euler_four_square_TCC5-1 nil 3628336262 ("" (subtype-tcc) nil nil) ((int_times_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (/= const-decl "boolean" notequal nil)) nil (Euler_four_square subtype "2" "{i: integers.int | booleans.OR(((number_fields.-)((number_fields.-)((number_fields.+)(number_fields.*(foursquare.i1, foursquare.j4), number_fields.*(foursquare.i2, foursquare.j3)), number_fields.*(foursquare.i3, foursquare.j2)), number_fields.*(foursquare.i4, foursquare.j1))) /= 0, reals.>=(i, 0))}"))) (Euler_four_square 0 (Euler_four_square-1 nil 3628336264 ("" (grind) nil nil) ((int_times_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (^ const-decl "real" exponentiation nil) (expt def-decl "real" exponentiation nil)) shostak)) (sum_four_squares?_TCC1 0 (sum_four_squares?_TCC1-1 nil 3628337434 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil)) nil (sum_four_squares? subtype "2" "{i: integers.int | booleans.OR(foursquare.a /= 0, reals.>=(i, 0))}"))) (sum_four_squares_int_def 0 (sum_four_squares_int_def-1 nil 3628416925 ("" (skeep) (("" (expand "sum_four_squares_int?") (("" (expand "sum_four_squares?") (("" (ground) (("1" (skeep) (("1" (inst?) nil nil)) nil) ("2" (skeep) (("2" (inst + "abs(i1)" "abs(i2)" "abs(i3)" "abs(i4)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((int_exp application-judgement "int" exponentiation nil) (int_plus_int_is_int application-judgement "int" integers nil) (sum_four_squares_int? const-decl "bool" foursquare nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (^ const-decl "real" exponentiation nil) (expt def-decl "real" exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_expt application-judgement "int" exponentiation nil) (int_times_int_is_int application-judgement "int" integers nil) (minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (sum_four_squares? const-decl "bool" foursquare nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nat_exp application-judgement "nat" exponentiation nil)) shostak)) (sum_four_squares_reduces_TCC1 0 (sum_four_squares_reduces_TCC1-1 nil 3628336406 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (prime? const-decl "bool" primes ints) (/= const-decl "boolean" notequal nil) (divides const-decl "bool" divides nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (sum_four_squares_reduces subtype "foursquare.p" "nat"))) (sum_four_squares_reduces 0 (sum_four_squares_reduces-1 nil 3628336407 ("" (flatten) (("" (case "NOT (FORALL p: sum_four_squares?(p))") (("1" (skeep) (("1" (inst - "p") (("1" (assert) (("1" (case "NOT p = 2") (("1" (typepred "p") (("1" (expand "prime?") (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (replaces -1 1) (("2" (expand "sum_four_squares?") (("2" (inst + "1" "1" "0" "0") (("2" (hide 3) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -2) (("2" (case "FORALL (k:nat,n): n<=k IMPLIES sum_four_squares?(n)") (("1" (skeep) (("1" (inst - "n" "n") (("1" (assert) nil nil)) nil)) nil) ("2" (hide 2) (("2" (induct "k") (("1" (skeep) (("1" (case "NOT n = 0") (("1" (assert) nil nil) ("2" (replaces -1) (("2" (hide -) (("2" (expand "sum_four_squares?") (("2" (inst + "0" "0" "0" "0") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem 1 "n") (("2" (flatten) (("2" (skosimp*) (("2" (case "NOT n!1 = n+1") (("1" (inst - "n!1") (("1" (assert) nil nil)) nil) ("2" (replaces -1) (("2" (hide -2) (("2" (assert) (("2" (case "prime?(1+n)") (("1" (inst -3 "1+n") nil nil) ("2" (expand "prime?") (("2" (case "n=0") (("1" (replaces -1) (("1" (assert) (("1" (hide-all-but 2) (("1" (expand "sum_four_squares?") (("1" (inst + "0" "0" "0" "1") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (skeep) (("2" (expand "divides") (("2" (skolem - "k") (("2" (case "NOT (k<1+n AND j<1+n)") (("1" (assert) (("1" (split) (("1" (case "j*k>=k") (("1" (case "j*(1+n)>1+n") (("1" (assert) nil nil) ("2" (case "j>1") (("1" (mult-by -1 "1+n") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (case "j>=1") (("1" (mult-by -1 "k") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (case "k*j>j") (("1" (assert) nil nil) ("2" (case "NOT (k=0 OR k=1)") (("1" (case "k>1") (("1" (mult-by -1 "j") (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (case "k<0") (("1" (mult-by -1 "j") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (inst-cp - "k") (("1" (inst - "j") (("1" (assert) (("1" (expand "sum_four_squares?") (("1" (skolem - ("i1" "i2" "i3" "i4")) (("1" (skolem - ("j1" "j2" "j3" "j4")) (("1" (lemma "Euler_four_square") (("1" (insteep -1) (("1" (replaces -5 :dir rl) (("1" (replaces -5 :dir rl) (("1" (replaces -4 :dir rl) (("1" (replace -1 4) (("1" (case "FORALL (q,r,s,t:int): q^2+r^2+s^2+t^2=abs(q)^2+abs(r)^2+abs(s)^2+abs(t)^2") (("1" (rewrite -1) (("1" (hide -1) (("1" (inst? 4) nil nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "k < 0") (("1" (mult-by -1 "j") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skeep) (("3" (typepred "p") (("3" (expand "prime?") (("3" (flatten) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sum_four_squares? const-decl "bool" foursquare nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (prime? const-decl "bool" primes ints) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat_exp application-judgement "nat" exponentiation nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_exp application-judgement "posint" exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posnat_expt application-judgement "posnat" exponentiation nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (nat_expt application-judgement "nat" exponentiation nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (^ const-decl "real" exponentiation nil) (expt def-decl "real" exponentiation nil) (TRUE const-decl "bool" booleans nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (<= const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (pred type-eq-decl nil defined_types nil) (nat_induction formula-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (n skolem-const-decl "nat" foursquare nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (minus_int_is_int application-judgement "int" integers nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (int_minus_int_is_int application-judgement "int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (int_exp application-judgement "int" exponentiation nil) (Euler_four_square formula-decl nil foursquare nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_times_int_is_int application-judgement "int" integers nil) (both_sides_times_pos_lt1 formula-decl nil real_props nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (both_sides_times_pos_gt1 formula-decl nil real_props nil) (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil) (k skolem-const-decl "int" foursquare nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (divides const-decl "bool" divides nil)) shostak)) (square_residues_distinct_TCC1 0 (square_residues_distinct_TCC1-1 nil 3628337646 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (prime? const-decl "bool" primes ints) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (divides const-decl "bool" divides nil) (/= const-decl "boolean" notequal nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (square_residues_distinct subtype "foursquare.p" "nonzero_integer"))) (square_residues_distinct_TCC2 0 (square_residues_distinct_TCC2-1 nil 3628337646 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (square_residues_distinct subtype "2" "{i: integers.int | booleans.OR(foursquare.b /= 0, reals.>=(i, 0))}"))) (square_residues_distinct 0 (square_residues_distinct-1 nil 3628337648 ("" (case "FORALL (a, b: nat, p: (prime?)):
               a <= (p - 1) / 2 AND b <= (p - 1) / 2 AND a>b IMPLIES
                mod(a ^ 2, p) /= mod(b ^ 2, p)") (("1" (skeep) (("1" (inst-cp - "a" "b" "p") (("1" (inst - "b" "a" "p") (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep) (("2" (expand "mod") (("2" (name "k" "floor(a^2/p)-floor(b^2/p)") (("2" (case "NOT a^2-b^2 = p*k") (("1" (assert) nil nil) ("2" (lemma "prime_divides_prod") (("2" (inst - "p") (("1" (assert) (("1" (inst - "a+b" "a-b") (("1" (split -) (("1" (case "a+b = p") (("1" (assert) nil nil) ("2" (expand "divides") (("2" (skosimp*) (("2" (case "x!1<=0") (("1" (mult-by -1 "p") (("1" (assert) nil nil)) nil) ("2" (case "x!1>=1") (("1" (mult-by -1 "p") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "divides") (("2" (skosimp*) (("2" (case "x!1<=0") (("1" (mult-by -1 "p") (("1" (assert) nil nil)) nil) ("2" (case "x!1>=1") (("1" (mult-by -1 "p") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (expand "divides") (("3" (inst + "k") (("3" (hide-all-but (-1 1)) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep) (("3" (assert) nil nil)) nil)) nil)) nil) ((int_times_int_is_int application-judgement "int" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (p skolem-const-decl "(prime?)" foursquare nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (nat_expt application-judgement "nat" exponentiation nil) (expt def-decl "real" exponentiation nil) (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil) (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil) (even_times_int_is_even application-judgement "even_int" integers nil) (divides const-decl "bool" divides nil) (prime_divides_prod formula-decl nil primes ints) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (integer nonempty-type-from-decl nil integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (nat_exp application-judgement "nat" exponentiation nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (prime? const-decl "bool" primes ints) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (> const-decl "bool" reals nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (^ const-decl "real" exponentiation nil)) shostak)) (sum_four_squares_pigeonhole_TCC1 0 (sum_four_squares_pigeonhole_TCC1-1 nil 3628340713 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (prime? const-decl "bool" primes ints) (divides const-decl "bool" divides nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (/= const-decl "boolean" notequal nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (sum_four_squares_pigeonhole subtype "foursquare.p" "nonzero_integer"))) (sum_four_squares_pigeonhole_TCC2 0 (sum_four_squares_pigeonhole_TCC2-1 nil 3628340713 ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (sum_four_squares_pigeonhole subtype "2" "{i: integers.int | booleans.OR(foursquare.b /= 0, reals.>=(i, 0))}"))) (sum_four_squares_pigeonhole 0 (sum_four_squares_pigeonhole-2 "" 3790091470 ("" (skeep) (("" (case "EXISTS (k:nat): k=(p-1)/2") (("1" (lemma "pigeonhole_principle_nat") (("1" (name "A" "{i:nat | 0<=i AND i<p}") (("1" (case "is_finite[nat](A)") (("1" (case "NOT FORALL (i:int): A(mod(i,p))") (("1" (skeep) (("1" (expand "A" 1) (("1" (assert) (("1" (lemma "mod_pos") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (name "B" "{i:nat|EXISTS (j:nat):j<=(p-1)/2 AND mod(j^2,p)=i}") (("1" (case "NOT subset?(B,A)") (("1" (hide 2) (("1" (expand "subset?" 1) (("1" (skolem 1 "i") (("1" (expand "member") (("1" (expand "B" 1) (("1" (expand "A" 1) (("1" (flatten) (("1" (skosimp*) (("1" (inst - "j!1^2") (("1" (expand "A" -4) (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (name "C" "{i:nat|EXISTS (j:nat):j<=(p-1)/2 AND mod(-j^2-1,p)=i}") (("2" (case "NOT subset?(C,A)") (("1" (expand "subset?" 1) (("1" (hide 2) (("1" (skolem 1 "i") (("1" (expand "member") (("1" (flatten) (("1" (expand "C" -1) (("1" (expand "A" 1) (("1" (skosimp*) (("1" (inst - "-j!1^2-1") (("1" (expand "A" -6) (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "card_disj_union[nat]") (("2" (inst - "B" "C") (("1" (split -) (("1" (skeep) (("1" (case "card(B) = k+1 AND card(C) = k+1") (("1" (flatten) (("1" (lemma "subset_union[nat]") (("1" (inst - "B" "C" "A") (("1" (assert) (("1" (lemma "card_subset[nat]") (("1" (inst - "union(B,C)" "A") (("1" (assert) (("1" (case "card(A) = p") (("1" (assert) nil nil) ("2" (hide 2) (("2" (rewrite "card_def" 1) (("2" (lemma "Card_bijection[nat]") (("2" (inst?) (("2" (assert) (("2" (inst + "LAMBDA (jj:(A)): jj") (("2" (expand "bijective?") (("2" (expand "injective?") (("2" (expand "surjective?") (("2" (split 1) (("1" (skeep) nil nil) ("2" (skeep) (("2" (inst + "y") (("2" (expand "A") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (split 1) (("1" (lemma "card_bij_inv[nat]") (("1" (inst?) (("1" (assert) (("1" (inst + "LAMBDA (i:below[1+k]): mod(i^2,p)") (("1" (expand "bijective?") (("1" (split 1) (("1" (expand "injective?") (("1" (skolem 1 ("nn" "mm")) (("1" (flatten) (("1" (lemma "square_residues_distinct") (("1" (inst - "nn" "mm" "p") (("1" (assert) (("1" (split 1) (("1" (typepred "nn") (("1" (assert) (("1" (case "nn<=k") (("1" (assert) nil nil) ("2" (case "FORALL (aa,bb:int): aa<1+bb IMPLIES aa<=bb") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (skeep) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "mm") (("2" (case "FORALL (aa,bb:int): aa<1+bb IMPLIES aa<=bb") (("1" (inst - "mm" "k") (("1" (assert) nil nil)) nil) ("2" (skeep) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skeep) (("2" (typepred "y") (("2" (expand "B" -1) (("2" (skeep) (("2" (inst + "j") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (skeep) (("2" (lemma "mod_pos") (("2" (inst?) (("2" (flatten) (("2" (assert) (("2" (expand "B" 1) (("2" (inst + "i") (("2" (assert) (("2" (typepred "i") (("2" (case "FORALL (aa,bb:int): aa<1+bb IMPLIES aa<=bb") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (skeep) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "card_bij_inv[nat]") (("2" (inst?) (("2" (assert) (("2" (hide 2) (("2" (inst + "LAMBDA (i:below[1+k]): mod(-i^2-1,p)") (("1" (expand "bijective?" +) (("1" (split +) (("1" (expand "injective?") (("1" (skolem 1 ("nn" "mm")) (("1" (flatten) (("1" (case "NOT mod(nn^2,p)=mod(mm^2,p)") (("1" (rewrite "mod_eq" -1) (("1" (rewrite "mod_eq" 1) (("1" (expand "divides") (("1" (skolem - "i") (("1" (inst + "-i") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "square_residues_distinct") (("2" (inst - "nn" "mm" "p") (("2" (assert) (("2" (typepred "nn") (("2" (typepred "mm") (("2" (case "FORALL (aa,bb:int): aa<1+bb IMPLIES aa<=bb") (("1" (inst-cp - "nn" "k") (("1" (inst - "mm" "k") (("1" (assert) nil nil)) nil)) nil) ("2" (skeep) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "surjective?" +) (("2" (skeep) (("2" (typepred "y") (("2" (expand "C" -1) (("2" (skeep) (("2" (inst + "j") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep) (("2" (typepred "i") (("2" (expand "C" 1) (("2" (assert) (("2" (lemma "mod_pos") (("2" (inst?) (("2" (flatten) (("2" (assert) (("2" (inst + "i") (("2" (assert) (("2" (case "FORALL (aa,bb:int): aa<1+bb IMPLIES aa<=bb") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (skeep) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "disjoint?" 1) (("2" (expand "intersection") (("2" (expand "empty?") (("2" (expand "member") (("2" (skolem 1 "jj") (("2" (expand "B" -1) (("2" (expand "C" -1) (("2" (flatten) (("2" (skolem - "a") (("2" (skolem - "b") (("2" (flatten) (("2" (inst + "a" "b") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "finite_subset[nat]") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil) ("3" (lemma "finite_subset[nat]") (("3" (inst - "A" "B") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skeep) (("3" (assert) (("3" (lemma "mod_pos") (("3" (inst?) (("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("4" (assert) nil nil)) nil) ("2" (assert) (("2" (hide 2) (("2" (expand "is_finite") (("2" (inst + "p" "LAMBDA (i:(A)): i") (("2" (expand "injective?") (("2" (skosimp*) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "even_or_odd") (("2" (inst - "p") (("2" (assert) (("2" (flatten) (("2" (hide -1) (("2" (split -) (("1" (expand "even?") (("1" (skosimp*) (("1" (typepred "p") (("1" (expand "prime?") (("1" (inst - "2") (("1" (assert) (("1" (expand "divides") (("1" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "odd?") (("2" (skosimp*) (("2" (inst + "j!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((prime? const-decl "bool" primes ints) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (A skolem-const-decl "[nat -> boolean]" foursquare nil) (mod_pos formula-decl nil mod nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nat_exp application-judgement "nat" exponentiation nil) (minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (B skolem-const-decl "[nat -> boolean]" foursquare nil) (C skolem-const-decl "[nat -> boolean]" foursquare nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (finite_set type-eq-decl nil finite_sets nil) (disjoint? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (int_times_int_is_int application-judgement "int" integers nil) (divides const-decl "bool" divides nil) (mod_eq formula-decl nil foursquare nil) (j skolem-const-decl "nat" foursquare nil) (card_bij_inv formula-decl nil finite_sets nil) (rat_plus_rat_is_rat application-judgement "rat" rationals nil) (j skolem-const-decl "nat" foursquare nil) (int_plus_int_is_int application-judgement "int" integers nil) (square_residues_distinct formula-decl nil foursquare nil) (k skolem-const-decl "nat" foursquare nil) (card_subset formula-decl nil finite_sets nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (Card_bijection formula-decl nil finite_sets nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (y skolem-const-decl "below[p]" foursquare nil) (p skolem-const-decl "(prime?)" foursquare nil) (injective? const-decl "bool" functions nil) (below type-eq-decl nil nat_types nil) (card_def formula-decl nil finite_sets nil) (union const-decl "set" sets nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (subset_union formula-decl nil sets_lemmas nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (finite_subset formula-decl nil finite_sets nil) (card_disj_union formula-decl nil finite_sets nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (^ const-decl "real" exponentiation nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (pigeonhole_principle_nat formula-decl nil pigeonhole ints) (even_times_int_is_even application-judgement "even_int" integers nil) (even? const-decl "bool" integers nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (j!1 skolem-const-decl "int" foursquare nil) (odd? const-decl "bool" integers nil) (even_or_odd formula-decl nil naturalnumbers nil)) shostak) (sum_four_squares_pigeonhole-1 nil 3628340715 ("" (skeep) (("" (case "EXISTS (k:nat): k=(p-1)/2") (("1" (lemma "pigeonhole_principle_nat") (("1" (name "A" "{i:nat | 0<=i AND i<p}") (("1" (case "is_finite[nat](A)") (("1" (case "NOT FORALL (i:int): A(mod(i,p))") (("1" (skeep) (("1" (expand "A" 1) (("1" (assert) (("1" (lemma "mod_pos") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (name "B" "{i:nat|EXISTS (j:nat):j<=(p-1)/2 AND mod(j^2,p)=i}") (("1" (case "NOT subset?(B,A)") (("1" (hide 2) (("1" (expand "subset?" 1) (("1" (skolem 1 "i") (("1" (expand "member") (("1" (expand "B" 1) (("1" (expand "A" 1) (("1" (flatten) (("1" (skosimp*) (("1" (inst - "j!1^2") (("1" (expand "A" -4) (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (name "C" "{i:nat|EXISTS (j:nat):j<=(p-1)/2 AND mod(-j^2-1,p)=i}") (("2" (case "NOT subset?(C,A)") (("1" (expand "subset?" 1) (("1" (hide 2) (("1" (skolem 1 "i") (("1" (expand "member") (("1" (flatten) (("1" (expand "C" -1) (("1" (expand "A" 1) (("1" (skosimp*) (("1" (inst - "-j!1^2-1") (("1" (expand "A" -6) (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "card_disj_union[nat]") (("2" (inst - "B" "C") (("1" (split -) (("1" (skeep) (("1" (case "card(B) = k+1 AND card(C) = k+1") (("1" (flatten) (("1" (lemma "subset_union[nat]") (("1" (inst - "B" "C" "A") (("1" (assert) (("1" (lemma "card_subset[nat]") (("1" (inst - "union(B,C)" "A") (("1" (assert) (("1" (case "card(A) = p") (("1" (assert) nil nil) ("2" (hide 2) (("2" (rewrite "card_def" 1) (("2" (lemma "Card_bijection[nat]") (("2" (inst?) (("2" (assert) (("2" (inst + "LAMBDA (jj:(A)): jj") (("1" (expand "bijective?") (("1" (expand "injective?") (("1" (expand "surjective?") (("1" (split 1) (("1" (skeep) nil nil) ("2" (skeep) (("2" (inst + "y") (("2" (expand "A") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep) (("2" (typepred "jj") (("2" (expand "A" -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (split 1) (("1" (lemma "card_bij_inv[nat]") (("1" (inst?) (("1" (assert) (("1" (inst + "LAMBDA (i:below[1+k]): mod(i^2,p)") (("1" (expand "bijective?") (("1" (split 1) (("1" (expand "injective?") (("1" (skolem 1 ("nn" "mm")) (("1" (flatten) (("1" (lemma "square_residues_distinct") (("1" (inst - "nn" "mm" "p") (("1" (assert) (("1" (split 1) (("1" (typepred "nn") (("1" (assert) (("1" (case "nn<=k") (("1" (assert) nil nil) ("2" (case "FORALL (aa,bb:int): aa<1+bb IMPLIES aa<=bb") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (skeep) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "mm") (("2" (case "FORALL (aa,bb:int): aa<1+bb IMPLIES aa<=bb") (("1" (inst - "mm" "k") (("1" (assert) nil nil)) nil) ("2" (skeep) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "surjective?") (("2" (skeep) (("2" (typepred "y") (("2" (expand "B" -1) (("2" (skeep) (("2" (inst + "j") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (skeep) (("2" (lemma "mod_pos") (("2" (inst?) (("2" (flatten) (("2" (assert) (("2" (expand "B" 1) (("2" (inst + "i") (("2" (assert) (("2" (typepred "i") (("2" (case "FORALL (aa,bb:int): aa<1+bb IMPLIES aa<=bb") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (skeep) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "card_bij_inv[nat]") (("2" (inst?) (("2" (assert) (("2" (hide 2) (("2" (inst + "LAMBDA (i:below[1+k]): mod(-i^2-1,p)") (("1" (expand "bijective?" +) (("1" (split +) (("1" (expand "injective?") (("1" (skolem 1 ("nn" "mm")) (("1" (flatten) (("1" (case "NOT mod(nn^2,p)=mod(mm^2,p)") (("1" (rewrite "mod_eq" -1) (("1" (rewrite "mod_eq" 1) (("1" (expand "divides") (("1" (skolem - "i") (("1" (inst + "-i") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "square_residues_distinct") (("2" (inst - "nn" "mm" "p") (("2" (assert) (("2" (typepred "nn") (("2" (typepred "mm") (("2" (case "FORALL (aa,bb:int): aa<1+bb IMPLIES aa<=bb") (("1" (inst-cp - "nn" "k") (("1" (inst - "mm" "k") (("1" (assert) nil nil)) nil)) nil) ("2" (skeep) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "surjective?" +) (("2" (skeep) (("2" (typepred "y") (("2" (expand "C" -1) (("2" (skeep) (("2" (inst + "j") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep) (("2" (typepred "i") (("2" (expand "C" 1) (("2" (assert) (("2" (lemma "mod_pos") (("2" (inst?) (("2" (flatten) (("2" (assert) (("2" (inst + "i") (("2" (assert) (("2" (case "FORALL (aa,bb:int): aa<1+bb IMPLIES aa<=bb") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (skeep) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "disjoint?" 1) (("2" (expand "intersection") (("2" (expand "empty?") (("2" (expand "member") (("2" (skolem 1 "jj") (("2" (expand "B" -1) (("2" (expand "C" -1) (("2" (flatten) (("2" (skolem - "a") (("2" (skolem - "b") (("2" (flatten) (("2" (inst + "a" "b") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "finite_subset[nat]") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil) ("3" (lemma "finite_subset[nat]") (("3" (inst - "A" "B") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (skeep) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skeep) (("3" (assert) (("3" (lemma "mod_pos") (("3" (inst?) (("3" (assert) nil nil)) nil)) nil)) nil)) nil) ("4" (assert) nil nil)) nil) ("2" (assert) (("2" (hide 2) (("2" (expand "is_finite") (("2" (inst + "p" "LAMBDA (i:(A)): i") (("1" (expand "injective?") (("1" (skosimp*) nil nil)) nil) ("2" (skosimp*) (("2" (typepred "i!1") (("2" (expand "A" -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "even_or_odd") (("2" (inst - "p") (("2" (assert) (("2" (flatten) (("2" (hide -1) (("2" (split -) (("1" (expand "even?") (("1" (skosimp*) (("1" (typepred "p") (("1" (expand "prime?") (("1" (inst - "2") (("1" (assert) (("1" (expand "divides") (("1" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "odd?") (("2" (skosimp*) (("2" (inst + "j!1") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((prime? const-decl "bool" primes ints) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/= const-decl "boolean" notequal nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (- const-decl "[numfield -> numfield]" number_fields nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) nil (mod_pos formula-decl nil mod nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nat_exp application-judgement "nat" exponentiation nil) (minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) nil nil (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (finite_set type-eq-decl nil finite_sets nil) (disjoint? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (intersection const-decl "set" sets nil) (int_times_int_is_int application-judgement "int" integers nil) nil (mod_eq formula-decl nil foursquare nil) nil (card_bij_inv formula-decl nil finite_sets nil) (rat_plus_rat_is_rat application-judgement "rat" rationals nil) nil (int_plus_int_is_int application-judgement "int" integers nil) (square_residues_distinct formula-decl nil foursquare nil) nil (card_subset formula-decl nil finite_sets nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (Card_bijection formula-decl nil finite_sets nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) nil nil (injective? const-decl "bool" functions nil) (below type-eq-decl nil nat_types nil) (card_def formula-decl nil finite_sets nil) (union const-decl "set" sets nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (subset_union formula-decl nil sets_lemmas nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (finite_subset formula-decl nil finite_sets nil) (card_disj_union formula-decl nil finite_sets nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (^ const-decl "real" exponentiation nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (pigeonhole_principle_nat formula-decl nil pigeonhole ints) (even_times_int_is_even application-judgement "even_int" integers nil) (even? const-decl "bool" integers nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) nil (odd? const-decl "bool" integers nil) (even_or_odd formula-decl nil naturalnumbers nil)) shostak)) (min_mult_sum_four_squares?_TCC1 0 (min_mult_sum_four_squares?_TCC1-1 nil 3628345576 ("" (skeep) (("" (typepred "p") (("" (expand "prime?") (("" (flatten) (("" (real-props) nil nil)) nil)) nil)) nil)) nil) ((prime? const-decl "bool" primes ints) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_times_int_is_int application-judgement "int" integers nil) (pos_times_ge formula-decl nil real_props nil)) nil (min_mult_sum_four_squares? subtype "number_fields.*(foursquare.pm, foursquare.p)" "nat"))) (min_mult_sum_four_squares?_TCC2 0 (min_mult_sum_four_squares?_TCC2-1 nil 3628345576 ("" (skeep) (("" (skeep) (("" (typepred "p") (("" (expand "prime?") (("" (flatten) (("" (real-props) nil nil)) nil)) nil)) nil)) nil)) nil) ((pos_times_ge formula-decl nil real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_times_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (prime? const-decl "bool" primes ints)) nil (min_mult_sum_four_squares? subtype "number_fields.*(foursquare.pn, foursquare.p)" "nat"))) (mult_is_sum_four_squares 0 (mult_is_sum_four_squares-3 "" 3804274319 ("" (skeep) (("" (expand "min_mult_sum_four_squares?") (("" (case "p = 2") (("1" (inst + "1") (("1" (assert) (("1" (expand "sum_four_squares?") (("1" (inst + "1" "1" "0" "0") (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (case "NOT p>2") (("1" (assert) (("1" (typepred "p") (("1" (expand "prime?") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (hide 1) (("2" (name "A" "{j:nat | j>0 AND j<p AND sum_four_squares?(j*p)}") (("1" (case "nonempty?(A)") (("1" (lemma "glb_nat") (("1" (inst - "A") (("1" (skeep) (("1" (inst + "n") (("1" (typepred "n") (("1" (expand "A" -1) (("1" (flatten) (("1" (assert) (("1" (skeep) (("1" (expand "greatest_lower_bound?") (("1" (flatten) (("1" (expand "lower_bound?") (("1" (inst - "pn") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (expand "A" 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (expand "member") (("2" (expand "A" -1) (("2" (lemma "sum_four_squares_pigeonhole") (("2" (inst - "p") (("2" (assert) (("2" (skeep) (("2" (lemma "mod_eq") (("2" (inst?) (("2" (assert) (("2" (expand "divides") (("2" (skosimp*) (("2" (inst - "x!1") (("1" (case "NOT x!1>0") (("1" (hide 2) (("1" (case "a^2>=0 AND b^2>=0") (("1" (flatten) (("1" (mult-by 1 "p") (("1" (assert) nil nil)) nil)) nil) ("2" (case "FORALL (rr:real): rr^2>=0") (("1" (inst-cp - "b") (("1" (inst - "a") (("1" (assert) nil nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (skeep) (("2" (case "rr>=0") (("1" (lemma "nnreal_times_nnreal_is_nnreal") (("1" (inst - "rr" "rr") (("1" (grind) nil nil)) nil)) nil) ("2" (lemma "nnreal_times_nnreal_is_nnreal") (("2" (inst - "-rr" "-rr") (("1" (grind) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "NOT sum_four_squares?(x!1*p)") (("1" (expand "sum_four_squares?") (("1" (inst + "a" "b" "1" "0") (("1" (hide-all-but (-2 1)) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (copy -4) (("2" (copy -1) (("2" (mult-ineq -1 -1) (("2" (hide (-2 -3)) (("2" (copy -6) (("2" (copy -1) (("2" (mult-ineq -1 -1) (("2" (hide (-2 -3)) (("2" (case "2*((p-1)/2)^2+1<p*p AND p*x!1>=p*p") (("1" (flatten) (("1" (grind) nil nil)) nil) ("2" (hide -) (("2" (grind) (("2" (mult-by 2 "p") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (mult-by 1 "p") (("2" (case "FORALL (rr:real): rr^2>=0") (("1" (inst-cp - "a") (("1" (inst - "b") (("1" (assert) nil nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (skeep) (("2" (case "rr>=0") (("1" (lemma "nnreal_times_nnreal_is_nnreal") (("1" (inst - "rr" "rr") (("1" (assert) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma "nnreal_times_nnreal_is_nnreal") (("2" (inst - "-rr" "-rr") (("1" (grind) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep) (("2" (mult-by -1 "p") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak) (mult_is_sum_four_squares-2 "" 3790091472 ("" (skeep) (("" (expand "min_mult_sum_four_squares?") (("" (case "p = 2") (("1" (inst + "1") (("1" (assert) (("1" (expand "sum_four_squares?") (("1" (inst + "1" "1" "0" "0") (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (case "NOT p>2") (("1" (assert) (("1" (typepred "p") (("1" (expand "prime?") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (hide 1) (("2" (name "A" "{j:nat | j>0 AND j<p AND sum_four_squares?(j*p)}") (("1" (case "nonempty?(A)") (("1" (lemma "glb_nat") (("1" (inst - "A") (("1" (skeep) (("1" (inst + "n") (("1" (typepred "n") (("1" (expand "A" -1) (("1" (flatten) (("1" (assert) (("1" (skeep) (("1" (expand "greatest_lower_bound?") (("1" (flatten) (("1" (expand "lower_bound?") (("1" (inst - "pn") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (expand "A" 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (expand "member") (("2" (expand "A" -1) (("2" (lemma "sum_four_squares_pigeonhole") (("2" (inst - "p") (("2" (assert) (("2" (skeep) (("2" (lemma "mod_eq") (("2" (inst?) (("2" (assert) (("2" (expand "divides") (("2" (skosimp*) (("2" (inst - "x!1") (("1" (case "NOT x!1>0") (("1" (hide 2) (("1" (case "a^2>=0 AND b^2>=0") (("1" (flatten) (("1" (mult-by 1 "p") (("1" (assert) nil nil)) nil)) nil) ("2" (case "FORALL (rr:real): rr^2>=0") (("1" (inst-cp - "b") (("1" (inst - "a") (("1" (assert) nil nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (skeep) (("2" (case "rr>=0") (("1" (lemma "nnreal_times_nnreal_is_nnreal") (("1" (inst - "rr" "rr") (("1" (grind) nil nil)) nil)) nil) ("2" (lemma "nnreal_times_nnreal_is_nnreal") (("2" (inst - "-rr" "-rr") (("1" (grind) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "NOT sum_four_squares?(x!1*p)") (("1" (expand "sum_four_squares?") (("1" (inst + "a" "b" "1" "0") (("1" (hide-all-but (-2 1)) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (copy -4) (("2" (copy -1) (("2" (mult-ineq -1 -1) (("2" (hide (-2 -3)) (("2" (copy -6) (("2" (copy -1) (("2" (mult-ineq -1 -1) (("2" (hide (-2 -3)) (("2" (case "2*((p-1)/2)^2+1<p*p AND p*x!1>=p*p") (("1" (flatten) (("1" (grind) nil nil)) nil) ("2" (hide -) (("2" (grind) (("2" (mult-by 2 "p") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (mult-by 1 "p") (("2" (case "FORALL (rr:real): rr^2>=0") (("1" (inst-cp - "a") (("1" (inst - "b") (("1" (assert) nil nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (skeep) (("2" (case "rr>=0") (("1" (lemma "nnreal_times_nnreal_is_nnreal") (("1" (inst - "rr" "rr") (("1" (assert) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma "nnreal_times_nnreal_is_nnreal") (("2" (inst - "-rr" "-rr") (("1" (grind) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep) (("2" (mult-by -2 "p") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((p skolem-const-decl "(prime?)" foursquare nil) (both_sides_times_pos_gt1 formula-decl nil real_props nil) (rr skolem-const-decl "real" foursquare nil) (posreal nonempty-type-eq-decl nil real_types nil) (both_sides_times_pos_ge1 formula-decl nil real_props nil) (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil) (rat_exp application-judgement "rat" exponentiation nil) (rat_expt application-judgement "rat" exponentiation nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (rat_plus_rat_is_rat application-judgement "rat" rationals nil) (le_times_le_any1 formula-decl nil extra_real_props nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (rat_times_rat_is_rat application-judgement "rat" rationals nil) (<= const-decl "bool" reals nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (minus_real_is_real application-judgement "real" reals nil) (real_times_real_is_real application-judgement "real" reals nil) (rr skolem-const-decl "real" foursquare nil) (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil) (x!1 skolem-const-decl "int" foursquare nil) (divides const-decl "bool" divides nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield -> numfield]" number_fields nil) (mod_eq formula-decl nil foursquare nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_int_is_int application-judgement "int" integers nil) (sum_four_squares_pigeonhole formula-decl nil foursquare nil) (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (pn skolem-const-decl "posnat" foursquare nil) (extend const-decl "R" extend nil) (FALSE const-decl "bool" booleans nil) (lower_bound? const-decl "bool" bounded_real_defs nil) (greatest_lower_bound? const-decl "bool" bounded_real_defs nil) (A skolem-const-decl "[nat -> boolean]" foursquare nil) (glb_nat formula-decl nil integer_props nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_exp application-judgement "posint" exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posnat_expt application-judgement "posnat" exponentiation nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (nat_expt application-judgement "nat" exponentiation nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (^ const-decl "real" exponentiation nil) (expt def-decl "real" exponentiation nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (sum_four_squares? const-decl "bool" foursquare nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nat_exp application-judgement "nat" exponentiation nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (prime? const-decl "bool" primes ints) (min_mult_sum_four_squares? const-decl "bool" foursquare nil) (int_times_int_is_int application-judgement "int" integers nil)) shostak) (mult_is_sum_four_squares-1 nil 3628344525 ("" (skeep) (("" (expand "min_mult_sum_four_squares?") (("" (case "p = 2") (("1" (inst + "1") (("1" (assert) (("1" (expand "sum_four_squares?") (("1" (inst + "1" "1" "0" "0") (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (case "NOT p>2") (("1" (assert) (("1" (typepred "p") (("1" (expand "prime?") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (hide 1) (("2" (name "A" "{j:nat | j>0 AND j<p AND sum_four_squares?(j*p)}") (("1" (case "nonempty?(A)") (("1" (lemma "glb_nat") (("1" (inst - "A") (("1" (skeep) (("1" (inst + "n") (("1" (typepred "n") (("1" (expand "A" -1) (("1" (flatten) (("1" (assert) (("1" (skeep) (("1" (expand "greatest_lower_bound?") (("1" (flatten) (("1" (expand "lower_bound?") (("1" (inst - "pn") (("1" (assert) nil nil) ("2" (expand "extend") (("2" (expand "A" 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (typepred "n") (("2" (expand "A" -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand "nonempty?") (("2" (expand "empty?") (("2" (expand "member") (("2" (expand "A" -1) (("2" (lemma "sum_four_squares_pigeonhole") (("2" (inst - "p") (("2" (assert) (("2" (skeep) (("2" (lemma "mod_eq") (("2" (inst?) (("2" (assert) (("2" (expand "divides") (("2" (skosimp*) (("2" (inst - "x!1") (("1" (case "NOT x!1>0") (("1" (hide 2) (("1" (case "a^2>=0 AND b^2>=0") (("1" (flatten) (("1" (mult-by 1 "p") (("1" (assert) nil nil)) nil)) nil) ("2" (case "FORALL (rr:real): rr^2>=0") (("1" (inst-cp - "b") (("1" (inst - "a") (("1" (assert) nil nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (skeep) (("2" (case "rr>=0") (("1" (lemma "nnreal_times_nnreal_is_nnreal") (("1" (inst - "rr" "rr") (("1" (grind) nil nil)) nil)) nil) ("2" (lemma "nnreal_times_nnreal_is_nnreal") (("2" (inst - "-rr" "-rr") (("1" (grind) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "NOT sum_four_squares?(x!1*p)") (("1" (expand "sum_four_squares?") (("1" (inst + "a" "b" "1" "0") (("1" (hide-all-but (-2 1)) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (copy -4) (("2" (copy -1) (("2" (mult-ineq -1 -1) (("2" (hide (-2 -3)) (("2" (copy -6) (("2" (copy -1) (("2" (mult-ineq -1 -1) (("2" (hide (-2 -3)) (("2" (case "2*((p-1)/2)^2+1<p*p AND p*x!1>=p*p") (("1" (flatten) (("1" (grind) nil nil)) nil) ("2" (hide -) (("2" (grind) (("2" (mult-by 2 "p") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (mult-by 1 "p") (("2" (case "FORALL (rr:real): rr^2>=0") (("1" (inst-cp - "a") (("1" (inst - "b") (("1" (assert) nil nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (skeep) (("2" (case "rr>=0") (("1" (lemma "nnreal_times_nnreal_is_nnreal") (("1" (inst - "rr" "rr") (("1" (assert) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma "nnreal_times_nnreal_is_nnreal") (("2" (inst - "-rr" "-rr") (("1" (grind) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep) (("2" (mult-by -2 "p") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((int_times_int_is_int application-judgement "int" integers nil) (min_mult_sum_four_squares? const-decl "bool" foursquare nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (empty? const-decl "bool" sets nil) (- const-decl "[numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) nil nil (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil) (rat_exp application-judgement "rat" exponentiation nil) (rat_expt application-judgement "rat" exponentiation nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (rat_plus_rat_is_rat application-judgement "rat" rationals nil) (le_times_le_any1 formula-decl nil extra_real_props nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (rat_times_rat_is_rat application-judgement "rat" rationals nil) (<= const-decl "bool" reals nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (minus_real_is_real application-judgement "real" reals nil) (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil) (real_times_real_is_real application-judgement "real" reals nil) nil (nonneg_real nonempty-type-eq-decl nil real_types nil) (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil) (both_sides_times_pos_ge1 formula-decl nil real_props nil) (posreal nonempty-type-eq-decl nil real_types nil) nil (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (mod_eq formula-decl nil foursquare nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_int_is_int application-judgement "int" integers nil) (sum_four_squares_pigeonhole formula-decl nil foursquare nil) (member const-decl "bool" sets nil) (glb_nat formula-decl nil integer_props nil) (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil) nil (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) nil nil nil (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (both_sides_times_pos_gt1 formula-decl nil real_props nil) nil (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (nat_exp application-judgement "nat" exponentiation nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (sum_four_squares? const-decl "bool" foursquare nil) (expt def-decl "real" exponentiation nil) (^ const-decl "real" exponentiation nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nat_expt application-judgement "nat" exponentiation nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (posnat_expt application-judgement "posnat" exponentiation nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_exp application-judgement "posint" exponentiation nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (prime? const-decl "bool" primes ints)) shostak)) (nat_is_sum_four_squares 0 (nat_is_sum_four_squares-1 nil 3628352863 ("" (lemma "sum_four_squares_reduces") (("" (assert) (("" (replace 1) (("" (hide 2) (("" (skeep) (("" (lemma "mult_is_sum_four_squares") (("" (inst - "p") (("" (skolem - "m") (("" (expand "min_mult_sum_four_squares?") (("" (flatten) (("" (copy -1) (("" (assert) (("" (case "NOT m > 1") (("1" (case "NOT m = 1") (("1" (assert) nil nil) ("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil) ("2" (hide -2) (("2" (case "even?(m)") (("1" (expand "even?") (("1" (skeep) (("1" (expand "sum_four_squares?" -4) (("1" (case "EXISTS (a, b, c, d:nat,z,t:int): m * p = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2 AND a-b=2*z AND c-d=2*t") (("1" (skeep -) (("1" (case "NOT EXISTS (aa,bb,cc,dd:int): (a-b)/2=aa AND (a+b)/2=bb AND (c-d)/2=cc AND (c+d)/2=dd") (("1" (inst + "z" "z+b" "t" "t+d") (("1" (assert) nil nil)) nil) ("2" (skeep -) (("2" (case "NOT (m/2)*p = aa^2+bb^2+cc^2+dd^2") (("1" (replaces -1 :dir rl) (("1" (replaces -1 :dir rl) (("1" (replaces -1 :dir rl) (("1" (replaces -1 :dir rl) (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "(m/2)=j") (("1" (replace -1) (("1" (inst -14 "j") (("1" (assert) (("1" (rewrite "sum_four_squares_int_def" 1) (("1" (expand "sum_four_squares_int?") (("1" (replace -2 +) (("1" (inst? 1) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep -) (("2" (lemma "even_or_odd") (("2" (inst-cp - "a") (("2" (inst-cp - "b") (("2" (inst-cp - "c") (("2" (inst - "d") (("2" (assert) (("2" (case "even?(m*p)") (("1" (expand "^") (("1" (expand "expt") (("1" (expand "expt") (("1" (expand "expt") (("1" (assert) (("1" (case "EXISTS (a, b, c, d: nat):
                                      m * p = a * a + b * b + c * c + d * d AND
                                       ((even?(a) AND even?(b)) OR (odd?(a) AND odd?(b))) AND
                                       ((even?(c) AND even?(d)) OR (odd?(c) AND odd?(d)))") (("1" (hide (-3 -4 -5 -6)) (("1" (skolem - ("aa" "bb" "cc" "dd")) (("1" (flatten) (("1" (inst + "aa" "bb" "cc" "dd" _ _) (("1" (assert) (("1" (expand "even?") (("1" (expand "odd?") (("1" (deftactic squash (then (ground) (skosimp*))) (("1" (squash) (("1" (inst + "j!3-j!4" "j!1-j!2") (("1" (assert) nil nil)) nil) ("2" (inst + "j!3-j!4" "j!1-j!2") (("2" (assert) nil nil)) nil) ("3" (inst + "j!3-j!4" "j!1-j!2") (("3" (assert) nil nil)) nil) ("4" (inst + "j!3-j!4" "j!1-j!2") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (lemma "even_or_odd") (("2" (inst - "m*p") (("2" (assert) (("2" (ground) (("1" (inst + "a" "b" "c" "d") (("1" (assert) nil nil)) nil) ("2" (lemma "odd_plus_even_is_odd") (("2" (inst - "b*b+c*c+d*d" "a*a") (("1" (assert) nil nil) ("2" (rewrite "odd_times_odd_is_odd" 1) nil nil) ("3" (rewrite "even_plus_even_is_even" 1) (("1" (rewrite "even_times_int_is_even" 1) nil nil) ("2" (rewrite "even_plus_even_is_even" 1) (("1" (rewrite "even_times_int_is_even" 1) nil nil) ("2" (rewrite "even_times_int_is_even" 1) nil nil)) nil)) nil)) nil)) nil) ("3" (lemma "odd_plus_even_is_odd") (("3" (inst - "a*a+c*c+d*d" "b*b") (("1" (assert) nil nil) ("2" (rewrite "odd_times_odd_is_odd" 1) nil nil) ("3" (rewrite "even_plus_even_is_even" 1) (("1" (rewrite "even_times_int_is_even" 1) nil nil) ("2" (rewrite "even_plus_even_is_even" 1) (("1" (rewrite "even_times_int_is_even" 1) nil nil) ("2" (rewrite "even_times_int_is_even" 1) nil nil)) nil)) nil)) nil)) nil) ("4" (inst + "a" "b" "c" "d") (("4" (assert) nil nil)) nil) ("5" (lemma "odd_plus_even_is_odd") (("5" (inst - "a*a+b*b+d*d" "c*c") (("1" (assert) nil nil) ("2" (rewrite "odd_times_odd_is_odd" 1) nil nil) ("3" (rewrite "even_plus_even_is_even" 1) (("1" (rewrite "even_times_int_is_even" 1) nil nil) ("2" (rewrite "even_plus_even_is_even" 1) (("1" (rewrite "even_times_int_is_even" 1) nil nil) ("2" (rewrite "even_times_int_is_even" 1) nil nil)) nil)) nil)) nil)) nil) ("6" (inst + "a" "c" "b" "d") (("6" (assert) nil nil)) nil) ("7" (inst + "a" "d" "b" "c") (("7" (assert) nil nil)) nil) ("8" (lemma "odd_plus_even_is_odd") (("8" (inst - "a*a+b*b" "c*c+d*d") (("1" (assert) nil nil) ("2" (rewrite "odd_plus_even_is_odd" 1) (("1" (rewrite "odd_times_odd_is_odd" 1) nil nil) ("2" (rewrite "even_times_int_is_even" 1) nil nil)) nil) ("3" (rewrite "odd_plus_odd_is_even" 1) (("1" (rewrite "odd_times_odd_is_odd" 1) nil nil) ("2" (rewrite "odd_times_odd_is_odd" 1) nil nil)) nil)) nil)) nil) ("9" (lemma "odd_plus_even_is_odd") (("9" (inst - "a*a+b*b" "c*c+d*d") (("1" (assert) nil nil) ("2" (rewrite "even_plus_odd_is_odd" 1) (("1" (rewrite "odd_times_odd_is_odd" 1) nil nil) ("2" (rewrite "even_times_int_is_even" 1) nil nil)) nil) ("3" (rewrite "even_plus_even_is_even" 1) (("1" (rewrite "even_times_int_is_even" 1) nil nil) ("2" (rewrite "even_times_int_is_even" 1) nil nil)) nil)) nil)) nil) ("10" (inst + "a" "d" "b" "c") (("10" (assert) nil nil)) nil) ("11" (inst + "a" "c" "b" "d") (("11" (assert) nil nil)) nil) ("12" (lemma "even_plus_odd_is_odd") (("12" (inst - "a*a+b*b" "c*c+d*d") (("1" (assert) nil nil) ("2" (rewrite "even_plus_odd_is_odd" 1) (("1" (rewrite "odd_times_odd_is_odd" 1) nil nil) ("2" (rewrite "even_times_int_is_even" 1) nil nil)) nil) ("3" (rewrite "odd_plus_odd_is_even" 1) (("1" (rewrite "odd_times_odd_is_odd" 1) nil nil) ("2" (rewrite "odd_times_odd_is_odd" 1) nil nil)) nil)) nil)) nil) ("13" (inst + "a" "b" "c" "d") (("13" (assert) nil nil)) nil) ("14" (lemma "even_plus_odd_is_odd") (("14" (inst - "c*c+d*d" "a*a+b*b") (("1" (assert) nil nil) ("2" (rewrite "odd_plus_even_is_odd" 1) (("1" (rewrite "odd_times_odd_is_odd" 1) nil nil) ("2" (rewrite "even_times_int_is_even" 1) nil nil)) nil) ("3" (rewrite "odd_plus_odd_is_even" 1) (("1" (rewrite "odd_times_odd_is_odd" 1) nil nil) ("2" (rewrite "odd_times_odd_is_odd" 1) nil nil)) nil)) nil)) nil) ("15" (lemma "even_plus_odd_is_odd") (("15" (inst - "c*c+d*d" "a*a+b*b") (("1" (assert) nil nil) ("2" (rewrite "even_plus_odd_is_odd" 1) (("1" (rewrite "odd_times_odd_is_odd" 1) nil nil) ("2" (rewrite "even_times_int_is_even" 1) nil nil)) nil) ("3" (rewrite "odd_plus_odd_is_even" 1) (("1" (rewrite "odd_times_odd_is_odd" 1) nil nil) ("2" (rewrite "odd_times_odd_is_odd" 1) nil nil)) nil)) nil)) nil) ("16" (inst + "a" "b" "c" "d") (("16" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "even?") (("2" (inst + "p*j") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "NOT FORALL (x:int): EXISTS (y:int): (1-m)/2<=y AND y<=m/2 AND mod(x,m)=mod(y,m)") (("1" (skeep) (("1" (case "mod(x,m)<=m/2") (("1" (inst + "mod(x,m)") (("1" (assert) (("1" (lemma "mod_pos") (("1" (inst?) (("1" (flatten) (("1" (assert) (("1" (lemma "mod_of_mod") (("1" (inst - "0" "x" "m") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst + "mod(x,m)-m") (("2" (assert) (("2" (lemma "mod_of_mod") (("2" (inst - "-m" "x" "m") (("2" (assert) (("2" (replaces -1) (("2" (lemma "mod_sum") (("2" (inst - "x" "m" "-1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "NOT FORALL (x:int): EXISTS (y:int): abs(y)<m/2 AND mod(x,m)=mod(y,m)") (("1" (skeep) (("1" (inst - "x") (("1" (skeep) (("1" (inst + "y") (("1" (assert) (("1" (expand "abs" 1) (("1" (lift-if) (("1" (ground) (("1" (expand "even?") (("1" (inst + "y") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -2) (("2" (expand "sum_four_squares?" -4) (("2" (rewrite "sum_four_squares_int_def" +) (("2" (skolem - ("e" "f" "g" "h")) (("2" (inst-cp - "e") (("2" (skolem - "a") (("2" (inst-cp - "f") (("2" (skolem - "b") (("2" (inst-cp - "g") (("2" (skolem - "c") (("2" (inst - "h") (("2" (skolem - "d") (("2" (flatten) (("2" (assert) (("2" (case "NOT EXISTS (n:nat): n<m AND n*m = a^2+b^2+c^2+d^2") (("1" (case "EXISTS (n:nat): n*m = a^2+b^2+c^2+d^2") (("1" (skeep) (("1" (inst + "n") (("1" (assert) (("1" (case "NOT n*m>=m^2") (("1" (mult-by 2 "m") (("1" (hide-all-but (1 2)) (("1" (grind) nil nil)) nil)) nil) ("2" (replaces -2 -1) (("2" (case "NOT (a^2>=m^2/4 OR b^2>=m^2/4 OR c^2>=m^2/4 OR d^2>=m^2/4)") (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (hide -2) (("2" (case "FORALL (r:real): abs(r)<m/2 IMPLIES r^2<m^2/4") (("1" (split -) (("1" (inst - "a") (("1" (assert) nil nil)) nil) ("2" (inst - "b") (("2" (assert) nil nil)) nil) ("3" (inst - "c") (("3" (assert) nil nil)) nil) ("4" (inst - "d") (("4" (assert) nil nil)) nil)) nil) ("2" (hide -1) (("2" (hide-all-but 1) (("2" (skeep) (("2" (lemma "sq_lt") (("2" (inst - "abs(r)" "m/2") (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "mod_eq") (("2" (hide 2) (("2" (hide (-2 -4 -6 -8)) (("2" (inst-cp - "e" "a" "m") (("2" (assert) (("2" (inst-cp - "f" "b" "m") (("2" (assert) (("2" (inst-cp - "g" "c" "m") (("2" (assert) (("2" (inst - "h" "d" "m") (("2" (assert) (("2" (expand "divides") (("2" (skolem - "w") (("2" (skolem - "x") (("2" (skolem - "y") (("2" (skolem - "z") (("2" (both-sides "+" "d" -1) (("2" (both-sides "+" "c" -2) (("2" (both-sides "+" "b" -3) (("2" (both-sides "+" "a" -4) (("2" (assert) (("2" (hide (-5 -6 -7 -8)) (("2" (replaces -1) (("2" (replaces -1) (("2" (replaces -1) (("2" (replaces -1) (("2" (case "EXISTS (nn: int): nn * m = a ^ 2 + b ^ 2 + c ^ 2 + d ^ 2") (("1" (skeep) (("1" (case "nn>=0") (("1" (inst + "nn") nil nil) ("2" (hide 2) (("2" (typepred "sq(a)") (("2" (typepred "sq(b)") (("2" (typepred "sq(c)") (("2" (typepred "sq(d)") (("2" (mult-by 1 "m") (("2" (replaces -5) (("2" (hide-all-but (-1 -2 -3 -4 1)) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (case "FORALL (rr:real): rr^2 = sq(rr)") (("1" (rewrite -1) (("1" (rewrite -1) (("1" (rewrite -1) (("1" (rewrite -1) (("1" (rewrite -1) (("1" (rewrite -1) (("1" (rewrite -1) (("1" (rewrite -1) (("1" (hide -1) (("1" (rewrite "sq_plus") (("1" (rewrite "sq_plus") (("1" (rewrite "sq_plus") (("1" (rewrite "sq_plus") (("1" (rewrite "sq_times") (("1" (rewrite "sq_times") (("1" (rewrite "sq_times") (("1" (rewrite "sq_times") (("1" (case "NOT sq(m) = m*m") (("1" (expand "sq" 1) (("1" (propax) nil nil)) nil) ("2" (replaces -1) (("2" (name "nn" "p - (m * sq(z)  + 2 * (a  * z) +
        (m * sq(y)  + 2 * (b  * y))
        + ( m * sq(x)  + 2 * (c  * x))
        + ( m * sq(w)  + 2 * (d  * w)))") (("2" (expand "sq") (("2" (inst + "nn") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep) (("2" (case "n = 0") (("1" (replaces -1) (("1" (assert) (("1" (hide -1) (("1" (rewrite "zero_times1") (("1" (case "a = 0 AND b = 0 AND c = 0 AND d = 0") (("1" (flatten) (("1" (hide -5) (("1" (hide (-5 -7 -9 -11)) (("1" (replaces -1) (("1" (replaces -1) (("1" (replaces -1) (("1" (replaces -1) (("1" (assert) (("1" (lemma "mod_0_divides") (("1" (inst?) (("1" (replaces -1) (("1" (lemma "mod_0_divides") (("1" (inst?) (("1" (replaces -1) (("1" (lemma "mod_0_divides") (("1" (inst?) (("1" (replaces -1) (("1" (lemma "mod_0_divides") (("1" (inst?) (("1" (replaces -1) (("1" (case "NOT divides(m,p)") (("1" (expand "divides") (("1" (skolem - "v") (("1" (skolem - "w") (("1" (skolem - "x") (("1" (skolem - "y") (("1" (replaces -1) (("1" (replaces -1) (("1" (replaces -1) (("1" (replaces -1) (("1" (case "FORALL (rr:real): rr^2 = sq(rr)") (("1" (rewrite -1) (("1" (rewrite -1) (("1" (rewrite -1) (("1" (rewrite -1) (("1" (hide -1) (("1" (rewrite "sq_times") (("1" (rewrite "sq_times") (("1" (rewrite "sq_times") (("1" (rewrite "sq_times") (("1" (case "sq(m)=m*m") (("1" (replaces -1) (("1" (inst + "  sq(y) +  sq(x) +  sq(w) +  sq(v)") (("1" (mult-by 1 "m") (("1" (assert) nil nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (expand "sq" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "p") (("2" (expand "prime?") (("2" (inst - "m") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (case "FORALL (rr:real): rr^2 = sq(rr)") (("1" (rewrite -1 -2) (("1" (rewrite -1 -2) (("1" (rewrite -1 -2) (("1" (rewrite -1 -2) (("1" (hide -1) (("1" (lemma "sq_eq_0") (("1" (inst-cp - "a") (("1" (inst-cp - "b") (("1" (inst-cp - "c") (("1" (inst-cp - "d") (("1" (hide -1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst - "n") (("1" (assert) (("1" (hide 4) (("1" (rewrite "sum_four_squares_int_def" +) (("1" (lemma "Euler_four_square") (("1" (inst - "a" "b" "c" "d" "e" "f" "g" "h") (("1" (replace -3 :dir rl) (("1" (replace -14 :dir rl) (("1" (name "q" "a * e + b * f + c * g + d * h") (("1" (replace -1) (("1" (name "r" "a * f - b * e + c * h - d * g") (("1" (replace -1) (("1" (name "s" "a * g - b * h - c * e + d * f") (("1" (replace -1) (("1" (name "t" "a * h + b * g - c * f - d * e") (("1" (replace -1) (("1" (case "divides(m,q) AND divides(m,r) AND divides(m,s) AND divides(m,t)") (("1" (flatten) (("1" (expand "divides" (-1 -2 -3 -4)) (("1" (skolem - "w") (("1" (skolem - "x") (("1" (skolem - "y") (("1" (skolem - "z") (("1" (hide (-5 -6 -7 -8)) (("1" (replaces -1) (("1" (replaces -1) (("1" (replaces -1) (("1" (replaces -1) (("1" (case "FORALL (a1,a2:int): (a1*a2)^2=a1^2*a2^2") (("1" (rewrite -1 -2) (("1" (rewrite -1 -2) (("1" (rewrite -1 -2) (("1" (rewrite -1 -2) (("1" (hide -1) (("1" (case "m^2 = m*m") (("1" (mult-by -1 "n*p") (("1" (replaces -1 :dir rl) (("1" (expand "sum_four_squares_int?") (("1" (inst + "w" "x" "y" "z") (("1" (mult-by 3 "m^2") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "mod_eq") (("2" (inst-cp - "e" "a" "m") (("2" (assert) (("2" (inst-cp - "f" "b" "m") (("2" (assert) (("2" (inst-cp - "g" "c" "m") (("2" (assert) (("2" (inst - "h" "d" "m") (("2" (assert) (("2" (hide (-12 -13 -14 -15 -16 -17 -18 -19)) (("2" (expand "divides" -) (("2" (skolem - "w") (("2" (skolem - "x") (("2" (skolem - "y") (("2" (skolem - "z") (("2" (both-sides "+" "d" -1) (("2" (both-sides "+" "c" -2) (("2" (both-sides "+" "b" -3) (("2" (both-sides "+" "a" -4) (("2" (assert) (("2" (replaces -1) (("2" (replaces -1) (("2" (replaces -1) (("2" (replaces -1) (("2" (assert) (("2" (expand "divides" 1) (("2" (split) (("1" (replaces -4 + :dir rl) (("1" (inst + "a *  z + b *  y + c *  x + d *  w + n") (("1" (expand "^") (("1" (expand "expt") (("1" (expand "expt") (("1" (expand "expt") (("1" (hide -9) (("1" (hide (-1 -2 -3 -4)) (("1" (case "FORALL (ii:int): ii=m * (a * z + b * y + c * x + d * w) IMPLIES ii+ a * a + b * b + c * c
       + d * d = m * (a * z + b * y + c * x + d * w + n)") (("1" (inst - "a * m * z + b * m * y + c * m * x + d * m * w") (("1" (replace 1) (("1" (hide 2) (("1" (hide-all-but 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (-2 1)) (("2" (skeep) (("2" (rewrite "distributive" 1) (("2" (replaces -2) (("2" (label "end1" 1) (("2" (hide "end1") (("2" (assert) (("2" (reveal "end1") (("2" (replace -1 :dir rl) (("2" (hide -) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -4) (("2" (replace -3 + :dir rl) (("2" (hide (-1 -2 -3 -4)) (("2" (inst + "-1 * (b *  z) - d *  x + a *  y + c *  w") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (replace -2 + :dir rl) (("3" (hide (-1 -2 -3 -4)) (("3" (inst + "-1 * (b *  w) - c *  z + a *  x + d *  y") (("3" (assert) nil nil)) nil)) nil)) nil) ("4" (replaces -1 + :dir rl) (("4" (hide (-1 -2 -3)) (("4" (inst + "-1 * (c *  y) - d *  z + a *  w + b *  x ") (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "nnreal_times_nnreal_is_nnreal" 1) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((mult_is_sum_four_squares formula-decl nil foursquare nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (- const-decl "[numfield -> numfield]" number_fields nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (< const-decl "bool" reals nil) (nonzero_integer nonempty-type-eq-decl nil integers nil) (<= const-decl "bool" reals nil) (nil application-judgement "below(m)" mod nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (mod_of_mod formula-decl nil mod nil) (mod_pos formula-decl nil mod nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (mod_sum formula-decl nil mod nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (mod_eq formula-decl nil foursquare nil) (nn skolem-const-decl "int" foursquare nil) (both_sides_times_pos_ge1 formula-decl nil real_props nil) (posreal nonempty-type-eq-decl nil real_types nil) (int_expt application-judgement "int" exponentiation nil) (real_plus_real_is_real application-judgement "real" reals nil) (sq_plus formula-decl nil sq reals) (sq_times formula-decl nil sq reals) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (real_minus_real_is_real application-judgement "real" reals nil) (nn skolem-const-decl "real" foursquare nil) (even_minus_even_is_even application-judgement "even_int" integers nil) (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (divides const-decl "bool" divides nil) (sq const-decl "nonneg_real" sq reals) (posrat_times_posrat_is_posrat application-judgement "posrat" rationals nil) (real_times_real_is_real application-judgement "real" reals nil) (sq_abs formula-decl nil sq reals) (sq_nz_pos application-judgement "posreal" sq reals) (sq_lt formula-decl nil sq reals) (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (posnat_expt application-judgement "posnat" exponentiation nil) (posint_exp application-judgement "posint" exponentiation nil) (zero_times1 formula-decl nil real_props nil) (sq_eq_0 formula-decl nil sq reals) (mod_0_divides formula-decl nil mod_lems ints) (v skolem-const-decl "int" foursquare nil) (w skolem-const-decl "int" foursquare nil) (x skolem-const-decl "int" foursquare nil) (y skolem-const-decl "int" foursquare nil) (nonzero_real nonempty-type-eq-decl nil reals nil) (both_sides_times1 formula-decl nil real_props nil) (nzint nonempty-type-eq-decl nil integers nil) (mod_0 formula-decl nil mod_lems ints) (distributive formula-decl nil number_fields nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (both_sides_times1_imp formula-decl nil extra_real_props nil) (Euler_four_square formula-decl nil foursquare nil) (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil) (n skolem-const-decl "nat" foursquare nil) (minus_int_is_int application-judgement "int" integers nil) (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}" real_defs nil) (nat_exp application-judgement "nat" exponentiation nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (sum_four_squares? const-decl "bool" foursquare nil) (b skolem-const-decl "nat" foursquare nil) (c skolem-const-decl "nat" foursquare nil) (d skolem-const-decl "nat" foursquare nil) (a skolem-const-decl "nat" foursquare nil) (odd_int nonempty-type-eq-decl nil integers nil) (even_int nonempty-type-eq-decl nil integers nil) (odd_times_odd_is_odd judgement-tcc nil integers nil) (even_times_int_is_even judgement-tcc nil integers nil) (even_plus_even_is_even judgement-tcc nil integers nil) (odd_plus_even_is_odd judgement-tcc nil integers nil) (odd_plus_odd_is_even judgement-tcc nil integers nil) (even_plus_odd_is_odd judgement-tcc nil integers nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (odd? const-decl "bool" integers nil) (even_or_odd formula-decl nil naturalnumbers nil) (j skolem-const-decl "int" foursquare nil) (sum_four_squares_int_def formula-decl nil foursquare nil) (sum_four_squares_int? const-decl "bool" foursquare nil) (int_exp application-judgement "int" exponentiation nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (nnrat_exp application-judgement "nnrat" exponentiation nil) (rat_expt application-judgement "rat" exponentiation nil) (nnrat_expt application-judgement "nnrat" exponentiation nil) (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat" rationals nil) (nat_expt application-judgement "nat" exponentiation nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (expt def-decl "real" exponentiation nil) (rat_exp application-judgement "rat" exponentiation nil) (rat_plus_rat_is_rat application-judgement "rat" rationals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (rat_times_rat_is_rat application-judgement "rat" rationals nil) (int_plus_int_is_int application-judgement "int" integers nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (nznum nonempty-type-eq-decl nil number_fields nil) (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals nil) (rat_div_nzrat_is_rat application-judgement "rat" rationals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (^ const-decl "real" exponentiation nil) (/= const-decl "boolean" notequal nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (even? const-decl "bool" integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (TRUE const-decl "bool" booleans nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (min_mult_sum_four_squares? const-decl "bool" foursquare nil) (int_times_int_is_int application-judgement "int" integers nil) (prime? const-decl "bool" primes ints) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (sum_four_squares_reduces formula-decl nil foursquare nil)) shostak)) (sum_four_squares 0 (sum_four_squares-1 nil 3628422287 ("" (skeep) (("" (lemma "nat_is_sum_four_squares") (("" (inst - "n") (("" (expand "sum_four_squares?") (("" (propax) nil nil)) nil)) nil)) nil)) nil) ((nat_is_sum_four_squares formula-decl nil foursquare nil) (nat_exp application-judgement "nat" exponentiation nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (sum_four_squares? const-decl "bool" foursquare nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak)))

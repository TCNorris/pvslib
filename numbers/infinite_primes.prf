(infinite_primes
 (prime_divides 0
  (prime_divides-4 nil 3507987320
   ("" (skosimp*)
    (("" (lemma "prime_factors")
      (("" (inst?)
        (("" (skosimp*)
          (("" (expand "product")
            (("" (lift-if)
              (("" (split)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "product")
                    (("2" (assert)
                      (("2" (inst + "seq(fs!1)(length(fs!1) - 1)")
                        (("2" (expand "ordered_list_of_primes?")
                          (("2" (flatten)
                            (("2" (expand "list_of_primes?")
                              (("2" (inst?)
                                (("2" (assert)
                                  (("2" (expand "divides")
                                    (("2" (inst?) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prime_factors formula-decl nil prime_factorization nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (prod_posnat application-judgement "posnat" product_nat reals)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ordered_list_of_primes? const-decl "bool" prime_factorization nil)
    (list_of_primes? const-decl "bool" prime_factorization nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_low type-eq-decl nil product reals)
    (T_high type-eq-decl nil product reals)
    (divides const-decl "bool" divides nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (barray type-eq-decl nil fseqs structures)
    (fseq type-eq-decl nil fseqs structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (product def-decl "real" product reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (product const-decl "posnat" product_fseq_posnat reals)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (prime_divides-3 nil 3407858878
   ("" (skosimp*)
    (("" (lemma "prime_factors")
      (("" (inst?)
        (("" (skosimp*)
          (("" (expand "product")
            (("" (lift-if)
              (("" (split)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "product")
                    (("2" (assert)
                      (("2" (inst + "seq(fs!1)(length(fs!1) - 1)")
                        (("2" (expand "ordered_list_of_primes?")
                          (("2" (flatten)
                            (("2" (expand "list_of_primes?")
                              (("2" (inst?)
                                (("2" (assert)
                                  (("2" (expand "divides")
                                    (("2" (inst?) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prime_factors formula-decl nil prime_factorization nil)
    (ordered_list_of_primes? const-decl "bool" prime_factorization nil)
    (list_of_primes? const-decl "bool" prime_factorization nil)
    (T_low type-eq-decl nil product reals)
    (T_high type-eq-decl nil product reals)
    (barray type-eq-decl nil fseqs structures)
    (fseq type-eq-decl nil fseqs structures)
    (product def-decl "real" product reals)
    (product const-decl "posnat" product_fseq_posnat reals))
   nil)
  (prime_divides-2 nil 3407849330
   ("" (skosimp*)
    (("" (lemma "prime_factors")
      (("" (inst?)
        (("" (skosimp*)
          (("" (expand "product")
            (("" (lift-if)
              (("" (split)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "product_rec")
                    (("2" (lift-if)
                      (("2" (ground)
                        (("1" (expand "ordered_list_of_primes?")
                          (("1" (flatten)
                            (("1" (expand "list_of_primes?")
                              (("1" (inst -3 "0") nil nil)) nil))
                            nil))
                          nil)
                         ("2" (inst + "seq(fs!1)(length(fs!1) - 1)")
                          (("2" (expand "ordered_list_of_primes?")
                            (("2" (flatten)
                              (("2" (expand "list_of_primes?")
                                (("2" (inst?)
                                  (("2" (assert)
                                    (("2" (expand "divides?")
                                      (("2"
                                        (hide -2 -3 -4 1 2 3)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prime_factors formula-decl nil prime_factorization nil)
    (ordered_list_of_primes? const-decl "bool" prime_factorization nil)
    (list_of_primes? const-decl "bool" prime_factorization nil))
   nil)
  (prime_divides-1 nil 3306142515
   ("" (skosimp*)
    (("" (lemma "prime_factors")
      (("" (inst?)
        (("" (skosimp*)
          (("" (expand "product")
            (("" (lift-if)
              (("" (split)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "product_rec")
                    (("2" (lift-if)
                      (("2" (ground)
                        (("1" (expand "ordered_list_of_primes?")
                          (("1" (flatten)
                            (("1" (expand "list_of_primes?")
                              (("1" (inst -3 "0") nil nil)) nil))
                            nil))
                          nil)
                         ("2" (inst + "seq(fs!1)(length(fs!1) - 1)")
                          (("2" (expand "ordered_list_of_primes?")
                            (("2" (flatten)
                              (("2" (expand "list_of_primes?")
                                (("2" (inst?)
                                  (("2" (assert)
                                    (("2" (expand "divides")
                                      (("2"
                                        (hide -2 -3 -4 1 2 3)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prime_factors formula-decl nil prime_factorization nil)
    (ordered_list_of_primes? const-decl "bool" prime_factorization nil)
    (list_of_primes? const-decl "bool" prime_factorization nil))
   nil))
 (divides_product 0
  (divides_product-4 "" 3790091410
   ("" (skosimp*)
    (("" (expand "product")
      ((""
        (case "(FORALL (n: nat): n < length(fs!1) AND ii!1 <= n IMPLIES
                                                        divides(seq(fs!1)(ii!1), product(0, n, fs!1`seq)))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide 2)
          (("2" (induct "n" 1 "NAT_induction")
            (("2" (skosimp*)
              (("2" (expand "product" +)
                (("2" (case-replace "ii!1 = j!1")
                  (("1" (hide -2)
                    (("1" (expand "divides")
                      (("1" (inst + "product(0, j!1 - 1, fs!1`seq)") nil nil))
                      nil))
                    nil)
                   ("2" (inst - "j!1-1")
                    (("1" (assert)
                      (("1" (expand "divides")
                        (("1" (skosimp*)
                          (("1" (inst + "x!1 * seq(fs!1)(j!1)")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (divides_product-3 nil 3407858913
   ("" (skosimp*)
    (("" (expand "product")
      ((""
        (case "(FORALL (n: nat): n < length(fs!1) AND ii!1 <= n IMPLIES
                                                        divides(seq(fs!1)(ii!1), product(0, n, fs!1`seq)))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide 2)
          (("2" (induct "n" 1 "NAT_induction")
            (("2" (skosimp*)
              (("2" (expand "product" +)
                (("2" (case-replace "ii!1 = j!1")
                  (("1" (hide -2)
                    (("1" (expand "divides")
                      (("1" (inst + "product(0, j!1 - 1, fs!1`seq)")
                        (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
                      nil))
                    nil)
                   ("2" (inst - "j!1-1")
                    (("1" (assert)
                      (("1" (expand "divides")
                        (("1" (skosimp*)
                          (("1" (inst + "x!1 * seq(fs!1)(j!1)")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((product const-decl "posnat" product_fseq_posnat reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (j!1 skolem-const-decl "nat" infinite_primes nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prod_posnat application-judgement "posnat" product_nat reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (barray type-eq-decl nil fseqs structures)
    (fseq type-eq-decl nil fseqs structures) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (divides const-decl "bool" divides nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil product reals)
    (T_high type-eq-decl nil product reals)
    (product def-decl "real" product reals))
   nil)
  (divides_product-2 nil 3407849284
   (";;; Proof divides_product-1 for formula infinite_primes.divides_product"
    (skosimp*)
    ((";;; Proof divides_product-1 for formula infinite_primes.divides_product"
      (expand "product")
      ((";;; Proof divides_product-1 for formula infinite_primes.divides_product"
        (case "(FORALL (n: nat): n < length(fs!1) AND ii!1 <= n IMPLIES
                     divides?(seq(fs!1)(ii!1), product_rec(fs!1, n)))")
        (("1" (inst?) (("1" (assert) nil)))
         ("2" (hide 2)
          (("2" (induct "n" 1 "NAT_induction")
            (("2" (skosimp*)
              (("2" (expand "product_rec" +)
                (("2" (lift-if)
                  (("2" (ground)
                    (("1" (case-replace "ii!1 = 0")
                      (("1" (expand "divides?")
                        (("1" (inst + "1") (("1" (assert) nil)))))
                       ("2" (assert) nil)))
                     ("2" (case-replace "ii!1 = j!1")
                      (("1" (hide -2)
                        (("1" (expand "divides?")
                          (("1" (inst + "product_rec(fs!1, j!1 - 1)") nil)))))
                       ("2" (inst -1 "j!1-1")
                        (("2" (assert)
                          (("2" (expand "divides?")
                            (("2" (skosimp*)
                              (("2" (inst + "k!1 * seq(fs!1)(j!1)")
                                (("2" (assert)
                                  (("2" (replace -1)
                                    (("2" (hide -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (name-replace "T1" "seq(fs!1)(j!1)")
                                          (("2"
                                            (name-replace
                                             "T2"
                                             "seq(fs!1)(ii!1)")
                                            (("2"
                                              (assert)
                                              nil))))))))))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   nil nil)
  (divides_product-1 nil 3306142515
   ("" (skosimp*)
    (("" (expand "product")
      ((""
        (case "(FORALL (n: nat): n < length(fs!1) AND ii!1 <= n IMPLIES
              divides(seq(fs!1)(ii!1), product_rec(fs!1, n)))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide 2)
          (("2" (induct "n" 1 "NAT_induction")
            (("2" (skosimp*)
              (("2" (expand "product_rec" +)
                (("2" (lift-if)
                  (("2" (ground)
                    (("1" (case-replace "ii!1 = 0")
                      (("1" (expand "divides")
                        (("1" (inst + "1") (("1" (assert) nil nil)) nil)) nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (case-replace "ii!1 = j!1")
                      (("1" (hide -2)
                        (("1" (expand "divides")
                          (("1" (inst + "product_rec(fs!1, j!1 - 1)") nil
                            nil))
                          nil))
                        nil)
                       ("2" (inst -1 "j!1-1")
                        (("2" (assert)
                          (("2" (expand "divides")
                            (("2" (skosimp*)
                              (("2" (inst + "k!1 * seq(fs!1)(j!1)")
                                (("2" (assert)
                                  (("2" (replace -1)
                                    (("2" (hide -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (name-replace "T1" "seq(fs!1)(j!1)")
                                          (("2"
                                            (name-replace
                                             "T2"
                                             "seq(fs!1)(ii!1)")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (primes_infinite 0
  (primes_infinite-6 "" 3757786273
   ("" (lemma "bij_exists[nat]")
    (("" (inst?)
      (("" (skosimp*)
        ((""
          (case "(EXISTS (f: [below(card(Primes)) -> (Primes)]): bijective?(f))")
          (("1" (skosimp*)
            (("1" (hide -2)
              (("1"
                (name "prime_seq" "(# length := card(Primes),
                                                          seq := (LAMBDA (ii: nat): IF ii < card(Primes) THEN f!2(ii) ELSE default
                                                                                     ENDIF) #)")
                (("1" (name "M" "product(prime_seq) + 1")
                  (("1" (case "(FORALL (p: (Primes)): NOT divides(p,M))")
                    (("1" (case "prime?(M)")
                      (("1" (expand "bijective?")
                        (("1" (flatten)
                          (("1" (expand "surjective?")
                            (("1" (inst -6 "M")
                              (("1" (skosimp*)
                                (("1" (lemma "product_fseq_ge")
                                  (("1" (inst -1 "prime_seq" "x!1")
                                    (("1" (replace -5 -1 rl)
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (replace -4 + rl)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "Primes") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "prime_divides")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (skosimp*)
                              (("2" (inst?)
                                (("2" (expand "Primes")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (lemma "divides_plus_1")
                        (("2" (inst -1 "M-1" "p!1")
                          (("1" (assert)
                            (("1" (split -1)
                              (("1" (hide -1)
                                (("1" (replace -1 * rl)
                                  (("1" (assert)
                                    (("1" (typepred "p!1")
                                      (("1"
                                        (expand "bijective?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "surjective?")
                                            (("1"
                                              (inst -5 "p!1")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (replace -5 + rl)
                                                  (("1"
                                                    (case-replace
                                                     "f!2(x!1) = seq(prime_seq)(x!1)")
                                                    (("1"
                                                      (lemma
                                                       "divides_product")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "prime_seq"
                                                           "x!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -2 2)
                                                      (("2"
                                                        (replace -2 :dir rl)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (typepred "p!1")
                                (("2" (expand "Primes")
                                  (("2" (lemma "prime_gt_1")
                                    (("2" (lemma "prime_gt_1")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (lemma "prime_gt_1")
                              (("2" (inst?)
                                (("2" (assert)
                                  (("2" (typepred "p!1")
                                    (("2" (expand "Primes")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (lemma "product_fseq_ge")
                            (("3" (inst -1 "prime_seq" "0")
                              (("1" (expand "prime_seq" -1 2)
                                (("1" (lift-if) (("1" (assert) nil nil)) nil))
                                nil)
                               ("2" (replace -3 1 :dir rl)
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (prop)
                    (("1" (skosimp*)
                      (("1" (ground)
                        (("1" (replace -1 * rl)
                          (("1" (assert)
                            (("1" (hide -1)
                              (("1" (typepred "f!2(x1!1)")
                                (("1" (expand "Primes")
                                  (("1" (lemma "prime_gt_1")
                                    (("1" (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma
                                           "bij_inv_is_bij[(Primes),below(card(Primes))]")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -1 -2 -3)
                                                (("1"
                                                  (lift-if)
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (ground)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (lift-if)
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (lift-if)
                                                  (("2" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst + "2")
                                            (("2"
                                              (expand "Primes")
                                              (("2"
                                                (rewrite "prime_2")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (lift-if) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (assert)
                        (("2" (expand "prime_seq") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (lemma "bij_inv_is_bij[(Primes),below(card(Primes))]")
            (("1" (inst?)
              (("1" (assert)
                (("1" (inst?)
                  (("1" (inst + "2")
                    (("1" (expand "Primes")
                      (("1" (assert) (("1" (rewrite "prime_2") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil)
             ("3" (inst 1 "2")
              (("3" (expand "Primes") (("3" (rewrite "prime_2") nil nil))
                nil))
              nil))
            nil)
           ("3" (expand "Primes") (("3" (skosimp) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Primes const-decl "set[nat]" infinite_primes nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (barray type-eq-decl nil fseqs structures)
    (fseq type-eq-decl nil fseqs structures)
    (product const-decl "posnat" product_fseq_posnat reals)
    (posint nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (p!1 skolem-const-decl "(Primes)" infinite_primes nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (divides_product formula-decl nil infinite_primes nil)
    (prime_gt_1 formula-decl nil primes ints)
    (divides_plus_1 formula-decl nil divides_lems ints)
    (prime? const-decl "bool" primes ints)
    (M skolem-const-decl "posint" infinite_primes nil)
    (product_fseq_ge formula-decl nil product_fseq_posnat reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (prime_seq skolem-const-decl
     "[# length: {n: nat | n = Card(Primes)}, seq: [nat -> nat] #]"
     infinite_primes nil)
    (x!1 skolem-const-decl "below(card(Primes))" infinite_primes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (surjective? const-decl "bool" functions nil)
    (p!1 skolem-const-decl "nat" infinite_primes nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prime_divides formula-decl nil infinite_primes nil)
    (divides const-decl "bool" divides nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (TRUE const-decl "bool" booleans nil)
    (f!2 skolem-const-decl "[below(card(Primes)) -> (Primes)]" infinite_primes
     nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (prime_2 formula-decl nil primes ints)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (default const-decl "T" fseqs structures)
    (inverse const-decl "D" function_inverse nil)
    (bij_exists formula-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak)
  (primes_infinite-5 nil 3514297915
   ("" (lemma "bij_exists[nat]")
    (("" (inst?)
      (("" (skosimp*)
        ((""
          (case "(EXISTS (f: [below(card(Primes)) -> (Primes)]): bijective?(f))")
          (("1" (skosimp*)
            (("1" (hide -2)
              (("1"
                (name "prime_seq" "(# length := card(Primes),
                                                 seq := (LAMBDA (ii: nat): IF ii < card(Primes) THEN f!2(ii) ELSE default
                                                                            ENDIF) #)")
                (("1" (name "M" "product(prime_seq) + 1")
                  (("1" (case "(FORALL (p: (Primes)): NOT divides(p,M))")
                    (("1" (case "prime?(M)")
                      (("1" (expand "bijective?")
                        (("1" (flatten)
                          (("1" (expand "surjective?")
                            (("1" (inst -6 "M")
                              (("1" (skosimp*)
                                (("1" (lemma "product_fseq_ge")
                                  (("1" (inst -1 "prime_seq" "x!1")
                                    (("1" (replace -5 -1 rl)
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (replace -4 + rl)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "Primes") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "prime_divides")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (skosimp*)
                              (("2" (inst?)
                                (("2" (expand "Primes")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (lemma "divides_plus_1")
                        (("2" (inst -1 "M-1" "p!1")
                          (("1" (assert)
                            (("1" (split -1)
                              (("1" (hide -1)
                                (("1" (replace -1 * rl)
                                  (("1" (assert)
                                    (("1" (typepred "p!1")
                                      (("1"
                                        (expand "bijective?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "surjective?")
                                            (("1"
                                              (inst -5 "p!1")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (replace -5 + rl)
                                                  (("1"
                                                    (case-replace
                                                     "f!2(x!1) = seq(prime_seq)(x!1)")
                                                    (("1"
                                                      (lemma
                                                       "divides_product")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "prime_seq"
                                                           "x!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -2 2)
                                                      (("2"
                                                        (replace -2 :dir rl)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (typepred "p!1")
                                (("2" (expand "Primes")
                                  (("2" (lemma "prime_gt_1")
                                    (("2" (lemma "prime_gt_1")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2" (expand "Primes")
                                (("2" (lemma "prime_gt_1")
                                  (("2" (inst?)
                                    (("2" (assert)
                                      (("2"
                                        (typepred "p!1")
                                        (("2"
                                          (expand "Primes")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (prop) (("3" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (prop)
                    (("1" (skosimp*)
                      (("1" (ground)
                        (("1" (replace -1 * rl)
                          (("1" (assert)
                            (("1" (hide -1)
                              (("1" (typepred "f!2(x1!1)")
                                (("1" (expand "Primes")
                                  (("1" (lemma "prime_gt_1")
                                    (("1" (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma
                                           "bij_inv_is_bij[(Primes),below(card(Primes))]")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -1 -2 -3)
                                                (("1"
                                                  (lift-if)
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (ground)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (lift-if)
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (lift-if)
                                                  (("2" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst + "2")
                                            (("2"
                                              (expand "Primes")
                                              (("2"
                                                (rewrite "prime_2")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (lift-if) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (assert)
                        (("2" (expand "prime_seq") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (lemma "bij_inv_is_bij[(Primes),below(card(Primes))]")
            (("1" (inst?)
              (("1" (assert)
                (("1" (inst?)
                  (("1" (inst + "2")
                    (("1" (expand "Primes")
                      (("1" (assert) (("1" (rewrite "prime_2") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst + "2")
              (("2" (hide -1 -2 -3)
                (("2" (expand "Primes") (("2" (rewrite "prime_2") nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "Primes") (("3" (skosimp*) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((barray type-eq-decl nil fseqs structures)
    (fseq type-eq-decl nil fseqs structures)
    (product const-decl "posnat" product_fseq_posnat reals)
    (prime_gt_1 formula-decl nil primes ints)
    (divides_plus_1 formula-decl nil divides_lems ints)
    (prime? const-decl "bool" primes ints)
    (product_fseq_ge formula-decl nil product_fseq_posnat reals)
    (prime_2 formula-decl nil primes ints)
    (default const-decl "T" fseqs structures))
   nil)
  (primes_infinite-4 nil 3410695243
   ("" (lemma "bij_exists[nat]")
    (("" (inst?)
      (("" (skosimp*)
        ((""
          (case "(EXISTS (f: [below(card(Primes)) -> (Primes)]): bijective?(f))")
          (("1" (skosimp*)
            (("1" (hide -2)
              (("1"
                (name "prime_seq" "(# length := card(Primes),
                                        seq := (LAMBDA (ii: nat): IF ii < card(Primes) THEN f!2(ii) ELSE default
                                                                   ENDIF) #)")
                (("1" (name "M" "product(prime_seq) + 1")
                  (("1" (case "(FORALL (p: (Primes)): NOT divides(p,M))")
                    (("1" (case "prime?(M)")
                      (("1" (expand "bijective?")
                        (("1" (flatten)
                          (("1" (expand "surjective?")
                            (("1" (inst -6 "M")
                              (("1" (skosimp*)
                                (("1" (lemma "product_fseq_ge")
                                  (("1" (inst -1 "prime_seq" "x!1")
                                    (("1" (replace -5 -1 rl)
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (replace -4 + rl)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "Primes") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "prime_divides")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (skosimp*)
                              (("2" (inst?)
                                (("2" (expand "Primes")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (lemma "divides_plus_1")
                        (("2" (inst -1 "M-1" "p!1")
                          (("1" (assert)
                            (("1" (split -1)
                              (("1" (hide -1)
                                (("1" (replace -1 * rl)
                                  (("1" (assert)
                                    (("1" (typepred "p!1")
                                      (("1"
                                        (expand "bijective?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "surjective?")
                                            (("1"
                                              (inst -5 "p!1")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (replace -5 + rl)
                                                  (("1"
                                                    (case-replace
                                                     "f!2(x!1) = seq(prime_seq)(x!1)")
                                                    (("1"
                                                      (lemma
                                                       "divides_product")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "prime_seq"
                                                           "x!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -2 2)
                                                      (("2"
                                                        (replace -2 :dir rl)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (typepred "p!1")
                                (("2" (expand "Primes")
                                  (("2" (lemma "prime_gt_1")
                                    (("2" (lemma "prime_gt_1")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2" (expand "Primes")
                                (("2" (lemma "prime_gt_1")
                                  (("2" (inst?)
                                    (("2" (assert)
                                      (("2"
                                        (typepred "p!1")
                                        (("2"
                                          (expand "Primes")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (prop) (("3" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (prop)
                    (("1" (skosimp*)
                      (("1" (ground)
                        (("1" (replace -1 * rl)
                          (("1" (assert)
                            (("1" (hide -1)
                              (("1" (typepred "f!2(x1!1)")
                                (("1" (expand "Primes")
                                  (("1" (lemma "prime_gt_1")
                                    (("1" (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma
                                           "bij_inv_is_bij[(Primes),below(card(Primes))]")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -1 -2 -3)
                                                (("1"
                                                  (lift-if)
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (ground)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (lift-if)
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (lift-if)
                                                  (("2" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst + "2")
                                            (("2"
                                              (expand "Primes")
                                              (("2"
                                                (rewrite "prime_2")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (lift-if) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (assert)
                        (("2" (expand "prime_seq") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (lemma "bij_inv_is_bij[(Primes),below(card(Primes))]")
            (("1" (inst?)
              (("1" (assert)
                (("1" (inst?)
                  (("1" (inst + "2")
                    (("1" (expand "Primes")
                      (("1" (rewrite "prime_2") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst + "2")
              (("2" (hide -1 -2 -3)
                (("2" (expand "Primes") (("2" (rewrite "prime_2") nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "Primes") (("3" (skosimp*) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((barray type-eq-decl nil fseqs structures)
    (fseq type-eq-decl nil fseqs structures)
    (product const-decl "posnat" product_fseq_posnat reals)
    (prime_gt_1 formula-decl nil primes ints)
    (divides_plus_1 formula-decl nil divides_lems ints)
    (prime? const-decl "bool" primes ints)
    (product_fseq_ge formula-decl nil product_fseq_posnat reals)
    (prime_2 formula-decl nil primes ints)
    (default const-decl "T" fseqs structures))
   nil)
  (primes_infinite-3 nil 3407858825
   ("" (lemma "bij_exists[nat]")
    (("" (inst?)
      (("" (skosimp*)
        ((""
          (case "(EXISTS (f: [below(card(Primes)) -> (Primes)]): bijective?(f))")
          (("1" (skosimp*)
            (("1" (hide -2)
              (("1"
                (name "prime_seq" "(# length := card(Primes),
             seq := (LAMBDA (ii: nat): IF ii < card(Primes) THEN f!2(ii) ELSE default
                                        ENDIF) #)")
                (("1" (name "M" "product(prime_seq) + 1")
                  (("1" (case "(FORALL (p: (Primes)): NOT divides(p,M))")
                    (("1" (case "prime?(M)")
                      (("1" (expand "bijective?")
                        (("1" (flatten)
                          (("1" (expand "surjective?")
                            (("1" (inst -6 "M")
                              (("1" (skosimp*)
                                (("1" (lemma "product_fseq_ge")
                                  (("1" (inst -1 "prime_seq" "x!1")
                                    (("1" (replace -5 -1 rl)
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (replace -4 + rl)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "Primes") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "prime_divides")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (skosimp*)
                              (("2" (inst?)
                                (("2" (expand "Primes")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (lemma "divides_plus_1")
                        (("2" (inst -1 "M-1" "p!1")
                          (("1" (assert)
                            (("1" (split -1)
                              (("1" (hide -1)
                                (("1" (replace -1 * rl)
                                  (("1" (assert)
                                    (("1" (typepred "p!1")
                                      (("1"
                                        (expand "bijective?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "surjective?")
                                            (("1"
                                              (inst -5 "p!1")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (replace -5 + rl)
                                                  (("1"
                                                    (case-replace
                                                     "f!2(x!1) = seq(prime_seq)(x!1)")
                                                    (("1"
                                                      (lemma
                                                       "divides_product")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "prime_seq"
                                                           "x!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -2 2)
                                                      (("2"
                                                        (replace -2 :dir rl)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (typepred "p!1")
                                (("2" (expand "Primes")
                                  (("2" (lemma "prime_gt_1")
                                    (("2" (lemma "prime_gt_1")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (skosimp*)
                              (("2" (expand "Primes")
                                (("2" (lemma "prime_gt_1")
                                  (("2" (inst?)
                                    (("2" (assert)
                                      (("2"
                                        (typepred "p!1")
                                        (("2"
                                          (expand "Primes")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (prop) (("3" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (prop)
                    (("1" (skosimp*)
                      (("1" (ground)
                        (("1" (replace -1 * rl)
                          (("1" (assert)
                            (("1" (hide -1)
                              (("1" (typepred "f!2(x1!1)")
                                (("1" (expand "Primes")
                                  (("1" (lemma "prime_gt_1")
                                    (("1" (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma
                                           "bij_inv_is_bij[(Primes),below(card(Primes))]")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -1 -2 -3)
                                                (("1"
                                                  (lift-if)
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (ground)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (lift-if)
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (lift-if)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst + "2")
                                            (("2"
                                              (expand "Primes")
                                              (("2"
                                                (rewrite "prime_2")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (lift-if) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (assert)
                        (("2" (expand "prime_seq") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (lemma "bij_inv_is_bij[(Primes),below(card(Primes))]")
            (("1" (inst?)
              (("1" (assert)
                (("1" (inst?)
                  (("1" (inst + "2")
                    (("1" (hide -1 -2 -3)
                      (("1" (expand "Primes")
                        (("1" (rewrite "prime_2") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst + "2")
              (("2" (expand "Primes") (("2" (rewrite "prime_2") nil nil))
                nil))
              nil))
            nil)
           ("3" (skosimp*) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((fseq type-eq-decl nil fseqs structures)
    (prime_gt_1 formula-decl nil primes ints)
    (divides_plus_1 formula-decl nil divides_lems ints)
    (prime? const-decl "bool" primes ints)
    (prime_2 formula-decl nil primes ints)
    (default const-decl "T" fseqs structures))
   nil)
  (primes_infinite-2 nil 3407849397
   ("" (lemma "bij_exists[nat]")
    (("" (inst?)
      (("" (skosimp*)
        ((""
          (case "(EXISTS (f: [below(card(Primes)) -> (Primes)]): bijective?(f))")
          (("1" (skosimp*)
            (("1" (hide -2)
              (("1"
                (name "prime_seq" "(# length := card(Primes),
                                              seq := (LAMBDA (ii: below(card(Primes))): f!2(ii))
                                           #)")
                (("1" (name "M" "product(prime_seq) + 1")
                  (("1" (case "(FORALL (p: (Primes)): NOT divides?(p,M))")
                    (("1" (case "prime?(M)")
                      (("1" (expand "bijective?")
                        (("1" (flatten)
                          (("1" (expand "surjective?")
                            (("1" (inst -6 "M")
                              (("1" (skosimp*)
                                (("1" (lemma "product_ge")
                                  (("1" (inst -1 "prime_seq" "x!1")
                                    (("1" (replace -5 -1 rl)
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (replace -4 + rl)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "Primes") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "prime_divides")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (skosimp*)
                              (("2" (inst?)
                                (("2" (expand "Primes")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (lemma "divides_plus_1")
                        (("2" (inst -1 "M-1" "p!1")
                          (("1" (assert)
                            (("1" (split -1)
                              (("1" (hide -1)
                                (("1" (replace -1 * rl)
                                  (("1" (assert)
                                    (("1" (typepred "p!1")
                                      (("1"
                                        (expand "bijective?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "surjective?")
                                            (("1"
                                              (inst -5 "p!1")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (replace -5 + rl)
                                                  (("1"
                                                    (case-replace
                                                     "f!2(x!1) = seq(prime_seq)(x!1)")
                                                    (("1"
                                                      (lemma
                                                       "divides_product")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "prime_seq"
                                                           "x!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -2 2)
                                                      (("2"
                                                        (replace -2 :dir rl)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (typepred "p!1")
                                (("2" (expand "Primes")
                                  (("2" (lemma "prime_gt_1")
                                    (("2" (lemma "prime_gt_1")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp*)
                      (("3" (expand "Primes")
                        (("3" (lemma "prime_gt_1")
                          (("3" (inst?)
                            (("3" (assert)
                              (("3" (typepred "p!1")
                                (("3" (expand "Primes")
                                  (("3" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (prop)
                    (("1" (skosimp*) (("1" (ground) nil nil)) nil)
                     ("2" (skosimp*)
                      (("2" (assert)
                        (("2" (replace -1 * rl)
                          (("2" (assert)
                            (("2" (hide -1)
                              (("2" (typepred "f!2(x1!1)")
                                (("2" (expand "Primes")
                                  (("2" (lemma "prime_gt_1")
                                    (("2" (inst?) (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (lemma "bij_inv_is_bij[(Primes),below(card(Primes))]")
            (("1" (inst?)
              (("1" (assert)
                (("1" (inst?)
                  (("1" (inst + "2")
                    (("1" (hide -1 -2 -3)
                      (("1" (expand "Primes")
                        (("1" (rewrite "prime_2") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst + "2")
              (("2" (expand "Primes") (("2" (rewrite "prime_2") nil nil))
                nil))
              nil))
            nil)
           ("3" (skosimp*) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((prime_2 formula-decl nil primes ints)
    (prime? const-decl "bool" primes ints)
    (prime_gt_1 formula-decl nil primes ints))
   nil)
  (primes_infinite-1 nil 3306142515
   ("" (lemma "bij_exists[nat]")
    (("" (inst?)
      (("" (skosimp*)
        ((""
          (case "(EXISTS (f: [below(card(Primes)) -> (Primes)]): bijective?(f))")
          (("1" (skosimp*)
            (("1" (hide -2)
              (("1"
                (name "prime_seq" "(# length := card(Primes),
                                     seq := (LAMBDA (ii: below(card(Primes))): f!2(ii))
                                  #)")
                (("1" (name "M" "product(prime_seq) + 1")
                  (("1" (case "(FORALL (p: (Primes)): NOT divides(p,M))")
                    (("1" (case "prime?(M)")
                      (("1" (expand "bijective?")
                        (("1" (flatten)
                          (("1" (expand "surjective?")
                            (("1" (inst -6 "M")
                              (("1" (skosimp*)
                                (("1" (lemma "product_ge")
                                  (("1" (inst -1 "prime_seq" "x!1")
                                    (("1" (replace -5 -1 rl)
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (replace -4 + rl)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "Primes") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "prime_divides")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (skosimp*)
                              (("2" (inst?)
                                (("2" (expand "Primes")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (lemma "divides_plus_1")
                        (("2" (inst -1 "M-1" "p!1")
                          (("1" (assert)
                            (("1" (split -1)
                              (("1" (hide -1)
                                (("1" (replace -1 * rl)
                                  (("1" (assert)
                                    (("1" (typepred "p!1")
                                      (("1"
                                        (expand "bijective?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "surjective?")
                                            (("1"
                                              (inst -5 "p!1")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (replace -5 + rl)
                                                  (("1"
                                                    (case-replace
                                                     "f!2(x!1) = seq(prime_seq)(x!1)")
                                                    (("1"
                                                      (lemma
                                                       "divides_product")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "prime_seq"
                                                           "x!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -2 2)
                                                      (("2"
                                                        (replace -2 :dir rl)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (typepred "p!1")
                                (("2" (expand "Primes")
                                  (("2" (lemma "prime_gt_1")
                                    (("2" (lemma "prime_gt_1")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp*)
                      (("3" (expand "Primes")
                        (("3" (lemma "prime_gt_1")
                          (("3" (inst?)
                            (("3" (assert)
                              (("3" (typepred "p!1")
                                (("3" (expand "Primes")
                                  (("3" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (prop)
                    (("1" (skosimp*) (("1" (ground) nil nil)) nil)
                     ("2" (skosimp*)
                      (("2" (assert)
                        (("2" (replace -1 * rl)
                          (("2" (assert)
                            (("2" (hide -1)
                              (("2" (typepred "f!2(x1!1)")
                                (("2" (expand "Primes")
                                  (("2" (lemma "prime_gt_1")
                                    (("2" (inst?) (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (lemma "bij_inv_is_bij[(Primes),below(card(Primes))]")
            (("1" (inst?)
              (("1" (assert)
                (("1" (inst?)
                  (("1" (inst + "2")
                    (("1" (hide -1 -2 -3)
                      (("1" (expand "Primes")
                        (("1" (rewrite "prime_2") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst + "2")
              (("2" (expand "Primes") (("2" (rewrite "prime_2") nil nil))
                nil))
              nil))
            nil)
           ("3" (skosimp*) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((prime_2 formula-decl nil primes ints)
    (prime? const-decl "bool" primes ints)
    (prime_gt_1 formula-decl nil primes ints))
   nil)))


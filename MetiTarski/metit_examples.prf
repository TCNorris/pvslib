(metit_examples
 (simple 0
  (simple-1 nil 3600858779 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (simple_abs 0
  (simple_abs-1 nil 3600858779
   ("" (skeep :preds? t) (("" (metit (-3 -4 1)) nil nil)) nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (sqrtx3_TCC1 0
  (sqrtx3_TCC1-1 nil 3600858465 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   nil (sqrtx3 subtype "metit_examples.x" "nonneg_real")))
 (sqrtx3 0
  (sqrtx3-1 nil 3600858779 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (tr_35_TCC1 0
  (tr_35_TCC1-1 nil 3600858465
   ("" (skeep) (("" (expand "Tan?") (("" (metit *) nil nil)) nil)) nil)
   ((Tan? const-decl "bool" trig_basic trig)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (tr_35 subtype
    "number_fields./(number_fields.*(metit_examples.phi, pi_def.pi), 180)"
    "(trig_basic.Tan?)")))
 (tr_35 0
  (tr_35-1 nil 3600858779 ("" (metit) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (tr_35_le_TCC1 0
  (tr_35_le_TCC1-1 nil 3600858465
   ("" (expand "Tan?") (("" (metit) nil nil)) nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Tan? const-decl "bool" trig_basic trig))
   nil
   (tr_35_le subtype "number_fields./(number_fields.*(35, pi_def.pi), 180)"
    "(trig_basic.Tan?)")))
 (tr_35_le 0
  (tr_35_le-1 nil 3600858779 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (sqrt23 0
  (sqrt23-1 nil 3600858779 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (sin6sqrt2 0
  (sin6sqrt2-1 nil 3600858779 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (G_TCC1 0
  (G_TCC1-1 nil 3600858465 ("" (subtype-tcc) nil nil) nil nil
   (G subtype "(number_fields.-)(1, metit_examples.x)" "posreal")))
 (A_and_S 0
  (A_and_S-1 nil 3600858779 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (r_TCC1 0
  (r_TCC1-1 nil 3600858465 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (r subtype "3"
    "{i: integers.int | booleans.OR(metit_examples.x /= 0, reals.>=(i, 0))}")))
 (r_TCC2 0
  (r_TCC2-1 nil 3600858465 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (r subtype "5"
    "{i: integers.int | booleans.OR(metit_examples.x /= 0, reals.>=(i, 0))}")))
 (atan_implementation 0
  (atan_implementation-1 nil 3600858779 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (ajn 0
  (ajn-1 nil 3600858779 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (double_quad_simple_min 0
  (double_quad_simple_min-2 "" 3790099872
   ("" (skeep :preds? t)
    (("" (grind) (("" (metit (-2 -4 -11 1)) nil nil)) nil)) nil)
   nil shostak)
  (double_quad_simple_min-1 nil 3664050699
   ("" (then (skeep :preds? t) (grind) (metit (-2 -4 -11 1))) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq const-decl "nonneg_real" sq reals)
    (quad const-decl "real" double_quadratic reals))
   shostak))
 (ex1_ba_TCC1 0
  (ex1_ba_TCC1-1 nil 3600858465 ("" (subtype-tcc) nil nil)
   (([\|\|] const-decl "Interval" interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (/= const-decl "boolean" notequal nil))
   nil
   (ex1_ba subtype "2"
    "{i: integers.int | booleans.OR(metit_examples.x /= 0, reals.>=(i, 0))}")))
 (ex1_ba_TCC2 0
  (ex1_ba_TCC2-1 nil 3600858465 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   nil (ex1_ba subtype "(number_fields.+)(1, metit_examples.x)" "posreal")))
 (ex1_ba 0
  (ex1_ba-1 nil 3600858779 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (ex2_ba_TCC1 0
  (ex2_ba_TCC1-1 nil 3600858465 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   nil (ex2_ba subtype "(number_fields.-)(1, metit_examples.x)" "posreal")))
 (ex2_ba 0
  (ex2_ba-1 nil 3600858779 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (ex3_ba_TCC1 0
  (ex3_ba_TCC1-1 nil 3600858465 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   nil (ex3_ba subtype "(number_fields.-)(1, metit_examples.x)" "posreal")))
 (ex3_ba 0
  (ex3_ba-1 nil 3600858779 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (ex4_ba 0
  (ex4_ba-1 nil 3600858779 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (ex5_ba_TCC1 0
  (ex5_ba_TCC1-1 nil 3600858465 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil (ex5_ba subtype "(number_fields.+)(1, metit_examples.x)" "posreal")))
 (ex5_ba 0
  (ex5_ba-1 nil 3600858779 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (ex6_ba 0
  (ex6_ba-1 nil 3600858779 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (ex7_ba 0
  (ex7_ba-1 nil 3600858779 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (quadratic 0
  (quadratic-1 nil 3600858510 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (Tunnel_3_IL 0
  (Tunnel_3_IL-1 nil 3600858779 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (Tunnel_3_IL_LU 0
  (Tunnel_3_IL_LU-1 nil 3600858779 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (Ayad_Marche 0
  (Ayad_Marche-1 nil 3600858545 ("" (metit) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)))


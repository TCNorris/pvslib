(continuous_functions_aux
 (continuous_lr_def 0
  (continuous_lr_def-2 nil 3462103233
   ("" (skosimp)
    (("" (expand "right_continuous?")
      (("" (expand "left_continuous?")
        (("" (expand "right_continuous?")
          (("" (expand "left_continuous?")
            ((""
              (case-replace
               "continuous?(f!1) IFF forall x0: FORALL epsilon : EXISTS delta : FORALL x :
                  abs(x - x0) < delta IMPLIES abs(f!1(x) - f!1(x0)) < epsilon")
              (("1" (hide -1)
                (("1" (split)
                  (("1" (skosimp*)
                    (("1" (split 1)
                      (("1" (skosimp*)
                        (("1" (inst - "x0!1" "epsilon!1")
                          (("1" (skosimp)
                            (("1" (inst + "delta!1")
                              (("1" (skosimp)
                                (("1" (inst - "x!1")
                                  (("1" (expand "abs" -3 1)
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (inst - "x0!1" "epsilon!1")
                          (("2" (skosimp)
                            (("2" (inst + "delta!1")
                              (("2" (skosimp)
                                (("2" (inst - "x!1")
                                  (("2" (expand "abs" -3 1)
                                    (("2" (expand "<=" -1)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (split -3)
                                          (("1" (propax) nil nil)
                                           ("2" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (split -3)
                                          (("1" (propax) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (inst - "x0!1")
                      (("2" (inst - "epsilon!1")
                        (("2" (inst - "x0!1")
                          (("2" (inst - "epsilon!1")
                            (("2" (skosimp*)
                              (("2" (inst + "min(delta!1,delta!2)")
                                (("2" (skosimp*)
                                  (("2" (expand "abs" -3)
                                    (("2" (case-replace "x!1-x0!1<0")
                                      (("1"
                                        (inst -3 "x!1")
                                        (("1"
                                          (split -3)
                                          (("1" (propax) nil nil)
                                           ("2" (assert) nil nil)
                                           ("3"
                                            (expand "min")
                                            (("3"
                                              (case-replace
                                               "delta!1 > delta!2")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide -2)
                                          (("2"
                                            (inst - "x!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "continuous?")
                  (("2" (split)
                    (("1" (skosimp*)
                      (("1" (inst - "x0!1")
                        (("1" (expand "continuous?")
                          (("1" (inst - "epsilon!1") nil nil)) nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (expand "continuous?")
                        (("2" (inst - "x0!1") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((right_continuous? const-decl "bool" continuous_functions_aux nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (right_continuous? const-decl "bool" continuous_functions_aux nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" continuous_functions_aux nil)
    (T formal-subtype-decl nil continuous_functions_aux nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (<= const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (left_continuous? const-decl "bool" continuous_functions_aux nil)
    (left_continuous? const-decl "bool" continuous_functions_aux nil))
   nil)
  (continuous_lr_def-1 nil 3322045491
   ("" (skosimp)
    (("" (expand "right_continuous")
      (("" (expand "left_continuous")
        (("" (expand "right_continuous")
          (("" (expand "left_continuous")
            ((""
              (case-replace
               "continuous?(f!1) IFF forall x0: FORALL epsilon : EXISTS delta : FORALL x :
                abs(x - x0) < delta IMPLIES abs(f!1(x) - f!1(x0)) < epsilon")
              (("1" (hide -1)
                (("1" (split)
                  (("1" (skosimp*)
                    (("1" (split 1)
                      (("1" (skosimp*)
                        (("1" (inst - "x0!1" "epsilon!1")
                          (("1" (skosimp)
                            (("1" (inst + "delta!1")
                              (("1" (skosimp)
                                (("1" (inst - "x!1")
                                  (("1" (expand "abs" -3 1)
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (inst - "x0!1" "epsilon!1")
                          (("2" (skosimp)
                            (("2" (inst + "delta!1")
                              (("2" (skosimp)
                                (("2" (inst - "x!1")
                                  (("2" (expand "abs" -3 1)
                                    (("2" (expand "<=" -1)
                                      (("2"
                                        (split -1)
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (inst - "x0!1")
                      (("2" (inst - "epsilon!1")
                        (("2" (inst - "x0!1")
                          (("2" (inst - "epsilon!1")
                            (("2" (skosimp*)
                              (("2" (inst + "min(delta!1,delta!2)")
                                (("2" (skosimp*)
                                  (("2" (expand "abs" -3)
                                    (("2" (case-replace "x!1-x0!1<0")
                                      (("1"
                                        (inst -3 "x!1")
                                        (("1"
                                          (split -3)
                                          (("1" (propax) nil nil)
                                           ("2" (assert) nil nil)
                                           ("3"
                                            (expand "min")
                                            (("3"
                                              (case-replace
                                               "delta!1 > delta!2")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide -2)
                                          (("2"
                                            (inst - "x!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "continuous?")
                  (("2" (split)
                    (("1" (skosimp*)
                      (("1" (inst - "x0!1")
                        (("1" (rewrite "continuity_def")
                          (("1" (inst - "epsilon!1") nil nil)) nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (rewrite "continuity_def")
                        (("2" (inst - "x0!1") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuity_def formula-decl nil continuous_functions analysis)) shostak)))


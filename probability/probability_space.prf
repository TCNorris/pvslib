(probability_space
 (zero_TCC1 0
  (zero_TCC1-1 nil 3424623523
   ("" (lemma "constant_is_measurable")
    (("" (inst - "(LAMBDA t: 0)")
      (("" (expand "constant?")
        (("" (expand "const_fun") (("" (assert) (("" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (constant? const-decl "bool" const_fun_def structures)
    (const_fun const-decl "[S -> T]" const_fun_def structures)
    (constant_is_measurable judgement-tcc nil measure_space_def
     measure_integration)
    (T formal-nonempty-type-decl nil probability_space nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil))
   nil (zero subtype "(LAMBDA t: 0)" "random_variable[T, S]")))
 (one_TCC1 0
  (one_TCC1-1 nil 3424623523
   ("" (lemma "constant_is_measurable")
    (("" (inst - "(LAMBDA t: 1)")
      (("" (expand "constant?")
        (("" (expand "const_fun") (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (constant? const-decl "bool" const_fun_def structures)
    (const_fun const-decl "[S -> T]" const_fun_def structures)
    (constant_is_measurable judgement-tcc nil measure_space_def
     measure_integration)
    (T formal-nonempty-type-decl nil probability_space nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil))
   nil (one subtype "(LAMBDA t: 1)" "random_variable[T, S]")))
 (lesseqp_TCC1 0
  (lesseqp_TCC1-1 nil 3314025598
   ("" (skosimp)
    (("" (typepred "X!1")
      (("" (lemma "measurable_le" ("f" "X!1"))
        (("" (assert) (("" (inst - "x!1") nil nil)) nil)) nil))
      nil))
    nil)
   ((random_variable nonempty-type-eq-decl nil probability_measure nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (measurable_le formula-decl nil measure_space_def measure_integration))
   shostak
   (lesseqp subtype
    "{t | reals.<=(probability_space.X(probability_space.t), probability_space.x)}"
    "(probability_space.S)")))
 (lessp_TCC1 0
  (lessp_TCC1-1 nil 3314191251
   ("" (skosimp)
    (("" (typepred "X!1")
      (("" (lemma "measurable_gt" ("f" "X!1"))
        (("" (assert) (("" (inst - "x!1") nil nil)) nil)) nil))
      nil))
    nil)
   ((random_variable nonempty-type-eq-decl nil probability_measure nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (measurable_gt formula-decl nil measure_space_def measure_integration))
   shostak
   (lessp subtype
    "{t | reals.>(probability_space.X(probability_space.t), probability_space.x)}"
    "(probability_space.S)")))
 (equal_TCC1 0
  (equal_TCC1-1 nil 3314190689
   ("" (skosimp)
    (("" (typepred "X!1")
      (("" (lemma "measurable_ge" ("f" "X!1"))
        (("" (lemma "measurable_le" ("f" "X!1"))
          (("" (assert)
            (("" (inst - "x!1")
              (("" (inst - "x!1")
                ((""
                  (lemma "measurable_intersection"
                   ("a" "{z: T | X!1(z) <= x!1}" "b"
                    "{z: T | X!1(z) >= x!1}"))
                  (("1"
                    (case-replace "(intersection[T]
                          ({z: T | X!1(z) <= x!1}, {z: T | X!1(z) >= x!1}))={t | X!1(t) = x!1}")
                    (("1" (expand "measurable_set?") (("1" (propax) nil nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (apply-extensionality :hide? t)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand "measurable_set?") (("2" (propax) nil nil))
                    nil)
                   ("3" (expand "measurable_set?") (("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((random_variable nonempty-type-eq-decl nil probability_measure nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (measurable_le formula-decl nil measure_space_def measure_integration)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def
     measure_integration)
    (measurable_set? const-decl "bool" measure_space_def measure_integration)
    (set type-eq-decl nil sets nil)
    (measurable_intersection judgement-tcc nil measure_space_def
     measure_integration)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (intersection const-decl "set" sets nil)
    (measurable_ge formula-decl nil measure_space_def measure_integration))
   shostak
   (equal subtype
          "{t | probability_space.X(probability_space.t) = probability_space.x}"
          "(probability_space.S)")))
 (lessp_TCC2 0
  (lessp_TCC2-1 nil 3314191439
   ("" (skosimp)
    (("" (typepred "X!1")
      (("" (lemma "measurable_lt" ("f" "X!1"))
        (("" (assert) (("" (inst - "x!1") nil nil)) nil)) nil))
      nil))
    nil)
   ((random_variable nonempty-type-eq-decl nil probability_measure nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (measurable_lt formula-decl nil measure_space_def measure_integration))
   shostak
   (lessp subtype
    "{t | reals.<(probability_space.X(probability_space.t), probability_space.x)}"
    "(probability_space.S)")))
 (lesseqp_TCC2 0
  (lesseqp_TCC2-1 nil 3314190689
   ("" (skosimp)
    (("" (typepred "X!1")
      (("" (lemma "measurable_ge" ("f" "X!1"))
        (("" (assert) (("" (inst - "x!1") nil nil)) nil)) nil))
      nil))
    nil)
   ((random_variable nonempty-type-eq-decl nil probability_measure nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (measurable_ge formula-decl nil measure_space_def measure_integration))
   shostak
   (lesseqp subtype
    "{t | reals.>=(probability_space.X(probability_space.t), probability_space.x)}"
    "(probability_space.S)")))
 (notequal_TCC1 0
  (notequal_TCC1-1 nil 3314191820
   ("" (skosimp)
    (("" (typepred "X!1")
      (("" (lemma "measurable_gt" ("f" "X!1"))
        (("" (lemma "measurable_lt" ("f" "X!1"))
          (("" (assert)
            (("" (inst - "x!1")
              (("" (inst - "x!1")
                ((""
                  (lemma "measurable_union"
                   ("a" "{z: T | X!1(z) < x!1}" "b" "{z: T | X!1(z) > x!1}"))
                  (("1"
                    (case-replace "(union[T]
                          ({z: T | X!1(z) < x!1}, {z: T | X!1(z) > x!1}))={t | X!1(t) /= x!1}")
                    (("1" (expand "measurable_set?") (("1" (propax) nil nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (apply-extensionality :hide? t)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand "measurable_set?") (("2" (propax) nil nil))
                    nil)
                   ("3" (expand "measurable_set?") (("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((random_variable nonempty-type-eq-decl nil probability_measure nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (measurable_lt formula-decl nil measure_space_def measure_integration)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def
     measure_integration)
    (measurable_set? const-decl "bool" measure_space_def measure_integration)
    (set type-eq-decl nil sets nil)
    (measurable_union judgement-tcc nil measure_space_def measure_integration)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (union const-decl "set" sets nil) (/= const-decl "boolean" notequal nil)
    (measurable_gt formula-decl nil measure_space_def measure_integration))
   shostak
   (notequal subtype
    "{t | probability_space.X(probability_space.t) /= probability_space.x}"
    "(probability_space.S)")))
 (complement_le1 0
  (complement_le1-1 nil 3321716438
   ("" (skosimp)
    (("" (expand "<=")
      (("" (expand "<")
        (("" (expand "complement")
          (("" (expand "member")
            (("" (apply-extensionality 1 :hide? t) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "(S)" probability_space nil)
    (complement const-decl "set" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (> const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (member const-decl "bool" sets nil)
    (< const-decl "(S)" probability_space nil))
   shostak))
 (complement_lt1 0
  (complement_lt1-1 nil 3321716510
   ("" (skosimp)
    (("" (expand "<=")
      (("" (expand "<")
        (("" (expand "complement")
          (("" (expand "member")
            (("" (apply-extensionality :hide? t) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "(S)" probability_space nil)
    (complement const-decl "set" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (<= const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (member const-decl "bool" sets nil)
    (< const-decl "(S)" probability_space nil))
   shostak))
 (complement_eq 0
  (complement_eq-1 nil 3321716535
   ("" (skosimp)
    (("" (expand "=")
      (("" (expand "/=")
        (("" (expand "complement")
          (("" (expand "member")
            (("" (apply-extensionality :hide? t) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "(S)" probability_space nil)
    (complement const-decl "set" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "(S)" probability_space nil))
   shostak))
 (complement_lt2 0
  (complement_lt2-1 nil 3321716558
   ("" (skosimp)
    (("" (expand "<")
      (("" (expand "<=")
        (("" (expand "complement")
          (("" (expand "member")
            (("" (apply-extensionality :hide? t) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "(S)" probability_space nil)
    (complement const-decl "set" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (>= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (member const-decl "bool" sets nil)
    (<= const-decl "(S)" probability_space nil))
   shostak))
 (complement_le2 0
  (complement_le2-2 "" 3790341543
   ("" (skosimp)
    (("" (expand "<=")
      (("" (expand "<")
        (("" (expand "complement")
          (("" (apply-extensionality :hide? t) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)
  (complement_le2-1 nil 3321716586
   ("" (skosimp)
    (("" (expand "<=")
      (("" (expand "<")
        (("" (expand "complement")
          (("" (apply-extensionality :hide? t)
            (("" (expand "member") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "(S)" probability_space nil)
    (complement const-decl "set" sets nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (< const-decl "bool" reals nil)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "(S)" probability_space nil))
   shostak))
 (complement_ne 0
  (complement_ne-1 nil 3321716617
   ("" (skosimp)
    (("" (expand "=")
      (("" (expand "/=")
        (("" (expand "complement")
          (("" (expand "member")
            (("" (apply-extensionality :hide? t) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "(S)" probability_space nil)
    (complement const-decl "set" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "(S)" probability_space nil))
   shostak))
 (plus_TCC1 0
  (plus_TCC1-1 nil 3322049026
   ("" (skosimp)
    (("" (lemma "sum_measurable" ("g1" "X!1" "g2" "lambda (t:T): x!1"))
      (("1" (expand "+") (("1" (propax) nil nil)) nil)
       ("2" (lemma "constant_is_measurable")
        (("2" (inst - "(LAMBDA (t: T): x!1)")
          (("2" (expand "constant?")
            (("2" (expand "const_fun") (("2" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     measure_integration)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (sum_measurable judgement-tcc nil measure_space_def measure_integration)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (constant? const-decl "bool" const_fun_def structures)
    (x!1 skolem-const-decl "real" probability_space nil)
    (const_fun const-decl "[S -> T]" const_fun_def structures)
    (constant_is_measurable judgement-tcc nil measure_space_def
     measure_integration))
   shostak
   (plus subtype
    "(LAMBDA t: (number_fields.+)(probability_space.X(probability_space.t), probability_space.x))"
    "random_variable[T, S]")))
 (plus_TCC2 0
  (plus_TCC2-1 nil 3351240565
   ("" (skosimp)
    (("" (lemma "sum_measurable" ("g1" "lambda (t:T): x!1" "g2" "X!1"))
      (("1" (expand "+") (("1" (assert) nil nil)) nil)
       ("2" (lemma "constant_is_measurable")
        (("2" (inst - "(LAMBDA (t: T): x!1)")
          (("2" (expand "constant?")
            (("2" (expand "const_fun") (("2" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     measure_integration)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (sum_measurable judgement-tcc nil measure_space_def measure_integration)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (constant? const-decl "bool" const_fun_def structures)
    (x!1 skolem-const-decl "real" probability_space nil)
    (const_fun const-decl "[S -> T]" const_fun_def structures)
    (constant_is_measurable judgement-tcc nil measure_space_def
     measure_integration))
   nil
   (plus subtype
    "(LAMBDA t: (number_fields.+)(probability_space.x, probability_space.X(probability_space.t)))"
    "random_variable[T, S]")))
 (difference_TCC1 0
  (difference_TCC1-1 nil 3351275929
   ("" (skosimp)
    (("" (lemma "constant_is_measurable")
      (("" (inst - "lambda t: x!1")
        (("1" (lemma "diff_measurable" ("g1" "X!1" "g2" "LAMBDA t: x!1"))
          (("1" (expand "-" -1) (("1" (propax) nil nil)) nil)
           ("2" (propax) nil nil))
          nil)
         ("2" (expand "constant?")
          (("2" (expand "const_fun") (("2" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (constant_is_measurable judgement-tcc nil measure_space_def
     measure_integration)
    (const_fun const-decl "[S -> T]" const_fun_def structures)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     measure_integration)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (diff_measurable judgement-tcc nil measure_space_def measure_integration)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (constant? const-decl "bool" const_fun_def structures)
    (x!1 skolem-const-decl "real" probability_space nil))
   nil
   (difference subtype
    "(LAMBDA t: (number_fields.-)(probability_space.X(probability_space.t), probability_space.x))"
    "random_variable[T, S]")))
 (difference_TCC2 0
  (difference_TCC2-1 nil 3351920614
   ("" (skosimp)
    (("" (lemma "constant_is_measurable")
      (("" (inst - "lambda t: x!1")
        (("1" (lemma "diff_measurable" ("g2" "X!1" "g1" "LAMBDA t: x!1"))
          (("1" (expand "-" -1) (("1" (propax) nil nil)) nil)
           ("2" (propax) nil nil))
          nil)
         ("2" (expand "constant?")
          (("2" (expand "const_fun") (("2" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (constant_is_measurable judgement-tcc nil measure_space_def
     measure_integration)
    (const_fun const-decl "[S -> T]" const_fun_def structures)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     measure_integration)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (diff_measurable judgement-tcc nil measure_space_def measure_integration)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (constant? const-decl "bool" const_fun_def structures)
    (x!1 skolem-const-decl "real" probability_space nil))
   nil
   (difference subtype
    "(LAMBDA t: (number_fields.-)(probability_space.x, probability_space.X(probability_space.t)))"
    "random_variable[T, S]")))
 (divide_TCC1 0
  (divide_TCC1-1 nil 3351920614
   ("" (skosimp)
    (("" (lemma "scal_measurable" ("c" "1/n0z!1" "g" "X!1"))
      (("" (expand "*") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     measure_integration)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (scal_measurable judgement-tcc nil measure_space_def measure_integration)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[T -> real]" real_fun_ops reals))
   nil
   (divide subtype
    "(LAMBDA t: number_fields./(probability_space.X(probability_space.t), probability_space.n0z))"
    "random_variable[T, S]")))
 (independent?_TCC1 0
  (independent?_TCC1-1 nil 3509255376 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     metric_space)
    (borel? const-decl "sigma_algebra" borel measure_integration)
    (borel nonempty-type-eq-decl nil borel measure_integration)
    (Intersection const-decl "set" sets nil)
    (generated_sigma_algebra const-decl "sigma_algebra" subset_algebra_def
     measure_integration)
    (open? const-decl "bool" topology topology)
    (metric_open? const-decl "bool" metric_space_def metric_space)
    (subset? const-decl "bool" sets nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (sigma_algebra_union? const-decl "bool" subset_algebra_def
     measure_integration)
    (is_countable const-decl "bool" countability sets_aux)
    (subset_algebra_complement? const-decl "bool" subset_algebra_def
     measure_integration)
    (subset_algebra_empty? const-decl "bool" subset_algebra_def
     measure_integration)
    (member const-decl "bool" sets nil)
    (measurable_set? const-decl "bool" measure_space_def measure_integration)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (Intersection_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas_aux
     measure_integration)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" step_fun_props analysis)
    (finite_emptyset name-judgement "finite_set[real]" integral_def analysis)
    (emptyset_is_compact name-judgement
     "compact[real, (metric_induced_topology)]" convergence_aux metric_space)
    (emptyset_is_clopen name-judgement
     "clopen[real, (metric_induced_topology)]" convergence_aux metric_space)
    (subset_algebra_emptyset name-judgement "(borel?)" real_borel
     measure_integration)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (independent? subtype
    "function_image[probability_space.T, real].inverse_image(probability_space.X, probability_space.B1)"
    "(probability_space.S)")))
 (borel_independence 0
  (borel_independence-1 nil 3509204782
   ("" (skosimp)
    (("" (typepred "X!1")
      (("" (typepred "Y!1")
        (("" (typepred "g!1")
          (("" (typepred "h!1")
            (("" (expand "independent?")
              (("" (skosimp)
                (("" (expand "borel_function?")
                  (("" (expand "measurable_function?")
                    (("" (inst -3 "B2!1")
                      (("" (inst -4 "B1!1")
                        (("" (inst -1 "B2!1")
                          (("" (inst -2 "B1!1")
                            ((""
                              (inst -5 "inverse_image(g!1, B1!1)"
                               "inverse_image(h!1, B2!1)")
                              ((""
                                (case-replace
                                 "inverse_image(X!1, inverse_image(g!1, B1!1))=inverse_image(g!1 o X!1, B1!1)")
                                (("1"
                                  (case-replace
                                   "inverse_image(Y!1, inverse_image(h!1, B2!1))=inverse_image(h!1 o Y!1, B2!1)")
                                  (("1" (hide-all-but 1)
                                    (("1" (apply-extensionality :hide? t)
                                      (("1"
                                        (expand "inverse_image")
                                        (("1"
                                          (expand "o ")
                                          (("1"
                                            (expand "member")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (apply-extensionality :hide? t)
                                    (("2" (expand "o ")
                                      (("2"
                                        (expand "inverse_image")
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((random_variable nonempty-type-eq-decl nil probability_measure nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (borel_function type-eq-decl nil borel_functions measure_integration)
    (borel_function? const-decl "bool" borel_functions measure_integration)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     metric_space)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (independent? const-decl "bool" probability_space nil)
    (borel nonempty-type-eq-decl nil borel measure_integration)
    (borel? const-decl "sigma_algebra" borel measure_integration)
    (set type-eq-decl nil sets nil)
    (inverse_image const-decl "set[D]" function_image nil)
    (g!1 skolem-const-decl
     "borel_function[real, metric_induced_topology, real, metric_induced_topology]"
     probability_space nil)
    (B1!1 skolem-const-decl "borel[real, metric_induced_topology]"
     probability_space nil)
    (h!1 skolem-const-decl
     "borel_function[real, metric_induced_topology, real, metric_induced_topology]"
     probability_space nil)
    (B2!1 skolem-const-decl "borel[real, metric_induced_topology]"
     probability_space nil)
    (member const-decl "bool" sets nil)
    (borel_comp_measurable_is_measurable application-judgement
     "measurable_function[T, S]" probability_space nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (O const-decl "T3" function_props nil))
   shostak))
 (partial_sum_is_random_variable 0
  (partial_sum_is_random_variable-1 nil 3352017383
   ("" (induct "n1")
    (("1" (expand "sigma")
      (("1" (skosimp)
        (("1" (typepred "XS!1(0)")
          (("1" (expand "random_variable?")
            (("1" (expand "sigma")
              (("1" (case-replace "(LAMBDA t: XS!1(0)(t))=XS!1(0)")
                (("1" (apply-extensionality :hide? t) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst - "XS!1")
        (("2" (expand "sigma" 1)
          (("2" (typepred "XS!1(1 + j!1)")
            (("2" (expand "random_variable?")
              (("2"
                (lemma "sum_measurable"
                 ("g1" "XS!1(1 + j!1)" "g2" "LAMBDA t:
                              sigma(0, j!1, LAMBDA n: XS!1(n)(t))"))
                (("1" (expand "+") (("1" (propax) nil nil)) nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[T -> real]" real_fun_ops reals)
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     measure_integration)
    (sum_measurable judgement-tcc nil measure_space_def measure_integration)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals) (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (random_variable? const-decl "bool" probability_measure nil)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (distribution_function_TCC1 0
  (distribution_function_TCC1-1 nil 3321775180
   ("" (expand "distribution_function?")
    (("" (inst + "lambda (t:T): 0")
      (("1" (skosimp)
        (("1" (expand "<=")
          (("1" (case-replace "0 <= x!1")
            (("1" (lemma "P_fullset" ("P" "P"))
              (("1" (expand "fullset") (("1" (assert) nil nil)) nil)) nil)
             ("2" (lemma "P_emptyset" ("P" "P"))
              (("2" (expand "emptyset") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (lemma "constant_is_measurable")
        (("2" (inst - "LAMBDA (t: T): 0")
          (("2" (expand "constant?")
            (("2" (expand "const_fun") (("2" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (<= const-decl "(S)" probability_space nil)
    (P_emptyset formula-decl nil probability_measure nil)
    (emptyset const-decl "set" sets nil)
    (P formal-const-decl "probability_measure" probability_space nil)
    (probability_measure nonempty-type-eq-decl nil probability_measure nil)
    (probability_measure? const-decl "bool" probability_measure nil)
    (probability nonempty-type-eq-decl nil probability_measure nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (P_fullset formula-decl nil probability_measure nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (fullset const-decl "set" sets nil) (<= const-decl "bool" reals nil)
    (constant? const-decl "bool" const_fun_def structures)
    (const_fun const-decl "[S -> T]" const_fun_def structures)
    (constant_is_measurable judgement-tcc nil measure_space_def
     measure_integration)
    (distribution_function? const-decl "bool" probability_space nil))
   shostak
   (distribution_function subtype
    "(LAMBDA x: IF reals.<(probability_space.x, 0) THEN 0 ELSE 1 ENDIF)"
    "distribution_function")))
 (invert_distribution 0
  (invert_distribution-1 nil 3352018678
   ("" (skosimp)
    (("" (expand "<")
      (("" (expand "distribution_function")
        (("" (expand "<=")
          (("" (lemma "P_complement" ("A" "{t | X!1(t) > x!1}"))
            (("1" (inst - "P")
              (("1" (expand ">")
                (("1" (lemma "complement_lt1" ("x" "x!1" "X" "X!1"))
                  (("1" (expand "<" -1)
                    (("1" (expand ">" -1)
                      (("1" (replace -1 -2)
                        (("1" (expand "<=" -2) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (typepred "x!1<X!1")
                (("2" (expand "<") (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "(S)" probability_space nil)
    (<= const-decl "(S)" probability_space nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (probability nonempty-type-eq-decl nil probability_measure nil)
    (probability_measure? const-decl "bool" probability_measure nil)
    (probability_measure nonempty-type-eq-decl nil probability_measure nil)
    (P formal-const-decl "probability_measure" probability_space nil)
    (complement_lt1 formula-decl nil probability_space nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (P_complement formula-decl nil probability_measure nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (distribution_function const-decl "probability" probability_space nil))
   shostak))
 (interval_distribution 0
  (interval_distribution-1 nil 3352019023
   ("" (skosimp*)
    (("" (assert)
      (("" (expand "distribution_function")
        (("" (skosimp)
          (("" (lemma "P_intersection" ("A" "x!1 < X!1" "B" "X!1 <= y!1"))
            (("" (inst - "P")
              (("" (replace -1 1)
                (("" (hide -1)
                  (("" (assert)
                    ((""
                      (case-replace
                       "union(x!1 < X!1, X!1 <= y!1) = fullset[T]")
                      (("1" (hide -1)
                        (("1" (lemma "P_fullset")
                          (("1" (inst - "P")
                            (("1" (replace -1)
                              (("1" (lemma "P_complement" ("A" "x!1 < X!1"))
                                (("1" (inst - "P")
                                  (("1" (rewrite "complement_lt1" -1)
                                    (("1" (replace -1)
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (apply-extensionality 1 :hide? t)
                          (("2" (expand "fullset")
                            (("2" (expand "union")
                              (("2" (expand "member")
                                (("2" (expand "<")
                                  (("2" (expand "<=" 1)
                                    (("2" (expand ">" 1)
                                      (("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (subset_algebra_intersection application-judgement "(S)" probability_space
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (P formal-const-decl "probability_measure" probability_space nil)
    (probability_measure nonempty-type-eq-decl nil probability_measure nil)
    (probability_measure? const-decl "bool" probability_measure nil)
    (probability nonempty-type-eq-decl nil probability_measure nil)
    (<= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (fullset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (P_fullset formula-decl nil probability_measure nil)
    (subset_algebra_fullset name-judgement "(S)" probability_space nil)
    (measurable_fullset name-judgement "measurable_set[T, S]"
     probability_space nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (complement_lt1 formula-decl nil probability_space nil)
    (P_complement formula-decl nil probability_measure nil)
    (> const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (subset_algebra_union application-judgement "(S)" probability_space nil)
    (P_intersection formula-decl nil probability_measure nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (< const-decl "(S)" probability_space nil)
    (<= const-decl "(S)" probability_space nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (distribution_function const-decl "probability" probability_space nil))
   shostak))
 (limit_distribution_TCC1 0
  (limit_distribution_TCC1-1 nil 3425001876
   ("" (skosimp)
    (("" (expand "distribution_function")
      (("" (replace -1)
        (("" (assert)
          (("" (hide -1)
            (("" (lemma "m_increasing_convergence")
              (("" (inst - "lambda (n:nat): X!1 <= x!1 - 1 / (1 + n)")
                (("1" (split -1)
                  (("1" (expand "x_converges?")
                    (("1" (expand "to_measure")
                      (("1" (expand "o") (("1" (propax) nil nil)) nil)) nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "increasing?")
                      (("2" (skosimp)
                        (("2" (expand "subset?")
                          (("2" (expand "<=" 1)
                            (("2" (expand "member")
                              (("2" (skosimp)
                                (("2"
                                  (lemma "both_sides_div_pos_le2"
                                   ("py" "x!2+1" "px" "y!1+1" "pz" "1"))
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skosimp)
                    (("2" (expand "measurable_set?") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((distribution_function const-decl "probability" probability_space nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (P formal-const-decl "probability_measure" probability_space nil)
    (probability_measure nonempty-type-eq-decl nil probability_measure nil)
    (probability_measure? const-decl "bool" probability_measure nil)
    (probability nonempty-type-eq-decl nil probability_measure nil)
    (<= const-decl "bool" reals nil)
    (to_measure const-decl "measure_type" generalized_measure_def
     measure_integration)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (finite_measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (m_increasing_convergence formula-decl nil measure_props
     measure_integration)
    (O const-decl "T3" function_props nil)
    (x_converges? const-decl "bool" extended_nnreal extended_nnreal)
    (increasing? const-decl "bool" fun_preds_partial structures)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (both_sides_div_pos_le2 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sequence type-eq-decl nil sequences nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def
     measure_integration)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (measurable_set? const-decl "bool" measure_space_def measure_integration)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (<= const-decl "(S)" probability_space nil)
    (X!1 skolem-const-decl "random_variable[T, S]" probability_space nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "real" probability_space nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil))
   nil
   (limit_distribution subtype
    "LAMBDA n: probability_space.F((number_fields.-)(probability_space.x, number_fields./(1, ((number_fields.+)(probability_space.n, 1)))))"
    "(convergence_sequences.convergent?)")))
 (limit_distribution 0
  (limit_distribution-1 nil 3425001894
   ("" (skosimp*)
    (("" (assert)
      (("" (expand "distribution_function")
        (("" (case-replace "P(X!1 <= x!1)=P(X!1 = x!1)+P(X!1 < x!1)")
          (("1" (hide -1)
            (("1" (assert)
              (("1" (lemma "P_IUnion")
                (("1" (inst - "P" "LAMBDA (n:nat): X!1 <= x!1 - 1 / (1 + n)")
                  (("1" (split -1)
                    (("1"
                      (case-replace
                       "IUnion(LAMBDA (n: nat): X!1 <= x!1 - 1 / (1 + n))=X!1<x!1")
                      (("1" (hide -1)
                        (("1" (expand "o" -1)
                          (("1"
                            (rewrite "convergence_sequences.limit_def" - :dir
                             rl)
                            (("1" (expand "convergent?")
                              (("1" (inst + "P(X!1<x!1)") nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (apply-extensionality :hide? t)
                          (("2" (expand "<" 1)
                            (("2" (expand "IUnion")
                              (("2" (case-replace "X!1(x!2) < x!1")
                                (("1" (expand "<=" +)
                                  (("1"
                                    (lemma "archimedean"
                                     ("px" "x!1-X!1(x!2)"))
                                    (("1" (skosimp)
                                      (("1"
                                        (inst + "n!1-1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (skosimp)
                                    (("2" (expand "<=" -1)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand "increasing?")
                        (("2" (skolem + ("i!1" "j!1"))
                          (("2" (flatten)
                            (("2" (expand "subset?")
                              (("2" (expand "member")
                                (("2" (skosimp)
                                  (("2" (expand "<=" (-2 1))
                                    (("2" (assert)
                                      (("2"
                                        (lemma "both_sides_div_pos_le2")
                                        (("2"
                                          (inst - "1+j!1" "1+i!1" "1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2"
              (lemma "P_disjointunion"
               ("A" "X!1 = x!1" "B" "X!1 < x!1" "P" "P"))
              (("2" (case-replace "union(X!1 = x!1, X!1 < x!1)=X!1 <= x!1")
                (("1" (split)
                  (("1" (propax) nil nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "=")
                      (("2" (expand "<")
                        (("2" (expand "disjoint?")
                          (("2" (expand "intersection")
                            (("2" (expand "empty?")
                              (("2" (expand "member")
                                (("2" (skosimp) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (expand "<=")
                    (("2" (expand "<")
                      (("2" (expand "=")
                        (("2" (expand "union")
                          (("2" (expand "member")
                            (("2" (apply-extensionality :hide? t)
                              (("2" (expand "<=") (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (probability nonempty-type-eq-decl nil probability_measure nil)
    (probability_measure? const-decl "bool" probability_measure nil)
    (probability_measure nonempty-type-eq-decl nil probability_measure nil)
    (P formal-const-decl "probability_measure" probability_space nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (<= const-decl "(S)" probability_space nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "(S)" probability_space nil)
    (< const-decl "(S)" probability_space nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (subset? const-decl "bool" sets nil)
    (both_sides_div_pos_le2 formula-decl nil real_props nil)
    (member const-decl "bool" sets nil)
    (increasing? const-decl "bool" fun_preds_partial structures)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (set type-eq-decl nil sets nil)
    (sigma_algebra_IUnion_rew application-judgement "(S)" probability_space
     nil)
    (O const-decl "T3" function_props nil)
    (limit_def formula-decl nil convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (archimedean formula-decl nil real_props nil)
    (< const-decl "bool" reals nil)
    (P_IUnion formula-decl nil probability_measure nil)
    (P_disjointunion formula-decl nil probability_measure nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (disjoint? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (subset_algebra_union application-judgement "(S)" probability_space nil)
    (union const-decl "set" sets nil)
    (distribution_function const-decl "probability" probability_space nil))
   shostak))
 (distribution_0 0
  (distribution_0-1 nil 3314699486
   ("" (skosimp)
    (("" (typepred "F!1")
      (("" (expand "distribution_function?")
        (("" (skosimp)
          (("" (expand "<=")
            (("" (name "BB" "lambda (n:nat): {t:T | X!1(t) <= -n}")
              (("" (lemma "P_IIntersection" ("X" "BB" "P" "P"))
                (("1" (split -1)
                  (("1" (case-replace "IIntersection(BB) = emptyset[T]")
                    (("1" (rewrite "P_emptyset")
                      (("1" (expand "o")
                        (("1" (expand "BB")
                          (("1"
                            (lemma "extensionality"
                             ("f" "F!1" "g" "lambda x: P({t | X!1(t) <= x})"))
                            (("1" (split -1)
                              (("1" (replace -1) (("1" (assert) nil nil)) nil)
                               ("2" (skosimp) (("2" (inst - "x!1") nil nil))
                                nil))
                              nil)
                             ("2" (skosimp)
                              (("2" (typepred "X!1")
                                (("2" (inst - "x!1")
                                  (("2" (rewrite "measurable_le" -1)
                                    (("2" (inst - "x!1") nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 2 -2)
                      (("2" (expand "IIntersection")
                        (("2" (expand "BB")
                          (("2" (apply-extensionality 1 :hide? t)
                            (("2" (expand "emptyset")
                              (("2" (hide -2)
                                (("2" (case-replace "X!1(x!1)<= -1")
                                  (("1" (name "II" "floor(X!1(x!1))")
                                    (("1" (typepred "floor(X!1(x!1))")
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (expand "<=" -1)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (inst - "-II")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (inst - "1-II")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (inst - "1") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2)
                    (("2" (expand "BB")
                      (("2" (expand "decreasing?")
                        (("2" (skosimp*)
                          (("2" (expand "subset?")
                            (("2" (expand "member")
                              (("2" (skosimp*) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (expand "BB")
                    (("2" (typepred "X!1")
                      (("2" (inst - "-x1!1")
                        (("2" (rewrite "measurable_le" -1)
                          (("2" (inst - "-x1!1") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((distribution_function nonempty-type-eq-decl nil probability_space nil)
    (distribution_function? const-decl "bool" probability_space nil)
    (probability nonempty-type-eq-decl nil probability_measure nil)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (<= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (X!1 skolem-const-decl "random_variable[T, S]" probability_space nil)
    (x!1 skolem-const-decl "T" probability_space nil)
    (II skolem-const-decl "{i | i <= X!1(x!1) & X!1(x!1) < 1 + i}"
     probability_space nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (P_emptyset formula-decl nil probability_measure nil)
    (BB skolem-const-decl "[nat -> [T -> bool]]" probability_space nil)
    (measurable_le formula-decl nil measure_space_def measure_integration)
    (measurable_emptyset name-judgement "measurable_set[T, S]"
     probability_space nil)
    (subset_algebra_emptyset name-judgement "(S)" probability_space nil)
    (finite_emptyset name-judgement "finite_set[T]" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (extensionality formula-decl nil functions nil)
    (O const-decl "T3" function_props nil) (set type-eq-decl nil sets nil)
    (IIntersection const-decl "set[T]" indexed_sets nil)
    (emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (decreasing? const-decl "bool" fun_preds_partial structures)
    (sequence type-eq-decl nil sequences nil)
    (P formal-const-decl "probability_measure" probability_space nil)
    (probability_measure nonempty-type-eq-decl nil probability_measure nil)
    (probability_measure? const-decl "bool" probability_measure nil)
    (P_IIntersection formula-decl nil probability_measure nil)
    (<= const-decl "(S)" probability_space nil))
   shostak))
 (distribution_1 0
  (distribution_1-1 nil 3314699095
   ("" (skosimp)
    (("" (typepred "F!1")
      (("" (expand "distribution_function?")
        (("" (skosimp)
          (("" (name "BB" "lambda (n:nat): {t:T | X!1(t) <= n}")
            (("" (lemma "P_IUnion" ("X" "BB" "P" "P"))
              (("1" (case-replace "IUnion(BB)= fullset[T]")
                (("1" (rewrite "P_fullset")
                  (("1" (expand "o")
                    (("1" (expand "BB")
                      (("1" (expand "restrict")
                        (("1" (split -2)
                          (("1"
                            (lemma "extensionality"
                             ("f" "lambda (s:nat): F!1(s)" "g"
                              "LAMBDA (x: nat): P({t: T | X!1(t) <= x})"))
                            (("1" (split -1)
                              (("1" (replace -1 1) (("1" (propax) nil nil))
                                nil)
                               ("2" (skosimp)
                                (("2" (inst - "x!1")
                                  (("2" (expand "<=" -4)
                                    (("2" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp)
                              (("2" (typepred "X!1")
                                (("2" (inst - "x!1")
                                  (("2" (rewrite "measurable_le" -1)
                                    (("2" (inst - "x!1") nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 2 -2)
                            (("2" (expand "increasing?")
                              (("2" (expand "subset?")
                                (("2" (expand "member")
                                  (("2" (skosimp*) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (expand "BB")
                    (("2" (expand "IUnion")
                      (("2" (expand "fullset")
                        (("2" (assert)
                          (("2" (apply-extensionality :hide? t)
                            (("2" (case-replace "X!1(x!1)<=0")
                              (("1" (inst + "0") nil nil)
                               ("2" (inst + "ceiling(X!1(x!1))")
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "BB")
                (("2" (skosimp*)
                  (("2" (typepred "X!1")
                    (("2" (inst - "x1!1")
                      (("2" (rewrite "measurable_le" -1)
                        (("2" (inst - "x1!1") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((distribution_function nonempty-type-eq-decl nil probability_space nil)
    (distribution_function? const-decl "bool" probability_space nil)
    (probability nonempty-type-eq-decl nil probability_measure nil)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (<= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (P_IUnion formula-decl nil probability_measure nil)
    (probability_measure? const-decl "bool" probability_measure nil)
    (probability_measure nonempty-type-eq-decl nil probability_measure nil)
    (P formal-const-decl "probability_measure" probability_space nil)
    (sequence type-eq-decl nil sequences nil)
    (x!1 skolem-const-decl "T" probability_space nil)
    (X!1 skolem-const-decl "random_variable[T, S]" probability_space nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (TRUE const-decl "bool" booleans nil)
    (P_fullset formula-decl nil probability_measure nil)
    (BB skolem-const-decl "[nat -> [T -> bool]]" probability_space nil)
    (measurable_le formula-decl nil measure_space_def measure_integration)
    (<= const-decl "(S)" probability_space nil)
    (extensionality formula-decl nil functions nil)
    (increasing? const-decl "bool" fun_preds_partial structures)
    (member const-decl "bool" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (subset? const-decl "bool" sets nil)
    (restrict const-decl "R" restrict nil)
    (O const-decl "T3" function_props nil) (set type-eq-decl nil sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (fullset const-decl "set" sets nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (random_variable nonempty-type-eq-decl nil probability_measure nil))
   shostak))
 (distribution_increasing 0
  (distribution_increasing-2 "" 3790341547
   ("" (skosimp)
    (("" (typepred "F!1")
      (("" (expand "distribution_function?")
        (("" (expand "increasing?")
          (("" (skosimp*)
            ((""
              (lemma "P_subset_le"
               ("A" "X!1 <= x!1" "B" "X!1 <= y!1" "P" "P"))
              (("" (expand "subset?")
                (("" (expand "member")
                  (("" (inst-cp - "x!1")
                    (("" (inst - "y!1")
                      (("" (split -1)
                        (("1" (assert) nil nil)
                         ("2" (expand "<=" 1)
                          (("2" (skosimp) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (distribution_increasing-1 nil 3314700007
   ("" (skosimp)
    (("" (typepred "F!1")
      (("" (expand "distribution_function?")
        (("" (expand "increasing?")
          (("" (skosimp*)
            ((""
              (lemma "P_subset_le"
               ("A" "X!1 <= x!1" "B" "X!1 <= y!1" "P" "P"))
              (("" (expand "subset?")
                (("" (expand "member")
                  (("" (inst-cp - "x!1")
                    (("" (inst - "y!1")
                      (("" (split -1)
                        (("1" (assert)
                          (("1" (expand "restrict") (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (expand "<=" 1)
                          (("2" (skosimp) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((distribution_function nonempty-type-eq-decl nil probability_space nil)
    (distribution_function? const-decl "bool" probability_space nil)
    (probability nonempty-type-eq-decl nil probability_measure nil)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (<= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (P formal-const-decl "probability_measure" probability_space nil)
    (probability_measure nonempty-type-eq-decl nil probability_measure nil)
    (probability_measure? const-decl "bool" probability_measure nil)
    (<= const-decl "(S)" probability_space nil)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration)
    (P_subset_le formula-decl nil probability_measure nil)
    (member const-decl "bool" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (distribution_right_continuous 0
  (distribution_right_continuous-1 nil 3352018084
   ("" (skosimp)
    (("" (expand "right_continuous?")
      (("" (skolem + ("x!1"))
        (("" (expand "right_continuous?")
          (("" (skosimp)
            (("" (typepred "F!1")
              (("" (expand "distribution_function?")
                (("" (skosimp)
                  (("" (typepred "X!1")
                    ((""
                      (case "EXISTS (delta:posreal):
               FORALL (y: real):
                 x!1 <= y AND y - x!1 < delta IMPLIES
                  P(X!1<=y) - P(X!1<=x!1) < epsilon!1")
                      (("1" (skosimp)
                        (("1" (inst + "delta!1")
                          (("1" (skosimp)
                            (("1" (inst - "x!2")
                              (("1" (inst-cp - "x!2")
                                (("1" (inst - "x!1")
                                  (("1"
                                    (lemma "distribution_increasing"
                                     ("F" "F!1"))
                                    (("1" (expand "increasing?")
                                      (("1"
                                        (inst - "x!1" "x!2")
                                        (("1"
                                          (expand "abs")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (lemma "m_decreasing_convergence"
                           ("E" "lambda (n:nat): X!1<=x!1+1/(1+n)"))
                          (("1" (split -1)
                            (("1" (expand "to_measure")
                              (("1" (expand "o" -1)
                                (("1" (expand "x_converges?")
                                  (("1" (prop)
                                    (("1"
                                      (case-replace
                                       "IIntersection(LAMBDA (n: nat): X!1 <= 1 / (1 + n) + x!1) = X!1<=x!1")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (lemma
                                           "convergence_sequences.limit_def")
                                          (("1"
                                            (inst
                                             -
                                             "P(X!1<=x!1)"
                                             "LAMBDA (i:nat): P(X!1 <= 1 / (1 + i) + x!1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -2 -3)
                                                (("1"
                                                  (expand "convergence")
                                                  (("1"
                                                    (inst - "epsilon!1")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (inst + "1/(1+n!1)")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (lemma
                                                             "distribution_increasing"
                                                             ("F" "F!1"))
                                                            (("1"
                                                              (inst - "n!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "increasing?")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "y!1"
                                                                     "x!1+1/(1+n!1)")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "x!1"
                                                                       "x!1+1/(1+n!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst-cp
                                                                           -
                                                                           "x!1")
                                                                          (("1"
                                                                            (inst-cp
                                                                             -
                                                                             "x!1+1/(1+n!1)")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "y!1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (apply-extensionality :hide? t)
                                          (("2"
                                            (expand "<=")
                                            (("2"
                                              (expand "IIntersection")
                                              (("2"
                                                (case-replace
                                                 "X!1(x!2) <= x!1")
                                                (("1"
                                                  (skosimp)
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "archimedean"
                                                     ("px" "X!1(x!2)-x!1"))
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst - "n!1-1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2" (expand "decreasing?")
                                (("2" (skolem + ("i!1" "j!1"))
                                  (("2" (flatten)
                                    (("2" (expand "subset?")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (expand "<=" 1)
                                          (("2"
                                            (skolem + ("t!1"))
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (lemma
                                                 "both_sides_div_pos_le2"
                                                 ("py"
                                                  "i!1+1"
                                                  "px"
                                                  "j!1+1"
                                                  "pz"
                                                  "1"))
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2)
                              (("3" (expand "mu_fin?")
                                (("3" (expand "to_measure")
                                  (("3" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp)
                            (("2" (expand "measurable_set?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((right_continuous? const-decl "bool" continuous_functions_aux nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (right_continuous? const-decl "bool" continuous_functions_aux nil)
    (distribution_function nonempty-type-eq-decl nil probability_space nil)
    (distribution_function? const-decl "bool" probability_space nil)
    (probability nonempty-type-eq-decl nil probability_measure nil)
    (S formal-const-decl "sigma_algebra" probability_space nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     measure_integration)
    (sigma_algebra? const-decl "bool" subset_algebra_def measure_integration)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-nonempty-type-decl nil probability_space nil)
    (<= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (<= const-decl "(S)" probability_space nil)
    (P formal-const-decl "probability_measure" probability_space nil)
    (probability_measure nonempty-type-eq-decl nil probability_measure nil)
    (probability_measure? const-decl "bool" probability_measure nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (distribution_increasing formula-decl nil probability_space nil)
    (to_measure const-decl "measure_type" generalized_measure_def
     measure_integration)
    (measure_type nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (measure? const-decl "bool" generalized_measure_def measure_integration)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     extended_nnreal)
    (finite_measure nonempty-type-eq-decl nil generalized_measure_def
     measure_integration)
    (finite_measure? const-decl "bool" generalized_measure_def
     measure_integration)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (measurable_set nonempty-type-eq-decl nil measure_space_def
     measure_integration)
    (measurable_set? const-decl "bool" measure_space_def measure_integration)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (m_decreasing_convergence formula-decl nil measure_props
     measure_integration)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (mu_fin? const-decl "bool" measure_props measure_integration)
    (subset? const-decl "bool" sets nil)
    (both_sides_div_pos_le2 formula-decl nil real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (member const-decl "bool" sets nil)
    (decreasing? const-decl "bool" fun_preds_partial structures)
    (x_converges? const-decl "bool" extended_nnreal extended_nnreal)
    (IIntersection const-decl "set[T]" indexed_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sigma_algebra_IIntersection_rew application-judgement "(S)"
     probability_space nil)
    (limit_def formula-decl nil convergence_sequences analysis)
    (convergence const-decl "bool" convergence_sequences analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (x!1 skolem-const-decl "real" probability_space nil)
    (X!1 skolem-const-decl "random_variable[T, S]" probability_space nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (archimedean formula-decl nil real_props nil)
    (O const-decl "T3" function_props nil)
    (random_variable nonempty-type-eq-decl nil probability_measure nil)
    (measurable_function? const-decl "bool" measure_space_def
     measure_integration))
   shostak)))


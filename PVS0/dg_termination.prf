(dg_termination
 (M_TCC1 0
  (M_TCC1-1 nil 3703860261 ("" (subtype-tcc) nil nil) nil nil))
 (dg_termination?_TCC1 0
  (dg_termination?_TCC1-1 nil 3703948480 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (dg_termination?_TCC2 0
  (dg_termination?_TCC2-1 nil 3703948480 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (pvs0_to_dg_sound_dpg_digraph 0
  (pvs0_to_dg_sound_dpg_digraph-2 nil 3715957538
   ("" (skeep)
    (("" (expand "sound_dpg_digraph")
      (("" (expand "pvs0_to_fully_connected_dg")
        (("" (split)
          (("1" (skeep)
            (("1" (expand "make_fully_connected")
              (("1" (expand "vert")
                (("1" (use "pvs0_to_dg_vertices_completeness")
                  (("1" (invoke (typepred "%1") (! 1 2))
                    (("1" (expand "equal_sl")
                      (("1" (flatten)
                        (("1" (invoke (typepred "%1") (! -1))
                          (("1" (assert)
                            (("1" (inst? -1 :where -7)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep*)
            (("2" (lemma "mfc_is_fully_connected")
              (("2" (inst? -1 :where 1)
                (("2" (inst -1 "cc1" "cc2")
                  (("2" (assert)
                    (("2" (split -1)
                      (("1" (propax) nil nil)
                       ("2" (hide 2)
                        (("2" (expand "make_fully_connected")
                          (("2" (expand "vert")
                            (("2"
                              (use "pvs0_to_dg_vertices_completeness")
                              (("2"
                                (invoke (typepred "%1") (! 1 2))
                                (("2"
                                  (expand "equal_sl")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (invoke (typepred "%1") (! -1))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst? -1 :where -7)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "make_fully_connected")
                        (("3" (expand "vert")
                          (("3"
                            (use "pvs0_to_dg_vertices_completeness")
                            (("3" (invoke (typepred "%1") (! 1 2))
                              (("3"
                                (expand "equal_sl")
                                (("3"
                                  (flatten)
                                  (("3"
                                    (invoke (typepred "%1") (! -1))
                                    (("3"
                                      (assert)
                                      (("3"
                                        (inst? -1 :where -7)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sound_dpg_digraph const-decl "bool" dg_termination nil)
    (make_fully_connected const-decl "(cdigraph)" c_digraphs
     "digraphs/")
    (T formal-nonempty-type-decl nil dg_termination nil)
    (pvs0_to_dg_vertices_completeness formula-decl nil pvs0_to_dg
     "PVS0/")
    (PVS0 type-eq-decl nil pvs0_expr "PVS0/")
    (EvalOp2 type-eq-decl nil pvs0_expr "PVS0/")
    (EvalOp1 type-eq-decl nil pvs0_expr "PVS0/")
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt "PVS0/")
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg "PVS0/")
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Path type-eq-decl nil pvs0_cc "PVS0/")
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Conditions type-eq-decl nil pvs0_cc "PVS0/")
    (PVS0Bool type-decl nil PVS0Bool_adt "PVS0/")
    (subset_sl? def-decl
     "{b: bool | b IFF (FORALL x: member(x, l1) => member(x, l2))}"
     set_as_list "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subset_sl_is_preorder name-judgement "(preorder?[list[T]])"
     set_as_list_props "structures/")
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (reduce_sl def-decl
     "{ll: list[T] | equal_sl[T](l, ll) & card_sl(ll) = length(ll)}"
     set_as_list "structures/")
    (length def-decl "nat" list_props nil)
    (card_sl def-decl "{n: nat | n = Card(list2set(l))}" set_as_list
     "structures/")
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pvs0_to_dg_vertices_l const-decl "list[(cc_of_pvs0(expr))]"
     pvs0_to_dg "PVS0/")
    (equal_sl const-decl
     "{b: bool | b IFF (FORALL x: member(x, l1) IFF member(x, l2))}"
     set_as_list "structures/")
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (reduce_sl_no_rep application-judgement "(no_repetitions?)"
     set_as_list_props "structures/")
    (vert const-decl "bool" c_digraphs_def "digraphs/")
    (mfc_is_fully_connected formula-decl nil c_digraphs "digraphs/")
    (edges const-decl "bool" c_digraphs_def "digraphs/")
    (TRUE const-decl "bool" booleans nil)
    (pvs0_to_fully_connected_dg const-decl "(cdigraph)" pvs0_to_dg
     "PVS0/"))
   nil)
  (pvs0_to_dg_sound_dpg_digraph-1 nil 3702051180
   ("" (skeep)
    (("" (expand "sound_dpg_digraph")
      (("" (expand "pvs0_to_dg")
        (("" (split)
          (("1" (skeep)
            (("1" (expand "make_fully_connected")
              (("1" (expand "vert")
                (("1" (use "pvs0_to_dg_vertices_completeness")
                  (("1" (invoke (typepred "%1") (! 1 2))
                    (("1" (expand "equal_sl")
                      (("1" (flatten)
                        (("1" (invoke (typepred "%1") (! -1))
                          (("1" (assert)
                            (("1" (inst? -1 :where -7)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep*)
            (("2" (lemma "mfc_is_fully_connected")
              (("2" (inst? -1 :where 1)
                (("2" (inst -1 "cc1" "cc2")
                  (("2" (assert)
                    (("2" (split -1)
                      (("1" (propax) nil nil)
                       ("2" (hide 2)
                        (("2" (expand "make_fully_connected")
                          (("2" (expand "vert")
                            (("2"
                              (use "pvs0_to_dg_vertices_completeness")
                              (("2"
                                (invoke (typepred "%1") (! 1 2))
                                (("2"
                                  (expand "equal_sl")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (invoke (typepred "%1") (! -1))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst? -1 :where -7)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "make_fully_connected")
                        (("3" (expand "vert")
                          (("3"
                            (use "pvs0_to_dg_vertices_completeness")
                            (("3" (invoke (typepred "%1") (! 1 2))
                              (("3"
                                (expand "equal_sl")
                                (("3"
                                  (flatten)
                                  (("3"
                                    (invoke (typepred "%1") (! -1))
                                    (("3"
                                      (assert)
                                      (("3"
                                        (inst? -1 :where -7)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sound_dpg_digraph const-decl "bool" dg_termination nil)
    (make_fully_connected const-decl "(cdigraph)" c_digraphs
     "digraphs/")
    (T formal-nonempty-type-decl nil dg_termination nil)
    (pvs0_to_dg_vertices_completeness formula-decl nil pvs0_to_dg
     "PVS0/")
    nil (EvalOp2 type-eq-decl nil pvs0_expr "PVS0/")
    (EvalOp1 type-eq-decl nil pvs0_expr "PVS0/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PVS0Expr type-decl nil PVS0Expr_adt "PVS0/") nil
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg "PVS0/")
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (Path type-eq-decl nil pvs0_cc "PVS0/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Conditions type-eq-decl nil pvs0_cc "PVS0/")
    (list type-decl nil list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt "PVS0/")
    (subset_sl? def-decl
     "{b: bool | b IFF (FORALL x: member(x, l1) => member(x, l2))}"
     set_as_list "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subset_sl_is_preorder name-judgement "(preorder?[list[T]])"
     set_as_list_props "structures/")
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (reduce_sl def-decl
     "{ll: list[T] | equal_sl[T](l, ll) & card_sl(ll) = length(ll)}"
     set_as_list "structures/")
    (length def-decl "nat" list_props nil)
    (card_sl def-decl "{n: nat | n = Card(list2set(l))}" set_as_list
     "structures/")
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pvs0_to_dg_vertices_l const-decl "list[(cc_of_pvs0(expr))]"
     pvs0_to_dg "PVS0/")
    (equal_sl const-decl
     "{b: bool | b IFF (FORALL x: member(x, l1) IFF member(x, l2))}"
     set_as_list "structures/")
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (reduce_sl_no_rep application-judgement "(no_repetitions?)"
     set_as_list_props "structures/")
    (vert const-decl "bool" c_digraphs_def "digraphs/")
    (mfc_is_fully_connected formula-decl nil c_digraphs "digraphs/")
    (edges const-decl "bool" c_digraphs_def "digraphs/"))
   nil))
 (dg_termination_implies_ccg 0
  (dg_termination_implies_ccg-1 nil 3702820604
   ("" (skeep)
    (("" (expand "dg_termination?")
      (("" (auto-rewrite "finseq_appl")
        (("" (assert)
          (("" (skeep)
            (("" (expand "ccg_termination_pvs0")
              ((""
                (inst 1 "LAMBDA(i:below[1]): M"
                 "pvs0_to_fully_connected_dg(pvs0)")
                (("" (expand "ccg_termination?")
                  (("" (skeep)
                    (("" (inst -1 "c")
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "make_ccg")
                            (("1" (assert)
                              (("1"
                                (expand "gt_mc?")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "gte_mc?")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "gt")
                                        (("1"
                                          (expand "leval")
                                          (("1"
                                            (expand "ltval")
                                            (("1"
                                              (expand "ge")
                                              (("1"
                                                (expand "le")
                                                (("1"
                                                  (name
                                                   "mcomb"
                                                   "(# length:= length(c), seq:= (LAMBDA(i:below[length(c)]): 0) #)")
                                                  (("1"
                                                    (inst 1 "mcomb")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (skeep*)
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "i_1")
                                                          (("1"
                                                            (inst
                                                             -4
                                                             "val1"
                                                             "val2")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "val1"
                                                                 "val2")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst 1 "i")
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               "val1"
                                                               "val2")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (split)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (expand
                                                           "mcomb")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "mcomb")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         "mcomb")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (expand
                                                         "mcomb")
                                                        (("4"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (typepred "c")
                          (("2" (expand "make_ccg")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dg_termination? const-decl "bool" dg_termination nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (ccg_termination_pvs0 const-decl "bool" ccg_to_pvs0 "PVS0/")
    (ccg_termination? const-decl "bool" ccg "CCG/")
    (c skolem-const-decl "{c:
   prewalk
       [CallingContext[T, PVS0Expr[T], Conditions[T], Path[T]],
        digraph_type
            [CallingContext[T, PVS0Expr[T], Conditions[T], Path[T]]],
        digraph_verts, digraph_edges, digraph_size, digraph_make] |
         circuit?(dg
                    (make_ccg(pvs0_to_fully_connected_dg(pvs0),
                              LAMBDA (i: below[1]): M)),
                  c)}" dg_termination nil)
    (M skolem-const-decl "FunMeasure
    [T, PVS0Expr[T], Conditions[T], Path[T], MT, LAMBDA (m, n: nat): m < n,
     1]" dg_termination nil)
    (make_ccg const-decl "CCG" ccg_def "CCG/")
    (CCG type-eq-decl nil ccg_def "CCG/")
    (pvs0 skolem-const-decl "PVS0[T]" dg_termination nil)
    (circuit? const-decl "bool" circuits_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     "digraphs/")
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp "digraphs/")
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp "digraphs/")
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (digraph_type type-eq-decl nil c_digraphs_imp "digraphs/")
    (leval const-decl "bool" dg_termination nil)
    (ge const-decl "bool" ccg_def "CCG/")
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr "PVS0/")
    (eval_conds def-decl "bool" pvs0_cc "PVS0/")
    (measures_combination type-eq-decl nil ccg "CCG/")
    (last const-decl "T" seq_extras "structures/")
    (first const-decl "T" seq_extras "structures/")
    (not_empty_seq type-eq-decl nil seq_extras "structures/")
    (/= const-decl "boolean" notequal nil)
    (mcomb skolem-const-decl
     "[# length: nat, seq: [below[length(c)] -> naturalnumber] #]"
     dg_termination nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (le const-decl "bool" ccg_def "CCG/")
    (ltval const-decl "bool" dg_termination nil)
    (gt const-decl "bool" ccg "CCG/")
    (gte_mc? const-decl "bool" ccg "CCG/")
    (gt_mc? const-decl "bool" ccg "CCG/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pvs0_to_fully_connected_dg const-decl "(cdigraph)" pvs0_to_dg
     "PVS0/")
    (sound_ccg_digraph const-decl "bool" pvs0_to_dg "PVS0/")
    (PVS0 type-eq-decl nil pvs0_expr "PVS0/")
    (EvalOp2 type-eq-decl nil pvs0_expr "PVS0/")
    (EvalOp1 type-eq-decl nil pvs0_expr "PVS0/")
    (cdigraph const-decl "bool" c_digraphs_def "digraphs/")
    (ComputableDigraph type-eq-decl nil c_digraphs_def "digraphs/")
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (below type-eq-decl nil nat_types nil)
    (FunMeasures type-eq-decl nil ccg_def "CCG/")
    (FunMeasure type-eq-decl nil ccg_def "CCG/")
    (Path type-eq-decl nil pvs0_cc "PVS0/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Conditions type-eq-decl nil pvs0_cc "PVS0/")
    (list type-decl nil list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt "PVS0/")
    (PVS0Expr type-decl nil PVS0Expr_adt "PVS0/")
    (MT type-eq-decl nil pvs0_prelude "PVS0/")
    (T formal-nonempty-type-decl nil dg_termination nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pvs0_to_dg_sound_dpg_digraph application-judgement
     "(sound_dpg_digraph(pvs0))" dg_termination nil)
    (pvs0_to_fully_connected_dg_sound_ccg application-judgement
     "(sound_ccg_digraph(pvs0))" dg_termination nil))
   shostak)))


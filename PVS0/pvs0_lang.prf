(pvs0_lang
 (deterministic 0
  (deterministic-2 "" 3790336242
   ("" (skeep*)
    (("" (expand "semantic_rel")
      (("" (lemma "deterministic_expr")
        (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   nil shostak)
  (deterministic-1 nil 3665322795
   ("" (skeep*)
    (("" (expand "semantic_rel")
      (("" (expand "semantic_rel")
        (("" (lemma "deterministic_expr")
          (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((semantic_rel const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (Val formal-nonempty-type-decl nil pvs0_lang nil)
    (deterministic_expr formula-decl nil pvs0_expr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (eval_pvs0_ge_n 0
  (eval_pvs0_ge_n-1 nil 3665418053
   ("" (skeep*)
    (("" (expand "eval" :assert? nil)
      (("" (lemma "eval_expr_ge_n") (("" (beta) (("" (inst?) nil nil)) nil))
        nil))
      nil))
    nil)
   ((eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
   some?(myv) IMPLIES
    n > 0 AND FORALL (m: upfrom(n)): myv = eval_expr(pvs0)(m, expr, env)}"
     pvs0_lang nil)
    (eval_expr_semantic_rel_j rec-application-judgement "{myv: Maybe[Val] |
   some?(myv) IMPLIES semantic_rel_expr(pvs0)(expr, env, val(myv))}" pvs0_lang
     nil)
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (Val formal-nonempty-type-decl nil pvs0_lang nil)
    (eval_expr_ge_n formula-decl nil pvs0_expr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (semantic_rel_eval 0
  (semantic_rel_eval-2 "" 3790336242
   ("" (skeep*)
    (("" (expand "semantic_rel")
      (("" (expand "eval")
        (("" (lemma "semantic_rel_eval_expr")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)
  (semantic_rel_eval-1 nil 3665331731
   ("" (skeep*)
    (("" (expand "semantic_rel")
      (("" (expand "semantic_rel")
        (("" (expand "eval")
          (("" (lemma "semantic_rel_eval_expr")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel const-decl "bool" pvs0_lang nil)
    (semantic_rel_eval_expr formula-decl nil pvs0_expr nil)
    (Val formal-nonempty-type-decl nil pvs0_lang nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (eval_expr_semantic_rel_j rec-application-judgement "{myv: Maybe[Val] |
   some?(myv) IMPLIES semantic_rel_expr(pvs0)(expr, env, val(myv))}" pvs0_lang
     nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
   some?(myv) IMPLIES
    n > 0 AND FORALL (m: upfrom(n)): myv = eval_expr(pvs0)(m, expr, env)}"
     pvs0_lang nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (eval_terminates 0
  (eval_terminates-2 "" 3790336242
   ("" (skeep)
    (("" (expand "eval_termination")
      (("" (expand "terminating?")
        (("" (lemma "eval_expr_terminates") (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak)
  (eval_terminates-1 nil 3665340436
   ("" (skeep)
    (("" (expand "eval_termination")
      (("" (expand "terminating?")
        (("" (expand "terminates")
          (("" (lemma "eval_expr_terminates") (("" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_termination const-decl "bool" pvs0_lang nil)
    (Val formal-nonempty-type-decl nil pvs0_lang nil)
    (eval_expr_terminates formula-decl nil pvs0_expr nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (terminating? const-decl "bool" pvs0_lang nil))
   shostak))
 (terminating_determined_all 0
  (terminating_determined_all-1 nil 3666615570
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "terminating?")
            (("1" (expand "determined?")
              (("1" (expand "terminates_expr")
                (("1" (expand "semantic_rel") (("1" (inst? -1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "determined?")
          (("2" (expand "terminating?")
            (("2" (expand "terminates_expr")
              (("2" (skeep)
                (("2" (expand "semantic_rel") (("2" (inst? -) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((determined? const-decl "bool" pvs0_lang nil)
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (Val formal-nonempty-type-decl nil pvs0_lang nil)
    (terminates_expr const-decl "bool" pvs0_expr nil)
    (terminating? const-decl "bool" pvs0_lang nil))
   nil))
 (mu_nonempty 0
  (mu_nonempty-1 nil 3665341553
   ("" (skeep :preds? t)
    (("" (expand "determined?")
      (("" (beta)
        (("" (expand "nonempty?")
          (("" (expand "empty?")
            (("" (skeep -1)
              (("" (expand "semantic_rel")
                (("" (lemma "semantic_rel_eval_expr")
                  (("" (inst?)
                    (("" (assert)
                      (("" (skeep)
                        (("" (inst -4 "n")
                          (("" (expand "member")
                            (("" (expand "eval") (("" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((determined? const-decl "bool" pvs0_lang nil)
    (nonempty? const-decl "bool" sets nil)
    (semantic_rel_eval_expr formula-decl nil pvs0_expr nil)
    (Val formal-nonempty-type-decl nil pvs0_lang nil)
    (eval_expr_semantic_rel_j rec-application-judgement "{myv: Maybe[Val] |
   some?(myv) IMPLIES semantic_rel_expr(pvs0)(expr, env, val(myv))}" pvs0_lang
     nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
   some?(myv) IMPLIES
    n > 0 AND FORALL (m: upfrom(n)): myv = eval_expr(pvs0)(m, expr, env)}"
     pvs0_lang nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (member const-decl "bool" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (empty? const-decl "bool" sets nil))
   shostak))
 (mu_TCC1 0
  (mu_TCC1-1 nil 3665342319
   ("" (use "mu_nonempty")
    (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)
   ((determined? const-decl "bool" pvs0_lang nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (Val formal-nonempty-type-decl nil pvs0_lang nil)
    (mu_nonempty formula-decl nil pvs0_lang nil))
   nil (mu subtype "pvs0_lang.S" "(sets[nat].nonempty?)")))
 (mu_TCC2 0
  (mu_TCC2-1 nil 3665342319
   ("" (skeep)
    (("" (replace -1 :hide? t)
      (("" (invoke (typepred "%1") (! 1 1))
        (("1" (lemma "eval_expr_gt_0")
          (("1" (assert)
            (("1" (name "n_" "min[nat]({n: nat | some?(eval(pvs0)(n)(val))})")
              (("1" (replace -1 :hide? t)
                (("1" (expand "eval" -2)
                  (("1" (inst? -1 :where -2) (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (use "mu_nonempty") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (use "mu_nonempty") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((eval_expr_gt_0 formula-decl nil pvs0_expr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mu_nonempty formula-decl nil pvs0_lang nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
   some?(myv) IMPLIES
    n > 0 AND FORALL (m: upfrom(n)): myv = eval_expr(pvs0)(m, expr, env)}"
     pvs0_lang nil)
    (eval_expr_semantic_rel_j rec-application-judgement "{myv: Maybe[Val] |
   some?(myv) IMPLIES semantic_rel_expr(pvs0)(expr, env, val(myv))}" pvs0_lang
     nil)
    (determined? const-decl "bool" pvs0_lang nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat
         nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (Val formal-nonempty-type-decl nil pvs0_lang nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (mu subtype "min_nat[nat].min(pvs0_lang.S)" "posnat")))
 (mu_terminates 0
  (mu_terminates-1 nil 3665342327
   ("" (skeep)
    (("" (skoletin* 1)
      (("" (expand "mu")
        (("" (invoke (typepred "%1") (! -2 2))
          (("1" (replaces -4 :dir rl) (("1" (assert) nil nil)) nil)
           ("2" (lemma "mu_nonempty")
            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Val formal-nonempty-type-decl nil pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_expr nil) (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (determined? const-decl "bool" pvs0_lang nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (mu const-decl "posnat" pvs0_lang nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat
         nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mu_nonempty formula-decl nil pvs0_lang nil))
   shostak))
 (mu_min 0
  (mu_min-1 nil 3665582367
   ("" (skeep)
    (("" (expand "mu")
      (("" (typepred "min({n: nat | some?(eval(pvs0)(n)(val))})")
        (("1" (inst -2 "n") (("1" (assert) nil nil)) nil)
         ("2" (use "mu_nonempty") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((mu const-decl "posnat" pvs0_lang nil)
    (mu_nonempty formula-decl nil pvs0_lang nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val formal-nonempty-type-decl nil pvs0_lang nil)
    (Maybe type-decl nil Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat
         nil)
    (determined? const-decl "bool" pvs0_lang nil))
   shostak))
 (mu_eval_TCC1 0
  (mu_eval_TCC1-1 nil 3665342771 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val formal-nonempty-type-decl nil pvs0_lang nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (determined? const-decl "bool" pvs0_lang nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (mu const-decl "posnat" pvs0_lang nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
   some?(myv) IMPLIES
    n > 0 AND FORALL (m: upfrom(n)): myv = eval_expr(pvs0)(m, expr, env)}"
     pvs0_lang nil)
    (eval_expr_semantic_rel_j rec-application-judgement "{myv: Maybe[Val] |
   some?(myv) IMPLIES semantic_rel_expr(pvs0)(expr, env, val(myv))}" pvs0_lang
     nil))
   nil
   (mu_eval subtype "pvs0_lang.eval(pvs0_lang.pvs0)(pvs0_lang.n)(pvs0_lang.v)"
    "(Maybe[pvs0_lang.Val].some?)")))
 (eval_semantic 0
  (eval_semantic-1 nil 3665349526
   ("" (skeep*)
    (("" (lemma "eval_expr_semantic_rel")
      (("" (assert)
        (("" (expand "semantic_rel")
          (("" (inst?)
            (("" (inst -1 "mu(pvs0)(arg)")
              (("" (assert) (("" (expand "eval") (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_expr_semantic_rel formula-decl nil pvs0_expr nil)
    (Val formal-nonempty-type-decl nil pvs0_lang nil)
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (mu const-decl "posnat" pvs0_lang nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (determined? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
   some?(myv) IMPLIES
    n > 0 AND FORALL (m: upfrom(n)): myv = eval_expr(pvs0)(m, expr, env)}"
     pvs0_lang nil)
    (eval_expr_semantic_rel_j rec-application-judgement "{myv: Maybe[Val] |
   some?(myv) IMPLIES semantic_rel_expr(pvs0)(expr, env, val(myv))}" pvs0_lang
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (mu_eval_correct 0
  (mu_eval_correct-1 nil 3665342815
   ("" (skeep*)
    (("" (split 1)
      (("1" (flatten)
        (("1" (use "deterministic")
          (("1" (assert)
            (("1" (hide 2)
              (("1" (use "mu_terminates")
                (("1" (assert)
                  (("1" (expand "mu_eval")
                    (("1" (use "eval_semantic") (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (replace -1 :hide? t)
          (("2" (expand "semantic_rel")
            (("2" (expand "mu_eval")
              (("2" (expand "eval")
                (("2" (use "eval_expr_semantic_rel")
                  (("2" (assert)
                    (("2" (assert)
                      (("2" (hide 2)
                        (("2" (use " mu_terminates")
                          (("2" (assert)
                            (("2" (expand "eval") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deterministic formula-decl nil pvs0_lang nil)
    (determined? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (Val formal-nonempty-type-decl nil pvs0_lang nil)
    (mu_eval const-decl "Val" pvs0_lang nil)
    (eval_semantic formula-decl nil pvs0_lang nil)
    (mu_terminates formula-decl nil pvs0_lang nil)
    (eval_expr_semantic_rel formula-decl nil pvs0_expr nil)
    (mu const-decl "posnat" pvs0_lang nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (eval_expr def-decl "Maybe[Val]" pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
   some?(myv) IMPLIES
    n > 0 AND FORALL (m: upfrom(n)): myv = eval_expr(pvs0)(m, expr, env)}"
     pvs0_lang nil)
    (eval_expr_semantic_rel_j rec-application-judgement "{myv: Maybe[Val] |
   some?(myv) IMPLIES semantic_rel_expr(pvs0)(expr, env, val(myv))}" pvs0_lang
     nil)
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (Delta_undetermined 0
  (Delta_undetermined-1 nil 3666649173
   ("" (skeep*)
    (("" (lemma "mu_terminates")
      (("" (inst? -1)
        (("" (inst -1 "val")
          (("" (skoletin* -1)
            (("" (expand "eval")
              (("" (expand "Delta" -2)
                (("" (expand "eval_expr")
                  (("" (case-replace "mun=0")
                    (("1" (assert) nil nil)
                     ("2" (assert)
                      (("2" (expand "eval_expr" -2 1)
                        (("2" (expand "eval_expr" -2 2)
                          (("2" (lemma "mu_min")
                            (("2"
                              (inst -1 "Delta(false_val, eval_op1, eval_op2)"
                               "val" "mun-1")
                              (("2" (assert)
                                (("2" (expand "eval" 1)
                                  (("2" (expand "Delta" 1)
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mu_terminates formula-decl nil pvs0_lang nil)
    (val skolem-const-decl "Val" pvs0_lang nil)
    (eval_op2 skolem-const-decl "list[[[Val, Val] -> Val]]" pvs0_lang nil)
    (eval_op1 skolem-const-decl "list[[Val -> Val]]" pvs0_lang nil)
    (false_val skolem-const-decl "Val" pvs0_lang nil)
    (determined? const-decl "bool" pvs0_lang nil)
    (eval_expr def-decl "Maybe[Val]" pvs0_expr nil)
    (eval_expr_semantic_rel_j rec-application-judgement "{myv: Maybe[Val] |
   some?(myv) IMPLIES semantic_rel_expr(pvs0)(expr, env, val(myv))}" pvs0_lang
     nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
   some?(myv) IMPLIES
    n > 0 AND FORALL (m: upfrom(n)): myv = eval_expr(pvs0)(m, expr, env)}"
     pvs0_lang nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (mu_min formula-decl nil pvs0_lang nil)
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (mu const-decl "posnat" pvs0_lang nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Delta const-decl "PVS0" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (Val formal-nonempty-type-decl nil pvs0_lang nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (Delta_non_terminating 0
  (Delta_non_terminating-1 nil 3665579603
   ("" (skeep)
    (("" (lemma "terminating_determined_all")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "Delta_undetermined")
            (("" (inst? -1)
              (("" (inst -1 "false_val") (("" (inst -1 "false_val") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((terminating_determined_all formula-decl nil pvs0_lang nil)
    (Delta_undetermined formula-decl nil pvs0_lang nil)
    (Delta const-decl "PVS0" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (Val formal-nonempty-type-decl nil pvs0_lang nil))
   shostak))
 (pvs0_not_in_pvs 0
  (pvs0_not_in_pvs-2 nil 3665708529
   (""
    (inst 1
     "Delta(choose({v:Val|TRUE}),(:LAMBDA(v:Val):v:),(:LAMBDA(v1,v2:Val):v1:))")
    (("1" (skeep)
      (("1" (lemma "Delta_non_terminating")
        (("1" (inst?)
          (("1" (expand "terminating?")
            (("1" (expand "terminates_expr")
              (("1" (skeep)
                (("1" (inst -1 "env")
                  (("1" (inst 1 "f(env)")
                    (("1" (expand "semantic_rel") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (grind) nil nil))
    nil)
   ((terminates_expr const-decl "bool" pvs0_expr nil)
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (Delta_non_terminating formula-decl nil pvs0_lang nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (choose const-decl "(p)" sets nil) (Delta const-decl "PVS0" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (Val formal-nonempty-type-decl nil pvs0_lang nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil))
   nil)))


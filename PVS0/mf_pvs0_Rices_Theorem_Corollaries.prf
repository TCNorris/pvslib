(mf_pvs0_Rices_Theorem_Corollaries
 (uniform_halting_problem_undecidability_Turing_complete 0
  (uniform_halting_problem_undecidability_Turing_complete-1 nil
   3797780279
   ("" (lemma "Rice_theorem_for_Turing_complete_pvs0")
    ((""
      (inst -1 "lambda(pvs0 : partial_recursive): terminating?(pvs0)")
      (("1" (prop)
        (("1" (decompose-equality)
          (("1" (inst -1 "(lop1,lop2,false_val,(:cnst(false_val):))")
            (("1" (hide -2 -3)
              (("1" (expand "emptyset")
                (("1" (expand "terminating?")
                  (("1" (expand "nth")
                    (("1" (expand "terminates_expr")
                      (("1" (skeep)
                        (("1" (inst 1 "false_val")
                          (("1" (expand "semantic_rel_expr")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1 -2)
              (("2" (expand "partial_recursive?")
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide -1 -3)
          (("2" (decompose-equality)
            (("2" (expand "fullset")
              (("2" (inst -1 "Delta(false_val,lop1,lop2)")
                (("1" (lemma "Delta_non_terminating")
                  (("1" (inst?) nil nil)) nil)
                 ("2" (expand "Delta")
                  (("2" (expand "partial_recursive?")
                    (("2" (grind) (("2" (decompose-equality) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -1)
        (("2" (expand "is_semantic_predicate?")
          (("2" (skeep)
            (("2" (prop)
              (("1" (expand "terminating?")
                (("1" (expand "nth")
                  (("1" (expand "terminates_expr")
                    (("1" (skeep)
                      (("1" (inst?)
                        (("1" (skeep)
                          (("1" (inst 1 "val")
                            (("1" (inst -2 "env" "val")
                              (("1"
                                (expand "semantic_rel")
                                (("1"
                                  (expand "nth")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "terminating?")
                (("2" (expand "terminates_expr")
                  (("2" (skeep)
                    (("2" (inst -1 "env")
                      (("2" (skeep)
                        (("2" (inst 1 "val")
                          (("2" (inst -2 "env" "val")
                            (("2" (expand "semantic_rel")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((terminating? const-decl "bool" mf_pvs0_lang nil)
    (is_semantic_predicate? const-decl "bool" mf_pvs0_Rices_Theorem
     nil)
    (pred type-eq-decl nil defined_types nil)
    (partial_recursive type-eq-decl nil mf_pvs0_computable nil)
    (partial_recursive? const-decl "bool" mf_pvs0_computable nil)
    (lop2 const-decl "list[[[nat, nat] -> nat]]" mf_pvs0_basic_programs
     nil)
    (lop1 const-decl "list[[nat -> nat]]" mf_pvs0_basic_programs nil)
    (false_val const-decl "nat" mf_pvs0_basic_programs nil)
    (PVS0 type-eq-decl nil mf_pvs0_expr nil)
    (lmf_PVS0Expr type-eq-decl nil mf_pvs0_expr nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" mf_PVS0Expr_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (mf_PVS0Expr type-decl nil mf_PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rec? adt-recognizer-decl "[mf_PVS0Expr -> boolean]"
     mf_PVS0Expr_adt nil)
    (rec adt-constructor-decl "[[nat, mf_PVS0Expr] -> (rec?)]"
     mf_PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[mf_PVS0Expr -> boolean]" mf_PVS0Expr_adt
     nil)
    (vr adt-constructor-decl "(vr?)" mf_PVS0Expr_adt nil)
    (get_arg shared-adt-accessor-decl
     "[{x: mf_PVS0Expr | op1?(x) OR rec?(x)} -> mf_PVS0Expr]"
     mf_PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[mf_PVS0Expr -> boolean]"
     mf_PVS0Expr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (get_from_list adt-accessor-decl "[(rec?) -> nat]" mf_PVS0Expr_adt
     nil)
    (Delta_non_terminating formula-decl nil mf_pvs0_lang nil)
    (Delta const-decl "PVS0" mf_pvs0_lang nil)
    (fullset const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (length def-decl "nat" list_props nil)
    (subterm adt-def-decl "boolean" mf_PVS0Expr_adt nil)
    (valid_index_rec const-decl "bool" mf_pvs0_lang nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (terminates_expr const-decl "bool" mf_pvs0_expr nil)
    (semantic_rel_expr inductive-decl "bool" mf_pvs0_expr nil)
    (nth def-decl "T" list_props nil)
    (cnst adt-constructor-decl "[T -> (cnst?)]" mf_PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[mf_PVS0Expr -> boolean]"
     mf_PVS0Expr_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (semantic_rel const-decl "bool" mf_pvs0_lang nil)
    (Rice_theorem_for_Turing_complete_pvs0 formula-decl nil
     mf_pvs0_Rices_Theorem nil))
   shostak))
 (fixed_point_existence_undecidability_Turing_complete 0
  (fixed_point_existence_undecidability_Turing_complete-1 nil
   3797780859
   ("" (skeep)
    (("" (lemma "Rice_theorem_for_Turing_complete_pvs0")
      ((""
        (inst -1
         "lambda(pvs0 : partial_recursive): EXISTS (p: nat): semantic_rel(pvs0)(p, p)")
        (("1" (prop)
          (("1" (decompose-equality -2)
            (("1" (expand "emptyset")
              (("1" (inst -1 "(lop1,lop2,false_val, (: cnst(0) :))")
                (("1" (inst 1 "0")
                  (("1" (hide -)
                    (("1" (expand "semantic_rel")
                      (("1" (expand "nth")
                        (("1" (expand "semantic_rel_expr")
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -)
                  (("2" (expand "partial_recursive?")
                    (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                  nil)
                 ("3" (hide -) (("3" (grind) nil nil)) nil)
                 ("4" (hide -) (("4" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide -1 -3)
            (("2" (expand "fullset")
              (("2" (decompose-equality)
                (("2" (inst -1 "(lop1,lop2,false_val,(:op1(0,vr):))")
                  (("1" (skeep)
                    (("1" (expand "semantic_rel")
                      (("1" (expand "nth")
                        (("1" (expand "semantic_rel_expr")
                          (("1" (skeep)
                            (("1" (expand "semantic_rel_expr")
                              (("1"
                                (expand "eval_op1")
                                (("1"
                                  (expand "lop1")
                                  (("1"
                                    (expand "length")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "succ")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (inst 3 "decider") nil nil))
          nil)
         ("2" (hide -1)
          (("2" (expand "is_semantic_predicate?")
            (("2" (skeep)
              (("2" (prop)
                (("1" (skeep)
                  (("1" (inst?)
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst?)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Rice_theorem_for_Turing_complete_pvs0 formula-decl nil
     mf_pvs0_Rices_Theorem nil)
    (length_singleton formula-decl nil more_list_props structures)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (valid_index_rec const-decl "bool" mf_pvs0_lang nil)
    (subterm adt-def-decl "boolean" mf_PVS0Expr_adt nil)
    (semantic_rel_expr inductive-decl "bool" mf_pvs0_expr nil)
    (nth def-decl "T" list_props nil)
    (cnst adt-constructor-decl "[T -> (cnst?)]" mf_PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[mf_PVS0Expr -> boolean]"
     mf_PVS0Expr_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fullset const-decl "set" sets nil)
    (op1? adt-recognizer-decl "[mf_PVS0Expr -> boolean]"
     mf_PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, mf_PVS0Expr] -> (op1?)]"
     mf_PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[mf_PVS0Expr -> boolean]" mf_PVS0Expr_adt
     nil)
    (vr adt-constructor-decl "(vr?)" mf_PVS0Expr_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (succ const-decl "nat" mf_pvs0_basic_programs nil)
    (eval_op1 const-decl "Val" mf_pvs0_expr nil)
    (pi2 const-decl "[nat -> nat]" mf_pvs0_basic_programs nil)
    (pi1 const-decl "[nat -> nat]" mf_pvs0_basic_programs nil)
    (TRUE const-decl "bool" booleans nil)
    (computable? const-decl "bool" mf_pvs0_computable nil)
    (computable type-eq-decl nil mf_pvs0_computable nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (mf_PVS0Expr type-decl nil mf_PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" mf_PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (lmf_PVS0Expr type-eq-decl nil mf_pvs0_expr nil)
    (PVS0 type-eq-decl nil mf_pvs0_expr nil)
    (false_val const-decl "nat" mf_pvs0_basic_programs nil)
    (lop1 const-decl "list[[nat -> nat]]" mf_pvs0_basic_programs nil)
    (lop2 const-decl "list[[[nat, nat] -> nat]]" mf_pvs0_basic_programs
     nil)
    (partial_recursive? const-decl "bool" mf_pvs0_computable nil)
    (partial_recursive type-eq-decl nil mf_pvs0_computable nil)
    (pred type-eq-decl nil defined_types nil)
    (is_semantic_predicate? const-decl "bool" mf_pvs0_Rices_Theorem
     nil)
    (semantic_rel const-decl "bool" mf_pvs0_lang nil))
   shostak))
 (self_replication_undecidability_Turing_complete 0
  (self_replication_undecidability_Turing_complete-2 nil 3798890900
   ("" (lemma "Rice_theorem_for_Turing_complete_pvs0")
    (("" (skeep)
      ((""
        (inst -1
         "lambda(pvs0 : partial_recursive): EXISTS (p: partial_recursive):
                    FORALL (i: nat):
                      semantic_rel(p)(i, p_recursive2nat(p)) AND
                       semantic_rel(pvs0)(i, p_recursive2nat(p))")
        (("1" (prop)
          (("1" (hide -1 -3)
            (("1" (decompose-equality)
              (("1" (expand "emptyset")
                (("1" (lemma "Recursion_Theorem")
                  (("1"
                    (inst -1 "(lop1,lop2,false_val,(: rec(1,vr) :))")
                    (("1" (skeep)
                      (("1" (beta)
                        (("1" (prop)
                          (("1"
                            (inst -3 "(lop1, lop2, false_val,
                                                        append((: rec(1, vr) :),
                                                               map(offset_rec(length((: rec(1, vr) :))))
                                                                  (print`4)))")
                            (("1"
                              (inst 1 "(lop1, lop2, false_val,
                                                                append((: rec(1, vr) :),
                                                                       map(offset_rec(length((: rec(1, vr) :))))
                                                                          (print`4)))")
                              (("1"
                                (skeep)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "semantic_rel")
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (expand "append" 1 2)
                                        (("1"
                                          (expand
                                           "semantic_rel_expr"
                                           1)
                                          (("1"
                                            (inst 1 "i")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (expand
                                                 "semantic_rel_expr")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "append" 1 2)
                                                (("2"
                                                  (expand "nth" 1)
                                                  (("2"
                                                    (expand
                                                     "append"
                                                     1
                                                     2)
                                                    (("2"
                                                      (expand "nth" 1)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         -3)
                                                        (("2"
                                                          (expand
                                                           "map"
                                                           1
                                                           2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -3
                                                               "i")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "semantic_rel")
                                    (("2"
                                      (expand "nth" 1)
                                      (("2"
                                        (expand "append" 1 2)
                                        (("2"
                                          (expand
                                           "semantic_rel_expr"
                                           1)
                                          (("2"
                                            (inst 1 "i")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (expand
                                                 "semantic_rel_expr")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "append" 1 2)
                                                (("2"
                                                  (expand "nth" 1)
                                                  (("2"
                                                    (expand
                                                     "append"
                                                     1
                                                     2)
                                                    (("2"
                                                      (expand "nth" 1)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         -3)
                                                        (("2"
                                                          (expand
                                                           "map"
                                                           1
                                                           2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -3
                                                               "i")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil)
                               ("3" (grind) nil nil))
                              nil)
                             ("2" (assert) nil nil)
                             ("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1 -3)
            (("2" (decompose-equality)
              (("2" (expand "fullset")
                (("2" (inst -1 "(lop1,lop2,false_val,(: vr :))")
                  (("1" (skeep)
                    (("1" (case "p_recursive2nat(p) = 0")
                      (("1" (inst -2 "1")
                        (("1" (replace -1)
                          (("1" (prop)
                            (("1" (expand "semantic_rel" -3)
                              (("1"
                                (expand "nth")
                                (("1"
                                  (expand "semantic_rel_expr")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -1 "0")
                        (("2" (prop)
                          (("2" (expand "semantic_rel" -2)
                            (("2" (expand "nth")
                              (("2"
                                (expand "semantic_rel_expr")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (grind) nil nil))
          nil)
         ("2" (hide -1)
          (("2" (expand "is_semantic_predicate?")
            (("2" (skeep)
              (("2" (prop)
                (("1" (skeep)
                  (("1" (inst 1 "p")
                    (("1" (skeep)
                      (("1" (inst -1 "i")
                        (("1" (prop)
                          (("1" (assert)
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst 1 "p")
                    (("2" (skeep)
                      (("2" (inst -1 "i")
                        (("2" (prop)
                          (("2" (assert)
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Rice_theorem_for_Turing_complete_pvs0 formula-decl nil
     mf_pvs0_Rices_Theorem nil)
    (p_recursive2nat const-decl "nat" mf_pvs0_Recursion_Theorem nil)
    (semantic_rel const-decl "bool" mf_pvs0_lang nil)
    (is_semantic_predicate? const-decl "bool" mf_pvs0_Rices_Theorem
     nil)
    (pred type-eq-decl nil defined_types nil)
    (partial_recursive type-eq-decl nil mf_pvs0_computable nil)
    (partial_recursive? const-decl "bool" mf_pvs0_computable nil)
    (lop2 const-decl "list[[[nat, nat] -> nat]]" mf_pvs0_basic_programs
     nil)
    (lop1 const-decl "list[[nat -> nat]]" mf_pvs0_basic_programs nil)
    (false_val const-decl "nat" mf_pvs0_basic_programs nil)
    (PVS0 type-eq-decl nil mf_pvs0_expr nil)
    (lmf_PVS0Expr type-eq-decl nil mf_pvs0_expr nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" mf_PVS0Expr_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (mf_PVS0Expr type-decl nil mf_PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (tuple2nat const-decl "nat" tuple2nat numbers)
    (listnat2nat const-decl "nat" mf_pvs0_computable nil)
    (listPVS0nat2nat const-decl "nat" mf_pvs0_computable nil)
    (computable type-eq-decl nil mf_pvs0_computable nil)
    (computable? const-decl "bool" mf_pvs0_computable nil)
    (pi1 const-decl "[nat -> nat]" mf_pvs0_basic_programs nil)
    (pi2 const-decl "[nat -> nat]" mf_pvs0_basic_programs nil)
    (subterm adt-def-decl "boolean" mf_PVS0Expr_adt nil)
    (valid_index_rec const-decl "bool" mf_pvs0_lang nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (fullset const-decl "set" sets nil)
    (vr adt-constructor-decl "(vr?)" mf_PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[mf_PVS0Expr -> boolean]" mf_PVS0Expr_adt
     nil)
    (rec adt-constructor-decl "[[nat, mf_PVS0Expr] -> (rec?)]"
     mf_PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[mf_PVS0Expr -> boolean]"
     mf_PVS0Expr_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (offset_rec def-decl "mf_PVS0Expr" mf_pvs0_lang nil)
    (print skolem-const-decl "partial_recursive[false_val, lop1, lop2]"
           mf_pvs0_Rices_Theorem_Corollaries nil)
    (length def-decl "nat" list_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (semantic_rel_expr inductive-decl "bool" mf_pvs0_expr nil)
    (nth def-decl "T" list_props nil)
    (Recursion_Theorem formula-decl nil mf_pvs0_Recursion_Theorem nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil)
  (self_replication_undecidability_Turing_complete-1 nil 3798890670
   ("" (postpone) nil nil) nil shostak))
 (pvs0_program_equivalence_undecidability_Turing_complete 0
  (pvs0_program_equivalence_undecidability_Turing_complete-1 nil
   3797781771
   ("" (lemma "Rice_theorem_for_Turing_complete_pvs0")
    ((""
      (inst -1 "lambda(pvs1: partial_recursive): FORALL (i, o1: nat):
                  semantic_rel(lop1, lop2, false_val, (: cnst(0) :))(i, o1) <=>
                   semantic_rel(pvs1)(i, o1)")
      (("1" (skeep -2)
        (("1" (inst -3 "(lop1,lop2,false_val, (: cnst(0) :))" "_")
          (("1" (prop)
            (("1" (hide-all-but -2)
              (("1" (decompose-equality)
                (("1" (expand "emptyset")
                  (("1"
                    (inst -1 "(lop1, lop2, false_val, (: cnst(0) :))")
                    (("1" (skeep)
                      (("1" (expand "semantic_rel")
                        (("1" (propax) nil nil)) nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil)
                     ("4" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil)
             ("2" (hide-all-but -2)
              (("2" (decompose-equality)
                (("1" (expand "fullset")
                  (("1"
                    (inst -1 "(lop1, lop2, false_val, (: cnst(1) :))")
                    (("1" (expand "semantic_rel")
                      (("1" (expand "nth")
                        (("1" (expand "semantic_rel_expr")
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil)
                     ("4" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil)
             ("3" (hide 1 2)
              (("3"
                (inst 1
                 "(lop1,lop2,false_val,append( (: rec(1,op2(1,cnst(p_recursive2nat
                                                            (lop1, lop2, false_val, (: cnst(0) :))),vr)) :), map(offset_rec(1))(decider`4) ))")
                (("1" (skeep)
                  (("1" (inst -1 "pvs0")
                    (("1" (hide -)
                      (("1" (expand "semantic_rel")
                        (("1" (expand "nth")
                          (("1" (expand "append" 1 2)
                            (("1" (expand "semantic_rel_expr" 1 1)
                              (("1"
                                (case
                                 "1 <
                                                                length(append((: rec
                                                                                 (1,
                                                                                  op2
                                                                                  (1,
                                                                                   cnst
                                                                                   (p_recursive2nat
                                                                                    (lop1,
                                                                                     lop2,
                                                                                     false_val,
                                                                                     (: cnst(0) :))),
                                                                                   vr)) :),
                                                                              map(offset_rec(1))(decider`4)))")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "semantic_rel_expr" 1 1)
                                    (("1"
                                      (expand "semantic_rel_expr" 1 1)
                                      (("1"
                                        (expand
                                         "semantic_rel_expr"
                                         1
                                         1)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (inst
                                             1
                                             "tuple2nat(p_recursive2nat
                                                                                  (lop1,
                                                                                   lop2,
                                                                                   false_val,
                                                                                   (: cnst(0) :)),
                                                                                  p_recursive2nat(pvs0))")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (inst
                                                 1
                                                 "p_recursive2nat(lop1, lop2, false_val, (: cnst(0) :))"
                                                 "p_recursive2nat(pvs0)")
                                                (("1"
                                                  (expand "eval_op2")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "append" 1 2)
                                                (("2"
                                                  (expand "append" 1 2)
                                                  (("2"
                                                    (expand "nth")
                                                    (("2"
                                                      (expand
                                                       "map"
                                                       1
                                                       2)
                                                      (("2"
                                                        (expand "nth")
                                                        (("2"
                                                          (lemma
                                                           "add_rec_list")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "false_val"
                                                             "car(decider`4)"
                                                             "decider`4"
                                                             "(: rec(1,
                                                                                      op2
                                                                                      (1,
                                                                                       cnst
                                                                                       (p_recursive2nat
                                                                                        (lop1,
                                                                                         lop2,
                                                                                         false_val,
                                                                                         (: cnst(0) :))),
                                                                                       vr)) :)"
                                                             "lop1"
                                                             "lop2"
                                                             "tuple2nat(p_recursive2nat(lop1,
                                                                                                  lop2,
                                                                                                  false_val,
                                                                                                  (: cnst(0) :)),
                                                                                  p_recursive2nat(pvs0))"
                                                             "false_val")
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (case
                                                                       "(lop1, lop2, false_val, decider`4) = decider")
                                                                      (("1"
                                                                        (reveal
                                                                         -2
                                                                         2)
                                                                        (("1"
                                                                          (replaces
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "semantic_rel")
                                                                            (("1"
                                                                              (expand
                                                                               "nth")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2
                                                                         -1)
                                                                        (("2"
                                                                          (typepred
                                                                           "decider")
                                                                          (("2"
                                                                            (expand
                                                                             "computable?")
                                                                            (("2"
                                                                              (expand
                                                                               "partial_recursive?")
                                                                              (("2"
                                                                                (prop)
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (reveal -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand
                                                 "semantic_rel"
                                                 -1
                                                 2)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (replaces -3)
                                                        (("1"
                                                          (replaces -3)
                                                          (("1"
                                                            (expand
                                                             "eval_op2")
                                                            (("1"
                                                              (expand
                                                               "lop2"
                                                               -3)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -3)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   -3)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -3)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -3)
                                                                        (("1"
                                                                          (replaces
                                                                           -3)
                                                                          (("1"
                                                                            (expand
                                                                             "append"
                                                                             -3
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "append"
                                                                               -3
                                                                               2)
                                                                              (("1"
                                                                                (expand
                                                                                 "nth")
                                                                                (("1"
                                                                                  (expand
                                                                                   "map"
                                                                                   -3
                                                                                   2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "add_rec_list")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "false_val"
                                                                                         "car(decider`4)"
                                                                                         "decider`4"
                                                                                         "(: rec(1,
                                                                                  op2
                                                                                  (1,
                                                                                   cnst
                                                                                   (p_recursive2nat
                                                                                    (lop1,
                                                                                     lop2,
                                                                                     false_val,
                                                                                     (: cnst(0) :))),
                                                                                   vr)) :)"
                                                                                         "lop1"
                                                                                         "lop2"
                                                                                         "tuple2nat(p_recursive2nat(lop1,
                                                                                              lop2,
                                                                                              false_val,
                                                                                              (: cnst(0) :)),
                                                                              p_recursive2nat(pvs0))"
                                                                                         "false_val")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    1))
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "semantic_rel")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "(lop1, lop2, false_val, decider`4) = decider")
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "nth")
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "decider")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "computable?")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "partial_recursive?")
                                                                                                              (("2"
                                                                                                                (prop)
                                                                                                                (("2"
                                                                                                                  (decompose-equality
                                                                                                                   1)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (-3
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-2 1))
                                                    (("2"
                                                      (expand "nth")
                                                      (("2"
                                                        (expand
                                                         "semantic_rel")
                                                        (("2"
                                                          (expand
                                                           "nth")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (rewrite "length_append")
                                    (("2"
                                      (rewrite "map_length")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil)
                                 ("4"
                                  (hide-all-but 1)
                                  (("4" (grind) nil nil))
                                  nil)
                                 ("5"
                                  (hide-all-but 1)
                                  (("5" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -)
                  (("2" (expand "computable?")
                    (("2" (prop)
                      (("1" (expand "partial_recursive?")
                        (("1" (typepred "decider")
                          (("1" (expand "computable?")
                            (("1" (prop)
                              (("1"
                                (expand "partial_recursive?")
                                (("1"
                                  (prop)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "append" 1 1)
                                        (("1"
                                          (expand "nth" 1)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (grind)
                                                (("1"
                                                  (decompose-equality)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "valid_index_rec_offset")
                                                (("2"
                                                  (rewrite
                                                   "map_nth_rw")
                                                  (("1"
                                                    (inst -5 "i-1")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "nth(decider`4,i-1)"
                                                       "length(decider`4)"
                                                       "1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "append"
                                                           2
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "append"
                                                             2
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               2
                                                               1)
                                                              (("1"
                                                                (rewrite
                                                                 "map_length")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "i")
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 1 2))
                                                      (("2"
                                                        (expand
                                                         "append"
                                                         -1
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "append"
                                                           -1
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("2"
                                                              (rewrite
                                                               "map_length")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "decider")
                        (("2" (expand "computable?")
                          (("2" (prop)
                            (("2" (expand "terminating?")
                              (("2"
                                (expand "terminates_expr")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (expand "nth" 1)
                                    (("2"
                                      (expand "append" 1 2)
                                      (("2"
                                        (expand "semantic_rel_expr" 1)
                                        (("2"
                                          (expand "append" 1 2)
                                          (("2"
                                            (expand "append" 1 2)
                                            (("2"
                                              (expand "length" 1 1)
                                              (("2"
                                                (case
                                                 "1 < 1+length(map[mf_PVS0Expr[nat],mf_PVS0Expr[nat]](offset_rec[nat](1))(decider`4))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "nth" 1)
                                                    (("1"
                                                      (expand
                                                       "append"
                                                       1
                                                       3)
                                                      (("1"
                                                        (expand
                                                         "append"
                                                         1
                                                         3)
                                                        (("1"
                                                          (expand
                                                           "semantic_rel_expr"
                                                           1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "semantic_rel_expr"
                                                             1
                                                             (1 2))
                                                            (("1"
                                                              (expand
                                                               "eval_op2")
                                                              (("1"
                                                                (inst
                                                                 -3
                                                                 "tuple2nat(p_recursive2nat(lop1,lop2,false_val, (: cnst[real](0) :)),env)")
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "val")
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "tuple2nat(p_recursive2nat(lop1,lop2,false_val, (: cnst[real](0) :)),env)")
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (inst
                                                                           1
                                                                           "p_recursive2nat(lop1,lop2,false_val, (: cnst[real](0) :))"
                                                                           "env")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "add_rec_list")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "false_val"
                                                                             "nth(decider`4,0)"
                                                                             "decider`4"
                                                                             "(: rec[nat](1,op2[nat](1,cnst[nat](p_recursive2nat(lop1,lop2,false_val,(: cnst[real](0) :))), vr[nat])) :)"
                                                                             "lop1"
                                                                             "lop2"
                                                                             "tuple2nat(p_recursive2nat(lop1,lop2,false_val, (: cnst[real](0) :)),env)"
                                                                             "val")
                                                                            (("2"
                                                                              (expand
                                                                               "length"
                                                                               -1)
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 -1)
                                                                                (("2"
                                                                                  (case
                                                                                   "(lop1, lop2, false_val, decider`4)=decider")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "map_nth_rw")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (reveal
                                                                                       -3)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "partial_recursive?")
                                                                                        (("2"
                                                                                          (decompose-equality)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("4"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
                 ("4" (hide-all-but 1)
                  (("4" (expand "partial_recursive?")
                    (("4" (grind) nil nil)) nil))
                  nil)
                 ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil)
                 ("6" (hide-all-but 1) (("6" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (expand "partial_recursive?") (("2" (grind) nil nil))
              nil))
            nil)
           ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
           ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (hide -1)
        (("2" (expand "is_semantic_predicate?")
          (("2" (skeep)
            (("2" (prop)
              (("1" (skeep)
                (("1" (inst?)
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (replace -2) (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (inst?)
                  (("2" (inst?)
                    (("2" (replace -2) (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
       ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil))
      nil))
    nil)
   ((cnst adt-constructor-decl "[T -> (cnst?)]" mf_PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[mf_PVS0Expr -> boolean]"
     mf_PVS0Expr_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (semantic_rel const-decl "bool" mf_pvs0_lang nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (is_semantic_predicate? const-decl "bool" mf_pvs0_Rices_Theorem
     nil)
    (pred type-eq-decl nil defined_types nil)
    (partial_recursive type-eq-decl nil mf_pvs0_computable nil)
    (partial_recursive? const-decl "bool" mf_pvs0_computable nil)
    (lop2 const-decl "list[[[nat, nat] -> nat]]" mf_pvs0_basic_programs
     nil)
    (lop1 const-decl "list[[nat -> nat]]" mf_pvs0_basic_programs nil)
    (false_val const-decl "nat" mf_pvs0_basic_programs nil)
    (PVS0 type-eq-decl nil mf_pvs0_expr nil)
    (lmf_PVS0Expr type-eq-decl nil mf_pvs0_expr nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" mf_PVS0Expr_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (mf_PVS0Expr type-decl nil mf_PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (get_from_list adt-accessor-decl "[(rec?) -> nat]" mf_PVS0Expr_adt
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (op1? adt-recognizer-decl "[mf_PVS0Expr -> boolean]"
     mf_PVS0Expr_adt nil)
    (get_arg shared-adt-accessor-decl
     "[{x: mf_PVS0Expr | op1?(x) OR rec?(x)} -> mf_PVS0Expr]"
     mf_PVS0Expr_adt nil)
    (terminates_expr const-decl "bool" mf_pvs0_expr nil)
    (terminating? const-decl "bool" mf_pvs0_lang nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (i skolem-const-decl "below[length(append[mf_PVS0Expr[nat]]
                 ((: rec[nat]
                         (1,
                          op2[nat]
                              (1,
                               cnst[nat]
                                   (p_recursive2nat
                                    (lop1,
                                     lop2,
                                     false_val,
                                     (: cnst[nat](0) :))),
                               vr[nat])) :),
                  map[mf_PVS0Expr[nat], mf_PVS0Expr[nat]]
                      (offset_rec[nat](1))(decider`4)))]"
       mf_pvs0_Rices_Theorem_Corollaries nil)
    (valid_index_rec_offset formula-decl nil mf_pvs0_lang nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (map_length formula-decl nil more_map_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (eval_op2 const-decl "Val" mf_pvs0_expr nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (listPVS0nat2nat const-decl "nat" mf_pvs0_computable nil)
    (listnat2nat const-decl "nat" mf_pvs0_computable nil)
    (cons2nat def-decl "nat" mf_pvs0_computable nil)
    (rac const-decl "T" more_list_props structures)
    (PVS02nat_limit def-decl "nat" mf_pvs0_computable nil)
    (add_rec_list formula-decl nil mf_pvs0_lang nil)
    (TRUE const-decl "bool" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (tuple2nat const-decl "nat" tuple2nat numbers)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (append def-decl "list[T]" list_props nil)
    (rec? adt-recognizer-decl "[mf_PVS0Expr -> boolean]"
     mf_PVS0Expr_adt nil)
    (rec adt-constructor-decl "[[nat, mf_PVS0Expr] -> (rec?)]"
     mf_PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[mf_PVS0Expr -> boolean]"
     mf_PVS0Expr_adt nil)
    (op2 adt-constructor-decl
     "[[nat, mf_PVS0Expr, mf_PVS0Expr] -> (op2?)]" mf_PVS0Expr_adt nil)
    (p_recursive2nat const-decl "nat" mf_pvs0_Recursion_Theorem nil)
    (vr? adt-recognizer-decl "[mf_PVS0Expr -> boolean]" mf_PVS0Expr_adt
     nil)
    (vr adt-constructor-decl "(vr?)" mf_PVS0Expr_adt nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (offset_rec def-decl "mf_PVS0Expr" mf_pvs0_lang nil)
    (computable? const-decl "bool" mf_pvs0_computable nil)
    (computable type-eq-decl nil mf_pvs0_computable nil)
    (decider skolem-const-decl "computable[false_val, lop1, lop2]"
     mf_pvs0_Rices_Theorem_Corollaries nil)
    (semantic_rel_expr inductive-decl "bool" mf_pvs0_expr nil)
    (fullset const-decl "set" sets nil)
    (pi1 const-decl "[nat -> nat]" mf_pvs0_basic_programs nil)
    (pi2 const-decl "[nat -> nat]" mf_pvs0_basic_programs nil)
    (length def-decl "nat" list_props nil)
    (subterm adt-def-decl "boolean" mf_PVS0Expr_adt nil)
    (valid_index_rec const-decl "bool" mf_pvs0_lang nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Rice_theorem_for_Turing_complete_pvs0 formula-decl nil
     mf_pvs0_Rices_Theorem nil))
   shostak))
 (natural_predicate_undecidability 0
  (natural_predicate_undecidability-1 nil 3797865300
   ("" (lemma "fixed_point_existence_undecidability_Turing_complete")
    ((""
      (inst -1
       "lambda(i : nat): EXISTS(p : nat): semantic_rel(lop1,lop2,false_val,nat2listPVS0nat(i))(p,p)")
      (("" (skeep)
        (("" (inst?)
          (("" (skeep)
            (("" (inst -1 "p_recursive2nat(pvs0)")
              (("" (replaces -1)
                (("" (expand "p_recursive2nat")
                  (("" (rewrite "nat2listPVS0nat_listPVS0nat2nat")
                    (("1"
                      (case "(lop1, lop2, false_val, pvs0`4) = pvs0")
                      (("1" (replaces -1) (("1" (assert) nil nil)) nil)
                       ("2" (hide 2)
                        (("2" (typepred "pvs0")
                          (("2" (expand "partial_recursive?")
                            (("2" (prop)
                              (("2" (decompose-equality 1) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "pvs0")
                      (("2" (expand "partial_recursive?")
                        (("2" (flatten)
                          (("2" (hide-all-but (-4 1))
                            (("2" (expand "limited")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (mf_PVS0Expr type-decl nil mf_PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" mf_PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (lmf_PVS0Expr type-eq-decl nil mf_pvs0_expr nil)
    (PVS0 type-eq-decl nil mf_pvs0_expr nil)
    (semantic_rel const-decl "bool" mf_pvs0_lang nil)
    (lop1 const-decl "list[[nat -> nat]]" mf_pvs0_basic_programs nil)
    (lop2 const-decl "list[[[nat, nat] -> nat]]" mf_pvs0_basic_programs
     nil)
    (false_val const-decl "nat" mf_pvs0_basic_programs nil)
    (limited const-decl "bool" mf_pvs0_computable nil)
    (nat2listPVS0nat const-decl "(limited)" mf_pvs0_computable nil)
    (computable type-eq-decl nil mf_pvs0_computable nil)
    (computable? const-decl "bool" mf_pvs0_computable nil)
    (p_recursive2nat const-decl "nat" mf_pvs0_Recursion_Theorem nil)
    (partial_recursive type-eq-decl nil mf_pvs0_computable nil)
    (partial_recursive? const-decl "bool" mf_pvs0_computable nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat2listPVS0nat_listPVS0nat2nat formula-decl nil
     mf_pvs0_computable nil)
    (TRUE const-decl "bool" booleans nil)
    (fixed_point_existence_undecidability_Turing_complete formula-decl
     nil mf_pvs0_Rices_Theorem_Corollaries nil))
   nil)))


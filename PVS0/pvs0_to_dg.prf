(pvs0_to_dg
 (pvs0_to_dg_make_cc_TCC1 0
  (pvs0_to_dg_make_cc_TCC1-1 nil 3650913537 ("" (subtype-tcc) nil nil) nil nil
   (pvs0_to_dg_make_cc subtype
    "pvs0_cc[pvs0_to_dg.Val].subterm_at(pvs0_to_dg.expr, pvs0_to_dg.path)"
    "{x: PVS0Expr_adt[pvs0_to_dg.Val].PVS0Expr | booleans.OR(PVS0Expr_adt[pvs0_to_dg.Val].op1?(x), PVS0Expr_adt[pvs0_to_dg.Val].rec?(x))}")))
 (pvs0_to_dg_make_cc_TCC2 0
  (pvs0_to_dg_make_cc_TCC2-1 nil 3650913537
   ("" (skeep)
    (("" (expand "pvs0_to_dg_vertex")
      (("" (expand "make_cc")
        (("" (typepred "path")
          (("" (hide -1) (("" (apply-extensionality) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((pvs0_to_dg_vertex const-decl "bool" pvs0_to_dg nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})" pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" PVS0Expr_adt nil)
    (PVS0Expr_rec_extensionality formula-decl nil PVS0Expr_adt nil)
    (make_cc const-decl "CallingContext" cc_def CCG))
   nil
   (pvs0_to_dg_make_cc subtype
    "cc_def[pvs0_to_dg.Val, PVS0Expr_adt[pvs0_to_dg.Val].PVS0Expr, list_adt[PVS0Bool_adt[pvs0_to_dg.Val].PVS0Bool].list, Path[Val]].make_cc(pvs0_to_dg.path, PVS0Expr_adt[pvs0_to_dg.Val].get_arg(pvs0_cc[pvs0_to_dg.Val].subterm_at(pvs0_to_dg.expr, pvs0_to_dg.path)), pvs0_cc[pvs0_to_dg.Val].path_conditions(pvs0_to_dg.expr, pvs0_to_dg.path))"
    "(pvs0_to_dg.pvs0_to_dg_vertex(pvs0_to_dg.expr, pvs0_to_dg.path))")))
 (pvs0_to_dg_paths_vertices_TCC1 0
  (pvs0_to_dg_paths_vertices_TCC1-1 nil 3650913537 ("" (grind) nil nil)
   ((valid_path def-decl "bool" pvs0_cc nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (make_cc const-decl "CallingContext" cc_def CCG)
    (pvs0_to_dg_make_cc const-decl "(pvs0_to_dg_vertex(expr, path))"
     pvs0_to_dg nil)
    (member def-decl "bool" list_props nil))
   nil
   (pvs0_to_dg_paths_vertices subtype
    "list_adt[(pvs0_to_dg.cc_of_pvs0(pvs0_to_dg.expr))].null"
    "{res: list_adt[(pvs0_to_dg.cc_of_pvs0(pvs0_to_dg.expr))].list | FORALL (p: (pvs0_cc[pvs0_to_dg.Val].valid_path(pvs0_to_dg.expr)) | list_props[(pvs0_cc[pvs0_to_dg.Val].valid_path(pvs0_to_dg.expr))].member(p, pvs0_to_dg.paths)): booleans.IMPLIES(PVS0Expr_adt[pvs0_to_dg.Val].rec?(pvs0_cc[pvs0_to_dg.Val].subterm_at(pvs0_to_dg.expr, p)), list_props[CallingContext[Val, PVS0Expr[Val], list[PVS0Bool[Val]], Path[Val]]].member(pvs0_to_dg.pvs0_to_dg_make_cc(pvs0_to_dg.expr, p), res))}")))
 (pvs0_to_dg_paths_vertices_TCC2 0
  (pvs0_to_dg_paths_vertices_TCC2-1 nil 3650913537 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil))
   nil
   (pvs0_to_dg_paths_vertices subtype "pvs0_to_dg.p"
    "{path: (pvs0_cc[pvs0_to_dg.Val].valid_path(pvs0_to_dg.expr)) | PVS0Expr_adt[pvs0_to_dg.Val].rec?(pvs0_cc[pvs0_to_dg.Val].subterm_at(pvs0_to_dg.expr, path))}")))
 (pvs0_to_dg_paths_vertices_TCC3 0
  (pvs0_to_dg_paths_vertices_TCC3-1 nil 3650913537
   ("" (skeep*)
    (("" (expand "cc_of_pvs0")
      (("" (expand "pvs0_to_dg_make_cc")
        (("" (inst 1 "p")
          (("" (expand "pvs0_to_dg_vertex")
            (("" (expand "make_cc") (("" (apply-extensionality) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (make_cc const-decl "CallingContext" cc_def CCG)
    (PVS0Expr_rec_extensionality formula-decl nil PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (p skolem-const-decl "(valid_path[Val](expr))" pvs0_to_dg nil)
    (expr skolem-const-decl "PVS0Expr" pvs0_to_dg nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})" pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (pvs0_to_dg_vertex const-decl "bool" pvs0_to_dg nil)
    (pvs0_to_dg_make_cc const-decl "(pvs0_to_dg_vertex(expr, path))"
     pvs0_to_dg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (pvs0_to_dg_paths_vertices subtype
    "pvs0_to_dg.pvs0_to_dg_make_cc(pvs0_to_dg.expr, pvs0_to_dg.p)"
    "(pvs0_to_dg.cc_of_pvs0(pvs0_to_dg.expr))")))
 (pvs0_to_dg_paths_vertices_TCC4 0
  (pvs0_to_dg_paths_vertices_TCC4-1 nil 3650913537
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil))
   nil
   (pvs0_to_dg_paths_vertices termination
    "pvs0_to_dg.pvs0_to_dg_paths_vertices(pvs0_to_dg.expr, pvs0_to_dg.ps)"
    "nil")))
 (pvs0_to_dg_paths_vertices_TCC5 0
  (pvs0_to_dg_paths_vertices_TCC5-1 nil 3650913537
   ("" (skeep*)
    (("" (typepred "p_1")
      (("" (hide -1)
        (("" (typepred "v(expr,ps)")
          (("" (hide -1)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (inst -1 "p_1")
                  (("1" (assert) nil nil)
                   ("2" (assert) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pvs0_to_dg_make_cc const-decl "(pvs0_to_dg_vertex(expr, path))"
     pvs0_to_dg nil)
    (pvs0_to_dg_vertex const-decl "bool" pvs0_to_dg nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})" pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (CallingContext type-eq-decl nil cc_def CCG)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (expr skolem-const-decl "PVS0Expr" pvs0_to_dg nil)
    (paths skolem-const-decl "list[(valid_path[Val](expr))]" pvs0_to_dg nil)
    (p_1 skolem-const-decl "{p: (valid_path(expr)) | member(p, paths)}"
     pvs0_to_dg nil)
    (ps skolem-const-decl "list[(valid_path[Val](expr))]" pvs0_to_dg nil)
    (make_cc const-decl "CallingContext" cc_def CCG)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (pvs0_to_dg_paths_vertices subtype
    "list_adt[(pvs0_to_dg.cc_of_pvs0(pvs0_to_dg.expr))].cons(pvs0_to_dg.pvs0_to_dg_make_cc(pvs0_to_dg.expr, pvs0_to_dg.p), pvs0_to_dg.pvs0_to_dg_paths_vertices(pvs0_to_dg.expr, pvs0_to_dg.ps))"
    "{res: list_adt[(pvs0_to_dg.cc_of_pvs0(pvs0_to_dg.expr))].list | FORALL (p: (pvs0_cc[pvs0_to_dg.Val].valid_path(pvs0_to_dg.expr)) | list_props[(pvs0_cc[pvs0_to_dg.Val].valid_path(pvs0_to_dg.expr))].member(p, pvs0_to_dg.paths)): booleans.IMPLIES(PVS0Expr_adt[pvs0_to_dg.Val].rec?(pvs0_cc[pvs0_to_dg.Val].subterm_at(pvs0_to_dg.expr, p)), list_props[CallingContext[Val, PVS0Expr[Val], list[PVS0Bool[Val]], Path[Val]]].member(pvs0_to_dg.pvs0_to_dg_make_cc(pvs0_to_dg.expr, p), res))}")))
 (pvs0_to_dg_paths_vertices_TCC6 0
  (pvs0_to_dg_paths_vertices_TCC6-1 nil 3650913537
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil))
   nil
   (pvs0_to_dg_paths_vertices termination
    "pvs0_to_dg.pvs0_to_dg_paths_vertices(pvs0_to_dg.expr, pvs0_to_dg.ps)"
    "nil")))
 (pvs0_to_dg_paths_vertices_TCC7 0
  (pvs0_to_dg_paths_vertices_TCC7-1 nil 3650914999
   ("" (skeep* :preds? t)
    (("" (typepred "v(expr,ps)")
      (("" (inst? -) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil))
    nil)
   ((pvs0_to_dg_make_cc const-decl "(pvs0_to_dg_vertex(expr, path))"
     pvs0_to_dg nil)
    (pvs0_to_dg_vertex const-decl "bool" pvs0_to_dg nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})" pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (CallingContext type-eq-decl nil cc_def CCG)
    (Path type-eq-decl nil pvs0_cc nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (make_cc const-decl "CallingContext" cc_def CCG)
    (ps skolem-const-decl "list[(valid_path[Val](expr))]" pvs0_to_dg nil)
    (p!1 skolem-const-decl "{p: (valid_path(expr)) | member(p, paths)}"
     pvs0_to_dg nil)
    (paths skolem-const-decl "list[(valid_path[Val](expr))]" pvs0_to_dg nil)
    (expr skolem-const-decl "PVS0Expr" pvs0_to_dg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (pvs0_to_dg_paths_vertices subtype
    "pvs0_to_dg.pvs0_to_dg_paths_vertices(pvs0_to_dg.expr, pvs0_to_dg.ps)"
    "{res: list_adt[(pvs0_to_dg.cc_of_pvs0(pvs0_to_dg.expr))].list | FORALL (p: (pvs0_cc[pvs0_to_dg.Val].valid_path(pvs0_to_dg.expr)) | list_props[(pvs0_cc[pvs0_to_dg.Val].valid_path(pvs0_to_dg.expr))].member(p, pvs0_to_dg.paths)): booleans.IMPLIES(PVS0Expr_adt[pvs0_to_dg.Val].rec?(pvs0_cc[pvs0_to_dg.Val].subterm_at(pvs0_to_dg.expr, p)), list_props[CallingContext[Val, PVS0Expr[Val], list[PVS0Bool[Val]], Path[Val]]].member(pvs0_to_dg.pvs0_to_dg_make_cc(pvs0_to_dg.expr, p), res))}")))
 (pvs0_to_dg_vertices_completeness 0
  (pvs0_to_dg_vertices_completeness-3 nil 3742911238
   ("" (skeep)
    (("" (expand "pvs0_to_dg_vertices_l")
      (("" (typepred "valid_paths(expr)")
        (("" (hide -1)
          (("" (typepred "cc")
            (("" (expand "cc_of_pvs0")
              ((""
                (typepred
                 "pvs0_to_dg_paths_vertices(expr, valid_paths(expr))")
                (("" (hide -1)
                  (("" (skeep -2)
                    (("" (inst -1 "path")
                      (("1" (expand "pvs0_to_dg_vertex")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (case "pvs0_to_dg_make_cc(expr, path) = cc")
                              (("1" (replace -1 -2) (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (typepred "pvs0_to_dg_make_cc(expr, path)")
                                (("2" (expand "pvs0_to_dg_vertex")
                                  (("2" (flatten)
                                    (("2" (grind)
                                      (("2" (apply-extensionality) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "path")
                        (("2" (assert)
                          (("2" (typepred "valid_paths[Val](expr)")
                            (("2" (inst? -2) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_to_dg_vertices_l const-decl "list[(cc_of_pvs0(expr))]" pvs0_to_dg
     nil)
    (expr skolem-const-decl "PVS0Expr" pvs0_to_dg nil)
    (path skolem-const-decl "(valid_path(expr))" pvs0_to_dg nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (make_cc const-decl "CallingContext" cc_def CCG)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})" pvs0_cc nil)
    (pvs0_to_dg_vertex const-decl "bool" pvs0_to_dg nil)
    (pvs0_to_dg_make_cc const-decl "(pvs0_to_dg_vertex(expr, path))"
     pvs0_to_dg nil)
    (pvs0_to_dg_paths_vertices def-decl "{res: list[(cc_of_pvs0(expr))] |
   FORALL (p: (valid_path(expr)) | member(p, paths)):
     rec?(subterm_at(expr, p)) IMPLIES
      member(pvs0_to_dg_make_cc(expr, p), res)}" pvs0_to_dg nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (CallingContext type-eq-decl nil cc_def CCG)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (member def-decl "bool" list_props nil)
    (valid_paths def-decl "{res: list[(valid_path(expr))] |
   FORALL (p: (valid_path(expr))): member(p, res)}" pvs0_props nil))
   nil))
 (cc_of_pvs0_soundness 0
  (cc_of_pvs0_soundness-2 nil 3742911300
   ("" (skeep :preds? t)
    (("" (expand "pvs0_to_dg_verts")
      (("" (typepred "pvs0_to_dg_vertices_l(expr)")
        (("" (use "every_nth[CallingContext]")
          (("" (assert)
            ((""
              (typepred
               "list2set[CallingContext](pvs0_to_dg_vertices_l(expr))")
              (("" (replace -2 -5)
                (("" (assert)
                  (("" (use "member_nth[CallingContext]")
                    (("" (assert)
                      (("" (skeep -1)
                        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_to_dg_verts const-decl
     "finite_set[CallingContext[Val, PVS0Expr, list[PVS0Bool[Val]], Path[Val]]]"
     pvs0_to_dg nil)
    (every_nth formula-decl nil list_props nil)
    (list2set def-decl "{s: finite_set[T] | s = {x | member(x, l)}}"
     set_as_list structures)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (member_nth formula-decl nil more_list_props structures)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (Path type-eq-decl nil pvs0_cc nil)
    (CallingContext type-eq-decl nil cc_def CCG)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (pvs0_to_dg_vertices_l const-decl "list[(cc_of_pvs0(expr))]" pvs0_to_dg
     nil))
   nil))
 (cc_of_pvs0_completeness 0
  (cc_of_pvs0_completeness-3 "" 3742911361
   ("" (skeep)
    (("" (expand "pvs0_to_dg_verts")
      (("" (use "pvs0_to_dg_vertices_completeness")
        ((""
          (typepred "list2set[CallingContext](pvs0_to_dg_vertices_l(expr))")
          (("" (replaces -2) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((pvs0_to_dg_verts const-decl
     "finite_set[CallingContext[Val, PVS0Expr, list[PVS0Bool[Val]], Path[Val]]]"
     pvs0_to_dg nil)
    (pvs0_to_dg_vertices_l const-decl "list[(cc_of_pvs0(expr))]" pvs0_to_dg
     nil)
    (list2set def-decl "{s: finite_set[T] | s = {x | member(x, l)}}"
     set_as_list structures)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (Path type-eq-decl nil pvs0_cc nil)
    (CallingContext type-eq-decl nil cc_def CCG)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (pvs0_to_dg_vertices_completeness formula-decl nil pvs0_to_dg nil))
   nil))
 (pvs0_ccs_rec_TCC1 0
  (pvs0_ccs_rec_TCC1-1 nil 3653150658 ("" (subtype-tcc) nil nil)
   ((Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil))
   nil
   (pvs0_ccs_rec subtype
    "(# `path := pvs0_to_dg.p, `rec_expr := pvs0_cc[pvs0_to_dg.Val].subterm_at(pvs0_to_dg.expr, pvs0_to_dg.p), `cnds := pvs0_cc[pvs0_to_dg.Val].path_conditions(pvs0_to_dg.expr, pvs0_to_dg.p) #)"
    "(pvs0_cc[pvs0_to_dg.Val].pvs0_tcc_valid_cc(pvs0_to_dg.expr))")))
 (pvs0_ccs_rec_TCC2 0
  (pvs0_ccs_rec_TCC2-1 nil 3653150658 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (member def-decl "bool" list_props nil))
   nil
   (pvs0_ccs_rec subtype
    "list_adt[(pvs0_cc[pvs0_to_dg.Val].pvs0_tcc_valid_cc(pvs0_to_dg.expr))].null"
    "{res: list_adt[(pvs0_cc[pvs0_to_dg.Val].pvs0_tcc_valid_cc(pvs0_to_dg.expr))].list | FORALL (p: (pvs0_cc[pvs0_to_dg.Val].valid_path(pvs0_to_dg.expr))): booleans.IMPLIES(booleans.AND(list_props[(pvs0_cc[pvs0_to_dg.Val].valid_path(pvs0_to_dg.expr))].member(p, pvs0_to_dg.paths), PVS0Expr_adt[pvs0_to_dg.Val].rec?(pvs0_cc[pvs0_to_dg.Val].subterm_at(pvs0_to_dg.expr, p))), list_props[(pvs0_cc[pvs0_to_dg.Val].pvs0_tcc_valid_cc(pvs0_to_dg.expr))].member((# `path := p, `rec_expr := pvs0_cc[pvs0_to_dg.Val].subterm_at(pvs0_to_dg.expr, p), `cnds := pvs0_cc[pvs0_to_dg.Val].path_conditions(pvs0_to_dg.expr, p) #), res))}")))
 (pvs0_ccs_rec_TCC3 0
  (pvs0_ccs_rec_TCC3-1 nil 3653150658 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil))
   nil
   (pvs0_ccs_rec subtype
    "(# `rec_expr := pvs0_to_dg.subexpr, `cnds := pvs0_cc[pvs0_to_dg.Val].path_conditions(pvs0_to_dg.expr, pvs0_to_dg.p), `path := pvs0_to_dg.p #)"
    "(pvs0_cc[pvs0_to_dg.Val].pvs0_tcc_valid_cc(pvs0_to_dg.expr))")))
 (pvs0_ccs_rec_TCC4 0
  (pvs0_ccs_rec_TCC4-2 nil 3653150997
   ("" (skeep*)
    (("" (expand "member" -4)
      (("" (assert)
        (("" (split -4)
          (("1" (replace -2 -1)
            (("1" (assert)
              (("1" (replace -1 :hide? t)
                (("1" (expand "member" 1) (("1" (propax) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (replace -2 -1)
            (("2" (assert)
              (("2" (typepred "v(expr)(ps)")
                (("2" (inst -2 "p_1")
                  (("2" (assert)
                    (("2" (expand "member" 1) (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (valid_path def-decl "bool" pvs0_cc nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})" pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (pvs0_ccs_rec subtype
    "list_adt[(pvs0_cc[pvs0_to_dg.Val].pvs0_tcc_valid_cc(pvs0_to_dg.expr))].cons((# `rec_expr := pvs0_to_dg.subexpr, `cnds := pvs0_cc[pvs0_to_dg.Val].path_conditions(pvs0_to_dg.expr, pvs0_to_dg.p), `path := pvs0_to_dg.p #), pvs0_to_dg.pvs0_ccs_rec(pvs0_to_dg.expr)(pvs0_to_dg.ps))"
    "{res: list_adt[(pvs0_cc[pvs0_to_dg.Val].pvs0_tcc_valid_cc(pvs0_to_dg.expr))].list | FORALL (p: (pvs0_cc[pvs0_to_dg.Val].valid_path(pvs0_to_dg.expr))): booleans.IMPLIES(booleans.AND(list_props[(pvs0_cc[pvs0_to_dg.Val].valid_path(pvs0_to_dg.expr))].member(p, pvs0_to_dg.paths), PVS0Expr_adt[pvs0_to_dg.Val].rec?(pvs0_cc[pvs0_to_dg.Val].subterm_at(pvs0_to_dg.expr, p))), list_props[(pvs0_cc[pvs0_to_dg.Val].pvs0_tcc_valid_cc(pvs0_to_dg.expr))].member((# `path := p, `rec_expr := pvs0_cc[pvs0_to_dg.Val].subterm_at(pvs0_to_dg.expr, p), `cnds := pvs0_cc[pvs0_to_dg.Val].path_conditions(pvs0_to_dg.expr, p) #), res))}")))
 (pvs0_ccs_rec_TCC5 0
  (pvs0_ccs_rec_TCC5-1 "" 3790336354
   ("" (skeep*) (("" (typepred "v(expr)(ps)") (("" (grind) nil nil)) nil))
    nil)
   nil shostak
   (pvs0_ccs_rec subtype
    "pvs0_to_dg.pvs0_ccs_rec(pvs0_to_dg.expr)(pvs0_to_dg.ps)"
    "{res: list_adt[(pvs0_cc[pvs0_to_dg.Val].pvs0_tcc_valid_cc(pvs0_to_dg.expr))].list | FORALL (p: (pvs0_cc[pvs0_to_dg.Val].valid_path(pvs0_to_dg.expr))): booleans.IMPLIES(booleans.AND(list_props[(pvs0_cc[pvs0_to_dg.Val].valid_path(pvs0_to_dg.expr))].member(p, pvs0_to_dg.paths), PVS0Expr_adt[pvs0_to_dg.Val].rec?(pvs0_cc[pvs0_to_dg.Val].subterm_at(pvs0_to_dg.expr, p))), list_props[(pvs0_cc[pvs0_to_dg.Val].pvs0_tcc_valid_cc(pvs0_to_dg.expr))].member((# `path := p, `rec_expr := pvs0_cc[pvs0_to_dg.Val].subterm_at(pvs0_to_dg.expr, p), `cnds := pvs0_cc[pvs0_to_dg.Val].path_conditions(pvs0_to_dg.expr, p) #), res))}"))
  (pvs0_ccs_rec_TCC5-2 nil 3653151036
   ("" (skeep*)
    (("" (typepred "v(expr)(ps)")
      (("" (inst -2 "p_1") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((path_conditions def-decl "Conditions" pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})" pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (valid_path def-decl "bool" pvs0_cc nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (pvs0_ccs_rec subtype
    "pvs0_to_dg.pvs0_ccs_rec(pvs0_to_dg.expr)(pvs0_to_dg.ps)"
    "{res: list_adt[(pvs0_cc[pvs0_to_dg.Val].pvs0_tcc_valid_cc(pvs0_to_dg.expr))].list | FORALL (p: (pvs0_cc[pvs0_to_dg.Val].valid_path(pvs0_to_dg.expr))): booleans.IMPLIES(booleans.AND(list_props[(pvs0_cc[pvs0_to_dg.Val].valid_path(pvs0_to_dg.expr))].member(p, pvs0_to_dg.paths), PVS0Expr_adt[pvs0_to_dg.Val].rec?(pvs0_cc[pvs0_to_dg.Val].subterm_at(pvs0_to_dg.expr, p))), list_props[(pvs0_cc[pvs0_to_dg.Val].pvs0_tcc_valid_cc(pvs0_to_dg.expr))].member((# `path := p, `rec_expr := pvs0_cc[pvs0_to_dg.Val].subterm_at(pvs0_to_dg.expr, p), `cnds := pvs0_cc[pvs0_to_dg.Val].path_conditions(pvs0_to_dg.expr, p) #), res))}")))
 (pvs0_ccs_completness 0
  (pvs0_ccs_completness-2 nil 3742911423
   ("" (skeep)
    (("" (expand "pvs0_ccs")
      (("" (typepred "valid_paths(expr)")
        (("" (hide -1)
          (("" (typepred "cc")
            (("" (expand "pvs0_tcc_valid_cc")
              (("" (flatten)
                (("" (typepred "pvs0_ccs_rec(expr)(valid_paths(expr))")
                  (("" (hide -1)
                    (("" (inst -1 "cc`path")
                      (("" (assert)
                        (("" (inst -5 "cc`path")
                          (("" (assert)
                            ((""
                              (case "(# `path := cc`path, `rec_expr := subterm_at(expr, cc`path), `cnds := path_conditions(expr, cc`path) #) = cc")
                              (("1" (assert)
                                (("1" (replace -1 -2) (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (apply-extensionality) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(expr))]" pvs0_to_dg nil)
    (pvs0_ccs_rec def-decl "{res: list[(pvs0_tcc_valid_cc(expr))] |
   FORALL (p: (valid_path(expr))):
     LET subexpr = subterm_at(expr, p) IN
       member(p, paths) AND rec?(subexpr) IMPLIES
        LET cc: (pvs0_tcc_valid_cc(expr)) =
              (# `path := p,
                 `rec_expr := subexpr,
                 `cnds := path_conditions(expr, p) #)
          IN member(cc, res)}" pvs0_to_dg nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})" pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (member def-decl "bool" list_props nil)
    (valid_paths def-decl "{res: list[(valid_path(expr))] |
   FORALL (p: (valid_path(expr))): member(p, res)}" pvs0_props nil))
   nil))
 (dg_vert_valid_cc 0
  (dg_vert_valid_cc-1 "" 3790336356
   ("" (skeep*)
    (("" (lemma "cc_of_pvs0_completeness")
      (("" (inst -1 "expr" "_")
        (("" (inst?)
          (("" (expand "pvs0_to_dg_verts")
            (("" (expand "pvs0_to_dg_vertices_l")
              ((""
                (typepred
                 "pvs0_to_dg_paths_vertices(expr, valid_paths(expr))")
                (("" (hide -1)
                  (("" (typepred "dg_vert")
                    (("" (expand "cc_of_pvs0")
                      (("" (skeep -1)
                        (("" (inst -2 "path")
                          (("1" (expand "pvs0_to_dg_vertex")
                            (("1" (flatten)
                              (("1" (assert)
                                (("1"
                                  (typepred
                                   "pvs0_ccs_rec(expr)(valid_paths(expr))")
                                  (("1" (hide -1)
                                    (("1" (inst -1 "path")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (inst
                                             1
                                             "(# `path := path,
                                              `rec_expr := subterm_at(expr, path),
                                              `cnds := path_conditions(expr, path) #)")
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "path")
                                            (("2"
                                              (typepred "valid_paths(expr)")
                                              (("2" (inst -2 "path") nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "valid_paths(expr)")
                            (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (dg_vert_valid_cc-2 nil 3742911477
   ("" (skeep*)
    (("" (lemma "cc_of_pvs0_completeness")
      (("" (inst -1 "expr" "_")
        (("" (inst?)
          (("" (expand "pvs0_to_dg_verts")
            (("" (expand "pvs0_to_dg_vertices_l")
              ((""
                (typepred
                 "pvs0_to_dg_paths_vertices(expr, valid_paths(expr))")
                (("" (hide -1)
                  (("" (typepred "dg_vert")
                    (("" (expand "cc_of_pvs0")
                      (("" (skeep -1)
                        (("" (inst -2 "path")
                          (("1" (expand "pvs0_to_dg_vertex")
                            (("1" (flatten)
                              (("1" (assert)
                                (("1"
                                  (typepred
                                   "pvs0_ccs_rec(expr)(valid_paths(expr))")
                                  (("1" (hide -1)
                                    (("1" (inst -1 "path")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (inst
                                             1
                                             "(# `path := path,
                                              `rec_expr := subterm_at(expr, path),
                                              `cnds := path_conditions(expr, path) #)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replaces -2)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "path")
                                            (("2"
                                              (typepred "valid_paths(expr)")
                                              (("2" (inst -2 "path") nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "valid_paths(expr)")
                            (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cc_of_pvs0_completeness formula-decl nil pvs0_to_dg nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (Path type-eq-decl nil pvs0_cc nil)
    (CallingContext type-eq-decl nil cc_def CCG)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (pvs0_to_dg_vertices_l const-decl "list[(cc_of_pvs0(expr))]" pvs0_to_dg
     nil)
    (expr skolem-const-decl "PVS0Expr" pvs0_to_dg nil)
    (path skolem-const-decl "(valid_path(expr))" pvs0_to_dg nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (pvs0_ccs_rec def-decl "{res: list[(pvs0_tcc_valid_cc(expr))] |
   FORALL (p: (valid_path(expr))):
     LET subexpr = subterm_at(expr, p) IN
       member(p, paths) AND rec?(subexpr) IMPLIES
        LET cc: (pvs0_tcc_valid_cc(expr)) =
              (# `path := p,
                 `rec_expr := subexpr,
                 `cnds := path_conditions(expr, p) #)
          IN member(cc, res)}" pvs0_to_dg nil)
    (make_cc const-decl "CallingContext" cc_def CCG)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})" pvs0_cc nil)
    (pvs0_to_dg_vertex const-decl "bool" pvs0_to_dg nil)
    (pvs0_to_dg_make_cc const-decl "(pvs0_to_dg_vertex(expr, path))"
     pvs0_to_dg nil)
    (pvs0_to_dg_paths_vertices def-decl "{res: list[(cc_of_pvs0(expr))] |
   FORALL (p: (valid_path(expr)) | member(p, paths)):
     rec?(subterm_at(expr, p)) IMPLIES
      member(pvs0_to_dg_make_cc(expr, p), res)}" pvs0_to_dg nil)
    (valid_paths def-decl "{res: list[(valid_path(expr))] |
   FORALL (p: (valid_path(expr))): member(p, res)}" pvs0_props nil)
    (pvs0_to_dg_verts const-decl
     "finite_set[CallingContext[Val, PVS0Expr, list[PVS0Bool[Val]], Path[Val]]]"
     pvs0_to_dg nil)
    (Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (pvs0_to_fully_connected_dg_sound_ccg 0
  (pvs0_to_fully_connected_dg_sound_ccg-2 nil 3708287427
   ("" (skeep)
    (("" (expand "pvs0_to_fully_connected_dg")
      (("" (expand "sound_ccg_digraph")
        (("" (split 1)
          (("1" (skeep)
            (("1" (expand "make_fully_connected")
              (("1" (expand "vert")
                (("1" (use "pvs0_to_dg_vertices_completeness")
                  (("1" (invoke (typepred "%1") (! 1 2))
                    (("1" (expand "equal_sl")
                      (("1" (flatten)
                        (("1" (invoke (typepred "%1") (! -1))
                          (("1" (assert)
                            (("1" (inst? -1 :where -7)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep*)
            (("2" (lemma "mfc_is_fully_connected")
              (("2" (inst? -1 :where 1)
                (("2" (inst -1 "cc1" "cc2")
                  (("2" (assert)
                    (("2" (split -1)
                      (("1" (propax) nil nil)
                       ("2" (hide 2)
                        (("2" (expand "make_fully_connected")
                          (("2" (expand "vert")
                            (("2" (use "pvs0_to_dg_vertices_completeness")
                              (("2" (invoke (typepred "%1") (! 1 2))
                                (("2" (expand "equal_sl")
                                  (("2" (flatten)
                                    (("2" (invoke (typepred "%1") (! -1))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst? -1 :where -7)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (expand "make_fully_connected")
                          (("3" (expand "vert")
                            (("3" (use "pvs0_to_dg_vertices_completeness")
                              (("3" (invoke (typepred "%1") (! 1 2))
                                (("3" (expand "equal_sl")
                                  (("3" (flatten)
                                    (("3" (invoke (typepred "%1") (! -1))
                                      (("3"
                                        (assert)
                                        (("3"
                                          (inst? -1 :where -7)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_to_fully_connected_dg const-decl "(cdigraph)" pvs0_to_dg nil)
    (make_fully_connected const-decl "(cdigraph)" c_digraphs digraphs)
    (pvs0_to_dg_vertices_completeness formula-decl nil pvs0_to_dg nil)
    (Val formal-nonempty-type-decl nil pvs0_to_dg nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil) (PVS0 type-eq-decl nil pvs0_expr nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (CallingContext type-eq-decl nil cc_def CCG)
    (Path type-eq-decl nil pvs0_cc nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subset_sl? def-decl
     "{b: bool | b IFF FORALL x: member(x, l1) => member(x, l2)}" set_as_list
     structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subset_sl_is_preorder name-judgement "(preorder?[list[T]])"
     set_as_list_props structures)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (reduce_sl def-decl
     "{ll: list[T] | equal_sl[T](l, ll) & card_sl(ll) = length(ll)}"
     set_as_list structures)
    (length def-decl "nat" list_props nil)
    (card_sl def-decl "{n: nat | n = Card(list2set(l))}" set_as_list
     structures)
    (list2set def-decl "{s: finite_set[T] | s = {x | member(x, l)}}"
     set_as_list structures)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pvs0_to_dg_vertices_l const-decl "list[(cc_of_pvs0(expr))]" pvs0_to_dg
     nil)
    (equal_sl const-decl
     "{b: bool | b IFF FORALL x: member(x, l1) IFF member(x, l2)}" set_as_list
     structures)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (reduce_sl_no_rep application-judgement "(no_repetitions?)"
     set_as_list_props structures)
    (vert const-decl "bool" c_digraphs_def digraphs)
    (mfc_is_fully_connected formula-decl nil c_digraphs digraphs)
    (edges const-decl "bool" c_digraphs_def digraphs)
    (TRUE const-decl "bool" booleans nil)
    (sound_ccg_digraph const-decl "bool" pvs0_to_dg nil))
   nil
   (pvs0_to_fully_connected_dg_sound_ccg subtype
    "pvs0_to_dg.pvs0_to_fully_connected_dg(pvs0_to_dg.pvs0)"
    "(pvs0_to_dg.sound_ccg_digraph(pvs0_to_dg.pvs0))"))
  (pvs0_to_fully_connected_dg_sound_ccg-1 nil 3708287427
   ("" (judgement-tcc) nil nil) nil nil
   (pvs0_to_fully_connected_dg_sound_ccg subtype
    "pvs0_to_dg.pvs0_to_fully_connected_dg(pvs0_to_dg.pvs0)"
    "(pvs0_to_dg.sound_ccg_digraph(pvs0_to_dg.pvs0))"))))


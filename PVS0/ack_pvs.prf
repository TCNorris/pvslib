(ack_pvs
 (ack_TCC1 0
  (ack_TCC1-2 nil 3707087029 ("" (pvs0-eval) nil nil)
   ((pvs0_ack const-decl "PVS0" ack_pvs0 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nth def-decl "T" list_props nil) (length def-decl "nat" list_props nil)
    (eval_op2 const-decl "Val" pvs0_expr nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (eval_op1 const-decl "Val" pvs0_expr nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (pvs0_ack_tcc_termination name-judgement "(pvs0_tcc_termination)" ack_pvs0
     nil)
    (pvs0_ack_terminating name-judgement "(terminating?)" ack_pvs0 nil)
    (pvs0_eval_expr def-decl
     "{v: Val | semantic_rel_expr(pvs0)(expr, val, v)}" pvs0_eval nil)
    (pvs0_eval const-decl "{v: Val | semantic_rel_expr(pvs0)(pvs0`4, val, v)}"
     pvs0_eval nil))
   nil
   (ack subtype "(number_fields.+)(ack_pvs.n, 1)"
    "{a: naturalnumbers.nat | a = pvs0_eval[[nat, nat]].pvs0_eval(ack_pvs0.pvs0_ack)(ack_pvs.m, ack_pvs.n)`1}")))
 (ack_TCC2 0
  (ack_TCC2-1 nil 3643739441 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (ack subtype "(number_fields.-)(ack_pvs.m, 1)" "nat")))
 (ack_TCC3 0
  (ack_TCC3-2 nil 3707087137 ("" (pvs0-tccs "ack") nil nil)
   ((terminating? const-decl "bool" pvs0_lang nil)
    (pvs0_tccs_correct formula-decl nil pvs0_eval nil)
    (pvs0_ack_tcc_termination name-judgement "(pvs0_tcc_termination)" ack_pvs0
     nil)
    (pvs0_ack_terminating name-judgement "(terminating?)" ack_pvs0 nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(expr))]" pvs0_to_dg nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt nil)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]" PVS0Bool_adt
     nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (pvs0not? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt nil)
    (pvs0not adt-constructor-decl "[PVS0Expr[T] -> (pvs0not?)]" PVS0Bool_adt
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]"
     PVS0Expr_adt nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (pvs0_eval_conds def-decl "{b: bool | b = eval_conds(pvs0)(cnds, val)}"
     pvs0_eval nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil) (length def-decl "nat" list_props nil)
    (eval_op2 const-decl "Val" pvs0_expr nil)
    (pvs0_eval const-decl "{v: Val | semantic_rel_expr(pvs0)(pvs0`4, val, v)}"
     pvs0_eval nil)
    (eval_op1 const-decl "Val" pvs0_expr nil)
    (pvs0_eval_expr def-decl
     "{v: Val | semantic_rel_expr(pvs0)(expr, val, v)}" pvs0_eval nil)
    (reverse def-decl "list[T]" list_props nil)
    (pvs0_tcc const-decl "bool" pvs0_eval nil)
    (pvs0_tccs const-decl "bool" pvs0_eval nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (MT type-eq-decl nil pvs0_prelude nil) (< const-decl "bool" reals nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool" measure_termination_defs nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0 nil)
    (ack_wfm const-decl "(pvs0_tcc_termination_pred(pvs0_ack))" ack_pvs0 nil))
   nil
   (ack termination "ack_pvs.ack((number_fields.-)(ack_pvs.m, 1), 1)" "nil")))
 (ack_TCC4 0
  (ack_TCC4-3 nil 3707087203 ("" (pvs0-eval) nil nil)
   ((pvs0_ack const-decl "PVS0" ack_pvs0 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pe__6 skolem-const-decl "[val: [nat, nat] ->
   {v: [nat, nat] | semantic_rel_expr(pvs0_ack)(pvs0_ack`4, val, v)}]" ack_pvs
     nil)
    (nth def-decl "T" list_props nil) (length def-decl "nat" list_props nil)
    (eval_op2 const-decl "Val" pvs0_expr nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (eval_op1 const-decl "Val" pvs0_expr nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (pvs0_ack_tcc_termination name-judgement "(pvs0_tcc_termination)" ack_pvs0
     nil)
    (pvs0_ack_terminating name-judgement "(terminating?)" ack_pvs0 nil)
    (pvs0_eval_expr def-decl
     "{v: Val | semantic_rel_expr(pvs0)(expr, val, v)}" pvs0_eval nil)
    (pvs0_eval const-decl "{v: Val | semantic_rel_expr(pvs0)(pvs0`4, val, v)}"
     pvs0_eval nil))
   nil
   (ack subtype "ack_pvs.ack((number_fields.-)(ack_pvs.m, 1), 1)"
    "{a: naturalnumbers.nat | a = pvs0_eval[[nat, nat]].pvs0_eval(ack_pvs0.pvs0_ack)(ack_pvs.m, ack_pvs.n)`1}")))
 (ack_TCC5 0
  (ack_TCC5-2 "" 3707085610 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak (ack subtype "(number_fields.-)(ack_pvs.m, 1)" "nat"))
  (ack_TCC5-1 nil 3653236532
   ("" (skeep)
    (("" (typepred "v(m-1,1)")
      (("1" (replaces -1)
        (("1" (lemma "ack_pvs0_m_n")
          (("1" (insteep -1) (("1" (assert) nil nil) ("2" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((ack_wfm const-decl "(pvs0_tcc_termination_pred(pvs0_ack))" ack_pvs0 nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0 nil)
    (pvs0_tcc_termination_pred const-decl "bool" measure_termination_defs nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (MT type-eq-decl nil pvs0_prelude nil))
   nil (ack subtype "(number_fields.-)(ack_pvs.m, 1)" "nat")))
 (ack_TCC6 0
  (ack_TCC6-1 nil 3653236532 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (ack subtype "(number_fields.-)(ack_pvs.n, 1)" "nat")))
 (ack_TCC7 0
  (ack_TCC7-1 nil 3707173802 ("" (pvs0-tccs "ack") nil nil)
   ((terminating? const-decl "bool" pvs0_lang nil)
    (pvs0_tccs_correct formula-decl nil pvs0_eval nil)
    (pvs0_ack_tcc_termination name-judgement "(pvs0_tcc_termination)" ack_pvs0
     nil)
    (pvs0_ack_terminating name-judgement "(terminating?)" ack_pvs0 nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(expr))]" pvs0_to_dg nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt nil)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]" PVS0Bool_adt
     nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (pvs0not? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt nil)
    (pvs0not adt-constructor-decl "[PVS0Expr[T] -> (pvs0not?)]" PVS0Bool_adt
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]"
     PVS0Expr_adt nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (pvs0_eval_conds def-decl "{b: bool | b = eval_conds(pvs0)(cnds, val)}"
     pvs0_eval nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil) (length def-decl "nat" list_props nil)
    (eval_op2 const-decl "Val" pvs0_expr nil)
    (pvs0_eval const-decl "{v: Val | semantic_rel_expr(pvs0)(pvs0`4, val, v)}"
     pvs0_eval nil)
    (eval_op1 const-decl "Val" pvs0_expr nil)
    (pvs0_eval_expr def-decl
     "{v: Val | semantic_rel_expr(pvs0)(expr, val, v)}" pvs0_eval nil)
    (reverse def-decl "list[T]" list_props nil)
    (pvs0_tcc const-decl "bool" pvs0_eval nil)
    (pvs0_tccs const-decl "bool" pvs0_eval nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (MT type-eq-decl nil pvs0_prelude nil) (< const-decl "bool" reals nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool" measure_termination_defs nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0 nil)
    (ack_wfm const-decl "(pvs0_tcc_termination_pred(pvs0_ack))" ack_pvs0 nil))
   nil
   (ack termination "ack_pvs.ack(ack_pvs.m, (number_fields.-)(ack_pvs.n, 1))"
    "nil")))
 (ack_TCC8 0
  (ack_TCC8-5 nil 3707087356 ("" (pvs0-tccs "ack") nil nil)
   ((terminating? const-decl "bool" pvs0_lang nil)
    (pvs0_tccs_correct formula-decl nil pvs0_eval nil)
    (pvs0_ack_tcc_termination name-judgement "(pvs0_tcc_termination)" ack_pvs0
     nil)
    (pvs0_ack_terminating name-judgement "(terminating?)" ack_pvs0 nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(expr))]" pvs0_to_dg nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt nil)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]" PVS0Bool_adt
     nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (pvs0not? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt nil)
    (pvs0not adt-constructor-decl "[PVS0Expr[T] -> (pvs0not?)]" PVS0Bool_adt
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]"
     PVS0Expr_adt nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (pvs0_eval_conds def-decl "{b: bool | b = eval_conds(pvs0)(cnds, val)}"
     pvs0_eval nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pe__8 skolem-const-decl "[val: [nat, nat] ->
   {v: [nat, nat] | semantic_rel_expr(pvs0_ack)(pvs0_ack`4, val, v)}]" ack_pvs
     nil)
    (nth def-decl "T" list_props nil) (length def-decl "nat" list_props nil)
    (eval_op2 const-decl "Val" pvs0_expr nil)
    (pvs0_eval const-decl "{v: Val | semantic_rel_expr(pvs0)(pvs0`4, val, v)}"
     pvs0_eval nil)
    (eval_op1 const-decl "Val" pvs0_expr nil)
    (pvs0_eval_expr def-decl
     "{v: Val | semantic_rel_expr(pvs0)(expr, val, v)}" pvs0_eval nil)
    (reverse def-decl "list[T]" list_props nil)
    (pvs0_tcc const-decl "bool" pvs0_eval nil)
    (pvs0_tccs const-decl "bool" pvs0_eval nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (MT type-eq-decl nil pvs0_prelude nil) (< const-decl "bool" reals nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool" measure_termination_defs nil)
    (pvs0_ack const-decl "PVS0" ack_pvs0 nil)
    (ack_wfm const-decl "(pvs0_tcc_termination_pred(pvs0_ack))" ack_pvs0 nil))
   nil
   (ack termination
    "ack_pvs.ack((number_fields.-)(ack_pvs.m, 1), ack_pvs.ack(ack_pvs.m, (number_fields.-)(ack_pvs.n, 1)))"
    "nil")))
 (ack_TCC9 0
  (ack_TCC9-4 nil 3707087456 ("" (pvs0-eval) nil nil)
   ((pvs0_ack const-decl "PVS0" ack_pvs0 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pe__9 skolem-const-decl "[val: [nat, nat] ->
   {v: [nat, nat] | semantic_rel_expr(pvs0_ack)(pvs0_ack`4, val, v)}]" ack_pvs
     nil)
    (nth def-decl "T" list_props nil) (length def-decl "nat" list_props nil)
    (eval_op2 const-decl "Val" pvs0_expr nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (eval_op1 const-decl "Val" pvs0_expr nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (pvs0_ack_tcc_termination name-judgement "(pvs0_tcc_termination)" ack_pvs0
     nil)
    (pvs0_ack_terminating name-judgement "(terminating?)" ack_pvs0 nil)
    (pvs0_eval_expr def-decl
     "{v: Val | semantic_rel_expr(pvs0)(expr, val, v)}" pvs0_eval nil)
    (pvs0_eval const-decl "{v: Val | semantic_rel_expr(pvs0)(pvs0`4, val, v)}"
     pvs0_eval nil))
   nil
   (ack subtype
    "ack_pvs.ack((number_fields.-)(ack_pvs.m, 1), ack_pvs.ack(ack_pvs.m, (number_fields.-)(ack_pvs.n, 1)))"
    "{a: naturalnumbers.nat | a = pvs0_eval[[nat, nat]].pvs0_eval(ack_pvs0.pvs0_ack)(ack_pvs.m, ack_pvs.n)`1}"))))


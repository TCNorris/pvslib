(dp_to_tcc
 (dp_termination_implies_scp_TCC1 0
  (dp_termination_implies_scp_TCC1-1 nil 3700843698 ("" (subtype-tcc) nil nil)
   nil nil
   (dp_termination_implies_scp subtype
    "LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n)"
    "(orders[MT].well_founded?)")))
 (dp_termination_implies_scp 0
  (dp_termination_implies_scp-1 nil 3700558111
   ("" (skeep)
    (("" (expand "dp_termination?")
      (("" (expand "scp_termination_pvs0")
        (("" (expand "scp_termination?")
          (("" (skeep*)
            (("" (expand "infinite_seq_ccs")
              (("" (expand "infinite_dp_chain?")
                ((""
                  (inst -1
                   "LAMBDA(j:nat): (# rec_expr := rec(ccs(j)`actuals), cnds := ccs(j)`conds, path := ccs(j)`nid #)")
                  (("" (inst 1 "LAMBDA(i:nat): vals(i)")
                    (("" (skeep)
                      (("" (expand "dep_link?")
                        (("" (prop)
                          (("1" (typepred "ccs(i_1)")
                            (("1" (hide -2)
                              (("1" (expand "cc_of_pvs0")
                                (("1" (expand "pvs0_tcc_valid_cc")
                                  (("1" (skeep)
                                    (("1" (expand "pvs0_to_dg_vertex")
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1)
                            (("2" (typepred "ccs(1 + i_1)")
                              (("2" (expand "cc_of_pvs0")
                                (("2" (expand "pvs0_tcc_valid_cc")
                                  (("2" (skeep)
                                    (("2" (expand "pvs0_to_dg_vertex")
                                      (("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (inst-cp -1 "i_1")
                            (("3" (inst -1 "1 + i_1")
                              (("3" (inst 1 "vals(1 + i_1)")
                                (("3" (flatten) (("3" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dp_termination? const-decl "bool" dp_termination nil)
    (scp_termination? const-decl "bool" scp CCG)
    (infinite_seq_ccs const-decl "bool" scp CCG)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil dp_to_tcc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (MT type-eq-decl nil pvs0_prelude nil) (< const-decl "bool" reals nil)
    (cc_seq type-eq-decl nil dp_termination nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CallingContext type-eq-decl nil cc_def CCG)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (pvs0_to_dg_vertex const-decl "bool" pvs0_to_dg nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (dep_link? const-decl "bool" dp_termination nil)
    (val_seq type-eq-decl nil dp_termination nil)
    (Seq_val type-eq-decl nil cc_def CCG)
    (infinite_dp_chain? const-decl "bool" dp_termination nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (scp_termination_pvs0 const-decl "bool" scp_iff_pvs0 nil))
   nil))
 (dp_termination_implies_dp_dec 0
  (dp_termination_implies_dp_dec-1 nil 3700558151
   ("" (skeep)
    (("" (use "dp_termination_implies_scp")
      (("" (assert)
        (("" (hide -2)
          (("" (expand "dp_decreasement?")
            (("" (use "scp_implies_pvs0_tcc[T]") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dp_termination_implies_scp formula-decl nil dp_to_tcc nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil dp_to_tcc nil)
    (scp_implies_pvs0_tcc formula-decl nil scp_iff_pvs0 nil)
    (dp_decreasement? const-decl "bool" dp_termination nil))
   nil)))


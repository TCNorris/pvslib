(factorial_pvs
 (factorial_TCC1 0
  (factorial_TCC1-1 nil 3681216163 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (/= const-decl "boolean" notequal nil))
   nil (factorial subtype "(number_fields.-)(factorial_pvs.n, 1)" "nat")))
 (factorial_TCC2 0
  (factorial_TCC2-2 nil 3707171105 ("" (pvs0-tccs "factorial") nil nil)
   ((terminating? const-decl "bool" pvs0_lang nil)
    (pvs0_tccs_correct formula-decl nil pvs0_eval nil)
    (pvs0_factorial_tcc_termination name-judgement "(pvs0_tcc_termination)"
     factorial_pvs0 nil)
    (pvs0_factorial_terminating name-judgement "(terminating?)" factorial_pvs0
     nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(expr))]" pvs0_to_dg nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (every adt-def-decl "boolean" PVS0Bool_adt nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt nil)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]" PVS0Bool_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]" PVS0Expr_adt nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (pvs0_tcc const-decl "bool" pvs0_eval nil)
    (reverse def-decl "list[T]" list_props nil)
    (pvs0_eval_conds def-decl "{b: bool | b = eval_conds(pvs0)(cnds, val)}"
     pvs0_eval nil)
    (pvs0_eval_expr def-decl
     "{v: Val | semantic_rel_expr(pvs0)(expr, val, v)}" pvs0_eval nil)
    (length def-decl "nat" list_props nil) (nth def-decl "T" list_props nil)
    (eval_op1 const-decl "Val" pvs0_expr nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (pvs0_eval const-decl "{v: Val | semantic_rel_expr(pvs0)(pvs0`4, val, v)}"
     pvs0_eval nil)
    (pvs0_tccs const-decl "bool" pvs0_eval nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (MT type-eq-decl nil pvs0_prelude nil) (< const-decl "bool" reals nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool" measure_termination_defs nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (factorial_wfm const-decl "(pvs0_tcc_termination_pred(pvs0_factorial))"
     factorial_pvs0 nil))
   nil
   (factorial termination
    "factorial_pvs.factorial((number_fields.-)(factorial_pvs.n, 1))" "nil")))
 (factorial_TCC3 0
  (factorial_TCC3-1 nil 3707171175 ("" (pvs0-eval) nil nil)
   ((pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (pvs0_factorial_terminating name-judgement "(terminating?)" factorial_pvs0
     nil)
    (pvs0_factorial_tcc_termination name-judgement "(pvs0_tcc_termination)"
     factorial_pvs0 nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (eval_op1 const-decl "Val" pvs0_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (eval_op2 const-decl "Val" pvs0_expr nil)
    (length def-decl "nat" list_props nil) (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (pe__2 skolem-const-decl "[val: nat ->
   {v: nat | semantic_rel_expr(pvs0_factorial)(pvs0_factorial`4, val, v)}]"
     factorial_pvs nil)
    (TRUE const-decl "bool" booleans nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pvs0_eval_expr def-decl
     "{v: Val | semantic_rel_expr(pvs0)(expr, val, v)}" pvs0_eval nil)
    (pvs0_eval const-decl "{v: Val | semantic_rel_expr(pvs0)(pvs0`4, val, v)}"
     pvs0_eval nil))
   nil
   (factorial subtype
    "number_fields.*(factorial_pvs.n, factorial_pvs.factorial((number_fields.-)(factorial_pvs.n, 1)))"
    "{m: naturalnumbers.nat | m = pvs0_eval[nat].pvs0_eval(factorial_pvs0.pvs0_factorial)(factorial_pvs.n)}"))
  (factorial_TCC3-2 nil 3707082751
   ("" (skeep)
    (("" (typepred "factorial_wfm")
      (("" (expand "pvs0_tcc_termination_pred")
        (("" (inst?)
          (("" (eval-expr "pvs0_ccs(pvs0_factorial`4)")
            (("" (typepred "pvs0_ccs(pvs0_factorial`4)")
              (("" (replaces -2)
                (("" (expand "every")
                  (("" (expand "every")
                    (("" (inst? -2 :where -1)
                      (("1" (inst? -2)
                        (("1" (assert)
                          (("1" (hide -1 3)
                            (("1" (split)
                              (("1" (expand "semantic_rel_expr")
                                (("1" (expand "semantic_rel_expr")
                                  (("1" (expand "pvs0_factorial")
                                    (("1" (skodef 1)
                                      (("1"
                                        (expand "factorial_op1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "eval_conds")
                                (("2" (expand "eval_conds_rec")
                                  (("2" (expand "semantic_rel_expr")
                                    (("2" (expand "eval_conds_rec")
                                      (("2"
                                        (skodef 1)
                                        (("2"
                                          (expand "pvs0_factorial")
                                          (("2"
                                            (expand "factorial_false")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (eval-formula) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]" PVS0Bool_adt
     nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(expr))]" pvs0_to_dg nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (pvs0_factorial_tcc_termination name-judgement "(pvs0_tcc_termination)"
     factorial_pvs0 nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool" measure_termination_defs nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (factorial_wfm const-decl "(pvs0_tcc_termination_pred(pvs0_factorial))"
     factorial_pvs0 nil))
   nil
   (factorial subtype
    "number_fields.*(factorial_pvs.n, factorial_pvs.factorial((number_fields.-)(factorial_pvs.n, 1)))"
    "{m: naturalnumbers.nat | m = pvs0_eval[nat].pvs0_eval(factorial_pvs0.pvs0_factorial)(factorial_pvs.n)}")))
 (factorial_TCC4 0
  (factorial_TCC4-1 nil 3707171217 ("" (pvs0-eval) nil nil)
   ((pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (pvs0_factorial_terminating name-judgement "(terminating?)" factorial_pvs0
     nil)
    (pvs0_factorial_tcc_termination name-judgement "(pvs0_tcc_termination)"
     factorial_pvs0 nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (eval_op1 const-decl "Val" pvs0_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (eval_op2 const-decl "Val" pvs0_expr nil)
    (length def-decl "nat" list_props nil) (nth def-decl "T" list_props nil)
    (TRUE const-decl "bool" booleans nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pvs0_eval_expr def-decl
     "{v: Val | semantic_rel_expr(pvs0)(expr, val, v)}" pvs0_eval nil)
    (pvs0_eval const-decl "{v: Val | semantic_rel_expr(pvs0)(pvs0`4, val, v)}"
     pvs0_eval nil))
   nil
   (factorial subtype "1"
    "{m: naturalnumbers.nat | m = pvs0_eval[nat].pvs0_eval(factorial_pvs0.pvs0_factorial)(factorial_pvs.n)}"))))


(factorial_pvs0
 (factorial_op1_TCC1 0
  (factorial_op1_TCC1-1 nil 3682021933 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (factorial_op1 subtype "(number_fields.-)(factorial_pvs0.n, 1)" "nat")))
 (IMP_ccg_to_mwg_TCC1 0
  (IMP_ccg_to_mwg_TCC1-1 nil 3681482314 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (IMP_ccg_to_mwg subtype "factorial_pvs0.N" "posnat")))
 (M_TCC1 0
  (M_TCC1-1 nil 3682020153 ("" (subtype-tcc) nil nil) nil nil
   (M subtype "LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n)"
    "(orders[MT].well_founded?)")))
 (IMP_ccg_to_pvs0_TCC1 0
  (IMP_ccg_to_pvs0_TCC1-1 nil 3713008938 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (IMP_ccg_to_pvs0 subtype "factorial_pvs0.N" "posnat")))
 (IMP_bounding_circuits_TCC1 0
  (IMP_bounding_circuits_TCC1-1 nil 3713008938 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (IMP_bounding_circuits subtype "factorial_pvs0.N" "posnat")))
 (A_TCC1 0
  (A_TCC1-1 nil 3681130066 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil (A subtype "(: 1 :)" "listn[Sign3].listn(1)")))
 (A_TCC2 0
  (A_TCC2-1 nil 3681130066 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil (A subtype "(: (: 1 :) :)" "Measure_Matrix[1]")))
 (factorial_mm_TCC1 0
  (factorial_mm_TCC1-2 "" 3681838142 ("" (pvs0-mm "factorial") nil nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (indi_f_equiv formula-decl nil ccg_to_mwg CCG)
    (CallingContext type-eq-decl nil cc_def CCG)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (FunMeasures type-eq-decl nil ccg_def CCG)
    (CCG type-eq-decl nil ccg_def CCG)
    (below type-eq-decl nil naturalnumbers nil)
    (FunMeasure type-eq-decl nil ccg_def CCG)
    (make_ccg const-decl "CCG" ccg_def CCG)
    (sound_ccg_digraph const-decl "bool" pvs0_to_dg nil)
    (factorial_dg const-decl "(sound_ccg_digraph(pvs0_factorial))"
                  factorial_pvs0 nil)
    (factorial_measures const-decl "FunMeasures" factorial_pvs0 nil)
    (digraph_type type-eq-decl nil c_digraphs_imp digraphs)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
                   digraphs)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
                   c_digraphs_imp digraphs)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp digraphs)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp digraphs)
    (vert? const-decl "bool" digraphs_ digraphs)
    (vert type-eq-decl nil digraphs_ digraphs)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 reals)
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn structures)
    (Measure_Matrix type-eq-decl nil measures CCG)
    (indi_f type-eq-decl nil ccg_to_mwg CCG)
    (A const-decl "Measure_Matrix" factorial_pvs0 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" PVS0Bool_adt nil)
    (Path type-eq-decl nil pvs0_cc nil) (MT type-eq-decl nil pvs0_prelude nil)
    (< const-decl "bool" reals nil) (PVS0 type-eq-decl nil pvs0_expr nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (eval_conds def-decl "bool" pvs0_cc nil)
    (indi_f_sound_iter def-decl "{b: bool |
   (FORALL (i_: below(N), j_: below(N)):
      i_ > i OR (i_ = i AND j_ >= j) IMPLIES
       FORALL (c: vert(dg(G))):
         (get(f(c))(i_, j_) = 1 IMPLIES gt(ms(G), c, i_, j_, FALSE)) AND
          (get(f(c))(i_, j_) = 0 IMPLIES gt(ms(G), c, i_, j_, TRUE)))
    = b}" ccg_to_mwg CCG)
    (indi_f_sound_all_vertex def-decl "bool" ccg_to_mwg CCG)
    (ge const-decl "bool" ccg_def CCG) (nth def-decl "T" list_props nil)
    (eval_op1 const-decl "Val" pvs0_expr nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le const-decl "bool" ccg_def CCG) (gt const-decl "bool" ccg CCG)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]" PVS0Bool_adt
     nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (factorial_mm subtype
                 "LAMBDA (v: digraphs_[CallingContext[nat, PVS0Expr[nat], list[PVS0Bool[nat]], Path[nat]], digraph_type[CallingContext[nat, PVS0Expr[nat], list[PVS0Bool[nat]], Path[nat]]], c_digraphs_imp[CallingContext[nat, PVS0Expr[nat], list[PVS0Bool[nat]], Path[nat]]].digraph_verts, c_digraphs_imp[CallingContext[nat, PVS0Expr[nat], list[PVS0Bool[nat]], Path[nat]]].digraph_edges, c_digraphs_imp[CallingContext[nat, PVS0Expr[nat], list[PVS0Bool[nat]], Path[nat]]].digraph_size, c_digraphs_imp[CallingContext[nat, PVS0Expr[nat], list[PVS0Bool[nat]], Path[nat]]].digraph_make].vert(dg(ccg_def[nat, PVS0Expr[nat], list[PVS0Bool[nat]], Path[nat], MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n), 1].make_ccg(factorial_pvs0.factorial_dg, factorial_pvs0.factorial_measures)))): factorial_pvs0.A"
                 "(ccg_to_mwg[nat, PVS0Expr[nat], list[PVS0Bool[nat]], Path[nat], MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n), 1, pvs0_expr[nat].semantic_rel_expr(factorial_pvs0.pvs0_factorial), pvs0_cc[nat].eval_conds(factorial_pvs0.pvs0_factorial)].indi_f_sound(ccg_def[nat, PVS0Expr[nat], list[PVS0Bool[nat]], Path[nat], MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n), 1].make_ccg(factorial_pvs0.factorial_dg, factorial_pvs0.factorial_measures)))")))
 (pvs0_factorial_terminating 0
  (pvs0_factorial_terminating-2 "" 3743098120
   ("" (pvs0-terminating "factorial") nil nil)
   ((scp_iff_pvs0_terminates formula-decl nil scp_iff_pvs0 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (ccg_termination_pvs0 const-decl "bool" ccg_to_pvs0 nil)
    (eval_conds def-decl "bool" pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (mwg_termination_to_ccg_termination formula-decl nil ccg_to_mwg CCG)
    (CCG type-eq-decl nil ccg_def CCG) (make_ccg const-decl "CCG" ccg_def CCG)
    (c_bounding_from_gl_termination formula-decl nil bounding_circuits CCG)
    (ccg_to_mwg const-decl "{W: wgd_type |
   dg(W) = dg(G) AND
    FORALL (e: (edges(dg(G)))): get_wgt(W, e) = weight(G)(f)(e)}" ccg_to_mwg
     CCG)
    (weight const-decl "Measure_Matrix[N]" ccg_to_mwg CCG)
    (edge type-eq-decl nil digraphs_ digraphs)
    (edge? const-decl "bool" digraphs_ digraphs)
    (get_wgt const-decl "Weight" c_weighted_digraphs_def digraphs)
    (edges const-decl "bool" c_digraphs_def digraphs)
    (c_digraph type-eq-decl nil c_digraphs_def digraphs)
    (wgd_type type-eq-decl nil c_weighted_digraphs_def digraphs)
    (wdg type-eq-decl nil matrix_wdg CCG)
    (all_edges_in_map? const-decl "bool" c_weighted_digraphs_def digraphs)
    (id const-decl "Measure_Matrix" measures CCG)
    (* const-decl "Measure_Matrix" measures CCG)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (factorial_mm const-decl
                  "(indi_f_sound(make_ccg(factorial_dg, factorial_measures)))"
                  factorial_pvs0 nil)
    (indi_f_sound const-decl "bool" ccg_to_mwg CCG)
    (indi_f type-eq-decl nil ccg_to_mwg CCG)
    (Measure_Matrix type-eq-decl nil measures CCG)
    (listn type-eq-decl nil listn structures)
    (length def-decl "nat" list_props nil)
    (Sign3 type-eq-decl nil sign3 reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (vert type-eq-decl nil digraphs_ digraphs)
    (vert? const-decl "bool" digraphs_ digraphs)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp digraphs)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp digraphs)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
                   c_digraphs_imp digraphs)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
                   digraphs)
    (digraph_type type-eq-decl nil c_digraphs_imp digraphs)
    (factorial_dg const-decl "(sound_ccg_digraph(pvs0_factorial))"
                  factorial_pvs0 nil)
    (sound_ccg_digraph const-decl "bool" pvs0_to_dg nil)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (CallingContext type-eq-decl nil cc_def CCG)
    (factorial_measures const-decl "FunMeasures" factorial_pvs0 nil)
    (FunMeasures type-eq-decl nil ccg_def CCG)
    (FunMeasure type-eq-decl nil ccg_def CCG)
    (Path type-eq-decl nil pvs0_cc nil)
    (every adt-def-decl "boolean" PVS0Bool_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (ccg_implies_scp_pvs0 formula-decl nil ccg_to_pvs0 nil)
    (MT type-eq-decl nil pvs0_prelude nil) (< const-decl "bool" reals nil))
   shostak
   (pvs0_factorial_terminating subtype "factorial_pvs0.pvs0_factorial"
    "(pvs0_lang[nat].terminating?)")))
 (pvs0_factorial_tcc_termination 0
  (pvs0_factorial_tcc_termination-2 nil 3707175823
   ("" (use "terminates_implies_pvs0_tcc") (("" (assert) nil nil)) nil)
   ((pvs0_factorial_terminating name-judgement "(terminating?)" factorial_pvs0
     nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (terminates_implies_pvs0_tcc formula-decl nil measure_termination nil))
   nil
   (pvs0_factorial_tcc_termination subtype "factorial_pvs0.pvs0_factorial"
    "(measure_termination_defs[nat, MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n)].pvs0_tcc_termination)"))
  (pvs0_factorial_tcc_termination-1 nil 3681472896
   ("" (expand "pvs0_tcc_termination")
    (("" (expand "pvs0_tcc_termination_pred")
      (("" (inst 1 "LAMBDA (n:nat): n")
        (("" (skeep)
          (("" (skeep)
            (("" (skeep)
              (("" (typepred "cc")
                (("" (use "pvs0_ccs_completness")
                  (("" (eval-expr "pvs0_ccs(pvs0_factorial`4)")
                    (("" (replaces -1)
                      (("" (expand* "member")
                        (("" (expand* "member")
                          (("" (replaces -1)
                            (("" (assert)
                              (("" (expand "semantic_rel_expr")
                                (("" (expand "semantic_rel_expr")
                                  (("" (expand "pvs0_factorial" -2)
                                    (("" (skeep)
                                      ((""
                                        (replaces -2)
                                        ((""
                                          (replaces -2)
                                          ((""
                                            (hide -1)
                                            ((""
                                              (expand "eval_conds")
                                              ((""
                                                (expand "eval_conds_rec")
                                                ((""
                                                  (expand "eval_conds_rec")
                                                  ((""
                                                    (skeep)
                                                    ((""
                                                      (expand
                                                       "semantic_rel_expr")
                                                      ((""
                                                        (expand
                                                         "pvs0_factorial")
                                                        (("" (grind) nil nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination_pred const-decl "bool" measure_termination_defs nil)
    (pvs0_ccs_completness formula-decl nil pvs0_to_dg nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (list type-decl nil list_adt nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(expr))]" pvs0_to_dg nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt nil)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]" PVS0Bool_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]" PVS0Expr_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs nil))
   nil
   (pvs0_factorial_tcc_termination subtype "factorial_pvs0.pvs0_factorial"
    "(measure_termination_defs[nat, MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n)].pvs0_tcc_termination)")))
 (factorial_msr 0
  (factorial_msr-1 nil 3681214068
   ("" (typepred "pvs0_factorial")
    (("" (expand "pvs0_tcc_termination") (("" (propax) nil nil)) nil)) nil)
   ((pvs0_factorial_tcc_termination name-judgement "(pvs0_tcc_termination)"
     factorial_pvs0 nil)
    (pvs0_factorial_terminating name-judgement "(terminating?)" factorial_pvs0
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (MT type-eq-decl nil pvs0_prelude nil) (< const-decl "bool" reals nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (terminating? const-decl "bool" pvs0_lang nil))
   shostak))
 (factorial_wfm_TCC1 0
  (factorial_wfm_TCC1-1 nil 3681217137
   ("" (typepred "pvs0_factorial")
    (("" (expand "pvs0_tcc_termination")
      (("" (skeep -) (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((wfm skolem-const-decl "WFM[nat, MT, LAMBDA (m, n: nat): m < n]"
     factorial_pvs0 nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool" measure_termination_defs nil)
    (pvs0_factorial_tcc_termination name-judgement "(pvs0_tcc_termination)"
     factorial_pvs0 nil)
    (pvs0_factorial_terminating name-judgement "(terminating?)" factorial_pvs0
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (MT type-eq-decl nil pvs0_prelude nil) (< const-decl "bool" reals nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (terminating? const-decl "bool" pvs0_lang nil))
   nil
   (factorial_wfm existence ""
    "(measure_termination_defs[nat, MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n)].pvs0_tcc_termination_pred(factorial_pvs0.pvs0_factorial))"))))


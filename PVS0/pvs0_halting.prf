(pvs0_halting
 (nat_to_PVS0_TCC1 0
  (nat_to_PVS0_TCC1-1 nil 3666356880
   ("" (lemma "representantion") (("" (grind) nil nil)) nil)
   ((surjective? const-decl "bool" functions nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (pvs0_level inductive-decl "bool" pvs0_computable nil)
    (PVS0_partial_recursive type-eq-decl nil pvs0_computable nil)
    (f!1 skolem-const-decl
     "[nat -> PVS0_partial_recursive[false_val, lop1, lop2]]" pvs0_halting
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (representantion formula-decl nil pvs0_computable nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (false_val formal-const-decl "nat" pvs0_halting nil)
    (list type-decl nil list_adt nil)
    (lop1 formal-const-decl "list[[nat -> nat]]" pvs0_halting nil)
    (lop2 formal-const-decl "list[[[nat, nat] -> nat]]" pvs0_halting nil))
   nil
   (nat_to_PVS0 existence ""
    "(functions[nat, PVS0_partial_recursive[false_val, lop1, lop2]].surjective?)")))
 (true_val_TCC1 0
  (true_val_TCC1-2 nil 3718320449 ("" (inst 1 "false_val+1") nil nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (false_val formal-const-decl "nat" pvs0_halting nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   nil
   (true_val existence ""
    "{x: naturalnumbers.nat | x /= pvs0_halting.false_val}"))
  (true_val_TCC1-1 nil 3718320440 ("" (existence-tcc) nil nil) nil nil
   (true_val existence ""
    "{x: naturalnumbers.nat | x /= pvs0_halting.false_val}")))
 (Oracle_TCC1 0
  (Oracle_TCC1-1 nil 3718559211
   ("" (expand "terminating?")
    (("" (expand "terminates_expr")
      (("" (skeep)
        (("" (expand "semantic_rel_expr")
          (("" (assert)
            (("" (expand "semantic_rel_expr")
              ((""
                (inst 1
                 "IF determined?(nat_to_PVS0(nat2tuple(env)`1))(nat2tuple(env)`2) THEN true_val ELSE false_val ENDIF")
                (("" (inst 1 "env") (("" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((terminates_expr const-decl "bool" pvs0_expr nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (eval_op1 const-decl "Val" pvs0_expr nil)
    (nth def-decl "T" list_props nil) (length def-decl "nat" list_props nil)
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (true_val const-decl "{x: nat | x /= false_val}" pvs0_halting nil)
    (/= const-decl "boolean" notequal nil)
    (nat2tuple def-decl "[nat, nat]" tuple2nat numbers)
    (nat_to_PVS0 const-decl
     "(surjective?[nat, PVS0_partial_recursive[false_val, lop1, lop2]])"
     pvs0_halting nil)
    (surjective? const-decl "bool" functions nil)
    (PVS0_partial_recursive type-eq-decl nil pvs0_computable nil)
    (pvs0_level inductive-decl "bool" pvs0_computable nil)
    (lop2 formal-const-decl "list[[[nat, nat] -> nat]]" pvs0_halting nil)
    (lop1 formal-const-decl "list[[nat -> nat]]" pvs0_halting nil)
    (false_val formal-const-decl "nat" pvs0_halting nil)
    (determined? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (terminating? const-decl "bool" pvs0_lang nil))
   nil
   (Oracle subtype
    "((: LAMBDA (pb: naturalnumbers.nat): LET (p, n) = tuple2nat.nat2tuple(pb), pvs0 = pvs0_halting.nat_to_PVS0(pvs0_halting.p) IN IF pvs0_lang[nat].determined?(pvs0_halting.pvs0)(pvs0_halting.n) THEN pvs0_halting.true_val ELSE pvs0_halting.false_val ENDIF :), (: :), pvs0_halting.false_val, PVS0Expr_adt[nat].op1(0, PVS0Expr_adt[nat].vr))"
    "(pvs0_lang[nat].terminating?)")))
 (pvs0_decidability 0
  (pvs0_decidability-1 nil 3718559238
   ("" (skeep)
    (("" (expand "Oracle")
      (("" (expand "pvs0_eval")
        (("" (expand "pvs0_eval_expr")
          (("" (expand "eval_op1")
            (("" (expand "length")
              (("" (expand "length")
                (("" (expand "nth")
                  (("" (assert)
                    (("" (expand "pvs0_eval_expr" 1 1)
                      (("" (expand "pvs0_eval_expr" 1 1)
                        (("" (rewrite "nat2tuple_tuple2nat")
                          (("" (assert)
                            (("" (expand "PVS0_to_nat")
                              (("" (rewrite "inverse_surjective")
                                (("" (ground) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Oracle const-decl "(terminating?)" pvs0_halting nil)
    (pvs0_eval_expr def-decl
     "{v: Val | semantic_rel_expr(pvs0)(expr, val, v)}" pvs0_eval nil)
    (length def-decl "nat" list_props nil) (nth def-decl "T" list_props nil)
    (nat2tuple_tuple2nat formula-decl nil tuple2nat numbers)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (false_val formal-const-decl "nat" pvs0_halting nil)
    (lop1 formal-const-decl "list[[nat -> nat]]" pvs0_halting nil)
    (lop2 formal-const-decl "list[[[nat, nat] -> nat]]" pvs0_halting nil)
    (pvs0_level inductive-decl "bool" pvs0_computable nil)
    (PVS0_partial_recursive type-eq-decl nil pvs0_computable nil)
    (injective? const-decl "bool" functions nil)
    (PVS0_to_nat const-decl
     "(injective?[PVS0_partial_recursive[false_val, lop1, lop2], nat])"
     pvs0_halting nil)
    (inverse_surjective formula-decl nil function_inverse nil)
    (surjective? const-decl "bool" functions nil)
    (nat_to_PVS0 const-decl
     "(surjective?[nat, PVS0_partial_recursive[false_val, lop1, lop2]])"
     pvs0_halting nil)
    (eval_op1 const-decl "Val" pvs0_expr nil)
    (pvs0_eval const-decl "{v: Val | semantic_rel_expr(pvs0)(pvs0`4, val, v)}"
     pvs0_eval nil))
   shostak))
 (pvs0_undecidability 0
  (pvs0_undecidability-1 nil 3666816836
   ("" (skolem -1 "f")
    ((""
      (name "ff"
            "(append(f`1,(:LAMBDA(v:nat):pvs0_eval(f)(v) :)),append(f`2,(:lambda(m,n:nat): pvs0_eval(f)(tuple2nat(m,n)) :)),false_val,ite(op2(length(f`2),vr,vr),rec(vr),cnst(true_val)))")
      (("" (hide -1)
        (("" (name "eff" "PVS0_to_nat(ff)")
          (("1" (inst - "ff" "eff")
            (("1" (replaces -1)
              (("1" (case "NOT pvs0_eval(f)(tuple2nat(eff,eff)) = false_val")
                (("1" (assert)
                  (("1" (lemma "mu_terminates")
                    (("1" (inst -1 "ff" "eff")
                      (("1" (skoletin* -1)
                        (("1" (expand "eval")
                          (("1" (expand "ff" -2 2)
                            (("1" (expand "eval_expr")
                              (("1" (case-replace "mun = 0")
                                (("1" (assert) nil nil)
                                 ("2" (assert)
                                  (("2" (lift-if)
                                    (("2" (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (name
                                           "EE"
                                           "eval_expr(ff)(mun, op2(length(f`2), vr, vr),eff)")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (expand "ff" -3 1)
                                              (("1"
                                                (expand "eval_expr" -1)
                                                (("1"
                                                  (expand "eval_expr" -1)
                                                  (("1"
                                                    (expand "ff" -1)
                                                    (("1"
                                                      (expand "eval_op2")
                                                      (("1"
                                                        (rewrite
                                                         "length_append")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite
                                                             "nth_append")
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "eval_expr"
                                                                 -3
                                                                 2)
                                                                (("1"
                                                                  (split -3)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "eval_expr")
                                                                      (("1"
                                                                        (expand
                                                                         "eval_expr"
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "eval_expr"
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "mu")
                                                                            (("1"
                                                                              (with-tccs
                                                                               (typepred
                                                                                "min({n: nat | some?(eval(ff)(n)(eff))})"))
                                                                              (("1"
                                                                                (replaces
                                                                                 -7
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (inst
                                                                                   -2
                                                                                   "mun-1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "eval"
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (decompose-equality
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "determined?")
                    (("2" (expand "semantic_rel" 1)
                      (("2" (expand "ff" 1 2)
                        (("2" (expand "semantic_rel_expr" 1)
                          (("2" (expand "semantic_rel_expr" 1 1)
                            (("2" (expand "semantic_rel_expr" 1 1)
                              (("2" (expand "semantic_rel_expr" 1 1)
                                (("2" (expand "ff" 1 1)
                                  (("2" (expand "eval_op2")
                                    (("2" (rewrite "length_append")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "nth_append")
                                          (("2"
                                            (expand "nth")
                                            (("2"
                                              (expand "ff" 1 1)
                                              (("2"
                                                (inst 1 "true_val")
                                                (("2"
                                                  (inst 1 "false_val")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (inst 1 "eff" "eff")
                                                      (("1" (assert) nil nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "semantic_rel_expr")
                                                      (("2" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "f")
            (("2" (skeep)
              (("2" (inst 1 "n+1")
                (("2" (expand "ff")
                  (("2" (expand "pvs0_level" 1)
                    (("2" (prop)
                      (("1" (inst 1 "f")
                        (("1" (prop)
                          (("1" (rewrite "length_append") nil nil)
                           ("2" (skeep)
                            (("2" (prop)
                              (("1" (rewrite "nth_append")
                                (("1" (assert) nil nil)) nil)
                               ("2" (case "i=length(f`1)")
                                (("1" (replaces -1)
                                  (("1" (rewrite "nth_append")
                                    (("1" (expand "nth")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (typepred "pvs0_eval(f)(env)")
                                          (("1"
                                            (expand "semantic_rel")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (typepred "i")
                                  (("2" (rewrite "length_append")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "pvs0_level_computable_n")
                          (("2" (inst? -1) nil nil)) nil))
                        nil)
                       ("2" (inst 1 "f")
                        (("1" (rewrite "length_append")
                          (("1" (skeep)
                            (("1" (prop)
                              (("1" (rewrite "nth_append")
                                (("1" (assert) nil nil)) nil)
                               ("2" (case "i=length(f`2)")
                                (("1" (replaces -1)
                                  (("1" (rewrite "nth_append")
                                    (("1" (expand "nth")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (typepred
                                           "pvs0_eval(f)(tuple2nat(env1, env2))")
                                          (("1"
                                            (expand "semantic_rel")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (typepred "i")
                                  (("2" (rewrite "length_append")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "pvs0_level_computable_n")
                          (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((true_val const-decl "{x: nat | x /= false_val}" pvs0_halting nil)
    (/= const-decl "boolean" notequal nil)
    (cnst adt-constructor-decl "[T -> (cnst?)]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (length def-decl "nat" list_props nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]"
     PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite adt-constructor-decl "[[PVS0Expr, PVS0Expr, PVS0Expr] -> (ite?)]"
     PVS0Expr_adt nil)
    (tuple2nat const-decl "nat" tuple2nat numbers)
    (pvs0_eval const-decl "{v: Val | semantic_rel_expr(pvs0)(pvs0`4, val, v)}"
     pvs0_eval nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (PVS0_computable type-eq-decl nil pvs0_computable nil)
    (pvs0_level_computable inductive-decl "bool" pvs0_computable nil)
    (lop2 formal-const-decl "list[[[nat, nat] -> nat]]" pvs0_halting nil)
    (lop1 formal-const-decl "list[[nat -> nat]]" pvs0_halting nil)
    (false_val formal-const-decl "nat" pvs0_halting nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pvs0_level inductive-decl "bool" pvs0_computable nil)
    (PVS0_partial_recursive type-eq-decl nil pvs0_computable nil)
    (injective? const-decl "bool" functions nil)
    (PVS0_to_nat const-decl
     "(injective?[PVS0_partial_recursive[false_val, lop1, lop2], nat])"
     pvs0_halting nil)
    (TRUE const-decl "bool" booleans nil)
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (determined? const-decl "bool" pvs0_lang nil)
    (eval_expr def-decl "Maybe[Val]" pvs0_expr nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[Val] |
   some?(myv) IMPLIES
    n > 0 AND FORALL (m: upfrom(n)): myv = eval_expr(pvs0)(m, expr, env)}"
     pvs0_to_nat nil)
    (eval_expr_semantic_rel_j rec-application-judgement "{myv: Maybe[Val] |
   some?(myv) IMPLIES semantic_rel_expr(pvs0)(expr, env, val(myv))}"
     pvs0_to_nat nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (eval_op2 const-decl "Val" pvs0_expr nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil) (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" min_nat
         nil)
    (<= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth_append formula-decl nil more_list_props structures)
    (length_singleton formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (length_append formula-decl nil list_props nil)
    (ff skolem-const-decl
     "[list[[nat -> nat]], list[[[nat, nat] -> nat]], nat, (ite?)]"
     pvs0_halting nil)
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (mu const-decl "posnat" pvs0_lang nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (mu_terminates formula-decl nil pvs0_lang nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pvs0_level_computable_n judgement-tcc nil pvs0_computable nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (f skolem-const-decl "PVS0_computable[false_val, lop1, lop2]" pvs0_halting
     nil)
    (n skolem-const-decl "nat" pvs0_halting nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   nil)))


(dp_termination
 (lt_wfm_dp_well_founded 0
  (lt_wfm_dp_well_founded-3 nil 3701080226
   ("" (skeep)
    (("" (lemma "transitive_closure_preserves_well_foundedness[MT]")
      (("" (inst -1 "lt")
        (("" (expand "well_founded_order?")
          (("" (flatten)
            (("" (expand "well_founded?")
              (("" (skeep)
                (("" (inst -1 "LAMBDA(m:MT): EXISTS(v: (p)): wfm(v) = m")
                  (("" (split -1)
                    (("1" (skolem -1 "m_min")
                      (("1" (typepred "m_min")
                        (("1" (skolem -1 "v_min")
                          (("1" (inst 1 "v_min")
                            (("1" (skeep 1)
                              (("1" (inst -2 "wfm(x)")
                                (("1" (expand "lt_wfm_dp")
                                  (("1" (skeep -4)
                                    (("1" (replaces -1)
                                      (("1"
                                        (hide-all-but (-1 -7 -8 1))
                                        (("1"
                                          (expand "transitive?")
                                          (("1"
                                            (inst
                                             -1
                                             "wfm(x)"
                                             "wfm(v2)"
                                             "m_min")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (skeep) (("2" (inst 1 "x") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (skeep)
                        (("2" (inst 1 "wfm(y)") (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((MT formal-type-decl nil dp_termination nil)
    (transitive_closure_preserves_well_foundedness judgement-tcc nil
     well_foundedness orders)
    (transitive_closure_preserves_well_foundedness application-judgement
     "(well_founded_order?)" dp_termination nil)
    (well_founded_order? const-decl "bool" well_foundedness orders)
    (T formal-nonempty-type-decl nil dp_termination nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (y skolem-const-decl "T" dp_termination nil)
    (lt_wfm_dp const-decl "bool" dp_termination nil)
    (TRUE const-decl "bool" booleans nil)
    (transitive? const-decl "bool" relations nil)
    (x skolem-const-decl "(p)" dp_termination nil)
    (wfm skolem-const-decl "WFM[T, MT, lt]" dp_termination nil)
    (p skolem-const-decl "pred[T]" dp_termination nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lt formal-const-decl "(well_founded?[MT])" dp_termination nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)
  (lt_wfm_dp_well_founded-2 nil 3701080174
   ("" (lemma "transitive_closure_preserves_well_foundedness[MT]")
    (("" (inst -1 "lt")
      (("" (expand "well_founded_order?")
        (("" (flatten)
          (("" (expand "well_founded?")
            (("" (skeep)
              (("" (inst -1 "LAMBDA(m:MT): EXISTS(v: (p)): wfm(v) = m")
                (("" (split -1)
                  (("1" (skolem -1 "m_min")
                    (("1" (typepred "m_min")
                      (("1" (skolem -1 "v_min")
                        (("1" (inst 1 "v_min")
                          (("1" (skeep 1)
                            (("1" (inst -2 "wfm(x)")
                              (("1" (expand "lt_wfm_dp")
                                (("1" (assert)
                                  (("1" (reveal -3)
                                    (("1" (replace -2)
                                      (("1"
                                        (hide-all-but (-1 -8 -9 1))
                                        (("1"
                                          (expand "transitive?")
                                          (("1"
                                            (inst? -1 :where 1)
                                            (("1"
                                              (inst? -1 :where -2)
                                              (("1"
                                                (assert)
                                                nil)))))))))))))))))
                               ("2" (skeep)
                                (("2" (inst 1 "x") nil)))))))))))))))
                   ("2" (hide 2)
                    (("2" (skeep)
                      (("2" (inst 1 "wfm(y)")
                        (("2" (inst?) nil))))))))))))))))))))))
    nil)
   nil nil)
  (lt_wfm_dp_well_founded-1 nil 3701080089 ("" (postpone) nil nil) nil
   shostak))
 (dp_dec_implies_dp_termination 0
  (dp_dec_implies_dp_termination-8 nil 3701080552
   ("" (skeep)
    (("" (expand "dp_decreasement?")
      (("" (expand "pvs0_tcc_termination")
        (("" (expand "dp_termination?")
          (("" (expand "infinite_dp_chain?")
            (("" (skeep*)
              (("" (lemma "no_infinite_descending_sequence[T]")
                (("" (inst -1 "lt_wfm_dp(pvs0)(wfm)")
                  (("" (use "lt_wfm_dp_well_founded")
                    (("" (assert)
                      (("" (expand "empty?")
                        (("" (expand "member")
                          (("" (expand "descending?")
                            (("" (inst -2 "LAMBDA(i:nat): vseq(2*i)")
                              (("" (skeep)
                                (("" (expand "lt_wfm_dp" 1)
                                  (("" (hide -1)
                                    (("" (expand "dep_link?")
                                      ((""
                                        (inst -2 "2 * n")
                                        ((""
                                          (flatten)
                                          ((""
                                            (skeep)
                                            ((""
                                              (inst
                                               1
                                               "vact1"
                                               "cseq(2 * n)"
                                               "cseq(1 + 2 * n)")
                                              ((""
                                                (assert)
                                                ((""
                                                  (expand
                                                   "pvs0_tcc_termination_pred")
                                                  ((""
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       "transitive_closure")
                                                      (("1"
                                                        (expand "IUnion")
                                                        (("1"
                                                          (inst -1 "vact1")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "cseq(1 + 2 * n)"
                                                             "vseq(2 + 2 * n)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst 1 1)
                                                                (("1"
                                                                  (expand
                                                                   "iterate")
                                                                  (("1"
                                                                    (expand
                                                                     "o ")
                                                                    (("1"
                                                                      (expand
                                                                       "iterate")
                                                                      (("1"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst -1 "vseq(2 * n)")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "cseq(2 * n)"
                                                         "vact1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide-all-but
                                                             (-1 1))
                                                            (("2"
                                                              (expand
                                                               "transitive_closure")
                                                              (("2"
                                                                (expand
                                                                 "IUnion")
                                                                (("2"
                                                                  (inst 1 1)
                                                                  (("2"
                                                                    (expand
                                                                     "iterate")
                                                                    (("2"
                                                                      (expand
                                                                       "iterate")
                                                                      (("2"
                                                                        (expand
                                                                         "o ")
                                                                        (("2"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dp_decreasement? const-decl "bool" dp_termination nil)
    (dp_termination? const-decl "bool" dp_termination nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (MT formal-type-decl nil dp_termination nil)
    (well_founded? const-decl "bool" orders nil)
    (lt formal-const-decl "(well_founded?[MT])" dp_termination nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (lt_wfm_dp const-decl "bool" dp_termination nil)
    (member const-decl "bool" sets nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (val_seq type-eq-decl nil dp_termination nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (dep_link? const-decl "bool" dp_termination nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (pvs0 skolem-const-decl "PVS0[T]" dp_termination nil)
    (cc_seq type-eq-decl nil dp_termination nil)
    (cseq skolem-const-decl "cc_seq" dp_termination nil)
    (n skolem-const-decl "nat" dp_termination nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pvs0_tcc_termination_pred const-decl "bool" measure_termination_defs nil)
    (transitive_closure_preserves_well_foundedness application-judgement
     "(well_founded_order?)" dp_termination nil)
    (transitive_closure const-decl "(transitive?)" closure_ops orders)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (O const-decl "bool" relation_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (descending? const-decl "bool" monotone_sequences orders)
    (empty? const-decl "bool" sets nil)
    (lt_wfm_dp_well_founded formula-decl nil dp_termination nil)
    (T formal-nonempty-type-decl nil dp_termination nil)
    (no_infinite_descending_sequence formula-decl nil well_foundedness orders)
    (infinite_dp_chain? const-decl "bool" dp_termination nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs nil))
   nil)
  (dp_dec_implies_dp_termination-7 nil 3700556207
   ("" (skeep)
    (("" (expand "dp_decreasement?")
      (("" (expand "pvs0_tcc_termination")
        (("" (expand "pvs0_tcc_termination_pred")
          (("" (use "dp_termination_decreasing")
            (("" (assert)
              (("" (skeep*)
                (("" (hide 2)
                  (("" (expand "infinite_dp_chain?")
                    (("" (inst 1 "lt_wfm_dp(pvs0)(wfm)")
                      (("1" (skeep)
                        (("1" (insteep -1)
                          (("1" (expand "lt_wfm_dp")
                            (("1" (expand "dep_link?")
                              (("1" (flatten)
                                (("1" (skeep)
                                  (("1" (inst-cp -7 "vseq(i)")
                                    (("1" (inst -8 "cseq(i)" "vact1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -7 "vact1")
                                          (("1"
                                            (inst
                                             -7
                                             "cseq(1 + i)"
                                             "vseq(2+i)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 1
                                                 "vact1"
                                                 "cseq(i)"
                                                 "cseq(i+1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (hide-all-but (-7 1))
                                                      (("1"
                                                        (expand
                                                         "transitive_closure")
                                                        (("1"
                                                          (expand "IUnion")
                                                          (("1"
                                                            (inst 1 "1")
                                                            (("1"
                                                              (expand
                                                               "iterate")
                                                              (("1"
                                                                (expand
                                                                 "iterate")
                                                                (("1"
                                                                  (expand
                                                                   "o ")
                                                                  (("1"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "transitive_closure")
                                                      (("2"
                                                        (expand "IUnion")
                                                        (("2"
                                                          (inst 1 "1")
                                                          (("2"
                                                            (expand "iterate")
                                                            (("2"
                                                              (expand
                                                               "iterate")
                                                              (("2"
                                                                (expand "o ")
                                                                (("2"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -)
                        (("2"
                          (lemma
                           "transitive_closure_preserves_well_foundedness[MT]")
                          (("2" (inst -1 "lt")
                            (("2" (expand "well_founded_order?")
                              (("2" (flatten)
                                (("2" (hide -2)
                                  (("2" (expand "well_founded?")
                                    (("2" (skeep)
                                      (("2"
                                        (inst
                                         -1
                                         "LAMBDA(m:MT): EXISTS(v: (p)): wfm(v) = m")
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (skolem -1 "m_min")
                                            (("1"
                                              (typepred "m_min")
                                              (("1"
                                                (skolem -1 "v_min")
                                                (("1"
                                                  (inst 1 "v_min")
                                                  (("1"
                                                    (skeep 1)
                                                    (("1"
                                                      (inst -2 "wfm(x)")
                                                      (("1"
                                                        (expand "lt_wfm_dp")
                                                        (("1"
                                                          (skeep -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (reveal -3)
                                                              (("1"
                                                                (replace -2)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -8
                                                                    -9
                                                                    1))
                                                                  (("1"
                                                                    (expand
                                                                     "transitive?")
                                                                    (("1"
                                                                      (inst?
                                                                       -1
                                                                       :where
                                                                       1)
                                                                      (("1"
                                                                        (inst?
                                                                         -1
                                                                         :where
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst 1 "x")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst 1 "wfm(y)")
                                                (("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination_pred const-decl "bool" measure_termination_defs nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (well_founded? const-decl "bool" orders nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (transitive_closure const-decl "(transitive?)" closure_ops orders)
    (transitive_closure_preserves_well_foundedness judgement-tcc nil
     well_foundedness orders)
    (well_founded_order? const-decl "bool" well_foundedness orders)
    (transitive? const-decl "bool" relations nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs nil))
   nil)
  (dp_dec_implies_dp_termination-6 nil 3700554982
   ("" (skeep)
    (("" (expand "dp_decreasement?")
      (("" (expand "pvs0_tcc_termination")
        (("" (expand "pvs0_tcc_termination_pred")
          (("" (use "dp_termination_decreasing")
            (("" (assert)
              (("" (skeep*)
                (("" (hide 2)
                  (("" (expand "infinite_dp_chain?")
                    (("" (inst 1 "lt_wfm_dp(pvs0)(wfm)")
                      (("1" (skeep)
                        (("1" (insteep -1)
                          (("1" (expand "lt_wfm_dp")
                            (("1" (expand "dep_link?")
                              (("1" (flatten)
                                (("1" (skeep)
                                  (("1" (inst-cp -7 "vseq(i)")
                                    (("1" (inst -8 "cseq(i)" "vact1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -7 "vact1")
                                          (("1"
                                            (inst
                                             -7
                                             "cseq(1 + i)"
                                             "vseq(2+i)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 1
                                                 "vact1"
                                                 "cseq(i)"
                                                 "cseq(i+1)")
                                                (("1"
                                                  (assert)
                                                  nil)))))))))))))))))))))))))))
                       ("2" (hide -)
                        (("2" (typepred "lt")
                          (("2" (expand "well_founded_order?")
                            (("2" (flatten)
                              (("2" (hide -2)
                                (("2" (expand "well_founded?")
                                  (("2"
                                    (inst -1
                                     "LAMBDA(m:MT): EXISTS(v: (p)): wfm(v) = m")
                                    (("2" (split -1)
                                      (("1"
                                        (skolem -1 "m_min")
                                        (("1"
                                          (typepred "m_min")
                                          (("1"
                                            (skolem -1 "v_min")
                                            (("1"
                                              (inst 1 "v_min")
                                              (("1"
                                                (skeep 1)
                                                (("1"
                                                  (inst -2 "wfm(x)")
                                                  (("1"
                                                    (expand "lt_val")
                                                    (("1"
                                                      (skeep -3)
                                                      (("1" (assert) nil)))))
                                                   ("2"
                                                    (inst 1 "x")
                                                    nil)))))))))))))
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst 1 "wfm(y)")
                                            (("2"
                                              (inst?)
                                              nil))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (dp_dec_implies_dp_termination-5 nil 3700500374
   ("" (skeep)
    (("" (expand "dp_decreasement?")
      (("" (expand "pvs0_tcc_termination")
        (("" (expand "pvs0_tcc_termination_pred")
          (("" (use "dp_termination_decreasing")
            (("" (assert)
              (("" (skeep*)
                (("" (hide 2)
                  (("" (expand "infinite_dp_chain?")
                    (("" (inst 1 "lt_wfm_dp(pvs0)(wfm)")
                      (("1" (skeep)
                        (("1" (insteep -1)
                          (("1" (expand "lt_wfm_dp")
                            (("1" (expand "dep_link?")
                              (("1" (flatten)
                                (("1" (skeep)
                                  (("1" (inst-cp -7 "vseq(i)")
                                    (("1" (inst -8 "cseq(i)" "vact1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -7 "vact1")
                                          (("1"
                                            (inst
                                             -7
                                             "cseq(1 + i)"
                                             "vseq(2+i)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 1
                                                 "vact1"
                                                 "cseq(i)"
                                                 "cseq(i+1)")
                                                (("1"
                                                  (assert)
                                                  nil)))))))))))))))))))))))))))
                       ("2" (hide -)
                        (("2" (expand "well_founded?")
                          (("2" (typepred "lt")
                            (("2" (expand "well_founded_order?")
                              (("2" (flatten)
                                (("2" (expand "well_founded?")
                                  (("2" (hide -2)
                                    (("2"
                                      (inst
                                       -1
                                       "LAMBDA(m:MT): EXISTS(v: (p)): wfm(v) = m")
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (skolem -1 "m_min")
                                          (("1"
                                            (typepred "m_min")
                                            (("1"
                                              (skolem -1 "v_min")
                                              (("1"
                                                (inst 1 "v_min")
                                                (("1"
                                                  (skeep 1)
                                                  (("1"
                                                    (inst -2 "wfm(x)")
                                                    (("1"
                                                      (expand "lt_val")
                                                      (("1"
                                                        (skeep -3)
                                                        (("1"
                                                          (assert)
                                                          nil)))))
                                                     ("2"
                                                      (inst 1 "x")
                                                      nil)))))))))))))
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst 1 "wfm(y)")
                                              (("2"
                                                (inst?)
                                                nil))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (dp_dec_implies_dp_termination-4 nil 3700498206
   ("" (skeep)
    (("" (expand "dp_decreasement?")
      (("" (expand "pvs0_tcc_termination")
        (("" (expand "pvs0_tcc_termination_pred")
          (("" (use "dp_termination_decreasing")
            (("" (assert)
              (("" (skeep*)
                (("" (hide 2)
                  (("" (expand "infinite_dp_chain?")
                    (("" (inst 1 "lt_wfm_dp(pvs0)(wfm)")
                      (("1" (skeep)
                        (("1" (insteep -1)
                          (("1" (expand "lt_wfm_dp")
                            (("1" (expand "dep_link?")
                              (("1" (flatten)
                                (("1" (skeep)
                                  (("1" (inst-cp -7 "vseq(i)")
                                    (("1" (inst -8 "cseq(i)" "vact1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -7 "vact1")
                                          (("1"
                                            (inst
                                             -7
                                             "cseq(1 + i)"
                                             "vseq(2+i)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 1
                                                 "vact1"
                                                 "cseq(i)"
                                                 "cseq(i+1)")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -)
                        (("2" (expand "well_founded?")
                          (("2" (typepred "lt")
                            (("2" (expand "well_founded_order?")
                              (("2" (flatten)
                                (("2" (expand "well_founded?")
                                  (("2" (hide -2)
                                    (("2" (skeep) (("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination_pred const-decl "bool" measure_termination_defs nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (well_founded_order? const-decl "bool" well_foundedness orders)
    (well_founded? const-decl "bool" orders nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs nil))
   nil)
  (dp_dec_implies_dp_termination-3 nil 3699961543
   ("" (skeep)
    (("" (expand "dp_decreasement?")
      (("" (expand "pvs0_tcc_termination")
        (("" (expand "pvs0_tcc_termination_pred")
          (("" (use "dp_termination_decreasing")
            (("" (assert)
              (("" (skeep*)
                (("" (hide 2)
                  (("" (expand "infinite_dp_chain?")
                    (("" (inst 1 "lt_wfm_dp(pvs0)(wfm)")
                      (("1" (skeep)
                        (("1" (insteep -1)
                          (("1" (expand "lt_wfm_dp")
                            (("1" (expand "dep_link?")
                              (("1" (flatten)
                                (("1" (skeep)
                                  (("1" (inst-cp -7 "vseq(i)")
                                    (("1" (inst -8 "cseq(i)" "vact1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -7 "vact1")
                                          (("1"
                                            (inst
                                             -7
                                             "cseq(1 + i)"
                                             "vseq(2+i)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 1
                                                 "vact1"
                                                 "cseq(i)"
                                                 "cseq(i+1)")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (use "lt_val_wf") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination_pred const-decl "bool" measure_termination_defs nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (well_founded_order? const-decl "bool" well_foundedness orders)
    (well_founded? const-decl "bool" orders nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs nil))
   nil)
  (dp_dec_implies_dp_termination-2 nil 3699293269
   ("" (skeep)
    (("" (expand "dp_decreasement?")
      (("" (expand "pvs0_tcc_termination")
        (("" (expand "pvs0_tcc_termination_pred")
          (("" (use "dp_termination_decreasing")
            (("" (assert)
              (("" (skeep*)
                (("" (hide 2)
                  (("" (expand "infinite_dp_chain?")
                    (("" (inst 1 "lt_wfm_dp(pvs0)(wfm)" "vseq")
                      (("1" (skeep)
                        (("1" (insteep -1)
                          (("1" (expand "lt_wfm_dp")
                            (("1" (expand "dep_link?")
                              (("1" (flatten)
                                (("1" (skeep)
                                  (("1" (inst-cp -7 "vseq(i)")
                                    (("1" (inst -7 "vact1")
                                      (("1"
                                        (inst -7 "cseq(i+1)" "vseq(i+1)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -8 "cseq(i)" "vact1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 1
                                                 "vact1"
                                                 "cseq(i)"
                                                 "cseq(i+1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide-all-but (-7 -8 1))
                                                    (("1"
                                                      (typepred "lt")
                                                      (("1"
                                                        (expand
                                                         "well_founded_order?")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "transitive?")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "wfm(vact1)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (use "lt_val_wf") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination_pred const-decl "bool" measure_termination_defs nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (well_founded_order? const-decl "bool" well_foundedness orders)
    (well_founded? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs nil))
   nil)
  (dp_dec_implies_dp_termination-1 nil 3699274284
   ("" (skeep)
    (("" (expand "dp_decreasement_criterion")
      (("" (expand "dp_decreasement?")
        (("" (expand "pvs0_tcc_termination_pred")
          (("" (use "dp_termination_decreasing")
            (("" (assert)
              (("" (skeep*)
                (("" (hide 2)
                  (("" (expand "infinite_dp_chain?")
                    (("" (skeep)
                      (("" (inst 1 "lt_val(pvs0)(wfm)" "vseq")
                        (("1" (skeep)
                          (("1" (expand "lt_val")
                            (("1" (inst -1 "i")
                              (("1" (expand "dep_link?")
                                (("1" (flatten)
                                  (("1" (inst -4 "vseq(i)")
                                    (("1" (inst -4 "cseq(i+1)")
                                      (("1"
                                        (inst -4 "vseq(i+1)")
                                        (("1"
                                          (inst 1 "cseq(i+1)")
                                          (("1"
                                            (assert)
                                            (("1" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "lt_val_wf") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))


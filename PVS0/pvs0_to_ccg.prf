(pvs0_to_ccg
 (scp_implies_ccg_pvs0_TCC1 0
  (scp_implies_ccg_pvs0_TCC1-1 nil 3708290890 ("" (subtype-tcc) nil nil)
   ((infinite_seq_ccs const-decl "bool" scp CCG)
    (scp_termination? const-decl "bool" scp CCG)
    (Val formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (scp_termination_pvs0 const-decl "bool" scp_iff_pvs0 nil))
   nil
   (scp_implies_ccg_pvs0 subtype
    "LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n)"
    "(orders[MT].well_founded?)")))
 (scp_implies_ccg_pvs0 0
  (scp_implies_ccg_pvs0-1 nil 3743099048
   ("" (skeep)
    (("" (expand "scp_termination_pvs0")
      (("" (expand "ccg_termination_pvs0")
        ((""
          (lemma
           "scp_implies_ccg_termination[Val,PVS0Expr,Conditions,Path,(cc_of_pvs0(pvs0`4)),semantic_rel_expr(pvs0),eval_conds(pvs0)]")
          (("1" (inst -1 "pvs0_to_fully_connected_dg(pvs0)")
            (("1" (skeep)
              (("1" (inst 1 "fms" "pvs0_to_fully_connected_dg(pvs0)") nil
                nil))
              nil)
             ("2" (hide -1 2)
              (("2" (expand "subset?")
                (("2" (expand "member")
                  (("2" (expand "pvs0_to_fully_connected_dg")
                    (("2" (use "cc_of_pvs0_soundness")
                      (("2" (skeep)
                        (("2" (inst?)
                          (("2" (expand "pvs0_to_dg_verts")
                            (("2" (expand "make_fully_connected")
                              (("2" (expand "vert")
                                (("2"
                                  (lemma
                                   "member_sl[CallingContext[Val, PVS0Expr[Val], Conditions,Path]]")
                                  (("2" (expand "member" -1 2)
                                    (("2" (inst?) (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1 2)
            (("2" (skeep)
              (("2" (expand "is_finite")
                (("2"
                  (inst 1 "1" "LAMBDA(w: ({w: Val |
                                                                 semantic_rel_expr
                                                                     (pvs0)
                                                                     (expr,
                                                                      v, w)})): 0")
                  (("2" (expand "injective?")
                    (("2" (skeep :preds? t)
                      (("2" (use "deterministic_expr")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (propax) nil nil)
           ("4" (hide -1 2)
            (("4" (lemma "finite_subset[CallingContext]")
              (("4"
                (inst -1 "pvs0_to_dg_verts(get_body(pvs0))"
                 "(cc_of_pvs0(get_body(pvs0)))")
                (("4" (assert)
                  (("4" (hide 2)
                    (("4" (expand "subset?")
                      (("4" (expand "member")
                        (("4" (use "cc_of_pvs0_completeness")
                          (("4" (skeep) (("4" (inst?) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scp_termination_pvs0 const-decl "bool" scp_iff_pvs0 nil)
    (eval_conds def-decl "bool" pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (CallingContext type-eq-decl nil cc_def CCG)
    (Path type-eq-decl nil pvs0_cc nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (scp_implies_ccg_termination formula-decl nil scp_to_ccg_alt CCG)
    (scp_termination? const-decl "bool" scp CCG)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (cc_of_pvs0_soundness formula-decl nil pvs0_to_dg nil)
    (pvs0_to_dg_verts const-decl
     "finite_set[CallingContext[Val, PVS0Expr, list[PVS0Bool[Val]], Path[Val]]]"
     pvs0_to_dg nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (x skolem-const-decl
     "CallingContext[Val, PVS0Expr[Val], list[PVS0Bool[Val]], Path[Val]]"
     pvs0_to_ccg nil)
    (make_fully_connected const-decl "(cdigraph)" c_digraphs digraphs)
    (member_sl formula-decl nil set_as_list structures)
    (pvs0_to_dg_vertices_l const-decl "list[(cc_of_pvs0(expr))]" pvs0_to_dg
     nil)
    (reduce_sl_no_rep application-judgement "(no_repetitions?)"
     set_as_list_props structures)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (FunMeasure type-eq-decl nil ccg_def CCG)
    (FunMeasures type-eq-decl nil ccg_def CCG)
    (sound_ccg_digraph const-decl "bool" pvs0_to_dg nil)
    (Graph_cc type-eq-decl nil scp_to_ccg_alt CCG)
    (subset? const-decl "bool" sets nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (c_digraph type-eq-decl nil c_digraphs_def digraphs)
    (vert const-decl "bool" c_digraphs_def digraphs)
    (pvs0_to_fully_connected_dg const-decl "(cdigraph)" pvs0_to_dg nil)
    (pvs0 skolem-const-decl "PVS0[Val]" pvs0_to_ccg nil)
    (pvs0_to_fully_connected_dg_sound_ccg application-judgement
     "(sound_ccg_digraph(pvs0))" pvs0_to_ccg nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (below type-eq-decl nil nat_types nil)
    (deterministic_expr formula-decl nil pvs0_expr nil)
    (injective? const-decl "bool" functions nil)
    (finite_subset formula-decl nil finite_sets nil)
    (cc_of_pvs0_completeness formula-decl nil pvs0_to_dg nil)
    (x skolem-const-decl
     "CallingContext[Val, PVS0Expr[Val], list[PVS0Bool[Val]], Path[Val]]"
     pvs0_to_ccg nil)
    (ccg_termination_pvs0 const-decl "bool" ccg_to_pvs0 nil))
   nil))
 (pvs0_tcc_implies_ccg_TCC1 0
  (pvs0_tcc_implies_ccg_TCC1-1 nil 3708290890 ("" (subtype-tcc) nil nil) nil
   nil
   (pvs0_tcc_implies_ccg subtype
    "LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n)"
    "(orders[MT].well_founded?)")))
 (pvs0_tcc_implies_ccg 0
  (pvs0_tcc_implies_ccg-1 nil 3653213914
   ("" (skeep)
    (("" (use "pvs0_tcc_implies_scp")
      (("" (assert) (("" (rewrite "scp_implies_ccg_pvs0") nil nil)) nil))
      nil))
    nil)
   ((pvs0_tcc_implies_scp formula-decl nil scp_iff_pvs0 nil)
    (Val formal-nonempty-type-decl nil pvs0_to_ccg nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (scp_implies_ccg_pvs0 formula-decl nil pvs0_to_ccg nil))
   shostak)))


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% This theory formalizes the Fixed-Point Theorem for the multiple-function
%% PVS0 model
%%
%% The fixed point theorem for PVS0 programs requires the folowing assumptions:
%% 1- One of the basic functions is the tuple2nat,
%% 2- There is a codification of the universal PVS0 program,
%% 3- There is a diagonal function that performs as the same as
%%    \lambda(a,e),(aa)e.
%% 
%%
%% Thiago Mendonca Ferreira Ramos, Ariane Alves Almeida Mauricio Ayala-Rincon
%% Universidade de Brasilia
%% Last modified: 29 May 2020 by Thiago MF Ramos
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
mf_pvs0_Fixedpoint [fv:nat,op1:list[[nat->nat]],op2:list[[[nat,nat]->nat]]]
		: THEORY

  BEGIN

   ASSUMING
      IMPORTING %pvs0_to_nat,
      		mf_pvs0_computable[fv,op1,op2]%,
		%mf_pvs0_Recursion_Theorem

      tuple2nat_assump : ASSUMPTION
	EXISTS( i : below[length(op2)]) : nth(op2,i) = tuple2nat

      

      

      diagonal_function : ASSUMPTION
      FORALL(j: below[length(op2)], u :list[mf_PVS0Expr[nat]]): EXISTS(diagonal : computable[fv,op1,op2]) : FORALL(i : nat):
      LET m = (op1,op2,fv,cons[mf_PVS0Expr[nat]](rec[nat](1,op2[nat](j,rec[nat](1,op2[nat](j,cnst[nat](i),cnst[nat](i))),vr[nat])),map(offset_rec(1))(u)))::[list_adt[[nat -> nat]].list, list_adt[[[nat, nat] -> nat]].list,
 naturalnumbers.nat, (list_adt[mf_PVS0Expr[nat]].cons?)] IN
      partial_recursive?[fv,op1,op2](m) AND
      semantic_rel(diagonal)(i,  listPVS0nat2nat(m`4))

      universal_PVS0_program : ASSUMPTION
      EXISTS(universal : partial_recursive[fv,op1,op2]) : FORALL(m,n,o1 : nat) :
      semantic_rel(universal)(tuple2nat(m,n),o1) <=> semantic_rel(op1,op2,fv,nat2listPVS0nat(m))(n,o1)
   ENDASSUMING

   IMPORTING map_append

   part2part(c : computable[fv,op1,op2])(p : partial_recursive[fv,op1,op2]) : partial_recursive[fv,op1,op2] = 
   (op1,op2,fv,nat2listPVS0nat(choose({o1 : nat | semantic_rel(c)(listPVS0nat2nat(p`4),o1)})))


   fixed_point: THEOREM
   FORALL(f : computable[fv,op1,op2]) :
   EXISTS(p : partial_recursive[fv,op1,op2]) :
   FORALL(i,o1,o2: nat): (semantic_rel(p)(i,o1) AND
   		   	 semantic_rel(part2part(f)(p))(i,o2)) => o1=o2

  

  END mf_pvs0_Fixedpoint

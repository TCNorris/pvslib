(pvs0_props
 (subterm_transitive 0
  (subterm_transitive-1 nil 3642153545
   ("" (induct "exc")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (assert)
        (("3" (skeep)
          (("3" (expand "subterm" -3)
            (("3" (split)
              (("1" (assert) nil nil)
               ("2" (expand "subterm" 1)
                (("2" (flatten)
                  (("2" (inst -2 "exa" "exb") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (assert)
        (("4" (skeep)
          (("4" (expand "subterm" -4)
            (("4" (split)
              (("1" (assert) nil nil)
               ("2" (expand "subterm" 1)
                (("2" (flatten)
                  (("2" (inst -3 "exa" "exb")
                    (("2" (assert)
                      (("2" (inst -2 "exa" "exb")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "subterm" 1)
                (("3" (flatten)
                  (("3" (inst -3 "exa" "exb") (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (assert)
        (("5" (skeep)
          (("5" (expand "subterm" -3)
            (("5" (split)
              (("1" (assert) nil nil)
               ("2" (expand "subterm" 1)
                (("2" (flatten)
                  (("2" (inst -2 "exa" "exb") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (assert)
        (("6" (skeep)
          (("6" (expand "subterm" -5)
            (("6" (expand "subterm" 1)
              (("6" (prop)
                (("1" (expand "subterm" -5)
                  (("1" (assert)
                    (("1" (replace -1 -5)
                      (("1" (hide-all-but (-5 2 3 4))
                        (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -2 "exa" "exb") (("2" (assert) nil nil))
                  nil)
                 ("3" (inst -3 "exa" "exb") (("3" (assert) nil nil))
                  nil)
                 ("4" (assert)
                  (("4" (inst -4 "exa" "exb") (("4" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PVS0Expr_induction formula-decl nil PVS0Expr_adt nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil))
   shostak))
 (null_path 0
  (null_path-1 nil 3642276868
   ("" (skeep)
    (("" (expand "valid_path")
      (("" (lift-if 1)
        (("" (typepred "expr") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((valid_path def-decl "bool" pvs0_cc nil)) shostak))
 (valid_paths_subexpr 0
  (valid_paths_subexpr-1 nil 3642953208
   ("" (measure-induct+ "length(path)" ("expr" "path"))
    (("" (skeep)
      (("" (expand "valid_path" 1)
        (("" (lift-if)
          (("" (split)
            (("1" (typepred "path2")
              (("1" (hide -3)
                (("1" (expand "subterm_at")
                  (("1" (assert)
                    (("1" (split)
                      (("1" (grind) nil nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "valid_path")
                            (("2" (use "length_append[nat]")
                              (("2"
                                (grind)
                                (("2"
                                  (typepred x!2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (flatten)
                  (("1" (typepred "path2" "x!2")
                    (("1" (hide -6)
                      (("1" (use "length_append[nat]")
                        (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (case "x!2=null")
                        (("1" (replace -1)
                          (("1" (rewrite "append_null")
                            (("1" (typepred "x!2")
                              (("1"
                                (typepred "path2")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (expand "subterm_at")
                                    (("1"
                                      (expand "valid_path" -2)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "rac_append")
                          (("2" (rewrite "rdc_append")
                            (("2" (inst -2 "get_arg(x!1)" "rdc(x!2)")
                              (("1"
                                (inst -2 "path2")
                                (("1"
                                  (typepred "x!2" "path2")
                                  (("1"
                                    (expand "valid_path" -2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (1 6))
                                            (("1"
                                              (expand "rdc")
                                              (("1"
                                                (rewrite
                                                 "length_reverse")
                                                (("1"
                                                  (use
                                                   "length_reverse[nat]")
                                                  (("1"
                                                    (replaces
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       2
                                                       2)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (hide 1)
                                                            (("1"
                                                              (case
                                                               "null?(x!2)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (use
                                                                   "reverse_reverse[nat]")
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "path2")
                                  (("2"
                                    (expand "subterm_at" -2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "x!2")
                                (("2"
                                  (expand "valid_path" -2)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3" (assert) nil nil)
                               ("4" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (case "x!2=null")
                            (("1" (replace -1)
                              (("1"
                                (rewrite "append_null")
                                (("1"
                                  (hide -3)
                                  (("1"
                                    (typepred "path2")
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (expand "subterm_at")
                                        (("1"
                                          (expand "valid_path" -2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace 2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "rac_append")
                              (("2"
                                (rewrite "rdc_append")
                                (("2"
                                  (case "rac(x!2)=0")
                                  (("1"
                                    (inst
                                     -3
                                     "get_arg1(x!1)"
                                     " rdc(x!2)")
                                    (("1"
                                      (inst -3 "path2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide-all-but (1 8))
                                          (("1"
                                            (expand "rdc")
                                            (("1"
                                              (rewrite
                                               "length_reverse")
                                              (("1"
                                                (use
                                                 "length_reverse[nat]")
                                                (("1"
                                                  (replaces -1 :dir rl)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     2
                                                     2)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (use
                                                           "reverse_reverse[nat]")
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             2
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "path2")
                                        (("2"
                                          (expand "subterm_at" -2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "x!2")
                                      (("2"
                                        (expand "valid_path" -2)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "rac(x!2)=1")
                                    (("1"
                                      (inst
                                       -3
                                       "get_arg2(x!1)"
                                       " rdc(x!2)")
                                      (("1"
                                        (inst -3 "path2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (2 9))
                                            (("1"
                                              (expand "rdc")
                                              (("1"
                                                (rewrite
                                                 "length_reverse")
                                                (("1"
                                                  (use
                                                   "length_reverse[nat]")
                                                  (("1"
                                                    (replaces
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       2
                                                       2)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (use
                                                             "reverse_reverse[nat]")
                                                            (("1"
                                                              (replaces
                                                               -1
                                                               2
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "path2")
                                          (("2"
                                            (expand "subterm_at" -2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "x!2")
                                        (("2"
                                          (expand "valid_path" -2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "x!2")
                                      (("2"
                                        (expand "valid_path" -2)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split)
                            (("1" (flatten)
                              (("1"
                                (case "x!2=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (rewrite "append_null")
                                    (("1"
                                      (typepred "path2")
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (expand "subterm_at")
                                          (("1"
                                            (expand "valid_path" -2)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "rac_append")
                                  (("2"
                                    (rewrite "rdc_append")
                                    (("2"
                                      (inst
                                       -2
                                       "get_arg(x!1)"
                                       "rdc(x!2)")
                                      (("1"
                                        (inst -2 "path2")
                                        (("1"
                                          (typepred "x!2")
                                          (("1"
                                            (expand "valid_path" -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide-all-but
                                                     (1 8))
                                                    (("1"
                                                      (expand "rdc")
                                                      (("1"
                                                        (rewrite
                                                         "length_reverse")
                                                        (("1"
                                                          (use
                                                           "length_reverse[nat]")
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               2
                                                               2)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (use
                                                                     "reverse_reverse[nat]")
                                                                    (("1"
                                                                      (replaces
                                                                       -1
                                                                       2
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "path2")
                                          (("2"
                                            (expand "subterm_at" -2 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "x!2")
                                        (("2"
                                          (expand "valid_path" -2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3" (assert) nil nil)
                                       ("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (case "x!2=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (rewrite "append_null")
                                    (("1"
                                      (typepred "path2")
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (expand "subterm_at")
                                          (("1"
                                            (expand "valid_path" -2)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace 3)
                                                  (("1"
                                                    (replace 4)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "rac_append")
                                  (("2"
                                    (rewrite "rdc_append")
                                    (("2"
                                      (case "rac(x!2)=0")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           -2
                                           "get_cond(x!1)"
                                           "rdc(x!2)")
                                          (("1"
                                            (inst -2 "path2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide-all-but (1 11))
                                                (("1"
                                                  (expand "rdc")
                                                  (("1"
                                                    (rewrite
                                                     "length_reverse")
                                                    (("1"
                                                      (use
                                                       "length_reverse[nat]")
                                                      (("1"
                                                        (replaces
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           2
                                                           2)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (use
                                                                 "reverse_reverse[nat]")
                                                                (("1"
                                                                  (replaces
                                                                   -1
                                                                   2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "path2")
                                              (("2"
                                                (expand
                                                 "subterm_at"
                                                 -2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -2)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (typepred
                                                             "x!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "x!2")
                                            (("2"
                                              (expand "valid_path" -2)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "rac(x!2)=1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst
                                             -2
                                             "get_if(x!1)"
                                             "rdc(x!2)")
                                            (("1"
                                              (inst -2 "path2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but (2 12))
                                                  (("1"
                                                    (expand "rdc")
                                                    (("1"
                                                      (rewrite
                                                       "length_reverse")
                                                      (("1"
                                                        (use
                                                         "length_reverse[nat]")
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             2
                                                             2)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (use
                                                                   "reverse_reverse[nat]")
                                                                  (("1"
                                                                    (replaces
                                                                     -1
                                                                     2
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "path2")
                                                (("2"
                                                  (expand
                                                   "subterm_at"
                                                   -2)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (typepred
                                                             "x!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "x!2")
                                              (("2"
                                                (expand
                                                 "valid_path"
                                                 -2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "rac(x!2)=2")
                                          (("1"
                                            (inst
                                             -2
                                             "get_else(x!1)"
                                             "rdc(x!2)")
                                            (("1"
                                              (inst -2 "path2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but (3 13))
                                                  (("1"
                                                    (expand "rdc")
                                                    (("1"
                                                      (rewrite
                                                       "length_reverse")
                                                      (("1"
                                                        (use
                                                         "length_reverse[nat]")
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             2
                                                             2)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (use
                                                                   "reverse_reverse[nat]")
                                                                  (("1"
                                                                    (replaces
                                                                     -1
                                                                     2
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "path2")
                                                (("2"
                                                  (expand
                                                   "subterm_at"
                                                   -2)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (typepred
                                                             "x!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "x!2")
                                              (("2"
                                                (expand
                                                 "valid_path"
                                                 -2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (typepred "x!1")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "x!2")
                                            (("2"
                                              (expand "valid_path" -2)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (get_cond adt-accessor-decl "[(ite?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (get_else adt-accessor-decl "[(ite?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (get_if adt-accessor-decl "[(ite?) -> PVS0Expr]" PVS0Expr_adt nil)
    (rac const-decl "T" more_list_props "structures/")
    (get_arg1 adt-accessor-decl "[(op2?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (get_arg2 adt-accessor-decl "[(op2?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (rac_append formula-decl nil more_list_props "structures/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (x!1 skolem-const-decl "PVS0Expr[T]" pvs0_props nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (x!2 skolem-const-decl "(valid_path(x!1))" pvs0_props nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" PVS0Expr_adt
     nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reverse_reverse formula-decl nil list_props nil)
    (length_reverse formula-decl nil list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (path2 skolem-const-decl "(valid_path(subterm_at(x!1, x!2)))"
     pvs0_props nil)
    (rdc_append formula-decl nil more_list_props "structures/")
    (length_null formula-decl nil more_list_props "structures/")
    (append_null formula-decl nil list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_append formula-decl nil list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (append def-decl "list[T]" list_props nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subterm_append_TCC1 0
  (subterm_append_TCC1-1 nil 3642276301
   ("" (skeep)
    (("" (use "valid_paths_subexpr")
      (("" (beta)
        (("" (skeep)
          (("" (inst?)
            (("" (typepred "path2") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((valid_paths_subexpr formula-decl nil pvs0_props nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (expr skolem-const-decl "PVS0Expr[T]" pvs0_props nil)
    (path skolem-const-decl "(valid_path[T](expr))" pvs0_props nil)
    (sterm skolem-const-decl
     "({res: PVS0Expr[T] | subterm[T](res, expr)})" pvs0_props nil)
    (path2 skolem-const-decl "(valid_path[T](sterm))" pvs0_props nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil))
   nil))
 (subterm_append 0
  (subterm_append-2 nil 3651337775
   ("" (induct "expr")
    (("1" (beta) (("1" (propax) nil nil)) nil)
     ("2" (skeep)
      (("2" (assert)
        (("2" (skeep)
          (("2" (skeep)
            (("2" (typepred "path" "path2") (("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (typepred "path" "path2") (("3" (grind) nil nil)) nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (assert)
        (("4" (skeep)
          (("4" (skeep)
            (("4" (typepred "path")
              (("4" (expand "valid_path" -2)
                (("4" (split)
                  (("1" (expand "subterm_at" 1 3)
                    (("1" (assert)
                      (("1" (lemma "append_null[nat]")
                        (("1" (inst -1 "path2")
                          (("1" (case "append(path2, path) = path2")
                            (("1" (assert) nil nil)
                             ("2" (hide 2 -4) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (case "NOT null?(path)")
                      (("1" (expand "subterm_at" 2 3)
                        (("1" (assert)
                          (("1" (expand "subterm_at" 2 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1"
                                    (grind)
                                    (("1"
                                      (lemma "length_append[nat]")
                                      (("1"
                                        (inst?)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "rdc_append[nat]")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (inst -5 "rdc(path)")
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "subterm_at" 1 3)
                        (("2" (assert)
                          (("2" (lemma "append_null[nat]")
                            (("2" (inst -1 "path2")
                              (("2"
                                (case "append(path2, path) = path2")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide -6 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (assert)
        (("5" (skeep)
          (("5" (skeep)
            (("5" (typepred "path")
              (("5" (expand "valid_path" -2)
                (("5" (prop)
                  (("1" (expand "subterm_at" 1 3)
                    (("1" (assert)
                      (("1" (lemma "append_null[nat]")
                        (("1" (inst -1 "path2")
                          (("1" (case "append(path2, path) = path2")
                            (("1" (assert) nil nil)
                             ("2" (hide -4 -5 2)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "NOT null?(path)")
                    (("1" (expand "subterm_at" 2 3)
                      (("1" (assert)
                        (("1" (expand "subterm_at" 2 1)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (hide-all-but (-1 2))
                                (("1"
                                  (use "length_append[nat]")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (use "rdc_append[nat]")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (hide -7)
                                    (("2"
                                      (inst -6 "rdc(path)")
                                      (("2" (inst? -6) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (use "rac_append[nat]")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "subterm_at" 1 3)
                      (("2" (assert)
                        (("2" (lemma "append_null[nat]")
                          (("2" (inst -1 "path2")
                            (("2" (case "append(path2, path) = path2")
                              (("1"
                                (replace -1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (hide -6 -7 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (case "NOT null?(path)")
                    (("1" (expand "subterm_at" 2 3)
                      (("1" (assert)
                        (("1" (expand "subterm_at" 2 1)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (hide-all-but (-1 2))
                                (("1"
                                  (use "length_append[nat]")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (use "rac_append[nat]")
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (use "rdc_append[nat]")
                                (("3"
                                  (replace -1)
                                  (("3"
                                    (hide -5)
                                    (("3"
                                      (inst -5 "rdc(path)")
                                      (("3" (inst -5 "path2") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "subterm_at" 1 3)
                      (("2" (assert)
                        (("2" (lemma "append_null[nat]")
                          (("2" (inst -1 "path2")
                            (("2" (case "append(path2, path) = path2")
                              (("1"
                                (replace -1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (assert)
        (("6" (skeep)
          (("6" (skeep)
            (("6" (typepred "path")
              (("6" (expand "valid_path" -2)
                (("6" (split)
                  (("1" (expand "subterm_at" 1 3)
                    (("1" (assert)
                      (("1" (lemma "append_null[nat]")
                        (("1" (inst -1 "path2")
                          (("1" (case "append(path2, path) = path2")
                            (("1" (assert) nil nil)
                             ("2" (hide 2 -4) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (case "NOT null?(path)")
                      (("1" (expand "subterm_at" 2 3)
                        (("1" (assert)
                          (("1" (expand "subterm_at" 2 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1"
                                    (lemma "length_append[nat]")
                                    (("1"
                                      (inst?)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "rdc_append[nat]")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (inst -5 "rdc(path)")
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "subterm_at" 1 3)
                        (("2" (assert)
                          (("2" (lemma "append_null[nat]")
                            (("2" (inst -1 "path2")
                              (("2"
                                (case "append(path2, path) = path2")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide -6 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep)
      (("7" (assert)
        (("7" (label "ihc" -1)
          (("7" (label "iht" -2)
            (("7" (label "ihe" -3)
              (("7" (hide -)
                (("7" (skeep)
                  (("7" (skeep)
                    (("7" (expand "subterm_at" 1 3)
                      (("7" (lift-if)
                        (("7" (prop)
                          (("1" (lemma "append_null[nat]")
                            (("1" (inst -1 "path2")
                              (("1"
                                (case "append(path2, path) = path2")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "rac_append[nat]")
                            (("2" (expand "subterm_at" 1 1)
                              (("2"
                                (assert)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (hide-all-but (-1 2))
                                      (("1"
                                        (use "length_append[nat]")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (reveal "ihc")
                                      (("2"
                                        (inst -1 "rdc(path)")
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (use "rdc_append[nat]")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (use "rac_append[nat]")
                            (("3" (expand "subterm_at" 1 1)
                              (("3"
                                (assert)
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (prop)
                                    (("1"
                                      (hide-all-but (-1 3))
                                      (("1"
                                        (use "length_append[nat]")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (reveal "iht")
                                      (("2"
                                        (inst -1 "rdc(path)")
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (use "rdc_append[nat]")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (use "rac_append[nat]")
                            (("4" (expand "subterm_at" 2 1)
                              (("4"
                                (assert)
                                (("4"
                                  (lift-if)
                                  (("4"
                                    (prop)
                                    (("1"
                                      (hide-all-but (-1 4))
                                      (("1"
                                        (use "length_append[nat]")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (reveal "ihe")
                                      (("2"
                                        (inst -1 "rdc(path)")
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (use "rdc_append[nat]")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (lemma "valid_paths_subexpr")
      (("8" (hide 2)
        (("8" (skeep)
          (("8" (skeep)
            (("8" (inst -1 "expr" "path")
              (("8" (beta)
                (("8" (inst -1 "path2")
                  (("8" (typepred "path2") (("8" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((valid_paths_subexpr formula-decl nil pvs0_props nil)
    (expr skolem-const-decl "PVS0Expr[T]" pvs0_props nil)
    (path skolem-const-decl "(valid_path[T](expr))" pvs0_props nil)
    (sterm skolem-const-decl
     "({res: PVS0Expr[T] | subterm[T](res, expr)})" pvs0_props nil)
    (path2 skolem-const-decl "(valid_path[T](sterm))" pvs0_props nil)
    (ite adt-constructor-decl
     "[[PVS0Expr, PVS0Expr, PVS0Expr] -> (ite?)]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]"
     PVS0Expr_adt nil)
    (rac_append formula-decl nil more_list_props "structures/")
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]"
     PVS0Expr_adt nil)
    (append_null formula-decl nil list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rdc_append formula-decl nil more_list_props "structures/")
    (rdc const-decl "list[T]" more_list_props "structures/")
    (length_append formula-decl nil list_props nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (cnst adt-constructor-decl "[T -> (cnst?)]" PVS0Expr_adt nil)
    (PVS0Expr_induction formula-decl nil PVS0Expr_adt nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (append def-decl "list[T]" list_props nil))
   nil)
  (subterm_append-1 nil 3642897817
   ("" (induct "expr")
    (("1" (beta) (("1" (propax) nil nil)) nil)
     ("2" (typepred "expr!1") (("2" (grind) nil nil)) nil)
     ("3" (skeep)
      (("3" (assert)
        (("3" (split)
          (("1" (skeep)
            (("1" (skeep)
              (("1" (typepred "path" "path2") (("1" (grind) nil nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil)
     ("4" (prop)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "path" "path2") (("4" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (assert)
        (("5" (prop)
          (("1" (skeep)
            (("1" (skeep)
              (("1" (typepred "path")
                (("1" (expand "valid_path" -2)
                  (("1" (split)
                    (("1" (expand "subterm_at" 1 3)
                      (("1" (assert)
                        (("1" (lemma "append_null[nat]")
                          (("1" (inst -1 "path2")
                            (("1" (case "append(path2, path) = path2")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2 -4)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (case "NOT null?(path)")
                        (("1" (expand "subterm_at" 2 3)
                          (("1" (assert)
                            (("1" (expand "subterm_at" 2 1)
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide-all-but (-1 2))
                                    (("1"
                                      (grind)
                                      (("1"
                                        (lemma "length_append[nat]")
                                        (("1"
                                          (inst?)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "rdc_append")
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (inst -5 "rdc(path)")
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "subterm_at" 1 3)
                          (("2" (assert)
                            (("2" (lemma "append_null[nat]")
                              (("2"
                                (inst -1 "path2")
                                (("2"
                                  (case "append(path2, path) = path2")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide -6 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "op12_var") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (assert)
        (("6" (prop)
          (("1" (skeep)
            (("1" (skeep)
              (("1" (typepred "path")
                (("1" (expand "valid_path" -2)
                  (("1" (prop)
                    (("1" (expand "subterm_at" 1 3)
                      (("1" (assert)
                        (("1" (lemma "append_null[nat]")
                          (("1" (inst -1 "path2")
                            (("1" (case "append(path2, path) = path2")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -4 -5 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "NOT null?(path)")
                      (("1" (expand "subterm_at" 2 3)
                        (("1" (assert)
                          (("1" (expand "subterm_at" 2 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1"
                                    (use "length_append[nat]")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "rdc_append")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (hide -6)
                                      (("2"
                                        (inst -6 "rdc(path)")
                                        (("2" (inst? -6) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (use "rac_append")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "subterm_at" 1 3)
                        (("2" (assert)
                          (("2" (lemma "append_null[nat]")
                            (("2" (inst -1 "path2")
                              (("2"
                                (case "append(path2, path) = path2")
                                (("1"
                                  (replace -1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (hide -6 -7 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (case "NOT null?(path)")
                      (("1" (expand "subterm_at" 2 3)
                        (("1" (assert)
                          (("1" (expand "subterm_at" 2 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1"
                                    (use "length_append[nat]")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "rac_append")
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (use "rdc_append")
                                  (("3"
                                    (replace -1)
                                    (("3"
                                      (hide -6)
                                      (("3"
                                        (inst -5 "rdc(path)")
                                        (("3"
                                          (inst -5 "path2")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "subterm_at" 1 3)
                        (("2" (assert)
                          (("2" (lemma "append_null[nat]")
                            (("2" (inst -1 "path2")
                              (("2"
                                (case "append(path2, path) = path2")
                                (("1"
                                  (replace -1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "op23_var") (("2" (assert) nil nil)) nil)
           ("3" (typepred "op22_var") (("3" (assert) nil nil)) nil)
           ("4" (typepred "op23_var") (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("7" (skeep)
      (("7" (assert)
        (("7" (prop)
          (("1" (skeep)
            (("1" (skeep)
              (("1" (typepred "path")
                (("1" (expand "valid_path" -2)
                  (("1" (split)
                    (("1" (expand "subterm_at" 1 3)
                      (("1" (assert)
                        (("1" (lemma "append_null[nat]")
                          (("1" (inst -1 "path2")
                            (("1" (case "append(path2, path) = path2")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2 -4)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (case "NOT null?(path)")
                        (("1" (expand "subterm_at" 2 3)
                          (("1" (assert)
                            (("1" (expand "subterm_at" 2 1)
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide-all-but (-1 2))
                                    (("1"
                                      (lemma "length_append[nat]")
                                      (("1"
                                        (inst?)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "rdc_append")
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (inst -5 "rdc(path)")
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "subterm_at" 1 3)
                          (("2" (assert)
                            (("2" (lemma "append_null[nat]")
                              (("2"
                                (inst -1 "path2")
                                (("2"
                                  (case "append(path2, path) = path2")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide -6 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "rec1_var") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("8" (skeep)
      (("8" (assert)
        (("8" (prop)
          (("1" (label "ihc" -3)
            (("1" (label "iht" -2)
              (("1" (label "ihe" -1)
                (("1" (hide -)
                  (("1" (skeep)
                    (("1" (skeep)
                      (("1" (expand "subterm_at" 1 3)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (lemma "append_null[nat]")
                              (("1"
                                (inst -1 "path2")
                                (("1"
                                  (case "append(path2, path) = path2")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "rac_append")
                              (("2"
                                (expand "subterm_at" 1 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-1 2))
                                        (("1"
                                          (use "length_append[nat]")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (reveal "ihc")
                                        (("2"
                                          (inst -1 "rdc(path)")
                                          (("2"
                                            (inst? -1)
                                            (("2"
                                              (use "rdc_append")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (use "rac_append")
                              (("3"
                                (expand "subterm_at" 1 1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (lift-if)
                                    (("3"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-1 3))
                                        (("1"
                                          (use "length_append[nat]")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (reveal "iht")
                                        (("2"
                                          (inst -1 "rdc(path)")
                                          (("2"
                                            (inst? -1)
                                            (("2"
                                              (use "rdc_append")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (use "rac_append")
                              (("4"
                                (expand "subterm_at" 2 1)
                                (("4"
                                  (assert)
                                  (("4"
                                    (lift-if)
                                    (("4"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-1 4))
                                        (("1"
                                          (use "length_append[nat]")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (reveal "ihe")
                                        (("2"
                                          (inst -1 "rdc(path)")
                                          (("2"
                                            (inst? -1)
                                            (("2"
                                              (use "rdc_append")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "ite3_var") (("2" (assert) nil nil)) nil)
           ("3" (typepred "ite2_var") (("3" (assert) nil nil)) nil)
           ("4" (typepred "ite2_var") (("4" (assert) nil nil)) nil)
           ("5" (typepred "ite1_var") (("5" (assert) nil nil)) nil)
           ("6" (typepred "ite1_var") (("6" (assert) nil nil)) nil)
           ("7" (typepred "ite1_var") (("7" (assert) nil nil)) nil)
           ("8" (typepred "ite1_var") (("8" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("9" (skeep) (("9" (assert) nil nil)) nil)
     ("10" (lemma "valid_paths_subexpr")
      (("10" (hide 2)
        (("10" (skeep)
          (("10" (skeep)
            (("10" (skeep)
              (("10" (inst -1 "expr" "path")
                (("10" (beta)
                  (("10" (inst -1 "path2")
                    (("10" (typepred "path2") (("10" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ite adt-constructor-decl
     "[[PVS0Expr, PVS0Expr, PVS0Expr] -> (ite?)]" PVS0Expr_adt nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]"
     PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]"
     PVS0Expr_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (cnst adt-constructor-decl "[T -> (cnst?)]" PVS0Expr_adt nil)
    (PVS0Expr_induction formula-decl nil PVS0Expr_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil))
   shostak))
 (valid_0_path_ext 0
  (valid_0_path_ext-1 nil 3642898469
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (lemma "subterm_append")
          (("" (inst? -1)
            (("" (beta)
              (("" (inst -1 "cons(0, null)")
                (("1" (expand "append" -1)
                  (("1" (expand "append" -1)
                    (("1" (lemma "valid_paths_subexpr")
                      (("1" (inst -1 "expr" "path")
                        (("1" (beta)
                          (("1" (inst -1 "cons(0, null)")
                            (("1" (expand "append")
                              (("1"
                                (expand "append")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (prop)
                    (("1" (expand "valid_path")
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (grind)
                            (("1" (use "null_path") nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "valid_path")
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (hide 2)
                            (("2" (grind)
                              (("2" (use "null_path") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "valid_path")
                      (("3" (assert)
                        (("3" (grind) (("3" (use "null_path") nil nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand "valid_path")
                      (("4" (assert)
                        (("4" (flatten)
                          (("4" (hide 2 3)
                            (("4" (grind)
                              (("4" (use "null_path") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm_append formula-decl nil pvs0_props nil)
    (get_cond adt-accessor-decl "[(ite?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (get_arg1 adt-accessor-decl "[(op2?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" PVS0Expr_adt
     nil)
    (null_path formula-decl nil pvs0_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (append def-decl "list[T]" list_props nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (expr skolem-const-decl "PVS0Expr[T]" pvs0_props nil)
    (path skolem-const-decl "(valid_path(expr))" pvs0_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (T formal-nonempty-type-decl nil pvs0_props nil))
   shostak))
 (valid_1_path_ext 0
  (valid_1_path_ext-1 nil 3643165116
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (lemma "subterm_append")
          (("" (inst? -1)
            (("" (beta)
              (("" (inst -1 "cons(1, null)")
                (("1" (expand "append" -1)
                  (("1" (expand "append" -1)
                    (("1" (lemma "valid_paths_subexpr")
                      (("1" (inst -1 "expr" "path")
                        (("1" (beta)
                          (("1" (inst -1 "cons(1, null)")
                            (("1" (expand "append")
                              (("1"
                                (expand "append")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "valid_path" 1)
                  (("2" (lift-if)
                    (("2" (split -1)
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (grind)
                            (("1" (use "null_path") nil nil)
                             ("2" (use "null_path") nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (hide 2)
                          (("2" (grind)
                            (("1" (use "null_path") nil nil)
                             ("2" (use "null_path") nil nil)
                             ("3" (use "null_path") nil nil)
                             ("4" (use "null_path") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -1 2) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm_append formula-decl nil pvs0_props nil)
    (get_arg2 adt-accessor-decl "[(op2?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (get_arg1 adt-accessor-decl "[(op2?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (null_path formula-decl nil pvs0_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (get_if adt-accessor-decl "[(ite?) -> PVS0Expr]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (get_cond adt-accessor-decl "[(ite?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (append def-decl "list[T]" list_props nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (expr skolem-const-decl "PVS0Expr[T]" pvs0_props nil)
    (path skolem-const-decl "(valid_path(expr))" pvs0_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (T formal-nonempty-type-decl nil pvs0_props nil))
   shostak))
 (valid_2_path_ext 0
  (valid_2_path_ext-1 nil 3643207021
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (lemma "subterm_append")
          (("" (inst? -1)
            (("" (beta)
              (("" (inst -1 "cons(2, null)")
                (("1" (expand "append" -1)
                  (("1" (expand "append" -1)
                    (("1" (lemma "valid_paths_subexpr")
                      (("1" (inst -1 "expr" "path")
                        (("1" (beta)
                          (("1" (inst -1 "cons(2, null)")
                            (("1" (expand "append")
                              (("1"
                                (expand "append")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "valid_path" 1)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (hide 2)
                        (("2" (grind)
                          (("1" (use "null_path") nil nil)
                           ("2" (use "null_path") nil nil)
                           ("3" (use "null_path") nil nil)
                           ("4" (use "null_path") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -1 2) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm_append formula-decl nil pvs0_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rac const-decl "T" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (get_cond adt-accessor-decl "[(ite?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (get_if adt-accessor-decl "[(ite?) -> PVS0Expr]" PVS0Expr_adt nil)
    (get_else adt-accessor-decl "[(ite?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (append def-decl "list[T]" list_props nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (expr skolem-const-decl "PVS0Expr[T]" pvs0_props nil)
    (path skolem-const-decl "(valid_path(expr))" pvs0_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (T formal-nonempty-type-decl nil pvs0_props nil))
   shostak))
 (app_prefix_of_path_ext 0
  (app_prefix_of_path_ext-3 nil 3651337824
   ("" (measure-induct+ "length(path)" ("expr" "path"))
    (("" (skeep)
      (("" (case "x!2 = null")
        (("1" (replace -1)
          (("1" (inst 1 "path_ext")
            (("1" (rewrite "append_null") nil nil)
             ("2" (replace -1)
              (("2" (expand "subterm_at") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2"
          (case "vr?(x!1) OR cnst?(x!1) OR op1?(x!1) OR op2?(x!1) OR rec?(x!1) OR ite?(x!1)")
          (("1" (prop)
            (("1" (hide -2)
              (("1" (typepred "x!2") (("1" (grind) nil nil)) nil)) nil)
             ("2" (hide -2)
              (("2" (typepred "x!2") (("2" (grind) nil nil)) nil)) nil)
             ("3" (typepred "x!2")
              (("3" (expand "valid_path" -2)
                (("3" (assert)
                  (("3" (flatten)
                    (("3" (inst -5 "get_arg(x!1)" "rdc(x!2)")
                      (("3" (typepred "path_ext")
                        (("3" (expand "valid_path" -2)
                          (("3" (case "path_ext=null")
                            (("1" (hide-all-but (-1 -4 1))
                              (("1" (grind) nil nil)) nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (inst -9 "rdc(path_ext)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 3 "p")
                                        (("1"
                                          (lemma "rdc_rac[nat]")
                                          (("1"
                                            (inst -1 "path_ext")
                                            (("1"
                                              (replace -2 :dir rl)
                                              (("1"
                                                (replace -1 3 :dir rl)
                                                (("1"
                                                  (replace -4)
                                                  (("1"
                                                    (rewrite
                                                     "rdc_append[nat]"
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -8
                                                       3
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (lemma
                                                         "rac_append[nat]")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "p"
                                                           "x!2")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             3
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               "rdc_rac[nat]")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "p")
                                          (("2"
                                            (expand "subterm_at" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 3))
                                      (("2"
                                        (expand "rdc")
                                        (("2"
                                          (rewrite "length_reverse")
                                          (("2"
                                            (use "length_reverse[nat]")
                                            (("2"
                                              (replaces -1 :dir rl)
                                              (("2"
                                                (expand "length" 1 2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (hide 1)
                                                      (("1"
                                                        (use
                                                         "reverse_reverse[nat]")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "suffix?" -4)
                                    (("2"
                                      (prop)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (hide-all-but (-1 3))
                                            (("1"
                                              (use
                                               "reverse_reverse[nat]")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lift-if)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (hide-all-but (-1 5))
                                                (("1"
                                                  (use
                                                   "reverse_reverse[nat]")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "rdc")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (typepred "x!2" "path_ext")
              (("4" (case "path_ext=null")
                (("1" (replace -1)
                  (("1" (hide-all-but (-6 1)) (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (expand "valid_path" -2)
                  (("2" (assert)
                    (("2" (expand "suffix?")
                      (("2" (split -5)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (lift-if)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1"
                                    (use "reverse_reverse[nat]")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split)
                                      (("1"
                                        (hide-all-but (-1 4))
                                        (("1"
                                          (use "reverse_reverse[nat]")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (case
                                           "rac(x!2) = rac(path_ext)")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (expand "valid_path" -7)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -9
                                                   "get_arg1(x!1)"
                                                   "rdc(x!2)")
                                                  (("1"
                                                    (inst
                                                     -9
                                                     "rdc(path_ext)")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (typepred
                                                           "p")
                                                          (("1"
                                                            (inst
                                                             6
                                                             "p")
                                                            (("1"
                                                              (lemma
                                                               "rdc_rac[nat]")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "path_ext")
                                                                (("1"
                                                                  (replace
                                                                   -4
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -5
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       "rac_append[nat]")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "p"
                                                                         "x!2")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           -2
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             6
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (lemma
                                                                               "rdc_rac[nat]")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "rdc_append[nat]"
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "rdc_rac[nat]")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "subterm_at"
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 6))
                                                        (("2"
                                                          (expand
                                                           "rdc"
                                                           1)
                                                          (("2"
                                                            (rewrite
                                                             "length_reverse")
                                                            (("2"
                                                              (use
                                                               "length_reverse[nat]")
                                                              (("2"
                                                                (replaces
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "rdc")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 1 2))
                                            (("2"
                                              (expand "rac")
                                              (("2"
                                                (lemma
                                                 "reverse_def[nat]")
                                                (("2"
                                                  (inst-cp
                                                   -1
                                                   "x!2"
                                                   "0")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "path_ext"
                                                     "0")
                                                    (("2"
                                                      (reveal 1 3 4)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replaces
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replaces
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 4))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 3))
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-1 3))
                                        (("1"
                                          (use "reverse_reverse[nat]")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "rac(x!2) = rac(path_ext)")
                                        (("1"
                                          (inst
                                           -10
                                           "get_arg2(x!1)"
                                           "rdc(x!2)")
                                          (("1"
                                            (inst -10 "rdc(path_ext)")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 6 "p")
                                                  (("1"
                                                    (lemma
                                                     "rdc_rac[nat]")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "path_ext")
                                                      (("1"
                                                        (expand
                                                         "valid_path"
                                                         -10)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               "rdc_append[nat]"
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (lemma
                                                                   "rac_append[nat]")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "p"
                                                                     "x!2")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -2
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         6
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (rewrite
                                                                           "rdc_rac[nat]")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "p")
                                                    (("2"
                                                      (expand
                                                       "subterm_at"
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (1 6))
                                                (("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (rewrite
                                                     "length_reverse")
                                                    (("2"
                                                      (use
                                                       "length_reverse[nat]")
                                                      (("2"
                                                        (replaces
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           1
                                                           2)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (use
                                                                 "reverse_reverse[nat]")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "rdc")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "valid_path"
                                                   -8)
                                                  (("2"
                                                    (expand "rdc")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1 2 3 5 6))
                                          (("2"
                                            (expand "rac")
                                            (("2"
                                              (lemma
                                               "reverse_def[nat]")
                                              (("2"
                                                (inst-cp -1 "x!2" "0")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "path_ext"
                                                   "0")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (expand
                                                               "nth")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 6))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 5))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (typepred "path_ext" "x!2")
              (("5" (case "path_ext=null")
                (("1" (replace -1)
                  (("1" (hide-all-but (-4 1)) (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (expand "valid_path" -5)
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (expand "valid_path" -2)
                        (("2" (flatten)
                          (("2" (inst -9 "get_arg(x!1)" "rdc(x!2)")
                            (("2" (inst -9 "rdc(path_ext)")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "suffix?" -5)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide-all-but (-1 2))
                                          (("1"
                                            (use
                                             "reverse_reverse[nat]")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lift-if)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (hide-all-but (-1 4))
                                              (("1"
                                                (use
                                                 "reverse_reverse[nat]")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "rac(x!2) = rac(path_ext)")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 6 "p")
                                                  (("1"
                                                    (lemma
                                                     "rdc_rac[nat]")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "path_ext")
                                                      (("1"
                                                        (replace
                                                         -2
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (replace
                                                           -5
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (rewrite
                                                             "rdc_append[nat]"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (lemma
                                                               "rac_append[nat]")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p"
                                                                 "x!2")
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (rewrite
                                                                       "rdc_rac[nat]")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "p")
                                                    (("2"
                                                      (expand
                                                       "subterm_at"
                                                       1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (-1 1 2 3 5 6))
                                                (("2"
                                                  (expand "rac")
                                                  (("2"
                                                    (lemma
                                                     "reverse_def[nat]")
                                                    (("2"
                                                      (inst-cp
                                                       -1
                                                       "x!2"
                                                       "0")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "path_ext"
                                                         "0")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replaces
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replaces
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 6))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 5))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 3))
                                  (("2"
                                    (expand "rdc")
                                    (("2"
                                      (rewrite "length_reverse")
                                      (("2"
                                        (use "length_reverse[nat]")
                                        (("2"
                                          (replaces -1 :dir rl)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (use
                                                   "reverse_reverse[nat]")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "suffix?" -4)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (split)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide-all-but (-1 3))
                                              (("1"
                                                (use
                                                 "reverse_reverse[nat]")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (hide-all-but (-1 5))
                                                  (("1"
                                                    (use
                                                     "reverse_reverse[nat]")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("6" (typepred "path_ext" "x!2")
              (("6" (case "path_ext=null")
                (("1" (hide-all-but (-1 -4 1)) (("1" (grind) nil nil))
                  nil)
                 ("2" (expand "suffix?")
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide-all-but (-1 2))
                        (("1" (use "reverse_reverse[nat]")
                          (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (lift-if)
                        (("2" (prop)
                          (("1" (hide-all-but (-1 4))
                            (("1" (use "reverse_reverse[nat]")
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (expand "valid_path" -6)
                            (("2" (assert)
                              (("2"
                                (case "rac(x!2) =rac(path_ext)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "valid_path" -7)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -10
                                         "get_cond(x!1)"
                                         "rdc(x!2)")
                                        (("1"
                                          (inst -10 "rdc(path_ext)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (lemma "rdc_rac[nat]")
                                                (("1"
                                                  (inst -1 "path_ext")
                                                  (("1"
                                                    (replace
                                                     -5
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (inst 6 "p")
                                                        (("1"
                                                          (rewrite
                                                           "rdc_append[nat]"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (lemma
                                                             "rac_append[nat]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p"
                                                               "x!2")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "rdc_rac[nat]")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "p")
                                                          (("2"
                                                            (expand
                                                             "subterm_at"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 2 6))
                                              (("2"
                                                (expand "rdc")
                                                (("2"
                                                  (rewrite
                                                   "length_reverse")
                                                  (("2"
                                                    (use
                                                     "length_reverse[nat]")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "rdc")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "valid_path" -7)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst
                                         -10
                                         "get_if(x!1)"
                                         "rdc(x!2)")
                                        (("2"
                                          (inst -10 "rdc(path_ext)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (lemma "rdc_rac[nat]")
                                                (("1"
                                                  (inst -1 "path_ext")
                                                  (("1"
                                                    (replace
                                                     -5
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (inst 6 "p")
                                                        (("1"
                                                          (rewrite
                                                           "rdc_append[nat]"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (lemma
                                                             "rac_append[nat]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p"
                                                               "x!2")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "rdc_rac[nat]")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "p")
                                                          (("2"
                                                            (expand
                                                             "subterm_at"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 2 6))
                                              (("2"
                                                (expand "rdc")
                                                (("2"
                                                  (rewrite
                                                   "length_reverse")
                                                  (("2"
                                                    (use
                                                     "length_reverse[nat]")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "rdc")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "valid_path" -7)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (inst
                                         -10
                                         "get_else(x!1)"
                                         "rdc(x!2)")
                                        (("3"
                                          (inst -10 "rdc(path_ext)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (lemma "rdc_rac[nat]")
                                                (("1"
                                                  (inst -1 "path_ext")
                                                  (("1"
                                                    (replace
                                                     -5
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (inst 6 "p")
                                                        (("1"
                                                          (rewrite
                                                           "rdc_append[nat]"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (lemma
                                                             "rac_append[nat]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p"
                                                               "x!2")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "rdc_rac[nat]")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "p")
                                                          (("2"
                                                            (expand
                                                             "subterm_at"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 2 6))
                                              (("2"
                                                (expand "rdc")
                                                (("2"
                                                  (rewrite
                                                   "length_reverse")
                                                  (("2"
                                                    (use
                                                     "length_reverse[nat]")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "rdc")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-1 1 2 3 5 6))
                                  (("2"
                                    (lemma "reverse_def[nat]")
                                    (("2"
                                      (inst-cp -1 "x!2" "0")
                                      (("2"
                                        (inst -1 "path_ext" "0")
                                        (("2"
                                          (split)
                                          (("1"
                                            (split)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "rac")
                                                (("1"
                                                  (replaces -1 :dir rl)
                                                  (("1"
                                                    (replaces
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 6))
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 5))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((OR const-decl "[bool, bool -> bool]" booleans nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (p skolem-const-decl
     "(valid_path(subterm_at(get_cond(x!1), rdc(x!2))))" pvs0_props
     nil)
    (get_cond adt-accessor-decl "[(ite?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (p skolem-const-decl
     "(valid_path(subterm_at(get_if(x!1), rdc(x!2))))" pvs0_props nil)
    (get_if adt-accessor-decl "[(ite?) -> PVS0Expr]" PVS0Expr_adt nil)
    (p skolem-const-decl
     "(valid_path(subterm_at(get_else(x!1), rdc(x!2))))" pvs0_props
     nil)
    (get_else adt-accessor-decl "[(ite?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (p skolem-const-decl
     "(valid_path(subterm_at(get_arg(x!1), rdc(x!2))))" pvs0_props nil)
    (get_arg2 adt-accessor-decl "[(op2?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (p skolem-const-decl
     "(valid_path(subterm_at(get_arg2(x!1), rdc(x!2))))" pvs0_props
     nil)
    (rac const-decl "T" more_list_props "structures/")
    (get_arg1 adt-accessor-decl "[(op2?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (p skolem-const-decl
     "(valid_path(subterm_at(get_arg1(x!1), rdc(x!2))))" pvs0_props
     nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (reverse_def formula-decl nil more_list_props "structures/")
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" PVS0Expr_adt
     nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_reverse formula-decl nil list_props nil)
    (reverse_reverse formula-decl nil list_props nil)
    (rdc_rac formula-decl nil more_list_props "structures/")
    (rac_append formula-decl nil more_list_props "structures/")
    (rdc_append formula-decl nil more_list_props "structures/")
    (p skolem-const-decl
     "(valid_path(subterm_at(get_arg(x!1), rdc(x!2))))" pvs0_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (append_null formula-decl nil list_props nil)
    (path_ext skolem-const-decl
     "{path_ext: (valid_path(x!1)) | suffix?(x!2, path_ext)}"
     pvs0_props nil)
    (x!2 skolem-const-decl "(valid_path(x!1))" pvs0_props nil)
    (x!1 skolem-const-decl "PVS0Expr[T]" pvs0_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (app_prefix_of_path_ext-2 nil 3643729922
   ("" (measure-induct+ "length(path)" ("expr" "path"))
    (("" (skeep)
      (("" (case "x!2 = null")
        (("1" (replace -1)
          (("1" (inst 1 "path_ext")
            (("1" (rewrite "append_null") nil nil)
             ("2" (replace -1)
              (("2" (expand "subterm_at") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "x!1")
          (("2" (prop)
            (("1" (hide -2)
              (("1" (typepred "x!2") (("1" (grind) nil nil)) nil)) nil)
             ("2" (hide -2)
              (("2" (typepred "x!2") (("2" (grind) nil nil)) nil)) nil)
             ("3" (typepred "x!2")
              (("3" (expand "valid_path" -2)
                (("3" (assert)
                  (("3" (flatten)
                    (("3" (inst -5 "get_arg(x!1)" "rdc(x!2)")
                      (("3" (typepred "path_ext")
                        (("3" (expand "valid_path" -2)
                          (("3" (case "path_ext=null")
                            (("1" (hide-all-but (-1 -4 1))
                              (("1" (grind) nil nil)) nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (inst -9 "rdc(path_ext)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 3 "p")
                                        (("1"
                                          (lemma "rdc_rac")
                                          (("1"
                                            (inst -1 "path_ext")
                                            (("1"
                                              (replace -2 :dir rl)
                                              (("1"
                                                (replace -1 3 :dir rl)
                                                (("1"
                                                  (replace -4)
                                                  (("1"
                                                    (rewrite
                                                     "rdc_append"
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -8
                                                       3
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (lemma
                                                         "rac_append")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "p"
                                                           "x!2")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             3
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               "rdc_rac")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "p")
                                          (("2"
                                            (expand "subterm_at" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 3))
                                      (("2"
                                        (expand "rdc")
                                        (("2"
                                          (rewrite "length_reverse")
                                          (("2"
                                            (use "length_reverse[nat]")
                                            (("2"
                                              (replaces -1 :dir rl)
                                              (("2"
                                                (expand "length" 1 2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (hide 1)
                                                      (("1"
                                                        (use
                                                         "reverse_reverse[nat]")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "suffix?" -4)
                                    (("2"
                                      (prop)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (hide-all-but (-1 3))
                                            (("1"
                                              (use
                                               "reverse_reverse[nat]")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lift-if)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (hide-all-but (-1 5))
                                                (("1"
                                                  (use
                                                   "reverse_reverse[nat]")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "rdc")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (typepred "x!2" "path_ext")
              (("4" (case "path_ext=null")
                (("1" (replace -1)
                  (("1" (hide-all-but (-6 1)) (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (expand "valid_path" -2)
                  (("2" (assert)
                    (("2" (expand "suffix?")
                      (("2" (split -5)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (lift-if)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1"
                                    (use "reverse_reverse[nat]")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split)
                                      (("1"
                                        (hide-all-but (-1 4))
                                        (("1"
                                          (use "reverse_reverse[nat]")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (case
                                           "rac(x!2) = rac(path_ext)")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (expand "valid_path" -7)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -9
                                                   "get_arg1(x!1)"
                                                   "rdc(x!2)")
                                                  (("1"
                                                    (inst
                                                     -9
                                                     "rdc(path_ext)")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (typepred
                                                           "p")
                                                          (("1"
                                                            (inst
                                                             6
                                                             "p")
                                                            (("1"
                                                              (lemma
                                                               "rdc_rac")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "path_ext")
                                                                (("1"
                                                                  (replace
                                                                   -4
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -5
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       "rac_append")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "p"
                                                                         "x!2")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           -2
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             6
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (lemma
                                                                               "rdc_rac")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "rdc_append"
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "rdc_rac")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "subterm_at"
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 6))
                                                        (("2"
                                                          (expand
                                                           "rdc"
                                                           1)
                                                          (("2"
                                                            (rewrite
                                                             "length_reverse")
                                                            (("2"
                                                              (use
                                                               "length_reverse[nat]")
                                                              (("2"
                                                                (replaces
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "rdc")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 1 2))
                                            (("2"
                                              (expand "rac")
                                              (("2"
                                                (lemma
                                                 "reverse_def[nat]")
                                                (("2"
                                                  (inst-cp
                                                   -1
                                                   "x!2"
                                                   "0")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "path_ext"
                                                     "0")
                                                    (("2"
                                                      (reveal 1 3 4)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replaces
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replaces
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 4))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 3))
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-1 3))
                                        (("1"
                                          (use "reverse_reverse[nat]")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "rac(x!2) = rac(path_ext)")
                                        (("1"
                                          (inst
                                           -10
                                           "get_arg2(x!1)"
                                           "rdc(x!2)")
                                          (("1"
                                            (inst -10 "rdc(path_ext)")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 6 "p")
                                                  (("1"
                                                    (lemma "rdc_rac")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "path_ext")
                                                      (("1"
                                                        (expand
                                                         "valid_path"
                                                         -10)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               "rdc_append"
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (lemma
                                                                   "rac_append")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "p"
                                                                     "x!2")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -2
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         6
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (rewrite
                                                                           "rdc_rac")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "p")
                                                    (("2"
                                                      (expand
                                                       "subterm_at"
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (1 6))
                                                (("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (rewrite
                                                     "length_reverse")
                                                    (("2"
                                                      (use
                                                       "length_reverse[nat]")
                                                      (("2"
                                                        (replaces
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           1
                                                           2)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (use
                                                                 "reverse_reverse[nat]")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "rdc")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "valid_path"
                                                   -8)
                                                  (("2"
                                                    (expand "rdc")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1 2 3 5 6))
                                          (("2"
                                            (expand "rac")
                                            (("2"
                                              (lemma
                                               "reverse_def[nat]")
                                              (("2"
                                                (inst-cp -1 "x!2" "0")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "path_ext"
                                                   "0")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (expand
                                                               "nth")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 6))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 5))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (typepred "path_ext" "x!2")
              (("5" (case "path_ext=null")
                (("1" (replace -1)
                  (("1" (hide-all-but (-4 1)) (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (expand "valid_path" -5)
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (expand "valid_path" -2)
                        (("2" (flatten)
                          (("2" (inst -9 "get_arg(x!1)" "rdc(x!2)")
                            (("2" (inst -9 "rdc(path_ext)")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "suffix?" -5)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide-all-but (-1 2))
                                          (("1"
                                            (use
                                             "reverse_reverse[nat]")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lift-if)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (hide-all-but (-1 4))
                                              (("1"
                                                (use
                                                 "reverse_reverse[nat]")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "rac(x!2) = rac(path_ext)")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 6 "p")
                                                  (("1"
                                                    (lemma "rdc_rac")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "path_ext")
                                                      (("1"
                                                        (replace
                                                         -2
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (replace
                                                           -5
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (rewrite
                                                             "rdc_append"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (lemma
                                                               "rac_append")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p"
                                                                 "x!2")
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (rewrite
                                                                       "rdc_rac")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "p")
                                                    (("2"
                                                      (expand
                                                       "subterm_at"
                                                       1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (-1 1 2 3 5 6))
                                                (("2"
                                                  (expand "rac")
                                                  (("2"
                                                    (lemma
                                                     "reverse_def[nat]")
                                                    (("2"
                                                      (inst-cp
                                                       -1
                                                       "x!2"
                                                       "0")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "path_ext"
                                                         "0")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replaces
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replaces
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 6))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 5))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 3))
                                  (("2"
                                    (expand "rdc")
                                    (("2"
                                      (rewrite "length_reverse")
                                      (("2"
                                        (use "length_reverse[nat]")
                                        (("2"
                                          (replaces -1 :dir rl)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (use
                                                   "reverse_reverse[nat]")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "suffix?" -4)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (split)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide-all-but (-1 3))
                                              (("1"
                                                (use
                                                 "reverse_reverse[nat]")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (hide-all-but (-1 5))
                                                  (("1"
                                                    (use
                                                     "reverse_reverse[nat]")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("6" (typepred "path_ext" "x!2")
              (("6" (case "path_ext=null")
                (("1" (hide-all-but (-1 -4 1)) (("1" (grind) nil nil))
                  nil)
                 ("2" (expand "suffix?")
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide-all-but (-1 2))
                        (("1" (use "reverse_reverse[nat]")
                          (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (lift-if)
                        (("2" (prop)
                          (("1" (hide-all-but (-1 4))
                            (("1" (use "reverse_reverse[nat]")
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (expand "valid_path" -6)
                            (("2" (assert)
                              (("2"
                                (case "rac(x!2) =rac(path_ext)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "valid_path" -7)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -10
                                         "get_cond(x!1)"
                                         "rdc(x!2)")
                                        (("1"
                                          (inst -10 "rdc(path_ext)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (lemma "rdc_rac")
                                                (("1"
                                                  (inst -1 "path_ext")
                                                  (("1"
                                                    (replace
                                                     -5
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (inst 6 "p")
                                                        (("1"
                                                          (rewrite
                                                           "rdc_append"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (lemma
                                                             "rac_append")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p"
                                                               "x!2")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "rdc_rac")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "p")
                                                          (("2"
                                                            (expand
                                                             "subterm_at"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 2 6))
                                              (("2"
                                                (expand "rdc")
                                                (("2"
                                                  (rewrite
                                                   "length_reverse")
                                                  (("2"
                                                    (use
                                                     "length_reverse[nat]")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "rdc")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "valid_path" -7)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst
                                         -10
                                         "get_if(x!1)"
                                         "rdc(x!2)")
                                        (("2"
                                          (inst -10 "rdc(path_ext)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (lemma "rdc_rac")
                                                (("1"
                                                  (inst -1 "path_ext")
                                                  (("1"
                                                    (replace
                                                     -5
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (inst 6 "p")
                                                        (("1"
                                                          (rewrite
                                                           "rdc_append"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (lemma
                                                             "rac_append")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p"
                                                               "x!2")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "rdc_rac")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "p")
                                                          (("2"
                                                            (expand
                                                             "subterm_at"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 2 6))
                                              (("2"
                                                (expand "rdc")
                                                (("2"
                                                  (rewrite
                                                   "length_reverse")
                                                  (("2"
                                                    (use
                                                     "length_reverse[nat]")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "rdc")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "valid_path" -7)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (inst
                                         -10
                                         "get_else(x!1)"
                                         "rdc(x!2)")
                                        (("3"
                                          (inst -10 "rdc(path_ext)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (lemma "rdc_rac")
                                                (("1"
                                                  (inst -1 "path_ext")
                                                  (("1"
                                                    (replace
                                                     -5
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (inst 6 "p")
                                                        (("1"
                                                          (rewrite
                                                           "rdc_append"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (lemma
                                                             "rac_append")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p"
                                                               "x!2")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "rdc_rac")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "p")
                                                          (("2"
                                                            (expand
                                                             "subterm_at"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 2 6))
                                              (("2"
                                                (expand "rdc")
                                                (("2"
                                                  (rewrite
                                                   "length_reverse")
                                                  (("2"
                                                    (use
                                                     "length_reverse[nat]")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "rdc")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-1 1 2 3 5 6))
                                  (("2"
                                    (lemma "reverse_def[nat]")
                                    (("2"
                                      (inst-cp -1 "x!2" "0")
                                      (("2"
                                        (inst -1 "path_ext" "0")
                                        (("2"
                                          (split)
                                          (("1"
                                            (split)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "rac")
                                                (("1"
                                                  (replaces -1 :dir rl)
                                                  (("1"
                                                    (replaces
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 6))
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 5))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_cond adt-accessor-decl "[(ite?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (get_if adt-accessor-decl "[(ite?) -> PVS0Expr]" PVS0Expr_adt nil)
    (get_else adt-accessor-decl "[(ite?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (get_arg2 adt-accessor-decl "[(op2?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (get_arg1 adt-accessor-decl "[(op2?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" PVS0Expr_adt
     nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil))
   nil)
  (app_prefix_of_path_ext-1 nil 3643563298
   ("" (measure-induct+ "length(path)" ("expr" "path"))
    (("" (skeep)
      (("" (case "x!2 = null")
        (("1" (replace -1)
          (("1" (inst 1 "path_ext")
            (("1" (rewrite "append_null") nil nil)
             ("2" (replace -1)
              (("2" (expand "subterm_at") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "x!1")
          (("2" (prop)
            (("1" (hide -2)
              (("1" (typepred "x!2") (("1" (grind) nil nil)) nil)) nil)
             ("2" (hide -2)
              (("2" (typepred "x!2") (("2" (grind) nil nil)) nil)) nil)
             ("3" (typepred "x!2")
              (("3" (expand "valid_path" -2)
                (("3" (assert)
                  (("3" (flatten)
                    (("3" (inst -5 "get_arg(x!1)" "rdc(x!2)")
                      (("3" (typepred "path_ext")
                        (("3" (expand "valid_path" -2)
                          (("3" (case "path_ext=null")
                            (("1" (hide-all-but (-1 -4 1))
                              (("1" (grind) nil nil)) nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (inst -9 "rdc(path_ext)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 3 "p")
                                        (("1"
                                          (lemma "rdc_rac")
                                          (("1"
                                            (inst -1 "path_ext")
                                            (("1"
                                              (replace -2 :dir rl)
                                              (("1"
                                                (replace -1 3 :dir rl)
                                                (("1"
                                                  (replace -4)
                                                  (("1"
                                                    (rewrite
                                                     "rdc_append"
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -8
                                                       3
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (lemma
                                                         "rac_append")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "p"
                                                           "x!2")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             3
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               "rdc_rac")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "p")
                                          (("2"
                                            (expand "subterm_at" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 3))
                                      (("2"
                                        (expand "rdc")
                                        (("2"
                                          (rewrite "length_reverse")
                                          (("2"
                                            (use "length_reverse[nat]")
                                            (("2"
                                              (replaces -1 :dir rl)
                                              (("2"
                                                (expand "length" 1 2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (hide 1)
                                                      (("1"
                                                        (use
                                                         "reverse_reverse[nat]")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "suffix?" -4)
                                    (("2"
                                      (prop)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (hide-all-but (-1 3))
                                            (("1"
                                              (use
                                               "reverse_reverse[nat]")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lift-if)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (hide-all-but (-1 5))
                                                (("1"
                                                  (use
                                                   "reverse_reverse[nat]")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "rdc")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (typepred "x!2" "path_ext")
              (("4" (case "path_ext=null")
                (("1" (replace -1)
                  (("1" (hide-all-but (-6 1)) (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (expand "valid_path" -2)
                  (("2" (assert)
                    (("2" (expand "suffix?")
                      (("2" (split -5)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (lift-if)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1"
                                    (use "reverse_reverse[nat]")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split)
                                      (("1"
                                        (hide-all-but (-1 4))
                                        (("1"
                                          (use "reverse_reverse[nat]")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (case
                                           "rac(x!2) = rac(path_ext)")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (expand "valid_path" -7)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -9
                                                   "get_arg1(x!1)"
                                                   "rdc(x!2)")
                                                  (("1"
                                                    (inst
                                                     -9
                                                     "rdc(path_ext)")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (typepred
                                                           "p")
                                                          (("1"
                                                            (inst
                                                             6
                                                             "p")
                                                            (("1"
                                                              (lemma
                                                               "rdc_rac")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "path_ext")
                                                                (("1"
                                                                  (replace
                                                                   -4
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -5
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       "rac_append")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "p"
                                                                         "x!2")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           -2
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             6
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (lemma
                                                                               "rdc_rac")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "rdc_append"
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "rdc_rac")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "subterm_at"
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 6))
                                                        (("2"
                                                          (expand
                                                           "rdc"
                                                           1)
                                                          (("2"
                                                            (rewrite
                                                             "length_reverse")
                                                            (("2"
                                                              (use
                                                               "length_reverse[nat]")
                                                              (("2"
                                                                (replaces
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "rdc")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 1 2))
                                            (("2"
                                              (expand "rac")
                                              (("2"
                                                (lemma
                                                 "reverse_def[nat]")
                                                (("2"
                                                  (inst-cp
                                                   -1
                                                   "x!2"
                                                   "0")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "path_ext"
                                                     "0")
                                                    (("2"
                                                      (reveal 1 3 4)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replaces
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replaces
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 4))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 3))
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (hide-all-but (-1 3))
                                        (("1"
                                          (use "reverse_reverse[nat]")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "rac(x!2) = rac(path_ext)")
                                        (("1"
                                          (inst
                                           -10
                                           "get_arg2(x!1)"
                                           "rdc(x!2)")
                                          (("1"
                                            (inst -10 "rdc(path_ext)")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 6 "p")
                                                  (("1"
                                                    (lemma "rdc_rac")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "path_ext")
                                                      (("1"
                                                        (expand
                                                         "valid_path"
                                                         -10)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               "rdc_append"
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (lemma
                                                                   "rac_append")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "p"
                                                                     "x!2")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -2
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         6
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (rewrite
                                                                           "rdc_rac")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "p")
                                                    (("2"
                                                      (expand
                                                       "subterm_at"
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (1 6))
                                                (("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (rewrite
                                                     "length_reverse")
                                                    (("2"
                                                      (use
                                                       "length_reverse[nat]")
                                                      (("2"
                                                        (replaces
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           1
                                                           2)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (use
                                                                 "reverse_reverse[nat]")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "rdc")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "valid_path"
                                                   -8)
                                                  (("2"
                                                    (expand "rdc")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1 2 3 5 6))
                                          (("2"
                                            (expand "rac")
                                            (("2"
                                              (lemma
                                               "reverse_def[nat]")
                                              (("2"
                                                (inst-cp -1 "x!2" "0")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "path_ext"
                                                   "0")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (expand
                                                               "nth")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 6))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 5))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (typepred "path_ext" "x!2")
              (("5" (case "path_ext=null")
                (("1" (replace -1)
                  (("1" (hide-all-but (-4 1)) (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (expand "valid_path" -5)
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (expand "valid_path" -2)
                        (("2" (flatten)
                          (("2" (inst -9 "get_arg(x!1)" "rdc(x!2)")
                            (("2" (inst -9 "rdc(path_ext)")
                              (("1"
                                (prop)
                                (("1"
                                  (expand "suffix?" -5)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide-all-but (-1 2))
                                          (("1"
                                            (use
                                             "reverse_reverse[nat]")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lift-if)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (hide-all-but (-1 4))
                                              (("1"
                                                (use
                                                 "reverse_reverse[nat]")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "rac(x!2) = rac(path_ext)")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 6 "p")
                                                  (("1"
                                                    (lemma "rdc_rac")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "path_ext")
                                                      (("1"
                                                        (replace
                                                         -2
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (replace
                                                           -5
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (rewrite
                                                             "rdc_append"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (lemma
                                                               "rac_append")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p"
                                                                 "x!2")
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (rewrite
                                                                       "rdc_rac")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "p")
                                                    (("2"
                                                      (expand
                                                       "subterm_at"
                                                       1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (-1 1 2 3 5 6))
                                                (("2"
                                                  (expand "rac")
                                                  (("2"
                                                    (lemma
                                                     "reverse_def[nat]")
                                                    (("2"
                                                      (inst-cp
                                                       -1
                                                       "x!2"
                                                       "0")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "path_ext"
                                                         "0")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replaces
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replaces
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 6))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 5))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 3))
                                  (("2"
                                    (expand "rdc")
                                    (("2"
                                      (rewrite "length_reverse")
                                      (("2"
                                        (use "length_reverse[nat]")
                                        (("2"
                                          (replaces -1 :dir rl)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (use
                                                   "reverse_reverse[nat]")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "suffix?" -4)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (split)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide-all-but (-1 3))
                                              (("1"
                                                (use
                                                 "reverse_reverse[nat]")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (hide-all-but (-1 5))
                                                  (("1"
                                                    (use
                                                     "reverse_reverse[nat]")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("6" (typepred "path_ext" "x!2")
              (("6" (case "path_ext=null")
                (("1" (hide-all-but (-1 -4 1)) (("1" (grind) nil nil))
                  nil)
                 ("2" (expand "suffix?")
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide-all-but (-1 2))
                        (("1" (use "reverse_reverse[nat]")
                          (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (lift-if)
                        (("2" (prop)
                          (("1" (hide-all-but (-1 4))
                            (("1" (use "reverse_reverse[nat]")
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (expand "valid_path" -6)
                            (("2" (assert)
                              (("2"
                                (case "rac(x!2) =rac(path_ext)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "valid_path" -7)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -10
                                         "get_cond(x!1)"
                                         "rdc(x!2)")
                                        (("1"
                                          (inst -10 "rdc(path_ext)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (lemma "rdc_rac")
                                                (("1"
                                                  (inst -1 "path_ext")
                                                  (("1"
                                                    (replace
                                                     -5
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (inst 6 "p")
                                                        (("1"
                                                          (rewrite
                                                           "rdc_append"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (lemma
                                                             "rac_append")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p"
                                                               "x!2")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "rdc_rac")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "p")
                                                          (("2"
                                                            (expand
                                                             "subterm_at"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 2 6))
                                              (("2"
                                                (expand "rdc")
                                                (("2"
                                                  (rewrite
                                                   "length_reverse")
                                                  (("2"
                                                    (use
                                                     "length_reverse[nat]")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "rdc")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "valid_path" -7)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst
                                         -10
                                         "get_if(x!1)"
                                         "rdc(x!2)")
                                        (("2"
                                          (inst -10 "rdc(path_ext)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (lemma "rdc_rac")
                                                (("1"
                                                  (inst -1 "path_ext")
                                                  (("1"
                                                    (replace
                                                     -5
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (inst 6 "p")
                                                        (("1"
                                                          (rewrite
                                                           "rdc_append"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (lemma
                                                             "rac_append")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p"
                                                               "x!2")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "rdc_rac")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "p")
                                                          (("2"
                                                            (expand
                                                             "subterm_at"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 2 6))
                                              (("2"
                                                (expand "rdc")
                                                (("2"
                                                  (rewrite
                                                   "length_reverse")
                                                  (("2"
                                                    (use
                                                     "length_reverse[nat]")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "rdc")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (postpone) nil nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cnst_vr_path_ext 0
  (cnst_vr_path_ext-1 nil 3643210892
   ("" (skeep)
    (("" (beta)
      (("" (typepred "path_ext")
        (("" (flatten)
          (("" (use " app_prefix_of_path_ext")
            (("" (beta)
              (("" (skeep)
                (("" (typepred "p")
                  (("" (expand "valid_path" -2)
                    (("" (prop)
                      (("1" (assert)
                        (("1" (expand "append" -4)
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "append" -4)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (append def-decl "list[T]" list_props nil)
    (path_ext skolem-const-decl "(valid_path(expr))" pvs0_props nil)
    (path skolem-const-decl "(valid_path(expr))" pvs0_props nil)
    (expr skolem-const-decl "PVS0Expr[T]" pvs0_props nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (app_prefix_of_path_ext formula-decl nil pvs0_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil))
   shostak))
 (op1_rec_path_ext 0
  (op1_rec_path_ext-2 nil 3645893583
   ("" (skeep)
    (("" (beta)
      (("" (typepred "path_ext")
        (("" (flatten)
          (("" (use "app_prefix_of_path_ext")
            (("" (beta)
              (("" (skeep)
                (("" (typepred "p")
                  (("" (case "p=null")
                    (("1" (replaces -1)
                      (("1" (expand "append" -3)
                        (("1" (propax) nil nil)) nil))
                      nil)
                     ("2" (replace -3 :dir rl)
                      (("2" (rewrite "cons_append")
                        (("2" (rewrite "suffix_app")
                          (("2" (case "rac(p)=0")
                            (("1" (expand "suffix?" 3)
                              (("1"
                                (lift-if)
                                (("1"
                                  (split 3)
                                  (("1"
                                    (hide-all-but (-1 1))
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide-all-but (-1 3))
                                          (("1"
                                            (rewrite
                                             "length_null_list"
                                             :dir
                                             rl)
                                            (("1"
                                              (rewrite
                                               "length_reverse")
                                              (("1"
                                                (rewrite
                                                 "length_null_list")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "reverse" 2 1)
                                          (("2"
                                            (expand "reverse" 2 1)
                                            (("2"
                                              (expand "append" 2)
                                              (("2"
                                                (expand "reverse" 2 2)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (expand "rac" -1)
                                                    (("1"
                                                      (lemma
                                                       "reverse_def[nat]")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "p"
                                                         "0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (expand
                                                               "nth")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "valid_path" -2)
                              (("2" (grind) nil nil)) nil)
                             ("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (suffix_app formula-decl nil more_list_props "structures/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_reverse formula-decl nil list_props nil)
    (length_null_list formula-decl nil more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (reverse_def formula-decl nil more_list_props "structures/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (cons_append formula-decl nil more_list_props "structures/")
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (path_ext skolem-const-decl "(valid_path(expr))" pvs0_props nil)
    (path skolem-const-decl "(valid_path(expr))" pvs0_props nil)
    (expr skolem-const-decl "PVS0Expr[T]" pvs0_props nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (app_prefix_of_path_ext formula-decl nil pvs0_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil))
   nil)
  (op1_rec_path_ext-1 nil 3643216154
   ("" (skeep)
    (("" (beta)
      (("" (typepred "path_ext")
        (("" (flatten)
          (("" (use " app_prefix_of_path_ext")
            (("" (beta)
              (("" (skeep)
                (("" (typepred "p")
                  (("" (expand "valid_path" -2)
                    (("" (prop)
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (hide-all-but (-1 -4 1))
                            (("1" (expand "append")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (expand "suffix?" 2)
                            (("2" (prop)
                              (("1"
                                (replace -6 -1 rl)
                                (("1"
                                  (use "length_append[nat]")
                                  (("1"
                                    (expand "length" -2 2)
                                    (("1"
                                      (replace -1 -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case "null?(p)")
                                          (("1"
                                            (expand "append" -8)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-2 1))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (use "length_reverse[nat]")
                                      (("1"
                                        (use "length_append[nat]")
                                        (("1"
                                          (hide-all-but
                                           (-1 -2 -3 -8 3))
                                          (("1"
                                            (use "length_null[nat]")
                                            (("1"
                                              (case "null?(p)")
                                              (("1"
                                                (expand "append" -6)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "length" -3 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lift-if)
                                    (("2"
                                      (lemma "length_reverse[nat]")
                                      (("2"
                                        (inst -1 "cons(0, path)")
                                        (("2"
                                          (expand "length" -1 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (expand "suffix?" -9)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (case
                                                             "path=null")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "null?(p)")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -9
                                                                    7))
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    4
                                                                    -8
                                                                    -4))
                                                                  (("2"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("2"
                                                                      (replaces
                                                                       -2
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (expand
                                                                         "reverse"
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "reverse"
                                                                           2
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "append")
                                                                            (("2"
                                                                              (expand
                                                                               "rac")
                                                                              (("2"
                                                                                (lemma
                                                                                 "reverse_def[nat]")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "p"
                                                                                   "0")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth"
                                                                                       -1
                                                                                       1)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1
                                                                                         3)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("2"
                                                                (use
                                                                 "reverse_reverse[nat]")
                                                                (("2"
                                                                  (replaces
                                                                   -1
                                                                   1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "null?(path)")
                                                            (("1"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "reverse"
                                                               5
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "append"
                                                                 5)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "suffix?" -9)
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             3
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "append"
                                                               3
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "reverse"
                                                                   3
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "suffix?"
                                                                     3)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_reverse")
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             -1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "reverse"
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "preffix_rev_suffix"
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (rewrite
                                                               "preffix_rev_suffix"
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 4
                                                                 1)
                                                                (("2"
                                                                  (replace
                                                                   -8
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "reverse_append")
                                                                    (("2"
                                                                      (expand
                                                                       "append"
                                                                       4
                                                                       1)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "append"
                                                                             4
                                                                             2)
                                                                            (("2"
                                                                              (rewrite
                                                                               "prefix_app")
                                                                              (("2"
                                                                                (expand
                                                                                 "rac")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "reverse_def[nat]")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "p"
                                                                                     "0")
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "prefix?"
                                                                                             4)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  7))
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     length)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "length_reverse[nat]")
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "append")
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      1))
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-4
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("3"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          9))
                                                                                        (("2"
                                                                                          (grind)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "append")
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (prop)
                          (("1" (hide-all-but (-1 -4 1))
                            (("1" (expand "append")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (expand "suffix?" 2)
                            (("2" (prop)
                              (("1"
                                (replace -6 -1 rl)
                                (("1"
                                  (use "length_append[nat]")
                                  (("1"
                                    (expand "length" -2 2)
                                    (("1"
                                      (replace -1 -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case "null?(p)")
                                          (("1"
                                            (expand "append" -8)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-2 1))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (use "length_reverse[nat]")
                                      (("1"
                                        (use "length_append[nat]")
                                        (("1"
                                          (hide-all-but
                                           (-1 -2 -3 -8 3))
                                          (("1"
                                            (use "length_null[nat]")
                                            (("1"
                                              (case "null?(p)")
                                              (("1"
                                                (expand "append" -6)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "length" -3 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lift-if)
                                    (("2"
                                      (lemma "length_reverse[nat]")
                                      (("2"
                                        (inst -1 "cons(0, path)")
                                        (("2"
                                          (expand "length" -1 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (expand "suffix?" -9)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (case
                                                             "path=null")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "null?(p)")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -9
                                                                    7))
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    4
                                                                    -8
                                                                    -4))
                                                                  (("2"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("2"
                                                                      (replaces
                                                                       -2
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (expand
                                                                         "reverse"
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "reverse"
                                                                           2
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "append")
                                                                            (("2"
                                                                              (expand
                                                                               "rac")
                                                                              (("2"
                                                                                (lemma
                                                                                 "reverse_def[nat]")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "p"
                                                                                   "0")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth"
                                                                                       -1
                                                                                       1)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1
                                                                                         3)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("2"
                                                                (use
                                                                 "reverse_reverse[nat]")
                                                                (("2"
                                                                  (replaces
                                                                   -1
                                                                   1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "null?(path)")
                                                            (("1"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "reverse"
                                                               5
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "append"
                                                                 5)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "suffix?" -9)
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             3
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "append"
                                                               3
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "reverse"
                                                                   3
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "suffix?"
                                                                     3)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_reverse")
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             -1)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "reverse"
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "preffix_rev_suffix"
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (rewrite
                                                               "preffix_rev_suffix"
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 4
                                                                 1)
                                                                (("2"
                                                                  (replace
                                                                   -8
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "reverse_append")
                                                                    (("2"
                                                                      (expand
                                                                       "append"
                                                                       4
                                                                       1)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "append"
                                                                             4
                                                                             2)
                                                                            (("2"
                                                                              (rewrite
                                                                               "prefix_app")
                                                                              (("2"
                                                                                (expand
                                                                                 "rac")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "reverse_def[nat]")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "p"
                                                                                     "0")
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "prefix?"
                                                                                             4)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  7))
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     length)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "length_reverse[nat]")
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "append")
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      1))
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-4
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("3"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          9))
                                                                                        (("2"
                                                                                          (grind)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "append")
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil))
   shostak))
 (op2_path_ext 0
  (op2_path_ext-1 nil 3643560964
   ("" (skeep)
    (("" (beta)
      (("" (typepred "path_ext")
        (("" (flatten)
          (("" (use "app_prefix_of_path_ext")
            (("" (beta)
              (("" (skeep)
                (("" (typepred "p")
                  (("" (expand "valid_path" -2)
                    (("" (assert)
                      (("" (case "null?(p)")
                        (("1" (hide-all-but (-1 -4 1))
                          (("1" (grind) nil nil)) nil)
                         ("2" (assert)
                          (("2" (prop)
                            (("1" (replace -4 :dir rl)
                              (("1"
                                (lemma "suffix_app[nat]")
                                (("1"
                                  (inst -1 "p" "(:0:)" "path")
                                  (("1"
                                    (expand "append" -1 1)
                                    (("1"
                                      (expand "append" -1 1)
                                      (("1"
                                        (hide-all-but (-1 1 2))
                                        (("1"
                                          (expand "rac")
                                          (("1"
                                            (use "reverse_def[nat]")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replaces -1 :dir rl)
                                                  (("1"
                                                    (expand
                                                     "suffix?"
                                                     1)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lift-if)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  3))
                                                                (("1"
                                                                  (use
                                                                   "reverse_reverse[nat]")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  1
                                                                  3))
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -4 :dir rl)
                              (("2"
                                (lemma "suffix_app[nat]")
                                (("2"
                                  (inst -1 "p" "(:1:)" "path")
                                  (("1"
                                    (expand "append" -1 1)
                                    (("1"
                                      (expand "append" -1 1)
                                      (("1"
                                        (hide-all-but (-1 1 2))
                                        (("1"
                                          (expand "rac")
                                          (("1"
                                            (lemma "reverse_def[nat]")
                                            (("1"
                                              (inst -1 "p" "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (replaces
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (expand
                                                       "suffix?"
                                                       1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lift-if)
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    3))
                                                                  (("1"
                                                                    (use
                                                                     "reverse_reverse[nat]")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lift-if)
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1
                                                                    3))
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rac const-decl "T" more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (reverse_reverse formula-decl nil list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (nth def-decl "T" list_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (reverse_def formula-decl nil more_list_props "structures/")
    (suffix_app formula-decl nil more_list_props "structures/")
    (append def-decl "list[T]" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (path_ext skolem-const-decl "(valid_path(expr))" pvs0_props nil)
    (path skolem-const-decl "(valid_path(expr))" pvs0_props nil)
    (expr skolem-const-decl "PVS0Expr[T]" pvs0_props nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (app_prefix_of_path_ext formula-decl nil pvs0_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil))
   shostak))
 (ite_path_ext 0
  (ite_path_ext-1 nil 3643562518
   ("" (skeep)
    (("" (beta)
      (("" (typepred "path_ext")
        (("" (flatten)
          (("" (use "app_prefix_of_path_ext")
            (("" (beta)
              (("" (skeep)
                (("" (typepred "p")
                  (("" (expand "valid_path" -2)
                    (("" (assert)
                      (("" (case "null?(p)")
                        (("1" (hide-all-but (-1 -4 1))
                          (("1" (grind) nil nil)) nil)
                         ("2" (assert)
                          (("2" (replace -3 :dir rl)
                            (("2" (prop)
                              (("1"
                                (lemma "suffix_app[nat]")
                                (("1"
                                  (inst -1 "p" "(:0:)" "path")
                                  (("1"
                                    (expand "append" -1 1)
                                    (("1"
                                      (expand "append" -1 1)
                                      (("1"
                                        (hide-all-but (-1 1 2))
                                        (("1"
                                          (expand "rac")
                                          (("1"
                                            (use "reverse_def[nat]")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replaces -1 :dir rl)
                                                  (("1"
                                                    (expand
                                                     "suffix?"
                                                     1)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lift-if)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  3))
                                                                (("1"
                                                                  (use
                                                                   "reverse_reverse[nat]")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  1
                                                                  3))
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "suffix_app[nat]")
                                (("2"
                                  (inst -1 "p" "(:1:)" "path")
                                  (("1"
                                    (expand "append" -1 1)
                                    (("1"
                                      (expand "append" -1 1)
                                      (("1"
                                        (hide-all-but (-1 1 2))
                                        (("1"
                                          (expand "rac")
                                          (("1"
                                            (lemma "reverse_def[nat]")
                                            (("1"
                                              (inst -1 "p" "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (replaces
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (expand
                                                       "suffix?"
                                                       1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lift-if)
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    3))
                                                                  (("1"
                                                                    (use
                                                                     "reverse_reverse[nat]")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lift-if)
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1
                                                                    3))
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (lemma "suffix_app[nat]")
                                (("3"
                                  (inst -1 "p" "(:2:)" "path")
                                  (("1"
                                    (expand "append" -1 1)
                                    (("1"
                                      (expand "append" -1 1)
                                      (("1"
                                        (hide-all-but (-1 1 2))
                                        (("1"
                                          (expand "rac")
                                          (("1"
                                            (lemma "reverse_def[nat]")
                                            (("1"
                                              (inst -1 "p" "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (replaces
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (expand
                                                       "suffix?"
                                                       1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lift-if)
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    3))
                                                                  (("1"
                                                                    (use
                                                                     "reverse_reverse[nat]")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lift-if)
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1
                                                                    3))
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rac const-decl "T" more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (reverse_reverse formula-decl nil list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (nth def-decl "T" list_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (reverse_def formula-decl nil more_list_props "structures/")
    (suffix_app formula-decl nil more_list_props "structures/")
    (append def-decl "list[T]" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (path_ext skolem-const-decl "(valid_path(expr))" pvs0_props nil)
    (path skolem-const-decl "(valid_path(expr))" pvs0_props nil)
    (expr skolem-const-decl "PVS0Expr[T]" pvs0_props nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (app_prefix_of_path_ext formula-decl nil pvs0_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil))
   shostak))
 (valid_paths_TCC1 0
  (valid_paths_TCC1-3 nil 3644072003
   ("" (auto-rewrite "null_path") (("" (assert) nil nil)) nil)
   ((null_path formula-decl nil pvs0_props nil)) nil)
  (valid_paths_TCC1-2 nil 3644071995
   ("" (expand "restrict")
    (("" (lemma "PVS0Expr_well_founded")
      (("" (expand "strict_well_founded?")
        (("" (assert)
          (("" (flatten)
            (("" (lemma "well_founded_restrict[PVS0Expr, PVS0Expr]")
              (("" (inst?)
                (("" (assert)
                  (("" (expand "restrict")
                    (("" (propax) nil))))))))))))))))))
    nil)
   nil nil)
  (valid_paths_TCC1-1 nil 3642412740
   ("" (expand "restrict")
    (("" (lemma "PVS0Expr_well_founded")
      (("" (expand "strict_well_founded?")
        (("" (assert)
          (("" (flatten)
            (("" (lemma "well_founded_restrict[PVS0Expr, PVS0Expr]")
              (("" (inst?)
                (("" (assert)
                  (("" (expand "restrict") (("" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr_well_founded formula-decl nil PVS0Expr_adt nil))
   shostak))
 (valid_paths_TCC2 0
  (valid_paths_TCC2-5 nil 3651339447
   (""
    (typepred "restrict
                            [[PVS0Expr[Val[T]], PVS0Expr[Val[T]]],
                             [PVS0Expr[Val[T]], PVS0Expr[Val[T]]], boolean]
                            (<<)")
    (("" (assert) (("" (grind) nil nil)) nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (transitive? const-decl "bool" relations nil)
    (irreflexive? const-decl "bool" relations nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (restrict const-decl "R" restrict nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (strict_order? const-decl "bool" orders nil))
   nil)
  (valid_paths_TCC2-4 nil 3644072174
   ("" (skeep)
    (("" (replace -1)
      (("" (expand "restrict")
        (("" (expand "<<") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC2-3 nil 3644072168
   ("" (expand "restrict")
    (("" (lemma "PVS0Expr_well_founded")
      (("" (expand "strict_well_founded?")
        (("" (assert)
          (("" (flatten)
            (("" (lemma "well_founded_restrict[PVS0Expr, PVS0Expr]")
              (("" (inst?)
                (("" (assert)
                  (("" (expand "restrict")
                    (("" (propax) nil))))))))))))))))))
    nil)
   nil nil)
  (valid_paths_TCC2-2 nil 3644072074
   (";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
    (expand "restrict")
    ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
      (lemma "PVS0Expr_well_founded")
      ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
        (expand "strict_well_founded?")
        ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
          (assert)
          ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
            (flatten)
            ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
              (lemma "well_founded_restrict[PVS0Expr, PVS0Expr]")
              ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
                (inst?)
                ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
                  (assert)
                  ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
                    (expand "restrict")
                    ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2"
                      (propax) nil))))))))))))))))))
    ";;; developed with shostak decision procedures")
   nil nil)
  (valid_paths_TCC2-1 nil 3642412740
   ("" (skeep)
    (("" (replace -1)
      (("" (expand "valid_path") (("" (propax) nil nil)) nil)) nil))
    nil)
   nil nil))
 (valid_paths_TCC3 0
  (valid_paths_TCC3-2 nil 3651339481 ("" (tcc) nil nil) (nil) nil)
  (valid_paths_TCC3-1 nil 3642412740 ("" (tcc) nil nil)
   ((PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil))
 (valid_paths_TCC4 0
  (valid_paths_TCC4-5 nil 3665517061
   ("" (skeep)
    (("" (typepred "v(a)")
      ((""
        (case "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                                        every(LAMBDA (x: number):
                                                                     number_field_pred(x) AND real_pred(x)
                                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                             (x1)
                                                         AND valid_path(a)(x1))
                                                     (l) =>  every[list[number]]
                                                    (LAMBDA (x1: list[number]):
                                                       every[number]
                                                           (LAMBDA (x: number):
                                                                   number_field_pred(x) AND real_pred(x)
                                                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                           (x1)
                                                        AND valid_path(expr)(x1))
                                                    (map[list[nat], list[nat]]
                                                         (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide-all-but 1)
          (("2" (measure-induct+ "length(l)" "l")
            (("1"
              (case "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x)
                                                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                                     (l) =>  every(LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x)
                                                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                                     (append[nat](l, (: 0 :)))")
              (("1" (expand "map" 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                     ("2" (expand "every" 2 1)
                      (("2" (split)
                        (("1" (expand "every" -3 1)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (inst -1 "car(x!1)")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -4)
                          (("2" (replaces -1)
                            (("2" (expand "valid_path" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (rewrite "rac_append")
                                  (("2"
                                    (rewrite "rdc_append")
                                    (("2"
                                      (split)
                                      (("1"
                                        (hide-all-but 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "rdc" 1)
                                        (("2"
                                          (expand "reverse" 1 2)
                                          (("2"
                                            (expand "reverse" 1 2)
                                            (("2"
                                              (expand "append" 1 2)
                                              (("2"
                                                (expand "reverse" 1)
                                                (("2"
                                                  (rewrite
                                                   "append_null")
                                                  (("2"
                                                    (expand
                                                     "every"
                                                     -3
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (reveal -4)
                          (("3" (replaces -1)
                            (("3" (expand "valid_path" 1)
                              (("3"
                                (expand "every" -3 1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (inst -2 "cdr(x!1)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "valid_path" -2)
                                          (("3"
                                            (hide-all-but (2 3))
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (measure-induct+ "length(l)" "l")
                  (("1" (expand "append" 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but 1) (("1" (grind) nil nil))
                          nil)
                         ("2" (expand "every" 2)
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (inst -1 "cdr(x!2)")
                              (("2"
                                (expand "every" -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide-all-but (2 3))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rac_append formula-decl nil more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (reverse def-decl "list[T]" list_props nil)
    (append_null formula-decl nil list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (rdc_append formula-decl nil more_list_props "structures/")
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (wf_nat formula-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   nil)
  (valid_paths_TCC4-4 nil 3651339505 ("" (tcc) nil nil) nil nil)
  (valid_paths_TCC4-3 nil 3648388907
   ("" (skeep)
    (("" (typepred "v(a)")
      ((""
        (case "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l) =>  every[list[number]]
                                      (LAMBDA (x1: list[number]):
                                         every[number]
                                             (LAMBDA (x: number):
                                                     number_field_pred(x) AND real_pred(x)
                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                             (x1)
                                          AND valid_path(expr)(x1))
                                      (map[list[nat], list[nat]]
                                           (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide-all-but 1)
          (("2" (measure-induct+ "length(l)" "l")
            (("1"
              (case "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (l) =>  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (append[nat](l, (: 0 :)))")
              (("1" (expand "map" 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                     ("2" (expand "every" 2 1)
                      (("2" (split)
                        (("1" (expand "every" -3 1)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (inst -1 "car(x!1)")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -4)
                          (("2" (replaces -1)
                            (("2" (expand "valid_path" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (rewrite "rac_append")
                                  (("2"
                                    (rewrite "rdc_append")
                                    (("2"
                                      (split)
                                      (("1"
                                        (hide-all-but 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "rdc" 1)
                                        (("2"
                                          (expand "reverse" 1 2)
                                          (("2"
                                            (expand "reverse" 1 2)
                                            (("2"
                                              (expand "append" 1 2)
                                              (("2"
                                                (expand "reverse" 1)
                                                (("2"
                                                  (rewrite
                                                   "append_null")
                                                  (("2"
                                                    (expand
                                                     "every"
                                                     -3
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (reveal -4)
                          (("3" (replaces -1)
                            (("3" (expand "valid_path" 1)
                              (("3"
                                (expand "every" -3 1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (inst -2 "cdr(x!1)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "valid_path" -2)
                                          (("3"
                                            (hide-all-but (2 3))
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (measure-induct+ "length(l)" "l")
                  (("1" (expand "append" 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but 1) (("1" (grind) nil nil))
                          nil)
                         ("2" (expand "every" 2)
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (inst -1 "cdr(x!2)")
                              (("2"
                                (expand "every" -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide-all-but (2 3))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (rac_append formula-decl nil more_list_props "structures/")
    (rac const-decl "T" more_list_props "structures/")
    (rdc const-decl "list[T]" more_list_props "structures/")
    (rdc_append formula-decl nil more_list_props "structures/"))
   nil)
  (valid_paths_TCC4-2 nil 3644072525
   ("" (skeep) (("" (grind) nil nil)) nil) nil nil)
  (valid_paths_TCC4-1 nil 3642412740 ("" (grind) nil nil) nil nil))
 (valid_paths_TCC5 0
  (valid_paths_TCC5-8 nil 3665517094
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)")
        (("" (typepred "p")
          (("" (replace -5)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (expand "valid_path" -2)
                  (("" (assert)
                    (("" (flatten)
                      (("" (inst -5 "rdc(p)")
                        ((""
                          (case "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l1) =>
                                     every[list[number]]
                                         (LAMBDA (x1: list[number]):
                                            every[number]
                                                (LAMBDA (x: number):
                                                        number_field_pred(x) AND real_pred(x)
                                                    AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                (x1)
                                             AND valid_path(expr)(x1))
                                         (map[list[nat], list[nat]]
                                              (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                          (("1"
                            (case "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                                 map[list[nat], list[nat]]
                                                     (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (hide 3 -5)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma "rdc_rac[nat]")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -2 "cdr(x!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2"
                                    (typepred "l1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (inst?)
                                (("3"
                                  (assert)
                                  (("3"
                                    (typepred "l1")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4" (grind) nil nil)) nil))
                            nil)
                           ("2" (replace -6)
                            (("2" (hide-all-but 1)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "every" -2 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (case
                                                 "forall(l1 : list[nat]): every[number]
                                                                      (LAMBDA (x: number):
                                                                              number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                                                          AND integer_pred(x) AND x >= 0)
                                                                      (append[nat](l1, (: 0 :)))")
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (measure-induct+
                                                     "length(l1)"
                                                     "l1")
                                                    (("1"
                                                      (expand
                                                       "every"
                                                       1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "append"
                                                               2)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cdr(x!2)")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 2 3))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append[nat]")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append[nat]")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst -4 "cdr(x!1)")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (hide-all-but
                                                     (2 3))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc_rac formula-decl nil more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (rac const-decl "T" more_list_props "structures/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (rac_append formula-decl nil more_list_props "structures/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (append_null formula-decl nil list_props nil)
    (rdc_append formula-decl nil more_list_props "structures/")
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]"
     PVS0Expr_adt nil)
    nil (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rdc const-decl "list[T]" more_list_props "structures/") nil nil
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (member def-decl "bool" list_props nil))
   nil)
  (valid_paths_TCC5-7 nil 3651339531
   ("" (skeep)
    (("" (typepred "v(a)")
      ((""
        (case "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                                 every(LAMBDA (x: number):
                                                              number_field_pred(x) AND real_pred(x)
                                                          AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                      (x1)
                                                  AND valid_path(a)(x1))
                                              (l) =>  every[list[number]]
                                             (LAMBDA (x1: list[number]):
                                                every[number]
                                                    (LAMBDA (x: number):
                                                            number_field_pred(x) AND real_pred(x)
                                                        AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                    (x1)
                                                 AND valid_path(expr)(x1))
                                             (map[list[nat], list[nat]]
                                                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide-all-but 1)
          (("2" (measure-induct+ "length(l)" "l")
            (("1"
              (case "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                                  number_field_pred(x) AND real_pred(x)
                                                                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                          (l) =>  every(LAMBDA (x: number):
                                                                                  number_field_pred(x) AND real_pred(x)
                                                                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                          (append[nat](l, (: 0 :)))")
              (("1" (expand "map" 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                     ("2" (expand "every" 2 1)
                      (("2" (split)
                        (("1" (expand "every" -3 1)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (inst -1 "car(x!1)")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -4)
                          (("2" (replaces -1)
                            (("2" (expand "valid_path" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (rewrite "rac_append")
                                  (("2"
                                    (rewrite "rdc_append")
                                    (("2"
                                      (split)
                                      (("1"
                                        (hide-all-but 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "rdc" 1)
                                        (("2"
                                          (expand "reverse" 1 2)
                                          (("2"
                                            (expand "reverse" 1 2)
                                            (("2"
                                              (expand "append" 1 2)
                                              (("2"
                                                (expand "reverse" 1)
                                                (("2"
                                                  (rewrite
                                                   "append_null")
                                                  (("2"
                                                    (expand
                                                     "every"
                                                     -3
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (reveal -4)
                          (("3" (replaces -1)
                            (("3" (expand "valid_path" 1)
                              (("3"
                                (expand "every" -3 1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (inst -2 "cdr(x!1)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "valid_path" -2)
                                          (("3"
                                            (hide-all-but (2 3))
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (measure-induct+ "length(l)" "l")
                  (("1" (expand "append" 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but 1) (("1" (grind) nil nil))
                          nil)
                         ("2" (expand "every" 2)
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (inst -1 "cdr(x!2)")
                              (("2"
                                (expand "every" -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide-all-but (2 3))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (rac_append formula-decl nil more_list_props "structures/")
    (rac const-decl "T" more_list_props "structures/")
    (rdc const-decl "list[T]" more_list_props "structures/")
    (rdc_append formula-decl nil more_list_props "structures/"))
   nil)
  (valid_paths_TCC5-6 nil 3651337448
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)")
        (("" (typepred "p")
          (("" (replace -5)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (expand "valid_path" -2)
                  (("" (assert)
                    (("" (flatten)
                      (("" (inst -5 "rdc(p)")
                        ((""
                          (case "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) =>
                       every[list[number]]
                           (LAMBDA (x1: list[number]):
                              every[number]
                                  (LAMBDA (x: number):
                                          number_field_pred(x) AND real_pred(x)
                                      AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                  (x1)
                               AND valid_path(expr)(x1))
                           (map[list[nat], list[nat]]
                                (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                          (("1"
                            (case "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                               map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (hide 3 -5)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma "rdc_rac[nat]")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -2 "cdr(x!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2"
                                    (typepred "l1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (inst?)
                                (("3"
                                  (assert)
                                  (("3"
                                    (typepred "l1")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4" (grind) nil nil)) nil))
                            nil)
                           ("2" (replace -6)
                            (("2" (hide-all-but 1)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "every" -2 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (case
                                                 "forall(l1 : list[nat]): every[number]
                                        (LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                            AND integer_pred(x) AND x >= 0)
                                        (append[nat](l1, (: 0 :)))")
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (measure-induct+
                                                     "length(l1)"
                                                     "l1")
                                                    (("1"
                                                      (expand
                                                       "every"
                                                       1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "append"
                                                               2)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cdr(x!2)")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 2 3))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append[nat]")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append[nat]")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst -4 "cdr(x!1)")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (hide-all-but
                                                     (2 3))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]"
     PVS0Expr_adt nil)
    (rdc_append formula-decl nil more_list_props "structures/")
    (rac_append formula-decl nil more_list_props "structures/")
    (rac const-decl "T" more_list_props "structures/")
    (rdc_rac formula-decl nil more_list_props "structures/"))
   nil)
  (valid_paths_TCC5-5 nil 3648389010
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)")
        (("" (typepred "p")
          (("" (replace -5)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (expand "valid_path" -2)
                  (("" (assert)
                    (("" (flatten)
                      (("" (inst -5 "rdc(p)")
                        ((""
                          (case "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                     every(LAMBDA (x: number):
                                  number_field_pred(x) AND real_pred(x)
                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                          (x1)
                      AND valid_path(a)(x1))
                  (l1) =>
                every[list[number]]
                    (LAMBDA (x1: list[number]):
                       every[number]
                           (LAMBDA (x: number):
                                   number_field_pred(x) AND real_pred(x)
                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                           (x1)
                        AND valid_path(expr)(x1))
                    (map[list[nat], list[nat]]
                         (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                          (("1"
                            (case "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                      map[list[nat], list[nat]]
                          (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (hide 3 -5)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma "rdc_rac")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -2 "cdr(x!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2"
                                    (typepred "l1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (inst?)
                                (("3"
                                  (assert)
                                  (("3"
                                    (typepred "l1")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4" (grind) nil nil)) nil))
                            nil)
                           ("2" (replace -6)
                            (("2" (hide-all-but 1)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "every" -2 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (case
                                                 "forall(l1 : list[nat]): every[number]
                         (LAMBDA (x: number):
                                 number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                             AND integer_pred(x) AND x >= 0)
                         (append[nat](l1, (: 0 :)))")
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (measure-induct+
                                                     "length(l1)"
                                                     "l1")
                                                    (("1"
                                                      (expand
                                                       "every"
                                                       1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "append"
                                                               2)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cdr(x!2)")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 2 3))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst -4 "cdr(x!1)")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (hide-all-but
                                                     (2 3))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]"
     PVS0Expr_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC5-4 nil 3648051891
   ("" (skeep)
    (("" (typepred "v(a)")
      ((""
        (case "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l) =>  every[list[number]]
                                      (LAMBDA (x1: list[number]):
                                         every[number]
                                             (LAMBDA (x: number):
                                                     number_field_pred(x) AND real_pred(x)
                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                             (x1)
                                          AND valid_path(expr)(x1))
                                      (map[list[nat], list[nat]]
                                           (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide-all-but 1)
          (("2" (measure-induct+ "length(l)" "l")
            (("1"
              (case "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (l) =>  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (append[nat](l, (: 0 :)))")
              (("1" (expand "map" 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                     ("2" (expand "every" 2 1)
                      (("2" (split)
                        (("1" (expand "every" -3 1)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (inst -1 "car(x!1)")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -4)
                          (("2" (replaces -1)
                            (("2" (expand "valid_path" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (rewrite "rac_append")
                                  (("2"
                                    (rewrite "rdc_append")
                                    (("2"
                                      (split)
                                      (("1"
                                        (hide-all-but 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "rdc" 1)
                                        (("2"
                                          (expand "reverse" 1 2)
                                          (("2"
                                            (expand "reverse" 1 2)
                                            (("2"
                                              (expand "append" 1 2)
                                              (("2"
                                                (expand "reverse" 1)
                                                (("2"
                                                  (rewrite
                                                   "append_null")
                                                  (("2"
                                                    (expand
                                                     "every"
                                                     -3
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (reveal -4)
                          (("3" (replaces -1)
                            (("3" (expand "valid_path" 1)
                              (("3"
                                (expand "every" -3 1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (inst -2 "cdr(x!1)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "valid_path" -2)
                                          (("3"
                                            (hide-all-but (2 3))
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (measure-induct+ "length(l)" "l")
                  (("1" (expand "append" 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but 1) (("1" (grind) nil nil))
                          nil)
                         ("2" (expand "every" 2)
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (inst -1 "cdr(x!2)")
                              (("2"
                                (expand "every" -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide-all-but (2 3))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC5-3 nil 3643733447
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)")
        (("" (typepred "p")
          (("" (replace -5)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (expand "valid_path" -2)
                  (("" (assert)
                    (("" (flatten)
                      (("" (inst -5 "rdc(p)")
                        ((""
                          (case "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
              every(LAMBDA (x: number):
                           number_field_pred(x) AND real_pred(x)
                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                   (x1)
               AND valid_path(a)(x1))
           (l1) =>
         every[list[number]]
             (LAMBDA (x1: list[number]):
                every[number]
                    (LAMBDA (x: number):
                            number_field_pred(x) AND real_pred(x)
                        AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                    (x1)
                 AND valid_path(expr)(x1))
             (map[list[nat], list[nat]]
                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                          (("1"
                            (case "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
             map[list[nat], list[nat]]
                 (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (hide 3 -5)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma "rdc_rac")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -2 "cdr(x!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2"
                                    (typepred "l1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (inst?)
                                (("3"
                                  (assert)
                                  (("3"
                                    (typepred "l1")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4" (grind) nil nil)) nil))
                            nil)
                           ("2" (replace -6)
                            (("2" (hide-all-but 1)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "every" -2 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (case
                                                 "forall(l1 : list[nat]): every[number]
          (LAMBDA (x: number):
                  number_field_pred(x) AND real_pred(x) AND rational_pred(x)
              AND integer_pred(x) AND x >= 0)
          (append[nat](l1, (: 0 :)))")
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (measure-induct+
                                                     "length(l1)"
                                                     "l1")
                                                    (("1"
                                                      (expand
                                                       "every"
                                                       1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "append"
                                                               2)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cdr(x!2)")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 2 3))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst -4 "cdr(x!1)")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (hide-all-but
                                                     (2 3))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]"
     PVS0Expr_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC5-2 nil 3643732536
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)" "p")
        (("" (replace -5)
          (("" (expand "member" 1)
            (("" (flatten)
              (("" (expand "valid_path" -4)
                (("" (assert)
                  (("" (flatten)
                    (("" (inst -2 "rdc(p)")
                      ((""
                        (case " member[(valid_path(expr))](p,
                    map[list[nat], list[nat]]
                        (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(v(a)))")
                        (("1" (propax) nil)
                         ("2" (hide 3)
                          (("2"
                            (case "member[(valid_path(a))](rdc(p), v(a))")
                            (("1" (hide -3)
                              (("1"
                                (case
                                 "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                         every(LAMBDA (x: number):
                                      number_field_pred(x) AND real_pred(x)
                                  AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                              (x1)
                          AND valid_path(a)(x1))
                      (l) => every[list[number]]
                     (LAMBDA (x1: list[number]):
                        every[number]
                            (LAMBDA (x: number):
                                    number_field_pred(x) AND real_pred(x)
                                AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                            (x1)
                         AND (null?(x1) OR (rac(x1) = 0 AND valid_path(a)(rdc(x1)))))
                     (map[list[nat], list[nat]]
                          (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
                                (("1"
                                  (case
                                   "forall(l:list[list[nat]]| every(LAMBDA (x1: list[number]):
                           every(LAMBDA (x: number):
                                        number_field_pred(x) AND real_pred(x)
                                    AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                (x1)
                            AND valid_path(a)(x1))
                        (l)): (member[(valid_path(a))](rdc(p), l) and rac(p) = 0 and not p = null[nat])=>  member[(valid_path(expr))]
                       (p,
                        map[list[nat], list[nat]]
                            (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil)))))
                                   ("2"
                                    (hide-all-but (-1 -7 1))
                                    (("2"
                                      (measure-induct+ "length(l)" "l")
                                      (("1"
                                        (expand "map" 2)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (hide-all-but (-1 -3))
                                              (("1" (grind) nil)))
                                             ("2"
                                              (expand "member" 2)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "member" -2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 -3 1 2 4))
                                                        (("1"
                                                          (case
                                                           "forall(l :list[nat]|not null?(l)): l = append(rdc(l),(: rac(l) :))")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil)))
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand*
                                                                 "rdc"
                                                                 "rac")
                                                                (("2"
                                                                  (case
                                                                   "(: nth(l, length(l) - 1) :) = reverse((: nth(l, length(l) - 1) :))")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (case
                                                                       "reverse(l) = reverse( append(reverse(cdr(reverse(l))),
                                       reverse((: nth(l, length(l) - 1) :))))")
                                                                      (("1"
                                                                        (use
                                                                         "reverse_reverse[nat]")
                                                                        (("1"
                                                                          (replace
                                                                           -2
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "reverse_reverse")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (case
                                                                           "null?(reverse(l))")
                                                                          (("1"
                                                                            (typepred
                                                                             "l")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-2
                                                                                1))
                                                                              (("1"
                                                                                (use
                                                                                 "reverse_reverse[nat]")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1
                                                                                   1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil)))))))))
                                                                           ("2"
                                                                            (rewrite
                                                                             "reverse_append")
                                                                            (("2"
                                                                              (rewrite
                                                                               "reverse_reverse")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "reverse_reverse")
                                                                                (("2"
                                                                                  (case
                                                                                   "nth(l, length(l) - 1) = nth(reverse(l), 0)")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "append")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "append")
                                                                                          (("1"
                                                                                            (decompose-equality)
                                                                                            nil)))))))))
                                                                                   ("2"
                                                                                    (hide
                                                                                     3)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth"
                                                                                       1
                                                                                       2)
                                                                                      (("2"
                                                                                        (generalize
                                                                                         "l"
                                                                                         "l")
                                                                                        (("1"
                                                                                          (measure-induct+
                                                                                           "length(l)"
                                                                                           "l")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nth"
                                                                                             1)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "reverse"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "reverse"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "append "
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil)))
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil)))))))))))))
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (postpone)
                                                                                                      nil)))))))))))
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil)
                                                                                           ("3"
                                                                                            (postpone)
                                                                                            nil)))
                                                                                         ("2"
                                                                                          (postpone)
                                                                                          nil)
                                                                                         ("3"
                                                                                          (postpone)
                                                                                          nil)))))))
                                                                                   ("3"
                                                                                    (postpone)
                                                                                    nil)))))))))))))))))
                                                                   ("2"
                                                                    (postpone)
                                                                    nil)
                                                                   ("3"
                                                                    (postpone)
                                                                    nil)))))))))))))
                                                       ("2"
                                                        (postpone)
                                                        nil)))))))))))))))))
                                       ("2"
                                        (replace -4)
                                        (("2"
                                          (expand "valid_path" 1)
                                          (("2"
                                            (typepred "l!1")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                nil)))))))))
                                       ("3"
                                        (hide-all-but 1)
                                        (("3" (grind) nil)))
                                       ("4"
                                        (typepred "p")
                                        (("4"
                                          (replace -4)
                                          (("4"
                                            (expand "valid_path" -2)
                                            (("4"
                                              (assert)
                                              nil)))))))))))
                                   ("3"
                                    (replace -7)
                                    (("3"
                                      (expand "valid_path" 1)
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (inst?)
                                          (("3" (assert) nil)))))))))
                                   ("4"
                                    (hide-all-but 1)
                                    (("4" (grind) nil)))))
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (measure-induct+ "length(l)" "l")
                                    (("1"
                                      (expand "map" 1)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (hide-all-but 1)
                                            (("1" (grind) nil)))
                                           ("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (split)
                                              (("1"
                                                (expand "every" -2 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       "forall(l:list[nat]): every(LAMBDA (x: number):
                                      number_field_pred(x) AND real_pred(x)
                                  AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                              (l) =>  every[number]
                             (LAMBDA (x: number):
                                     number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                 AND integer_pred(x) AND x >= 0)
                             (append[nat](l, (: 0 :)))")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil)))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (measure-induct+
                                                           "length(l)"
                                                           "l")
                                                          (("1"
                                                            (expand
                                                             "append"
                                                             1)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil)))
                                                                 ("2"
                                                                  (expand
                                                                   "every"
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "every"
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "cdr(x!2)")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                3))
                                                                              (("2"
                                                                                (grind)
                                                                                nil)))))))))))))))))))))
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))))
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (rewrite
                                                   "rac_append")
                                                  (("2"
                                                    (rewrite
                                                     "rdc_append")
                                                    (("2"
                                                      (expand
                                                       "every"
                                                       -2
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil)))
                                                             ("2"
                                                              (expand
                                                               "rdc"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "reverse"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "reverse"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "append_null")
                                                                        nil)))))))))))))))))))))))))
                                               ("3"
                                                (expand "every" -2 1)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (hide-all-but
                                                           (2 3))
                                                          (("3"
                                                            (grind)
                                                            nil)))))))))))))))))))))))
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil)))))))
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil)))))))
                             ("2" (propax) nil)))))
                         ("3" (hide-all-but 1)
                          (("3" (grind) nil))))))))))))))))))))))))
    nil)
   nil nil)
  (valid_paths_TCC5-1 nil 3642412740
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)" "p")
        (("" (replace -5)
          (("" (expand "member" 1)
            (("" (flatten)
              (("" (expand "valid_path" -4)
                (("" (assert)
                  (("" (flatten)
                    (("" (inst -2 "rdc(p)")
                      ((""
                        (case " member[(valid_path(expr))](p,
             map[list[nat], list[nat]]
                 (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(v(a)))")
                        (("1" (propax) nil nil)
                         ("2" (hide 3)
                          (("2"
                            (case "member[(valid_path(a))](rdc(p), v(a))")
                            (("1" (hide -3)
                              (("1"
                                (case
                                 "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
              every(LAMBDA (x: number):
                           number_field_pred(x) AND real_pred(x)
                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                   (x1)
               AND valid_path(a)(x1))
           (l) => every[list[number]]
          (LAMBDA (x1: list[number]):
             every[number]
                 (LAMBDA (x: number):
                         number_field_pred(x) AND real_pred(x)
                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                 (x1)
              AND (null?(x1) OR (rac(x1) = 0 AND valid_path(a)(rdc(x1)))))
          (map[list[nat], list[nat]]
               (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
                                (("1"
                                  (case
                                   "forall(l:list[list[nat]]| every(LAMBDA (x1: list[number]):
              every(LAMBDA (x: number):
                           number_field_pred(x) AND real_pred(x)
                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                   (x1)
               AND valid_path(a)(x1))
           (l)): (member[(valid_path(a))](rdc(p), l) and rac(p) = 0 and not p = null[nat])=>  member[(valid_path(expr))]
          (p,
           map[list[nat], list[nat]]
               (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-1 -7 1))
                                    (("2"
                                      (measure-induct+ "length(l)" "l")
                                      (("1"
                                        (expand "map" 2)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (hide-all-but (-1 -3))
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (expand "member" 2)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "member" -2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 -3 1 2 4))
                                                        (("1"
                                                          (case
                                                           "forall(l :list[nat]|not null?(l)): l = append(rdc(l),(: rac(l) :))")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand*
                                                                 "rdc"
                                                                 "rac")
                                                                (("2"
                                                                  (case
                                                                   "(: nth(l, length(l) - 1) :) = reverse((: nth(l, length(l) - 1) :))")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (case
                                                                       "reverse(l) = reverse( append(reverse(cdr(reverse(l))),
              reverse((: nth(l, length(l) - 1) :))))")
                                                                      (("1"
                                                                        (use
                                                                         "reverse_reverse[nat]")
                                                                        (("1"
                                                                          (replace
                                                                           -2
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "reverse_reverse")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (case
                                                                           "null?(reverse(l))")
                                                                          (("1"
                                                                            (typepred
                                                                             "l")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-2
                                                                                1))
                                                                              (("1"
                                                                                (use
                                                                                 "reverse_reverse[nat]")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1
                                                                                   1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "reverse_append")
                                                                            (("2"
                                                                              (rewrite
                                                                               "reverse_reverse")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "reverse_reverse")
                                                                                (("2"
                                                                                  (case
                                                                                   "nth(l, length(l) - 1) = nth(reverse(l), 0)")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "append")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "append")
                                                                                          (("1"
                                                                                            (decompose-equality)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     3)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth"
                                                                                       1
                                                                                       2)
                                                                                      (("2"
                                                                                        (generalize
                                                                                         "l"
                                                                                         "l")
                                                                                        (("1"
                                                                                          (measure-induct+
                                                                                           "length(l)"
                                                                                           "l")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nth"
                                                                                             1)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "reverse"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "reverse"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "append "
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (postpone)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -4)
                                        (("2"
                                          (expand "valid_path" 1)
                                          (("2"
                                            (typepred "l!1")
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but 1)
                                        (("3" (grind) nil nil))
                                        nil)
                                       ("4"
                                        (typepred "p")
                                        (("4"
                                          (replace -4)
                                          (("4"
                                            (expand "valid_path" -2)
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (replace -7)
                                    (("3"
                                      (expand "valid_path" 1)
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (inst?)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (hide-all-but 1)
                                    (("4" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (measure-induct+ "length(l)" "l")
                                    (("1"
                                      (expand "map" 1)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (hide-all-but 1)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (split)
                                              (("1"
                                                (expand "every" -2 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       "forall(l:list[nat]): every(LAMBDA (x: number):
                   number_field_pred(x) AND real_pred(x)
               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
           (l) =>  every[number]
          (LAMBDA (x: number):
                  number_field_pred(x) AND real_pred(x) AND rational_pred(x)
              AND integer_pred(x) AND x >= 0)
          (append[nat](l, (: 0 :)))")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (measure-induct+
                                                           "length(l)"
                                                           "l")
                                                          (("1"
                                                            (expand
                                                             "append"
                                                             1)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "every"
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "every"
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "cdr(x!2)")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                3))
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (rewrite
                                                   "rac_append")
                                                  (("2"
                                                    (rewrite
                                                     "rdc_append")
                                                    (("2"
                                                      (expand
                                                       "every"
                                                       -2
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "rdc"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "reverse"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "reverse"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "append_null")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "every" -2 1)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (hide-all-but
                                                           (2 3))
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil)
                         ("3" (hide-all-but 1) (("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil))
   nil))
 (valid_paths_TCC6 0
  (valid_paths_TCC6-6 nil 3665517111
   ("" (auto-rewrite "null_path") (("" (assert) nil nil)) nil)
   ((null_path formula-decl nil pvs0_props nil)) nil)
  (valid_paths_TCC6-5 nil 3651339551
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)")
        (("" (typepred "p")
          (("" (replace -5)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (expand "valid_path" -2)
                  (("" (assert)
                    (("" (flatten)
                      (("" (inst -5 "rdc(p)")
                        ((""
                          (case "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                                   every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                        (x1)
                                    AND valid_path(a)(x1))
                                (l1) =>
                              every[list[number]]
                                  (LAMBDA (x1: list[number]):
                                     every[number]
                                         (LAMBDA (x: number):
                                                 number_field_pred(x) AND real_pred(x)
                                             AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                         (x1)
                                      AND valid_path(expr)(x1))
                                  (map[list[nat], list[nat]]
                                       (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                          (("1"
                            (case "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                        map[list[nat], list[nat]]
                                            (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (hide 3 -5)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma "rdc_rac[nat]")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -2 "cdr(x!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2"
                                    (typepred "l1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (inst?)
                                (("3"
                                  (assert)
                                  (("3"
                                    (typepred "l1")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4" (grind) nil nil)) nil))
                            nil)
                           ("2" (replace -6)
                            (("2" (hide-all-but 1)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "every" -2 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (case
                                                 "forall(l1 : list[nat]): every[number]
                                                       (LAMBDA (x: number):
                                                               number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                                           AND integer_pred(x) AND x >= 0)
                                                       (append[nat](l1, (: 0 :)))")
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (measure-induct+
                                                     "length(l1)"
                                                     "l1")
                                                    (("1"
                                                      (expand
                                                       "every"
                                                       1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "append"
                                                               2)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cdr(x!2)")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 2 3))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append[nat]")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append[nat]")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst -4 "cdr(x!1)")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (hide-all-but
                                                     (2 3))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rdc_rac formula-decl nil more_list_props "structures/")
    (rac const-decl "T" more_list_props "structures/")
    (rac_append formula-decl nil more_list_props "structures/")
    (rdc_append formula-decl nil more_list_props "structures/")
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]"
     PVS0Expr_adt nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC6-4 nil 3648052040
   ("" (auto-rewrite "null_path") (("" (assert) nil nil)) nil) nil nil)
  (valid_paths_TCC6-3 nil 3643733623
   ("" (skeep)
    (("" (replace -1)
      (("" (expand "valid_path") (("" (propax) nil nil)) nil)) nil))
    nil)
   nil nil)
  (valid_paths_TCC6-2 nil 3643733558 ("" (termination-tcc) nil nil) nil
   nil)
  (valid_paths_TCC6-1 nil 3642412740 ("" (termination-tcc) nil nil)
   ((PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   shostak))
 (valid_paths_TCC7 0
  (valid_paths_TCC7-3 nil 3665517140
   ("" (skeep)
    (("" (replace -1) (("" (expand "<<") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC7-2 nil 3651339572
   ("" (auto-rewrite "null_path") (("" (assert) nil nil)) nil) nil nil)
  (valid_paths_TCC7-1 nil 3642412740
   ("" (skeep)
    (("" (expand "restrict")
      (("" (replace -1)
        (("" (expand "<<") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   shostak))
 (valid_paths_TCC8 0
  (valid_paths_TCC8-3 nil 3665517153 ("" (tcc) nil nil) (nil) nil)
  (valid_paths_TCC8-2 nil 3651339589
   ("" (skeep)
    (("" (expand "restrict")
      (("" (replace -1)
        (("" (expand "<<") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC8-1 nil 3642412740 ("" (tcc) nil nil)
   ((PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil))
 (valid_paths_TCC9 0
  (valid_paths_TCC9-1 nil 3642412740 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil))
 (valid_paths_TCC10 0
  (valid_paths_TCC10-5 nil 3665517190
   ("" (skeep)
    (("" (typepred "v(a)" "v(b)")
      (("" (replace -5)
        ((""
          (case "forall (l1, l2 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                                                 every(LAMBDA (x: number):
                                                              number_field_pred(x) AND real_pred(x)
                                                          AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                      (x1)
                                                  AND valid_path(a)(x1))
                                              (l1) and every(LAMBDA (x1: list[number]):
                                                 every(LAMBDA (x: number):
                                                              number_field_pred(x) AND real_pred(x)
                                                          AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                      (x1)
                                                  AND valid_path(b)(x1))
                                              (l2)) =>  every[list[number]]
                                             (LAMBDA (x1: list[number]):
                                                every[number]
                                                    (LAMBDA (x: number):
                                                            number_field_pred(x) AND real_pred(x)
                                                        AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                    (x1)
                                                 AND valid_path(op2(op, a, b))(x1))
                                             (append[list[nat]]
                                                  (map[list[nat], list[nat]]
                                                       (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1),
                                                   map[list[nat], list[nat]]
                                                       (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))(l2)))")
          (("1" (inst?) (("1" (assert) nil nil)) nil)
           ("2" (hide-all-but 1)
            (("2"
              (case "forall(l3 : list[nat], n : nat): every(LAMBDA (x: number):
                                                                           number_field_pred(x) AND real_pred(x)
                                                                       AND rational_pred(x) AND integer_pred(x)
                                                                       AND x >= 0)
                                                                   (append[nat](l3, (: n :)))")
              (("1"
                (measure-induct+ "length(l1) + length(l2)" ("l1" "l2"))
                (("1" (expand "append" 1 1)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (expand "map" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (hide-all-but 1)
                              (("1" (grind) nil nil)) nil)
                             ("2" (expand "every" 2 1)
                              (("2"
                                (inst -5 "car(x!2)" "1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "every" -4 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst -2 "null" "cdr(x!2)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "every" -2 1)
                                            (("1"
                                              (expand "map" -2 1)
                                              (("1"
                                                (expand "append" -2 1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand
                                                     "valid_path"
                                                     1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide 2 1)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (rewrite
                                                             "rac_append")
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "rdc_append")
                                                            (("2"
                                                              (expand
                                                               "rdc")
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "reverse"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "reverse"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "append_null")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide-all-but
                                                       (2 3))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "every" 2 1)
                        (("2" (split)
                          (("1" (expand "map" 1 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -4 "car(x!1)" "0")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "map" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "every" -2 1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "valid_path" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide-all-but (-3 1 3))
                                            (("2"
                                              (prop)
                                              (("1"
                                                (rewrite "rac_append")
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (rewrite "rdc_append")
                                                (("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (expand
                                                     "reverse"
                                                     1
                                                     2)
                                                    (("2"
                                                      (expand
                                                       "reverse"
                                                       1
                                                       2)
                                                      (("2"
                                                        (expand
                                                         "append"
                                                         1
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "reverse")
                                                          (("2"
                                                            (rewrite
                                                             "append_null")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "map" 1 1)
                            (("3" (lift-if)
                              (("3"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "cdr(x!1)" "x!2")
                                    (("2"
                                      (expand "every" -2 1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide-all-but (1 4))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                 ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
                 ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil)
                 ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil))
                nil)
               ("2" (hide 2)
                (("2" (measure-induct+ "length(l3)" "l3")
                  (("2" (skeep)
                    (("2" (expand "append" 1)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (hide -1 -2) (("1" (grind) nil nil))
                            nil)
                           ("2" (expand "every" 2)
                            (("2" (inst -1 "cdr(x!1)")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -1)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil)
                                     ("3"
                                      (hide 2)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    (append def-decl "list[T]" list_props nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]"
     PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_null formula-decl nil more_list_props "structures/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (rac_append formula-decl nil more_list_props "structures/")
    (append_null formula-decl nil list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc_append formula-decl nil more_list_props "structures/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) nil
    (rdc const-decl "list[T]" more_list_props "structures/")
    (rac const-decl "T" more_list_props "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil
    (wf_nat formula-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil)
   nil)
  (valid_paths_TCC10-4 nil 3651339623 ("" (tcc) nil nil)
   ((Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC10-3 nil 3648389182
   ("" (skeep)
    (("" (typepred "v(a)" "v(b)")
      (("" (replace -5)
        ((""
          (case "forall (l1, l2 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) and every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(b)(x1))
                         (l2)) =>  every[list[number]]
                        (LAMBDA (x1: list[number]):
                           every[number]
                               (LAMBDA (x: number):
                                       number_field_pred(x) AND real_pred(x)
                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                               (x1)
                            AND valid_path(op2(o, a, b))(x1))
                        (append[list[nat]]
                             (map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1),
                              map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))(l2)))")
          (("1" (inst?) (("1" (assert) nil nil)) nil)
           ("2" (hide-all-but 1)
            (("2"
              (case "forall(l3 : list[nat], n : nat): every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x)
                                            AND x >= 0)
                                        (append[nat](l3, (: n :)))")
              (("1"
                (measure-induct+ "length(l1) + length(l2)" ("l1" "l2"))
                (("1" (expand "append" 1 1)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (expand "map" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (hide-all-but 1)
                              (("1" (grind) nil nil)) nil)
                             ("2" (expand "every" 2 1)
                              (("2"
                                (inst -5 "car(x!2)" "1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "every" -4 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst -2 "null" "cdr(x!2)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "every" -2 1)
                                            (("1"
                                              (expand "map" -2 1)
                                              (("1"
                                                (expand "append" -2 1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand
                                                     "valid_path"
                                                     1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide 2 1)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (rewrite
                                                             "rac_append")
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "rdc_append")
                                                            (("2"
                                                              (expand
                                                               "rdc")
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "reverse"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "reverse"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "append_null")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide-all-but
                                                       (2 3))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "every" 2 1)
                        (("2" (split)
                          (("1" (expand "map" 1 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -4 "car(x!1)" "0")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "map" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "every" -2 1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "valid_path" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide-all-but (-3 1 3))
                                            (("2"
                                              (prop)
                                              (("1"
                                                (rewrite "rac_append")
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (rewrite "rdc_append")
                                                (("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (expand
                                                     "reverse"
                                                     1
                                                     2)
                                                    (("2"
                                                      (expand
                                                       "reverse"
                                                       1
                                                       2)
                                                      (("2"
                                                        (expand
                                                         "append"
                                                         1
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "reverse")
                                                          (("2"
                                                            (rewrite
                                                             "append_null")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "map" 1 1)
                            (("3" (lift-if)
                              (("3"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "cdr(x!1)" "x!2")
                                    (("2"
                                      (expand "every" -2 1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide-all-but (1 4))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                 ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
                 ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil)
                 ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil))
                nil)
               ("2" (hide 2)
                (("2" (measure-induct+ "length(l3)" "l3")
                  (("2" (skeep)
                    (("2" (expand "append" 1)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (hide -1 -2) (("1" (grind) nil nil))
                            nil)
                           ("2" (expand "every" 2)
                            (("2" (inst -1 "cdr(x!1)")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -1)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil)
                                     ("3"
                                      (hide 2)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]"
     PVS0Expr_adt nil)
    (rac_append formula-decl nil more_list_props "structures/")
    (rdc_append formula-decl nil more_list_props "structures/")
    (rdc const-decl "list[T]" more_list_props "structures/")
    (rac const-decl "T" more_list_props "structures/"))
   nil)
  (valid_paths_TCC10-2 nil 3645264052
   ("" (skeep)
    (("" (replace -1)
      (("" (expand "<<")
        (("" (assert)
          (("" (expand "restrict") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC10-1 nil 3642412740
   ("" (skeep)
    (("" (lemma "every_append[list[nat]]")
      (("" (inst?)
        (("1" (inst?)
          (("1" (prop)
            (("1" (assert)
              (("1" (lemma "valid_paths_subexpr")
                (("1" (replace -5 1)
                  (("1" (expand "valid_path" 1)
                    (("1" (expand "every" 1 1)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (expand every 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil)
                                 ("3" (grind) nil nil)
                                 ("4" (grind) nil nil)
                                 ("5" (grind) nil nil)
                                 ("6" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil)
                           ("3" (postpone) nil nil)
                           ("4" (postpone) nil nil)
                           ("5" (postpone) nil nil)
                           ("6" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil))
            nil)
           ("2" (postpone) nil nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   ((PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil))
 (valid_paths_TCC11 0
  (valid_paths_TCC11-7 nil 3665517212
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)" "v(b)" "p")
        (("" (replace -7)
          (("" (expand "valid_path" -6)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (assert)
                  ((""
                    (case "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                                        number_field_pred(x) AND real_pred(x)
                                                    AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                (append[nat](l, (: n :)))")
                    (("1"
                      (case "forall(l1,l2 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                                                         every(LAMBDA (x: number):
                                                                      number_field_pred(x) AND real_pred(x)
                                                                  AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                              (x1)
                                                          AND valid_path(a)(x1))
                                                      (l1) and  every(LAMBDA (x1: list[number]):
                                                         every(LAMBDA (x: number):
                                                                      number_field_pred(x) AND real_pred(x)
                                                                  AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                              (x1)
                                                          AND valid_path(b)(x1))
                                                      (l2)) =>  every(LAMBDA (x1: list[number]):
                                                         every(LAMBDA (x: number):
                                                                      number_field_pred(x) AND real_pred(x)
                                                                  AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                              (x1)
                                                          AND valid_path(expr)(x1))
                                                      ( append[list[nat]]
                                                            (map[list[nat], list[nat]]
                                                                 (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                                 (l1),
                                                             map[list[nat], list[nat]]
                                                                 (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                                 (l2)))")
                      (("1" (prop)
                        (("1"
                          (case "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                                                              append[list[nat]]
                                                                                  (map[list[nat], list[nat]]
                                                                                       (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                                                       (l1),
                                                                                   map[list[nat], list[nat]]
                                                                                       (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                                                       (l2)))")
                          (("1" (inst?)
                            (("1" (inst -7 "rdc(p)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 3)
                            (("2"
                              (measure-induct+ "length(l1)+length(l2)"
                               ("l1" "l2"))
                              (("1"
                                (expand "member" -2)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "map" 2 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "append" 2 1)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide-all-but
                                                 (2 4 -1 -3 -4))
                                                (("1"
                                                  (lemma
                                                   "rdc_rac[nat]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "map" 2 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "append" 2 1)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst
                                                 -2
                                                 "cdr(x!1)"
                                                 "x!2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst?)
                                (("2"
                                  (typepred "y!1" "y!2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (inst? -5)
                                (("4"
                                  (typepred "x!1`1" "x!1`2")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (inst?)
                                (("6"
                                  (typepred "y!1`1" "y!1`2")
                                  (("6" (assert) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil nil))
                                nil)
                               ("8"
                                (inst?)
                                (("8"
                                  (typepred "l1!1" "l2!1")
                                  (("8" (assert) nil nil))
                                  nil))
                                nil)
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2")
                              (("3"
                                (inst? -6)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (propax) nil nil))
                          nil)
                         ("2"
                          (case "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(b))](rdc(p), l2) => member[(valid_path(expr))](p,
                                                                              append[list[nat]]
                                                                                  (map[list[nat], list[nat]]
                                                                                       (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                                                       (l1),
                                                                                   map[list[nat], list[nat]]
                                                                                       (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                                                       (l2)))")
                          (("1" (inst?)
                            (("1" (inst -9 "rdc(p)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 3 -5 -6 -7 -8 -9)
                            (("2"
                              (measure-induct+ "length(l1)+length(l2)"
                               ("l1" "l2"))
                              (("1"
                                (expand "map" 1 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "member" -3)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "member" 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide-all-but
                                                       (1 2 4 -4 -1))
                                                      (("1"
                                                        (lemma
                                                         "rdc_rac[nat]")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "member" 2)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "null"
                                                       "cdr(x!2)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "map"
                                                           -3
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "append"
                                                             -3
                                                             1)
                                                            (("2"
                                                              (hide-all-but
                                                               (1 4))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "member" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst -1 "cdr(x!1)" "x!2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but (1 4))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst?)
                                (("2"
                                  (typepred "y!1" "y!2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (inst? -5)
                                (("4"
                                  (typepred "x!1`1" "x!1`2")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (inst?)
                                (("6"
                                  (typepred "y!1`1" "y!1`2")
                                  (("6" (assert) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil nil))
                                nil)
                               ("8"
                                (inst?)
                                (("8"
                                  (typepred "l1!1" "l2!1")
                                  (("8" (assert) nil nil))
                                  nil))
                                nil)
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2")
                              (("3"
                                (inst? -6)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 -1))
                        (("2"
                          (measure-induct+ "length(l1) +length(l2)"
                           ("l1" "l2"))
                          (("1" (expand "every" -2 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "map" 1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "every" -3 1)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "every" 2 1)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "car(x!2)"
                                                       "1")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (reveal -9)
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (expand
                                                           "valid_path"
                                                           1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide
                                                               1
                                                               2)
                                                              (("2"
                                                                (rewrite
                                                                 "rac_append[nat]")
                                                                (("1"
                                                                  (rewrite
                                                                   "rdc_append[nat]")
                                                                  (("1"
                                                                    (expand
                                                                     "rdc")
                                                                    (("1"
                                                                      (expand
                                                                       "reverse"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "reverse"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "append"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "reverse"
                                                                             1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "append_null")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (inst
                                                       -5
                                                       "null"
                                                       "cdr(x!2)")
                                                      (("3"
                                                        (expand
                                                         "every"
                                                         -5
                                                         1)
                                                        (("3"
                                                          (expand
                                                           "map"
                                                           -5
                                                           1)
                                                          (("3"
                                                            (expand
                                                             "append"
                                                             -5
                                                             1)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (hide-all-but
                                                                 (2 3))
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "map" 2 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "every" 2 1)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -6 "car(x!1)" "0")
                                            nil
                                            nil)
                                           ("2"
                                            (reveal -9)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide 1 3)
                                                    (("2"
                                                      (rewrite
                                                       "rac_append[nat]")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append[nat]")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse"
                                                                   1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst -4 "cdr(x!1)" "x!2")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (hide-all-but (2 3))
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (hide-all-but 1)
                            (("5" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide-all-but 1) (("3" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (measure-induct+ "length(l)" "l")
                        (("2" (skeep)
                          (("2" (expand "append" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide -1 -2)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (expand "every" 2)
                                  (("2"
                                    (inst -1 "cdr(x!1)")
                                    (("1" (grind) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil
    (length_null formula-decl nil more_list_props "structures/")
    (rdc const-decl "list[T]" more_list_props "structures/") nil nil
    nil (well_founded? const-decl "bool" orders nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (rdc_rac formula-decl nil more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (rdc_append formula-decl nil more_list_props "structures/")
    (append_null formula-decl nil list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (rac_append formula-decl nil more_list_props "structures/")
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (rac const-decl "T" more_list_props "structures/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (member def-decl "bool" list_props nil))
   nil)
  (valid_paths_TCC11-6 nil 3651339641
   ("" (skeep)
    (("" (typepred "v(a)" "v(b)")
      (("" (replace -5)
        ((""
          (case "forall (l1, l2 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                                   every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                        (x1)
                                    AND valid_path(a)(x1))
                                (l1) and every(LAMBDA (x1: list[number]):
                                   every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                        (x1)
                                    AND valid_path(b)(x1))
                                (l2)) =>  every[list[number]]
                               (LAMBDA (x1: list[number]):
                                  every[number]
                                      (LAMBDA (x: number):
                                              number_field_pred(x) AND real_pred(x)
                                          AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                      (x1)
                                   AND valid_path(op2(o, a, b))(x1))
                               (append[list[nat]]
                                    (map[list[nat], list[nat]]
                                         (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1),
                                     map[list[nat], list[nat]]
                                         (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))(l2)))")
          (("1" (inst?) (("1" (assert) nil nil)) nil)
           ("2" (hide-all-but 1)
            (("2"
              (case "forall(l3 : list[nat], n : nat): every(LAMBDA (x: number):
                                                         number_field_pred(x) AND real_pred(x)
                                                     AND rational_pred(x) AND integer_pred(x)
                                                     AND x >= 0)
                                                 (append[nat](l3, (: n :)))")
              (("1"
                (measure-induct+ "length(l1) + length(l2)" ("l1" "l2"))
                (("1" (expand "append" 1 1)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (expand "map" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (hide-all-but 1)
                              (("1" (grind) nil nil)) nil)
                             ("2" (expand "every" 2 1)
                              (("2"
                                (inst -5 "car(x!2)" "1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "every" -4 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst -2 "null" "cdr(x!2)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "every" -2 1)
                                            (("1"
                                              (expand "map" -2 1)
                                              (("1"
                                                (expand "append" -2 1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand
                                                     "valid_path"
                                                     1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide 2 1)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (rewrite
                                                             "rac_append")
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "rdc_append")
                                                            (("2"
                                                              (expand
                                                               "rdc")
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "reverse"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "reverse"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "append_null")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide-all-but
                                                       (2 3))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "every" 2 1)
                        (("2" (split)
                          (("1" (expand "map" 1 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -4 "car(x!1)" "0")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "map" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "every" -2 1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "valid_path" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide-all-but (-3 1 3))
                                            (("2"
                                              (prop)
                                              (("1"
                                                (rewrite "rac_append")
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (rewrite "rdc_append")
                                                (("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (expand
                                                     "reverse"
                                                     1
                                                     2)
                                                    (("2"
                                                      (expand
                                                       "reverse"
                                                       1
                                                       2)
                                                      (("2"
                                                        (expand
                                                         "append"
                                                         1
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "reverse")
                                                          (("2"
                                                            (rewrite
                                                             "append_null")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "map" 1 1)
                            (("3" (lift-if)
                              (("3"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "cdr(x!1)" "x!2")
                                    (("2"
                                      (expand "every" -2 1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide-all-but (1 4))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                 ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
                 ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil)
                 ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil))
                nil)
               ("2" (hide 2)
                (("2" (measure-induct+ "length(l3)" "l3")
                  (("2" (skeep)
                    (("2" (expand "append" 1)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (hide -1 -2) (("1" (grind) nil nil))
                            nil)
                           ("2" (expand "every" 2)
                            (("2" (inst -1 "cdr(x!1)")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -1)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil)
                                     ("3"
                                      (hide 2)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]"
     PVS0Expr_adt nil)
    (length_null formula-decl nil more_list_props "structures/")
    (rac_append formula-decl nil more_list_props "structures/")
    (rdc_append formula-decl nil more_list_props "structures/")
    (rdc const-decl "list[T]" more_list_props "structures/")
    (rac const-decl "T" more_list_props "structures/"))
   nil)
  (valid_paths_TCC11-5 nil 3651337558
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)" "v(b)" "p")
        (("" (replace -7)
          (("" (expand "valid_path" -6)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (assert)
                  ((""
                    (case "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                          number_field_pred(x) AND real_pred(x)
                                      AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                  (append[nat](l, (: n :)))")
                    (("1"
                      (case "forall(l1,l2 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                                       every(LAMBDA (x: number):
                                                    number_field_pred(x) AND real_pred(x)
                                                AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                            (x1)
                                        AND valid_path(a)(x1))
                                    (l1) and  every(LAMBDA (x1: list[number]):
                                       every(LAMBDA (x: number):
                                                    number_field_pred(x) AND real_pred(x)
                                                AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                            (x1)
                                        AND valid_path(b)(x1))
                                    (l2)) =>  every(LAMBDA (x1: list[number]):
                                       every(LAMBDA (x: number):
                                                    number_field_pred(x) AND real_pred(x)
                                                AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                            (x1)
                                        AND valid_path(expr)(x1))
                                    ( append[list[nat]]
                                          (map[list[nat], list[nat]]
                                               (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                               (l1),
                                           map[list[nat], list[nat]]
                                               (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                               (l2)))")
                      (("1" (prop)
                        (("1"
                          (case "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                                    append[list[nat]]
                                                        (map[list[nat], list[nat]]
                                                             (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                             (l1),
                                                         map[list[nat], list[nat]]
                                                             (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                             (l2)))")
                          (("1" (inst?)
                            (("1" (inst -7 "rdc(p)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 3)
                            (("2"
                              (measure-induct+ "length(l1)+length(l2)"
                               ("l1" "l2"))
                              (("1"
                                (expand "member" -2)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "map" 2 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "append" 2 1)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide-all-but
                                                 (2 4 -1 -3 -4))
                                                (("1"
                                                  (lemma
                                                   "rdc_rac[nat]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "map" 2 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "append" 2 1)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst
                                                 -2
                                                 "cdr(x!1)"
                                                 "x!2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst?)
                                (("2"
                                  (typepred "y!1" "y!2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (inst? -5)
                                (("4"
                                  (typepred "x!1`1" "x!1`2")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (inst?)
                                (("6"
                                  (typepred "y!1`1" "y!1`2")
                                  (("6" (assert) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil nil))
                                nil)
                               ("8"
                                (inst?)
                                (("8"
                                  (typepred "l1!1" "l2!1")
                                  (("8" (assert) nil nil))
                                  nil))
                                nil)
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2")
                              (("3"
                                (inst? -6)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (propax) nil nil))
                          nil)
                         ("2"
                          (case "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(b))](rdc(p), l2) => member[(valid_path(expr))](p,
                                                    append[list[nat]]
                                                        (map[list[nat], list[nat]]
                                                             (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                             (l1),
                                                         map[list[nat], list[nat]]
                                                             (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                             (l2)))")
                          (("1" (inst?)
                            (("1" (inst -9 "rdc(p)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 3 -5 -6 -7 -8 -9)
                            (("2"
                              (measure-induct+ "length(l1)+length(l2)"
                               ("l1" "l2"))
                              (("1"
                                (expand "map" 1 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "member" -3)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "member" 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide-all-but
                                                       (1 2 4 -4 -1))
                                                      (("1"
                                                        (lemma
                                                         "rdc_rac[nat]")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "member" 2)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "null"
                                                       "cdr(x!2)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "map"
                                                           -3
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "append"
                                                             -3
                                                             1)
                                                            (("2"
                                                              (hide-all-but
                                                               (1 4))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "member" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst -1 "cdr(x!1)" "x!2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but (1 4))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst?)
                                (("2"
                                  (typepred "y!1" "y!2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (inst? -5)
                                (("4"
                                  (typepred "x!1`1" "x!1`2")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (inst?)
                                (("6"
                                  (typepred "y!1`1" "y!1`2")
                                  (("6" (assert) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil nil))
                                nil)
                               ("8"
                                (inst?)
                                (("8"
                                  (typepred "l1!1" "l2!1")
                                  (("8" (assert) nil nil))
                                  nil))
                                nil)
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2")
                              (("3"
                                (inst? -6)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 -1))
                        (("2"
                          (measure-induct+ "length(l1) +length(l2)"
                           ("l1" "l2"))
                          (("1" (expand "every" -2 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "map" 1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "every" -3 1)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "every" 2 1)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "car(x!2)"
                                                       "1")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (reveal -9)
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (expand
                                                           "valid_path"
                                                           1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide
                                                               1
                                                               2)
                                                              (("2"
                                                                (rewrite
                                                                 "rac_append[nat]")
                                                                (("1"
                                                                  (rewrite
                                                                   "rdc_append[nat]")
                                                                  (("1"
                                                                    (expand
                                                                     "rdc")
                                                                    (("1"
                                                                      (expand
                                                                       "reverse"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "reverse"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "append"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "reverse"
                                                                             1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "append_null")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (inst
                                                       -5
                                                       "null"
                                                       "cdr(x!2)")
                                                      (("3"
                                                        (expand
                                                         "every"
                                                         -5
                                                         1)
                                                        (("3"
                                                          (expand
                                                           "map"
                                                           -5
                                                           1)
                                                          (("3"
                                                            (expand
                                                             "append"
                                                             -5
                                                             1)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (hide-all-but
                                                                 (2 3))
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "map" 2 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "every" 2 1)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -6 "car(x!1)" "0")
                                            nil
                                            nil)
                                           ("2"
                                            (reveal -9)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide 1 3)
                                                    (("2"
                                                      (rewrite
                                                       "rac_append[nat]")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append[nat]")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse"
                                                                   1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst -4 "cdr(x!1)" "x!2")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (hide-all-but (2 3))
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (hide-all-but 1)
                            (("5" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide-all-but 1) (("3" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (measure-induct+ "length(l)" "l")
                        (("2" (skeep)
                          (("2" (expand "append" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide -1 -2)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (expand "every" 2)
                                  (("2"
                                    (inst -1 "cdr(x!1)")
                                    (("1" (grind) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (rac const-decl "T" more_list_props "structures/")
    (rac_append formula-decl nil more_list_props "structures/")
    (rdc_append formula-decl nil more_list_props "structures/")
    (rdc_rac formula-decl nil more_list_props "structures/")
    (rdc const-decl "list[T]" more_list_props "structures/"))
   nil)
  (valid_paths_TCC11-4 nil 3648389303
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)" "v(b)" "p")
        (("" (replace -7)
          (("" (expand "valid_path" -6)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (assert)
                  ((""
                    (case "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                   number_field_pred(x) AND real_pred(x)
                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                           (append[nat](l, (: n :)))")
                    (("1"
                      (case "forall(l1,l2 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                              every(LAMBDA (x: number):
                                           number_field_pred(x) AND real_pred(x)
                                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                   (x1)
                               AND valid_path(a)(x1))
                           (l1) and  every(LAMBDA (x1: list[number]):
                              every(LAMBDA (x: number):
                                           number_field_pred(x) AND real_pred(x)
                                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                   (x1)
                               AND valid_path(b)(x1))
                           (l2)) =>  every(LAMBDA (x1: list[number]):
                              every(LAMBDA (x: number):
                                           number_field_pred(x) AND real_pred(x)
                                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                   (x1)
                               AND valid_path(expr)(x1))
                           ( append[list[nat]]
                                 (map[list[nat], list[nat]]
                                      (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                      (l1),
                                  map[list[nat], list[nat]]
                                      (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                      (l2)))")
                      (("1" (prop)
                        (("1"
                          (case "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                       append[list[nat]]
                                           (map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                (l1),
                                            map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                (l2)))")
                          (("1" (inst?)
                            (("1" (inst -7 "rdc(p)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 3)
                            (("2"
                              (measure-induct+ "length(l1)+length(l2)"
                               ("l1" "l2"))
                              (("1"
                                (expand "member" -2)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "map" 2 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "append" 2 1)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide-all-but
                                                 (2 4 -1 -3 -4))
                                                (("1"
                                                  (lemma "rdc_rac")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "map" 2 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "append" 2 1)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst
                                                 -2
                                                 "cdr(x!1)"
                                                 "x!2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst?)
                                (("2"
                                  (typepred "y!1" "y!2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (inst? -5)
                                (("4"
                                  (typepred "x!1`1" "x!1`2")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (inst?)
                                (("6"
                                  (typepred "y!1`1" "y!1`2")
                                  (("6" (assert) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil nil))
                                nil)
                               ("8"
                                (inst?)
                                (("8"
                                  (typepred "l1!1" "l2!1")
                                  (("8" (assert) nil nil))
                                  nil))
                                nil)
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2")
                              (("3"
                                (inst? -6)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (propax) nil nil))
                          nil)
                         ("2"
                          (case "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(b))](rdc(p), l2) => member[(valid_path(expr))](p,
                                       append[list[nat]]
                                           (map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                (l1),
                                            map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                (l2)))")
                          (("1" (inst?)
                            (("1" (inst -9 "rdc(p)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 3 -5 -6 -7 -8 -9)
                            (("2"
                              (measure-induct+ "length(l1)+length(l2)"
                               ("l1" "l2"))
                              (("1"
                                (expand "map" 1 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "member" -3)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "member" 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide-all-but
                                                       (1 2 4 -4 -1))
                                                      (("1"
                                                        (lemma
                                                         "rdc_rac")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "member" 2)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "null"
                                                       "cdr(x!2)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "map"
                                                           -3
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "append"
                                                             -3
                                                             1)
                                                            (("2"
                                                              (hide-all-but
                                                               (1 4))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "member" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst -1 "cdr(x!1)" "x!2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but (1 4))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst?)
                                (("2"
                                  (typepred "y!1" "y!2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (inst? -5)
                                (("4"
                                  (typepred "x!1`1" "x!1`2")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (inst?)
                                (("6"
                                  (typepred "y!1`1" "y!1`2")
                                  (("6" (assert) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil nil))
                                nil)
                               ("8"
                                (inst?)
                                (("8"
                                  (typepred "l1!1" "l2!1")
                                  (("8" (assert) nil nil))
                                  nil))
                                nil)
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2")
                              (("3"
                                (inst? -6)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 -1))
                        (("2"
                          (measure-induct+ "length(l1) +length(l2)"
                           ("l1" "l2"))
                          (("1" (expand "every" -2 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "map" 1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "every" -3 1)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "every" 2 1)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "car(x!2)"
                                                       "1")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (reveal -9)
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (expand
                                                           "valid_path"
                                                           1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide
                                                               1
                                                               2)
                                                              (("2"
                                                                (rewrite
                                                                 "rac_append")
                                                                (("1"
                                                                  (rewrite
                                                                   "rdc_append")
                                                                  (("1"
                                                                    (expand
                                                                     "rdc")
                                                                    (("1"
                                                                      (expand
                                                                       "reverse"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "reverse"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "append"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "reverse"
                                                                             1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "append_null")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (inst
                                                       -5
                                                       "null"
                                                       "cdr(x!2)")
                                                      (("3"
                                                        (expand
                                                         "every"
                                                         -5
                                                         1)
                                                        (("3"
                                                          (expand
                                                           "map"
                                                           -5
                                                           1)
                                                          (("3"
                                                            (expand
                                                             "append"
                                                             -5
                                                             1)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (hide-all-but
                                                                 (2 3))
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "map" 2 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "every" 2 1)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -6 "car(x!1)" "0")
                                            nil
                                            nil)
                                           ("2"
                                            (reveal -9)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide 1 3)
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse"
                                                                   1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst -4 "cdr(x!1)" "x!2")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (hide-all-but (2 3))
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (hide-all-but 1)
                            (("5" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide-all-but 1) (("3" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (measure-induct+ "length(l)" "l")
                        (("2" (skeep)
                          (("2" (expand "append" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide -1 -2)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (expand "every" 2)
                                  (("2"
                                    (inst -1 "cdr(x!1)")
                                    (("1" (grind) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC11-3 nil 3648052387
   ("" (skeep)
    (("" (typepred "v(a)" "v(b)")
      (("" (replace -5)
        ((""
          (case "forall (l1, l2 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) and every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(b)(x1))
                         (l2)) =>  every[list[number]]
                        (LAMBDA (x1: list[number]):
                           every[number]
                               (LAMBDA (x: number):
                                       number_field_pred(x) AND real_pred(x)
                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                               (x1)
                            AND valid_path(op2(o, a, b))(x1))
                        (append[list[nat]]
                             (map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1),
                              map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))(l2)))")
          (("1" (inst?) (("1" (assert) nil nil)) nil)
           ("2" (hide-all-but 1)
            (("2"
              (case "forall(l3 : list[nat], n : nat): every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x)
                                            AND x >= 0)
                                        (append[nat](l3, (: n :)))")
              (("1"
                (measure-induct+ "length(l1) + length(l2)" ("l1" "l2"))
                (("1" (expand "append" 1 1)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (expand "map" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (hide-all-but 1)
                              (("1" (grind) nil nil)) nil)
                             ("2" (expand "every" 2 1)
                              (("2"
                                (inst -5 "car(x!2)" "1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "every" -4 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst -2 "null" "cdr(x!2)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "every" -2 1)
                                            (("1"
                                              (expand "map" -2 1)
                                              (("1"
                                                (expand "append" -2 1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand
                                                     "valid_path"
                                                     1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide 2 1)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (rewrite
                                                             "rac_append")
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "rdc_append")
                                                            (("2"
                                                              (expand
                                                               "rdc")
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "reverse"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "reverse"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "append_null")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide-all-but
                                                       (2 3))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "every" 2 1)
                        (("2" (split)
                          (("1" (expand "map" 1 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -4 "car(x!1)" "0")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "map" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "every" -2 1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "valid_path" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide-all-but (-3 1 3))
                                            (("2"
                                              (prop)
                                              (("1"
                                                (rewrite "rac_append")
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (rewrite "rdc_append")
                                                (("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (expand
                                                     "reverse"
                                                     1
                                                     2)
                                                    (("2"
                                                      (expand
                                                       "reverse"
                                                       1
                                                       2)
                                                      (("2"
                                                        (expand
                                                         "append"
                                                         1
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "reverse")
                                                          (("2"
                                                            (rewrite
                                                             "append_null")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "map" 1 1)
                            (("3" (lift-if)
                              (("3"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "cdr(x!1)" "x!2")
                                    (("2"
                                      (expand "every" -2 1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide-all-but (1 4))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                 ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
                 ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil)
                 ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil))
                nil)
               ("2" (hide 2)
                (("2" (measure-induct+ "length(l3)" "l3")
                  (("2" (skeep)
                    (("2" (expand "append" 1)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (hide -1 -2) (("1" (grind) nil nil))
                            nil)
                           ("2" (expand "every" 2)
                            (("2" (inst -1 "cdr(x!1)")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -1)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil)
                                     ("3"
                                      (hide 2)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((op2 adt-constructor-decl "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]"
     PVS0Expr_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC11-2 nil 3648052315
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)" "v(b)" "p")
        (("" (replace -7)
          (("" (expand "valid_path" -6)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (assert)
                  ((""
                    (case "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                   number_field_pred(x) AND real_pred(x)
                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                           (append[nat](l, (: n :)))")
                    (("1"
                      (case "forall(l1,l2 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                              every(LAMBDA (x: number):
                                           number_field_pred(x) AND real_pred(x)
                                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                   (x1)
                               AND valid_path(a)(x1))
                           (l1) and  every(LAMBDA (x1: list[number]):
                              every(LAMBDA (x: number):
                                           number_field_pred(x) AND real_pred(x)
                                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                   (x1)
                               AND valid_path(b)(x1))
                           (l2)) =>  every(LAMBDA (x1: list[number]):
                              every(LAMBDA (x: number):
                                           number_field_pred(x) AND real_pred(x)
                                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                   (x1)
                               AND valid_path(expr)(x1))
                           ( append[list[nat]]
                                 (map[list[nat], list[nat]]
                                      (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                      (l1),
                                  map[list[nat], list[nat]]
                                      (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                      (l2)))")
                      (("1" (prop)
                        (("1"
                          (case "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                       append[list[nat]]
                                           (map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                (l1),
                                            map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                (l2)))")
                          (("1" (inst?)
                            (("1" (inst -7 "rdc(p)")
                              (("1" (assert) nil)))))
                           ("2" (hide 3)
                            (("2"
                              (measure-induct+ "length(l1)+length(l2)"
                               ("l1" "l2"))
                              (("1"
                                (expand "member" -2)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "map" 2 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "append" 2 1)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide-all-but
                                                 (2 4 -1 -3 -4))
                                                (("1"
                                                  (lemma "rdc_rac")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil)))))))))))))))))
                                     ("2"
                                      (expand "map" 2 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "append" 2 1)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst
                                                 -2
                                                 "cdr(x!1)"
                                                 "x!2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil)))))))))))))))))))))))
                               ("2"
                                (inst?)
                                (("2"
                                  (typepred "y!1" "y!2")
                                  (("2" (assert) nil)))))
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil)))
                               ("4"
                                (inst? -5)
                                (("4"
                                  (typepred "x!1`1" "x!1`2")
                                  (("4" (assert) nil)))))
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil)))
                               ("6"
                                (inst?)
                                (("6"
                                  (typepred "y!1`1" "y!1`2")
                                  (("6" (assert) nil)))))
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil)))
                               ("8"
                                (inst?)
                                (("8"
                                  (typepred "l1!1" "l2!1")
                                  (("8" (assert) nil)))))
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil)))))))
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2")
                              (("3"
                                (inst? -6)
                                (("3" (assert) nil)))))))
                           ("4" (hide-all-but 1) (("4" (grind) nil)))
                           ("5" (propax) nil)))
                         ("2"
                          (case "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(b))](rdc(p), l2) => member[(valid_path(expr))](p,
                                       append[list[nat]]
                                           (map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                (l1),
                                            map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                (l2)))")
                          (("1" (inst?)
                            (("1" (inst -9 "rdc(p)")
                              (("1" (assert) nil)))))
                           ("2" (hide 3 -5 -6 -7 -8 -9)
                            (("2"
                              (measure-induct+ "length(l1)+length(l2)"
                               ("l1" "l2"))
                              (("1"
                                (expand "map" 1 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "member" -3)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "member" 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide-all-but
                                                       (1 2 4 -4 -1))
                                                      (("1"
                                                        (lemma
                                                         "rdc_rac")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil)))))))))))))))
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "member" 2)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "null"
                                                       "cdr(x!2)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "map"
                                                           -3
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "append"
                                                             -3
                                                             1)
                                                            (("2"
                                                              (hide-all-but
                                                               (1 4))
                                                              (("2"
                                                                (grind)
                                                                nil)))))))))))))))))))))))))))
                                     ("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "member" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst -1 "cdr(x!1)" "x!2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but (1 4))
                                                (("2"
                                                  (grind)
                                                  nil)))))))))))))))))))
                               ("2"
                                (inst?)
                                (("2"
                                  (typepred "y!1" "y!2")
                                  (("2" (assert) nil)))))
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil)))
                               ("4"
                                (inst? -5)
                                (("4"
                                  (typepred "x!1`1" "x!1`2")
                                  (("4" (assert) nil)))))
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil)))
                               ("6"
                                (inst?)
                                (("6"
                                  (typepred "y!1`1" "y!1`2")
                                  (("6" (assert) nil)))))
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil)))
                               ("8"
                                (inst?)
                                (("8"
                                  (typepred "l1!1" "l2!1")
                                  (("8" (assert) nil)))))
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil)))))))
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2")
                              (("3"
                                (inst? -6)
                                (("3" (assert) nil)))))))
                           ("4" (hide-all-but 1) (("4" (grind) nil)))
                           ("5" (propax) nil)))))
                       ("2" (hide-all-but (1 -1))
                        (("2"
                          (measure-induct+ "length(l1) +length(l2)"
                           ("l1" "l2"))
                          (("1" (expand "every" -2 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "map" 1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "every" -3 1)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil)))))))
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "every" 2 1)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "car(x!2)"
                                                       "1")
                                                      nil)
                                                     ("2"
                                                      (reveal -9)
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (expand
                                                           "valid_path"
                                                           1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide
                                                               1
                                                               2)
                                                              (("2"
                                                                (rewrite
                                                                 "rac_append")
                                                                (("1"
                                                                  (rewrite
                                                                   "rdc_append")
                                                                  (("1"
                                                                    (expand
                                                                     "rdc")
                                                                    (("1"
                                                                      (expand
                                                                       "reverse"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "reverse"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "append"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "reverse"
                                                                             1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "append_null")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil)))))))))))))))))
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil)))))
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))))))
                                                     ("3"
                                                      (inst
                                                       -5
                                                       "null"
                                                       "cdr(x!2)")
                                                      (("3"
                                                        (expand
                                                         "every"
                                                         -5
                                                         1)
                                                        (("3"
                                                          (expand
                                                           "map"
                                                           -5
                                                           1)
                                                          (("3"
                                                            (expand
                                                             "append"
                                                             -5
                                                             1)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (hide-all-but
                                                                 (2 3))
                                                                (("3"
                                                                  (grind)
                                                                  nil)))))))))))))))))))))))))))))))))
                                 ("2"
                                  (expand "map" 2 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "every" 2 1)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -6 "car(x!1)" "0")
                                            nil)
                                           ("2"
                                            (reveal -9)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide 1 3)
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse"
                                                                   1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil)))))))))))))))))
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil)))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil)))))))))))))))
                                           ("3"
                                            (inst -4 "cdr(x!1)" "x!2")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (hide-all-but (2 3))
                                                (("3"
                                                  (grind)
                                                  nil)))))))))))))))))))))))
                           ("2" (hide-all-but 1) (("2" (grind) nil)))
                           ("3" (hide-all-but 1) (("3" (grind) nil)))
                           ("4" (hide-all-but 1) (("4" (grind) nil)))
                           ("5" (hide-all-but 1)
                            (("5" (grind) nil)))))))
                       ("3" (hide-all-but 1) (("3" (grind) nil)))))
                     ("2" (hide-all-but 1)
                      (("2" (measure-induct+ "length(l)" "l")
                        (("2" (skeep)
                          (("2" (expand "append" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1" (hide -1 -2) (("1" (grind) nil)))
                                 ("2"
                                  (expand "every" 2)
                                  (("2"
                                    (inst -1 "cdr(x!1)")
                                    (("1" (grind) nil)
                                     ("2"
                                      (assert)
                                      nil))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (valid_paths_TCC11-1 nil 3642412740
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)" "v(b)" "p")
        (("" (replace -7)
          (("" (expand "valid_path" -6)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (assert)
                  ((""
                    (case "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                            number_field_pred(x) AND real_pred(x)
                        AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                    (append[nat](l, (: n :)))")
                    (("1"
                      (case "forall(l1,l2 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                     every(LAMBDA (x: number):
                                  number_field_pred(x) AND real_pred(x)
                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                          (x1)
                      AND valid_path(a)(x1))
                  (l1) and  every(LAMBDA (x1: list[number]):
                     every(LAMBDA (x: number):
                                  number_field_pred(x) AND real_pred(x)
                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                          (x1)
                      AND valid_path(b)(x1))
                  (l2)) =>  every(LAMBDA (x1: list[number]):
                     every(LAMBDA (x: number):
                                  number_field_pred(x) AND real_pred(x)
                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                          (x1)
                      AND valid_path(expr)(x1))
                  ( append[list[nat]]
                        (map[list[nat], list[nat]]
                             (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                             (l1),
                         map[list[nat], list[nat]]
                             (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                             (l2)))")
                      (("1" (prop)
                        (("1"
                          (case "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                          append[list[nat]]
                              (map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                   (l1),
                               map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                   (l2)))")
                          (("1" (inst?)
                            (("1" (inst -7 "rdc(p)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 3)
                            (("2"
                              (measure-induct+ "length(l1)+length(l2)"
                               ("l1" "l2"))
                              (("1"
                                (expand "member" -2)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "map" 2 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "append" 2 1)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide-all-but
                                                 (2 4 -1 -3 -4))
                                                (("1"
                                                  (lemma "rdc_rac")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "map" 2 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "append" 2 1)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst
                                                 -2
                                                 "cdr(x!1)"
                                                 "x!2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst?)
                                (("2"
                                  (typepred "y!1" "y!2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (inst? -5)
                                (("4"
                                  (typepred "x!1`1" "x!1`2")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (inst?)
                                (("6"
                                  (typepred "y!1`1" "y!1`2")
                                  (("6" (assert) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil nil))
                                nil)
                               ("8"
                                (inst?)
                                (("8"
                                  (typepred "l1!1" "l2!1")
                                  (("8" (assert) nil nil))
                                  nil))
                                nil)
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2")
                              (("3"
                                (inst? -6)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (propax) nil nil))
                          nil)
                         ("2"
                          (case "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(b))](rdc(p), l2) => member[(valid_path(expr))](p,
                          append[list[nat]]
                              (map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                   (l1),
                               map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                   (l2)))")
                          (("1" (inst?)
                            (("1" (inst -9 "rdc(p)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 3 -5 -6 -7 -8 -9)
                            (("2"
                              (measure-induct+ "length(l1)+length(l2)"
                               ("l1" "l2"))
                              (("1"
                                (expand "map" 1 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "member" -3)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "member" 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide-all-but
                                                       (1 2 4 -4 -1))
                                                      (("1"
                                                        (lemma
                                                         "rdc_rac")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "member" 2)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "null"
                                                       "cdr(x!2)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "map"
                                                           -3
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "append"
                                                             -3
                                                             1)
                                                            (("2"
                                                              (hide-all-but
                                                               (1 4))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "member" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst -1 "cdr(x!1)" "x!2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but (1 4))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst?)
                                (("2"
                                  (typepred "y!1" "y!2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (inst? -5)
                                (("4"
                                  (typepred "x!1`1" "x!1`2")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (inst?)
                                (("6"
                                  (typepred "y!1`1" "y!1`2")
                                  (("6" (assert) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil nil))
                                nil)
                               ("8"
                                (inst?)
                                (("8"
                                  (typepred "l1!1" "l2!1")
                                  (("8" (assert) nil nil))
                                  nil))
                                nil)
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2")
                              (("3"
                                (inst? -6)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 -1))
                        (("2"
                          (measure-induct+ "length(l1) +length(l2)"
                           ("l1" "l2"))
                          (("1" (expand "every" -2 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "map" 1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "every" -3 1)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "every" 2 1)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "car(x!2)"
                                                       "1")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (reveal -9)
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (expand
                                                           "valid_path"
                                                           1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide
                                                               1
                                                               2)
                                                              (("2"
                                                                (rewrite
                                                                 "rac_append")
                                                                (("1"
                                                                  (rewrite
                                                                   "rdc_append")
                                                                  (("1"
                                                                    (expand
                                                                     "rdc")
                                                                    (("1"
                                                                      (expand
                                                                       "reverse"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "reverse"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "append"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "reverse"
                                                                             1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "append_null")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (inst
                                                       -5
                                                       "null"
                                                       "cdr(x!2)")
                                                      (("3"
                                                        (expand
                                                         "every"
                                                         -5
                                                         1)
                                                        (("3"
                                                          (expand
                                                           "map"
                                                           -5
                                                           1)
                                                          (("3"
                                                            (expand
                                                             "append"
                                                             -5
                                                             1)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (hide-all-but
                                                                 (2 3))
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "map" 2 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "every" 2 1)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -6 "car(x!1)" "0")
                                            nil
                                            nil)
                                           ("2"
                                            (reveal -9)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide 1 3)
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse"
                                                                   1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst -4 "cdr(x!1)" "x!2")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (hide-all-but (2 3))
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (hide-all-but 1)
                            (("5" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide-all-but 1) (("3" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (measure-induct+ "length(l)" "l")
                        (("2" (skeep)
                          (("2" (expand "append" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide -1 -2)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (expand "every" 2)
                                  (("2"
                                    (inst -1 "cdr(x!1)")
                                    (("1" (grind) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   shostak))
 (valid_paths_TCC12 0
  (valid_paths_TCC12-6 nil 3665517242
   ("" (auto-rewrite "null_path") (("" (assert) nil nil)) nil)
   ((null_path formula-decl nil pvs0_props nil)) nil)
  (valid_paths_TCC12-5 nil 3651339663
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)" "v(b)" "p")
        (("" (replace -7)
          (("" (expand "valid_path" -6)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (assert)
                  ((""
                    (case "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                                 number_field_pred(x) AND real_pred(x)
                                             AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                         (append[nat](l, (: n :)))")
                    (("1"
                      (case "forall(l1,l2 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                                                every(LAMBDA (x: number):
                                                             number_field_pred(x) AND real_pred(x)
                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                     (x1)
                                                 AND valid_path(a)(x1))
                                             (l1) and  every(LAMBDA (x1: list[number]):
                                                every(LAMBDA (x: number):
                                                             number_field_pred(x) AND real_pred(x)
                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                     (x1)
                                                 AND valid_path(b)(x1))
                                             (l2)) =>  every(LAMBDA (x1: list[number]):
                                                every(LAMBDA (x: number):
                                                             number_field_pred(x) AND real_pred(x)
                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                     (x1)
                                                 AND valid_path(expr)(x1))
                                             ( append[list[nat]]
                                                   (map[list[nat], list[nat]]
                                                        (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                        (l1),
                                                    map[list[nat], list[nat]]
                                                        (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                        (l2)))")
                      (("1" (prop)
                        (("1"
                          (case "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                                                 append[list[nat]]
                                                                     (map[list[nat], list[nat]]
                                                                          (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                                          (l1),
                                                                      map[list[nat], list[nat]]
                                                                          (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                                          (l2)))")
                          (("1" (inst?)
                            (("1" (inst -7 "rdc(p)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 3)
                            (("2"
                              (measure-induct+ "length(l1)+length(l2)"
                               ("l1" "l2"))
                              (("1"
                                (expand "member" -2)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "map" 2 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "append" 2 1)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide-all-but
                                                 (2 4 -1 -3 -4))
                                                (("1"
                                                  (lemma
                                                   "rdc_rac[nat]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "map" 2 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "append" 2 1)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst
                                                 -2
                                                 "cdr(x!1)"
                                                 "x!2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst?)
                                (("2"
                                  (typepred "y!1" "y!2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (inst? -5)
                                (("4"
                                  (typepred "x!1`1" "x!1`2")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (inst?)
                                (("6"
                                  (typepred "y!1`1" "y!1`2")
                                  (("6" (assert) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil nil))
                                nil)
                               ("8"
                                (inst?)
                                (("8"
                                  (typepred "l1!1" "l2!1")
                                  (("8" (assert) nil nil))
                                  nil))
                                nil)
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2")
                              (("3"
                                (inst? -6)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (propax) nil nil))
                          nil)
                         ("2"
                          (case "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(b))](rdc(p), l2) => member[(valid_path(expr))](p,
                                                                 append[list[nat]]
                                                                     (map[list[nat], list[nat]]
                                                                          (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                                          (l1),
                                                                      map[list[nat], list[nat]]
                                                                          (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                                          (l2)))")
                          (("1" (inst?)
                            (("1" (inst -9 "rdc(p)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 3 -5 -6 -7 -8 -9)
                            (("2"
                              (measure-induct+ "length(l1)+length(l2)"
                               ("l1" "l2"))
                              (("1"
                                (expand "map" 1 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "member" -3)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "member" 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide-all-but
                                                       (1 2 4 -4 -1))
                                                      (("1"
                                                        (lemma
                                                         "rdc_rac[nat]")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "member" 2)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "null"
                                                       "cdr(x!2)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "map"
                                                           -3
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "append"
                                                             -3
                                                             1)
                                                            (("2"
                                                              (hide-all-but
                                                               (1 4))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "member" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst -1 "cdr(x!1)" "x!2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but (1 4))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst?)
                                (("2"
                                  (typepred "y!1" "y!2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (inst? -5)
                                (("4"
                                  (typepred "x!1`1" "x!1`2")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (hide-all-but 1)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (inst?)
                                (("6"
                                  (typepred "y!1`1" "y!1`2")
                                  (("6" (assert) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (hide-all-but 1)
                                (("7" (grind) nil nil))
                                nil)
                               ("8"
                                (inst?)
                                (("8"
                                  (typepred "l1!1" "l2!1")
                                  (("8" (assert) nil nil))
                                  nil))
                                nil)
                               ("9"
                                (hide-all-but 1)
                                (("9" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred "l1" "l2")
                              (("3"
                                (inst? -6)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 -1))
                        (("2"
                          (measure-induct+ "length(l1) +length(l2)"
                           ("l1" "l2"))
                          (("1" (expand "every" -2 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "map" 1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "every" -3 1)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "every" 2 1)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -6
                                                       "car(x!2)"
                                                       "1")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (reveal -9)
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (expand
                                                           "valid_path"
                                                           1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide
                                                               1
                                                               2)
                                                              (("2"
                                                                (rewrite
                                                                 "rac_append[nat]")
                                                                (("1"
                                                                  (rewrite
                                                                   "rdc_append[nat]")
                                                                  (("1"
                                                                    (expand
                                                                     "rdc")
                                                                    (("1"
                                                                      (expand
                                                                       "reverse"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "reverse"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "append"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "reverse"
                                                                             1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "append_null")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (inst
                                                       -5
                                                       "null"
                                                       "cdr(x!2)")
                                                      (("3"
                                                        (expand
                                                         "every"
                                                         -5
                                                         1)
                                                        (("3"
                                                          (expand
                                                           "map"
                                                           -5
                                                           1)
                                                          (("3"
                                                            (expand
                                                             "append"
                                                             -5
                                                             1)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (hide-all-but
                                                                 (2 3))
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "map" 2 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "every" 2 1)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -6 "car(x!1)" "0")
                                            nil
                                            nil)
                                           ("2"
                                            (reveal -9)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide 1 3)
                                                    (("2"
                                                      (rewrite
                                                       "rac_append[nat]")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append[nat]")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse"
                                                                   1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst -4 "cdr(x!1)" "x!2")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (hide-all-but (2 3))
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil)
                           ("4" (hide-all-but 1)
                            (("4" (grind) nil nil)) nil)
                           ("5" (hide-all-but 1)
                            (("5" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide-all-but 1) (("3" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (measure-induct+ "length(l)" "l")
                        (("2" (skeep)
                          (("2" (expand "append" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide -1 -2)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (expand "every" 2)
                                  (("2"
                                    (inst -1 "cdr(x!1)")
                                    (("1" (grind) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_null formula-decl nil more_list_props "structures/")
    (rdc const-decl "list[T]" more_list_props "structures/")
    (rdc_rac formula-decl nil more_list_props "structures/")
    (rdc_append formula-decl nil more_list_props "structures/")
    (rac_append formula-decl nil more_list_props "structures/")
    (rac const-decl "T" more_list_props "structures/")
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC12-4 nil 3648052612
   ("" (auto-rewrite "null_path") (("" (assert) nil nil)) nil) nil nil)
  (valid_paths_TCC12-3 nil 3648052564
   ("" (skeep)
    (("" (typepred "v(a)" "v(b)")
      (("" (replace -5)
        ((""
          (case "forall (l1, l2 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) and every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(b)(x1))
                         (l2)) =>  every[list[number]]
                        (LAMBDA (x1: list[number]):
                           every[number]
                               (LAMBDA (x: number):
                                       number_field_pred(x) AND real_pred(x)
                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                               (x1)
                            AND valid_path(op2(o, a, b))(x1))
                        (append[list[nat]]
                             (map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1),
                              map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))(l2)))")
          (("1" (inst?) (("1" (assert) nil)))
           ("2" (hide-all-but 1)
            (("2"
              (case "forall(l3 : list[nat], n : nat): every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x)
                                            AND x >= 0)
                                        (append[nat](l3, (: n :)))")
              (("1"
                (measure-induct+ "length(l1) + length(l2)" ("l1" "l2"))
                (("1" (expand "append" 1 1)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (expand "map" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (hide-all-but 1) (("1" (grind) nil)))
                             ("2" (expand "every" 2 1)
                              (("2"
                                (inst -5 "car(x!2)" "1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "every" -4 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst -2 "null" "cdr(x!2)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "every" -2 1)
                                            (("1"
                                              (expand "map" -2 1)
                                              (("1"
                                                (expand "append" -2 1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand
                                                     "valid_path"
                                                     1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide 2 1)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (rewrite
                                                             "rac_append")
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil)))))
                                                           ("2"
                                                            (rewrite
                                                             "rdc_append")
                                                            (("2"
                                                              (expand
                                                               "rdc")
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "reverse"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "reverse"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "append_null")
                                                                        nil)))))))))))))))))))))
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide-all-but
                                                       (2 3))
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))))))))))))))
                                 ("2" (assert) nil)))))))))))
                       ("2" (expand "every" 2 1)
                        (("2" (split)
                          (("1" (expand "map" 1 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil)))
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -4 "car(x!1)" "0")
                                    nil)))))))))
                           ("2" (expand "map" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil)))
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "every" -2 1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "valid_path" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide-all-but (-3 1 3))
                                            (("2"
                                              (prop)
                                              (("1"
                                                (rewrite "rac_append")
                                                (("1" (grind) nil)))
                                               ("2"
                                                (rewrite "rdc_append")
                                                (("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (expand
                                                     "reverse"
                                                     1
                                                     2)
                                                    (("2"
                                                      (expand
                                                       "reverse"
                                                       1
                                                       2)
                                                      (("2"
                                                        (expand
                                                         "append"
                                                         1
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "reverse")
                                                          (("2"
                                                            (rewrite
                                                             "append_null")
                                                            nil)))))))))))))))))))))))))))))))))
                           ("3" (expand "map" 1 1)
                            (("3" (lift-if)
                              (("3"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil)))
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "cdr(x!1)" "x!2")
                                    (("2"
                                      (expand "every" -2 1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide-all-but (1 4))
                                            (("2"
                                              (grind)
                                              nil)))))))))))))))))))))))))))))
                 ("2" (hide-all-but 1) (("2" (grind) nil)))
                 ("3" (hide-all-but 1) (("3" (grind) nil)))
                 ("4" (hide-all-but 1) (("4" (grind) nil)))
                 ("5" (hide-all-but 1) (("5" (grind) nil)))))
               ("2" (hide 2)
                (("2" (measure-induct+ "length(l3)" "l3")
                  (("2" (skeep)
                    (("2" (expand "append" 1)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (hide -1 -2) (("1" (grind) nil)))
                           ("2" (expand "every" 2)
                            (("2" (inst -1 "cdr(x!1)")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -1)
                                      (("1" (grind) nil)))
                                     ("2" (grind) nil)
                                     ("3"
                                      (hide 2)
                                      (("3" (grind) nil)))))))))
                               ("2" (assert) nil)))))))))))))))))))))
           ("3" (hide-all-but 1) (("3" (grind) nil))))))))))
    nil)
   nil nil)
  (valid_paths_TCC12-2 nil 3648052519
   ("" (skeep)
    (("" (typepred "v(a)" "v(b)")
      (("" (replace -5)
        ((""
          (case "forall (l1, l2 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) and every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(b)(x1))
                         (l2)) =>  every[list[number]]
                        (LAMBDA (x1: list[number]):
                           every[number]
                               (LAMBDA (x: number):
                                       number_field_pred(x) AND real_pred(x)
                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                               (x1)
                            AND valid_path(op2(o, a, b))(x1))
                        (append[list[nat]]
                             (map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1),
                              map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))(l2)))")
          (("1" (inst?) (("1" (assert) nil)))
           ("2" (hide-all-but 1)
            (("2"
              (case "forall(l3 : list[nat], n : nat): every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x)
                                            AND x >= 0)
                                        (append[nat](l3, (: n :)))")
              (("1"
                (measure-induct+ "length(l1) + length(l2)" ("l1" "l2"))
                (("1" (expand "append" 1 1)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (expand "map" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (hide-all-but 1) (("1" (grind) nil)))
                             ("2" (expand "every" 2 1)
                              (("2"
                                (inst -5 "car(x!2)" "1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "every" -4 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst -2 "null" "cdr(x!2)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "every" -2 1)
                                            (("1"
                                              (expand "map" -2 1)
                                              (("1"
                                                (expand "append" -2 1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand
                                                     "valid_path"
                                                     1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide 2 1)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (rewrite
                                                             "rac_append")
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil)))))
                                                           ("2"
                                                            (rewrite
                                                             "rdc_append")
                                                            (("2"
                                                              (expand
                                                               "rdc")
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "reverse"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "append"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "reverse"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "append_null")
                                                                        nil)))))))))))))))))))))
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide-all-but
                                                       (2 3))
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))))))))))))))
                                 ("2" (assert) nil)))))))))))
                       ("2" (expand "every" 2 1)
                        (("2" (split)
                          (("1" (expand "map" 1 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil)))
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -4 "car(x!1)" "0")
                                    nil)))))))))
                           ("2" (expand "map" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil)))
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "every" -2 1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "valid_path" 2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide-all-but (-3 1 3))
                                            (("2"
                                              (prop)
                                              (("1"
                                                (rewrite "rac_append")
                                                (("1" (grind) nil)))
                                               ("2"
                                                (rewrite "rdc_append")
                                                (("2"
                                                  (expand "rdc")
                                                  (("2"
                                                    (expand
                                                     "reverse"
                                                     1
                                                     2)
                                                    (("2"
                                                      (expand
                                                       "reverse"
                                                       1
                                                       2)
                                                      (("2"
                                                        (expand
                                                         "append"
                                                         1
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "reverse")
                                                          (("2"
                                                            (rewrite
                                                             "append_null")
                                                            nil)))))))))))))))))))))))))))))))))
                           ("3" (expand "map" 1 1)
                            (("3" (lift-if)
                              (("3"
                                (prop)
                                (("1"
                                  (hide-all-but (-1 2))
                                  (("1" (grind) nil)))
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "cdr(x!1)" "x!2")
                                    (("2"
                                      (expand "every" -2 1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide-all-but (1 4))
                                            (("2"
                                              (grind)
                                              nil)))))))))))))))))))))))))))))
                 ("2" (hide-all-but 1) (("2" (grind) nil)))
                 ("3" (hide-all-but 1) (("3" (grind) nil)))
                 ("4" (hide-all-but 1) (("4" (grind) nil)))
                 ("5" (hide-all-but 1) (("5" (grind) nil)))))
               ("2" (hide 2)
                (("2" (measure-induct+ "length(l3)" "l3")
                  (("2" (skeep)
                    (("2" (expand "append" 1)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (hide -1 -2) (("1" (grind) nil)))
                           ("2" (expand "every" 2)
                            (("2" (inst -1 "cdr(x!1)")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -1)
                                      (("1" (grind) nil)))
                                     ("2" (grind) nil)
                                     ("3"
                                      (hide 2)
                                      (("3" (grind) nil)))))))))
                               ("2" (assert) nil)))))))))))))))))))))
           ("3" (hide-all-but 1) (("3" (grind) nil))))))))))
    nil)
   nil nil)
  (valid_paths_TCC12-1 nil 3642412740
   ("" (skeep)
    (("" (replace -1)
      (("" (expand "valid_path") (("" (propax) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (valid_paths_TCC13 0
  (valid_paths_TCC13-3 nil 3665517257
   ("" (skeep*)
    (("" (replace -1) (("" (expand* "restrict" "<<") nil nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC13-2 nil 3651339692
   ("" (auto-rewrite "null_path") (("" (assert) nil nil)) nil) nil nil)
  (valid_paths_TCC13-1 nil 3642412740
   ("" (skeep*)
    (("" (replace -1) (("" (expand* "restrict" "<<") nil nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   shostak))
 (valid_paths_TCC14 0
  (valid_paths_TCC14-4 "" 3692720456
   ("" (skeep :preds? t)
    (("" (replace -1 :hide? t)
      (("" (expand "valid_path") (("" (propax) nil nil)) nil)) nil))
    nil)
   nil shostak)
  (valid_paths_TCC14-3 nil 3665517275 ("" (tcc) nil nil)
   ((valid_path def-decl "bool" pvs0_cc nil)) nil)
  (valid_paths_TCC14-2 nil 3651339706
   ("" (skeep*)
    (("" (replace -1) (("" (expand* "restrict" "<<") nil nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC14-1 nil 3642412740 ("" (tcc) nil nil)
   ((PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil))
 (valid_paths_TCC15 0
  (valid_paths_TCC15-5 nil 3665517291
   ("" (skeep)
    (("" (typepred "v(a)")
      ((""
        (case "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                                        every(LAMBDA (x: number):
                                                                     number_field_pred(x) AND real_pred(x)
                                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                             (x1)
                                                         AND valid_path(a)(x1))
                                                     (l) =>  every[list[number]]
                                                    (LAMBDA (x1: list[number]):
                                                       every[number]
                                                           (LAMBDA (x: number):
                                                                   number_field_pred(x) AND real_pred(x)
                                                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                           (x1)
                                                        AND valid_path(expr)(x1))
                                                    (map[list[nat], list[nat]]
                                                         (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide-all-but 1)
          (("2" (measure-induct+ "length(l)" "l")
            (("1"
              (case "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x)
                                                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                                     (l) =>  every(LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x)
                                                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                                     (append[nat](l, (: 0 :)))")
              (("1" (expand "map" 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                     ("2" (expand "every" 2 1)
                      (("2" (split)
                        (("1" (expand "every" -3 1)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (inst -1 "car(x!1)")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -4)
                          (("2" (replaces -1)
                            (("2" (expand "valid_path" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (rewrite "rac_append")
                                  (("2"
                                    (rewrite "rdc_append")
                                    (("2"
                                      (split)
                                      (("1"
                                        (hide-all-but 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "rdc" 1)
                                        (("2"
                                          (expand "reverse" 1 2)
                                          (("2"
                                            (expand "reverse" 1 2)
                                            (("2"
                                              (expand "append" 1 2)
                                              (("2"
                                                (expand "reverse" 1)
                                                (("2"
                                                  (rewrite
                                                   "append_null")
                                                  (("2"
                                                    (expand
                                                     "every"
                                                     -3
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (reveal -4)
                          (("3" (replaces -1)
                            (("3" (expand "valid_path" 1)
                              (("3"
                                (expand "every" -3 1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (inst -2 "cdr(x!1)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "valid_path" -2)
                                          (("3"
                                            (hide-all-but (2 3))
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (measure-induct+ "length(l)" "l")
                  (("1" (expand "append" 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but 1) (("1" (grind) nil nil))
                          nil)
                         ("2" (expand "every" 2)
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (inst -1 "cdr(x!2)")
                              (("2"
                                (expand "every" -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide-all-but (2 3))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rac_append formula-decl nil more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (reverse def-decl "list[T]" list_props nil)
    (append_null formula-decl nil list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (rdc_append formula-decl nil more_list_props "structures/")
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (wf_nat formula-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   nil)
  (valid_paths_TCC15-4 nil 3651339727 ("" (tcc) nil nil) nil nil)
  (valid_paths_TCC15-3 nil 3648391689
   ("" (skeep)
    (("" (typepred "v(a)")
      ((""
        (case "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l) =>  every[list[number]]
                                      (LAMBDA (x1: list[number]):
                                         every[number]
                                             (LAMBDA (x: number):
                                                     number_field_pred(x) AND real_pred(x)
                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                             (x1)
                                          AND valid_path(expr)(x1))
                                      (map[list[nat], list[nat]]
                                           (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide-all-but 1)
          (("2" (measure-induct+ "length(l)" "l")
            (("1"
              (case "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (l) =>  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (append[nat](l, (: 0 :)))")
              (("1" (expand "map" 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                     ("2" (expand "every" 2 1)
                      (("2" (split)
                        (("1" (expand "every" -3 1)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (inst -1 "car(x!1)")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -4)
                          (("2" (replaces -1)
                            (("2" (expand "valid_path" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (rewrite "rac_append")
                                  (("2"
                                    (rewrite "rdc_append")
                                    (("2"
                                      (split)
                                      (("1"
                                        (hide-all-but 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "rdc" 1)
                                        (("2"
                                          (expand "reverse" 1 2)
                                          (("2"
                                            (expand "reverse" 1 2)
                                            (("2"
                                              (expand "append" 1 2)
                                              (("2"
                                                (expand "reverse" 1)
                                                (("2"
                                                  (rewrite
                                                   "append_null")
                                                  (("2"
                                                    (expand
                                                     "every"
                                                     -3
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (reveal -4)
                          (("3" (replaces -1)
                            (("3" (expand "valid_path" 1)
                              (("3"
                                (expand "every" -3 1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (inst -2 "cdr(x!1)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "valid_path" -2)
                                          (("3"
                                            (hide-all-but (2 3))
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (measure-induct+ "length(l)" "l")
                  (("1" (expand "append" 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but 1) (("1" (grind) nil nil))
                          nil)
                         ("2" (expand "every" 2)
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (inst -1 "cdr(x!2)")
                              (("2"
                                (expand "every" -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide-all-but (2 3))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (rac_append formula-decl nil more_list_props "structures/")
    (rac const-decl "T" more_list_props "structures/")
    (rdc const-decl "list[T]" more_list_props "structures/")
    (rdc_append formula-decl nil more_list_props "structures/"))
   nil)
  (valid_paths_TCC15-2 nil 3644074276 ("" (grind) nil nil) nil nil)
  (valid_paths_TCC15-1 nil 3642412740 ("" (termination-tcc) nil nil)
   nil nil))
 (valid_paths_TCC16 0
  (valid_paths_TCC16-7 nil 3665517310
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)")
        (("" (typepred "p")
          (("" (replace -5)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (expand "valid_path" -2)
                  (("" (assert)
                    (("" (flatten)
                      (("" (inst -5 "rdc(p)")
                        ((""
                          (case "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                                                 every(LAMBDA (x: number):
                                                              number_field_pred(x) AND real_pred(x)
                                                          AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                      (x1)
                                                  AND valid_path(a)(x1))
                                              (l1) =>
                                            every[list[number]]
                                                (LAMBDA (x1: list[number]):
                                                   every[number]
                                                       (LAMBDA (x: number):
                                                               number_field_pred(x) AND real_pred(x)
                                                           AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                       (x1)
                                                    AND valid_path(expr)(x1))
                                                (map[list[nat], list[nat]]
                                                     (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                          (("1"
                            (case "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                                          map[list[nat], list[nat]]
                                                              (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (hide 3 -5)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma "rdc_rac[nat]")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -2 "cdr(x!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2"
                                    (typepred "l1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (inst?)
                                (("3"
                                  (assert)
                                  (("3"
                                    (typepred "l1")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4" (grind) nil nil)) nil))
                            nil)
                           ("2" (replace -6)
                            (("2" (hide-all-but 1)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "every" -2 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (case
                                                 "forall(l1 : list[nat]): every[number]
                                                                                     (LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                                                                         AND integer_pred(x) AND x >= 0)
                                                                                     (append[nat](l1, (: 0 :)))")
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (measure-induct+
                                                     "length(l1)"
                                                     "l1")
                                                    (("1"
                                                      (expand
                                                       "every"
                                                       1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "append"
                                                               2)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cdr(x!2)")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 2 3))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append[nat]")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append[nat]")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst -4 "cdr(x!1)")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (hide-all-but
                                                     (2 3))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc_rac formula-decl nil more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (rac const-decl "T" more_list_props "structures/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (rac_append formula-decl nil more_list_props "structures/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (append_null formula-decl nil list_props nil)
    (rdc_append formula-decl nil more_list_props "structures/")
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    nil (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rdc const-decl "list[T]" more_list_props "structures/") nil nil
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (member def-decl "bool" list_props nil))
   nil)
  (valid_paths_TCC16-6 nil 3651339742
   ("" (skeep)
    (("" (typepred "v(a)")
      ((""
        (case "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                                 every(LAMBDA (x: number):
                                                              number_field_pred(x) AND real_pred(x)
                                                          AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                      (x1)
                                                  AND valid_path(a)(x1))
                                              (l) =>  every[list[number]]
                                             (LAMBDA (x1: list[number]):
                                                every[number]
                                                    (LAMBDA (x: number):
                                                            number_field_pred(x) AND real_pred(x)
                                                        AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                    (x1)
                                                 AND valid_path(expr)(x1))
                                             (map[list[nat], list[nat]]
                                                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide-all-but 1)
          (("2" (measure-induct+ "length(l)" "l")
            (("1"
              (case "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                                  number_field_pred(x) AND real_pred(x)
                                                                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                          (l) =>  every(LAMBDA (x: number):
                                                                                  number_field_pred(x) AND real_pred(x)
                                                                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                          (append[nat](l, (: 0 :)))")
              (("1" (expand "map" 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                     ("2" (expand "every" 2 1)
                      (("2" (split)
                        (("1" (expand "every" -3 1)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (inst -1 "car(x!1)")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -4)
                          (("2" (replaces -1)
                            (("2" (expand "valid_path" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (rewrite "rac_append")
                                  (("2"
                                    (rewrite "rdc_append")
                                    (("2"
                                      (split)
                                      (("1"
                                        (hide-all-but 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "rdc" 1)
                                        (("2"
                                          (expand "reverse" 1 2)
                                          (("2"
                                            (expand "reverse" 1 2)
                                            (("2"
                                              (expand "append" 1 2)
                                              (("2"
                                                (expand "reverse" 1)
                                                (("2"
                                                  (rewrite
                                                   "append_null")
                                                  (("2"
                                                    (expand
                                                     "every"
                                                     -3
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (reveal -4)
                          (("3" (replaces -1)
                            (("3" (expand "valid_path" 1)
                              (("3"
                                (expand "every" -3 1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (inst -2 "cdr(x!1)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "valid_path" -2)
                                          (("3"
                                            (hide-all-but (2 3))
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (measure-induct+ "length(l)" "l")
                  (("1" (expand "append" 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but 1) (("1" (grind) nil nil))
                          nil)
                         ("2" (expand "every" 2)
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (inst -1 "cdr(x!2)")
                              (("2"
                                (expand "every" -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide-all-but (2 3))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (rac_append formula-decl nil more_list_props "structures/")
    (rac const-decl "T" more_list_props "structures/")
    (rdc const-decl "list[T]" more_list_props "structures/")
    (rdc_append formula-decl nil more_list_props "structures/"))
   nil)
  (valid_paths_TCC16-5 nil 3651337618
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)")
        (("" (typepred "p")
          (("" (replace -5)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (expand "valid_path" -2)
                  (("" (assert)
                    (("" (flatten)
                      (("" (inst -5 "rdc(p)")
                        ((""
                          (case "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                                   every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                        (x1)
                                    AND valid_path(a)(x1))
                                (l1) =>
                              every[list[number]]
                                  (LAMBDA (x1: list[number]):
                                     every[number]
                                         (LAMBDA (x: number):
                                                 number_field_pred(x) AND real_pred(x)
                                             AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                         (x1)
                                      AND valid_path(expr)(x1))
                                  (map[list[nat], list[nat]]
                                       (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                          (("1"
                            (case "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                        map[list[nat], list[nat]]
                                            (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (hide 3 -5)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma "rdc_rac[nat]")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -2 "cdr(x!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2"
                                    (typepred "l1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (inst?)
                                (("3"
                                  (assert)
                                  (("3"
                                    (typepred "l1")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4" (grind) nil nil)) nil))
                            nil)
                           ("2" (replace -6)
                            (("2" (hide-all-but 1)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "every" -2 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (case
                                                 "forall(l1 : list[nat]): every[number]
                                                       (LAMBDA (x: number):
                                                               number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                                           AND integer_pred(x) AND x >= 0)
                                                       (append[nat](l1, (: 0 :)))")
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (measure-induct+
                                                     "length(l1)"
                                                     "l1")
                                                    (("1"
                                                      (expand
                                                       "every"
                                                       1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "append"
                                                               2)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cdr(x!2)")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 2 3))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append[nat]")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append[nat]")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst -4 "cdr(x!1)")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (hide-all-but
                                                     (2 3))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (rdc_append formula-decl nil more_list_props "structures/")
    (rac_append formula-decl nil more_list_props "structures/")
    (rac const-decl "T" more_list_props "structures/")
    (rdc_rac formula-decl nil more_list_props "structures/"))
   nil)
  (valid_paths_TCC16-4 nil 3648391795
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)")
        (("" (typepred "p")
          (("" (replace -5)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (expand "valid_path" -2)
                  (("" (assert)
                    (("" (flatten)
                      (("" (inst -5 "rdc(p)")
                        ((""
                          (case "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) =>
                       every[list[number]]
                           (LAMBDA (x1: list[number]):
                              every[number]
                                  (LAMBDA (x: number):
                                          number_field_pred(x) AND real_pred(x)
                                      AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                  (x1)
                               AND valid_path(expr)(x1))
                           (map[list[nat], list[nat]]
                                (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                          (("1"
                            (case "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                               map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (hide 3 -5)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma "rdc_rac")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -2 "cdr(x!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2"
                                    (typepred "l1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (inst?)
                                (("3"
                                  (assert)
                                  (("3"
                                    (typepred "l1")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4" (grind) nil nil)) nil))
                            nil)
                           ("2" (replace -6)
                            (("2" (hide-all-but 1)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "every" -2 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (case
                                                 "forall(l1 : list[nat]): every[number]
                                        (LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                            AND integer_pred(x) AND x >= 0)
                                        (append[nat](l1, (: 0 :)))")
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (measure-induct+
                                                     "length(l1)"
                                                     "l1")
                                                    (("1"
                                                      (expand
                                                       "every"
                                                       1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "append"
                                                               2)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cdr(x!2)")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 2 3))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst -4 "cdr(x!1)")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (hide-all-but
                                                     (2 3))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC16-3 nil 3648052790
   ("" (skeep)
    (("" (typepred "v(a)")
      ((""
        (case "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l) =>  every[list[number]]
                                      (LAMBDA (x1: list[number]):
                                         every[number]
                                             (LAMBDA (x: number):
                                                     number_field_pred(x) AND real_pred(x)
                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                             (x1)
                                          AND valid_path(expr)(x1))
                                      (map[list[nat], list[nat]]
                                           (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide-all-but 1)
          (("2" (measure-induct+ "length(l)" "l")
            (("1"
              (case "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (l) =>  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (append[nat](l, (: 0 :)))")
              (("1" (expand "map" 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                     ("2" (expand "every" 2 1)
                      (("2" (split)
                        (("1" (expand "every" -3 1)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (inst -1 "car(x!1)")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -4)
                          (("2" (replaces -1)
                            (("2" (expand "valid_path" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (rewrite "rac_append")
                                  (("2"
                                    (rewrite "rdc_append")
                                    (("2"
                                      (split)
                                      (("1"
                                        (hide-all-but 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "rdc" 1)
                                        (("2"
                                          (expand "reverse" 1 2)
                                          (("2"
                                            (expand "reverse" 1 2)
                                            (("2"
                                              (expand "append" 1 2)
                                              (("2"
                                                (expand "reverse" 1)
                                                (("2"
                                                  (rewrite
                                                   "append_null")
                                                  (("2"
                                                    (expand
                                                     "every"
                                                     -3
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (reveal -4)
                          (("3" (replaces -1)
                            (("3" (expand "valid_path" 1)
                              (("3"
                                (expand "every" -3 1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (inst -2 "cdr(x!1)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "valid_path" -2)
                                          (("3"
                                            (hide-all-but (2 3))
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (measure-induct+ "length(l)" "l")
                  (("1" (expand "append" 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide-all-but 1) (("1" (grind) nil nil))
                          nil)
                         ("2" (expand "every" 2)
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (inst -1 "cdr(x!2)")
                              (("2"
                                (expand "every" -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide-all-but (2 3))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC16-2 nil 3645281850
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)")
        (("" (typepred "p")
          (("" (replace -5)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (expand "valid_path" -2)
                  (("" (assert)
                    (("" (flatten)
                      (("" (inst -5 "rdc(p)")
                        ((""
                          (case "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                     every(LAMBDA (x: number):
                                  number_field_pred(x) AND real_pred(x)
                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                          (x1)
                      AND valid_path(a)(x1))
                  (l1) =>
                every[list[number]]
                    (LAMBDA (x1: list[number]):
                       every[number]
                           (LAMBDA (x: number):
                                   number_field_pred(x) AND real_pred(x)
                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                           (x1)
                        AND valid_path(expr)(x1))
                    (map[list[nat], list[nat]]
                         (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                          (("1"
                            (case "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                      map[list[nat], list[nat]]
                          (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (hide 3 -5)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma "rdc_rac")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -2 "cdr(x!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2"
                                    (typepred "l1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (inst?)
                                (("3"
                                  (assert)
                                  (("3"
                                    (typepred "l1")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4" (grind) nil nil)) nil))
                            nil)
                           ("2" (replace -6)
                            (("2" (hide-all-but 1)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "every" -2 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (case
                                                 "forall(l1 : list[nat]): every[number]
                         (LAMBDA (x: number):
                                 number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                             AND integer_pred(x) AND x >= 0)
                         (append[nat](l1, (: 0 :)))")
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (measure-induct+
                                                     "length(l1)"
                                                     "l1")
                                                    (("1"
                                                      (expand
                                                       "every"
                                                       1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "append"
                                                               2)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cdr(x!2)")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 2 3))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst -4 "cdr(x!1)")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (hide-all-but
                                                     (2 3))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC16-1 nil 3642412740 ("" (termination-tcc) nil nil)
   ((PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   shostak))
 (valid_paths_TCC17 0
  (valid_paths_TCC17-4 nil 3665517327
   ("" (auto-rewrite "null_path") (("" (assert) nil nil)) nil)
   ((null_path formula-decl nil pvs0_props nil)) nil)
  (valid_paths_TCC17-3 nil 3651339765
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(a)")
        (("" (typepred "p")
          (("" (replace -5)
            (("" (expand "member" 1)
              (("" (flatten)
                (("" (expand "valid_path" -2)
                  (("" (assert)
                    (("" (flatten)
                      (("" (inst -5 "rdc(p)")
                        ((""
                          (case "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l1) =>
                                     every[list[number]]
                                         (LAMBDA (x1: list[number]):
                                            every[number]
                                                (LAMBDA (x: number):
                                                        number_field_pred(x) AND real_pred(x)
                                                    AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                (x1)
                                             AND valid_path(expr)(x1))
                                         (map[list[nat], list[nat]]
                                              (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                          (("1"
                            (case "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                                 map[list[nat], list[nat]]
                                                     (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))")
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (hide 3 -5)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "member" -2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma "rdc_rac[nat]")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" 2)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -2 "cdr(x!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2"
                                    (typepred "l1!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (inst?)
                                (("3"
                                  (assert)
                                  (("3"
                                    (typepred "l1")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4" (grind) nil nil)) nil))
                            nil)
                           ("2" (replace -6)
                            (("2" (hide-all-but 1)
                              (("2"
                                (measure-induct+ "length(l1)" "l1")
                                (("1"
                                  (expand "every" -2 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "map" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "every" 2 1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (case
                                                 "forall(l1 : list[nat]): every[number]
                                                                      (LAMBDA (x: number):
                                                                              number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                                                          AND integer_pred(x) AND x >= 0)
                                                                      (append[nat](l1, (: 0 :)))")
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (measure-induct+
                                                     "length(l1)"
                                                     "l1")
                                                    (("1"
                                                      (expand
                                                       "every"
                                                       1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "append"
                                                               2)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       2)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cdr(x!2)")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 2 3))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append[nat]")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append[nat]")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst -4 "cdr(x!1)")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (hide-all-but
                                                     (2 3))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rdc_rac formula-decl nil more_list_props "structures/")
    (rac const-decl "T" more_list_props "structures/")
    (rac_append formula-decl nil more_list_props "structures/")
    (rdc_append formula-decl nil more_list_props "structures/")
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC17-2 nil 3648052910
   ("" (auto-rewrite "null_path") (("" (assert) nil nil)) nil) nil nil)
  (valid_paths_TCC17-1 nil 3642412740
   ("" (skeep)
    (("" (replace -1)
      (("" (expand "valid_path") (("" (propax) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (valid_paths_TCC18 0
  (valid_paths_TCC18-3 nil 3665517345
   ("" (skeep)
    (("" (replace -1) (("" (expand* "restrict" "<<") nil nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC18-2 nil 3651339784
   ("" (auto-rewrite "null_path") (("" (assert) nil nil)) nil) nil nil)
  (valid_paths_TCC18-1 nil 3642412740
   ("" (skeep)
    (("" (replace -1) (("" (expand* "restrict" "<<") nil nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   shostak))
 (valid_paths_TCC19 0
  (valid_paths_TCC19-3 nil 3665517362 ("" (tcc) nil nil) (nil) nil)
  (valid_paths_TCC19-2 nil 3651339800
   ("" (skeep)
    (("" (replace -1) (("" (expand* "restrict" "<<") nil nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC19-1 nil 3642412740 ("" (tcc) nil nil)
   ((PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil))
 (valid_paths_TCC20 0
  (valid_paths_TCC20-1 nil 3642412740 ("" (tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil))
 (valid_paths_TCC21 0
  (valid_paths_TCC21-1 nil 3642412740 ("" (tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil))
 (valid_paths_TCC22 0
  (valid_paths_TCC22-5 nil 3665517385
   ("" (skeep)
    (("" (typepred "v(a)" "v(b)" "v(c)")
      ((""
        (case "forall(l1,l2,l3 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l1) and  every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(b)(x1))
                                       (l2) and every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(c)(x1))
                                       (l3)) =>  every[list[number]]
                                      (LAMBDA (x1: list[number]):
                                         every[number]
                                             (LAMBDA (x: number):
                                                     number_field_pred(x) AND real_pred(x)
                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                             (x1)
                                          AND valid_path(expr)(x1))
                                      (append[list[nat]]
                                           (append[list[nat]]
                                                (map[list[nat], list[nat]]
                                                     (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                     (l1),
                                                 map[list[nat], list[nat]]
                                                     (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                     (l2)),
                                            map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 2 :)))(l3)))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide-all-but 1)
          (("2"
            (case "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                                                   number_field_pred(x) AND real_pred(x)
                                                               AND rational_pred(x) AND integer_pred(x)
                                                               AND x >= 0)
                                                           (append[nat](l, (: n :)))")
            (("1"
              (measure-induct+ "length(l1)+length(l2)+length(l3)"
               ("l1" "l2" "l3"))
              (("1" (expand "every" -2 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (expand "map" 1 1)
                      (("1" (assert)
                        (("1" (expand "append" 1 2)
                          (("1" (expand "every" -3 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "map" 1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "every" -4 1)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "every" 2 1)
                                                  (("2"
                                                    (reveal -9)
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (split 2)
                                                        (("1"
                                                          (inst
                                                           -7
                                                           "car(x!3)"
                                                           "2")
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-2 1 2))
                                                          (("2"
                                                            (expand
                                                             "valid_path"
                                                             1)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 1
                                                                 2
                                                                 3)
                                                                (("2"
                                                                  (rewrite
                                                                   "rac_append")
                                                                  (("1"
                                                                    (rewrite
                                                                     "rdc_append")
                                                                    (("1"
                                                                      (expand
                                                                       "rdc")
                                                                      (("1"
                                                                        (expand
                                                                         "reverse"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "reverse"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "append"
                                                                             1
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "reverse")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "append_null")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (inst
                                                           -6
                                                           "null"
                                                           "null"
                                                           "cdr(x!3)")
                                                          (("3"
                                                            (expand
                                                             "every"
                                                             -6
                                                             (1 3))
                                                            (("3"
                                                              (expand
                                                               "map"
                                                               -6
                                                               (1 2))
                                                              (("3"
                                                                (expand
                                                                 "append"
                                                                 -6
                                                                 2)
                                                                (("3"
                                                                  (expand
                                                                   "append"
                                                                   -6
                                                                   1)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (hide-all-but
                                                                       (2
                                                                        3))
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "map" 2 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "every" 2 1)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -7 "car(x!2)" 1)
                                            nil
                                            nil)
                                           ("2"
                                            (reveal -9)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 3 5))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (reveal -9)
                                            (("3"
                                              (replaces -1)
                                              (("3"
                                                (inst
                                                 -5
                                                 "null"
                                                 "cdr(x!2)"
                                                 "x!3")
                                                (("3"
                                                  (expand "every" -5 1)
                                                  (("3"
                                                    (expand "map" -5 1)
                                                    (("3"
                                                      (expand
                                                       "append"
                                                       -5
                                                       2)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (hide-all-but
                                                           (2 3))
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (reveal -9)
                      (("2" (replaces -1)
                        (("2" (expand "map" 2 1)
                          (("2" (assert)
                            (("2" (expand "append" 2 2)
                              (("2"
                                (expand "append" 2 1)
                                (("2"
                                  (expand "every" 2 1)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -7 "car(x!1)" "0")
                                      nil
                                      nil)
                                     ("2"
                                      (hide-all-but (-2 1 2))
                                      (("2"
                                        (expand "valid_path" 1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide 1 3 4)
                                            (("2"
                                              (rewrite "rac_append")
                                              (("1"
                                                (rewrite "rdc_append")
                                                (("1"
                                                  (expand "rdc")
                                                  (("1"
                                                    (expand
                                                     "reverse"
                                                     1
                                                     2)
                                                    (("1"
                                                      (expand
                                                       "reverse"
                                                       1
                                                       2)
                                                      (("1"
                                                        (expand
                                                         "append"
                                                         1
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "reverse")
                                                          (("1"
                                                            (rewrite
                                                             "append_null")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (inst -4 "cdr(x!1)" "x!2" "x!3")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide-all-but (2 3))
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
               ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil)
               ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (measure-induct+ "length(l)" "l")
                (("2" (skeep)
                  (("2" (expand "append" 1)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (hide -) (("1" (grind) nil nil)) nil)
                         ("2" (expand "every" 2)
                          (("2" (inst -1 "cdr(x!1)")
                            (("1" (inst?)
                              (("1"
                                (expand "length" -1 2)
                                (("1"
                                  (assert)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (well_founded? const-decl "bool" orders nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil) nil nil nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length_null formula-decl nil more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rac_append formula-decl nil more_list_props "structures/")
    (rdc const-decl "list[T]" more_list_props "structures/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rac const-decl "T" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (append_null formula-decl nil list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc_append formula-decl nil more_list_props "structures/")
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil) nil
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   nil)
  (valid_paths_TCC22-4 nil 3651339840 ("" (tcc) nil nil)
   ((Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC22-3 nil 3648391998
   ("" (skeep)
    (("" (typepred "v(a)" "v(b)" "v(c)")
      ((""
        (case "forall(l1,l2,l3 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) and  every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(b)(x1))
                         (l2) and every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(c)(x1))
                         (l3)) =>  every[list[number]]
                        (LAMBDA (x1: list[number]):
                           every[number]
                               (LAMBDA (x: number):
                                       number_field_pred(x) AND real_pred(x)
                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                               (x1)
                            AND valid_path(expr)(x1))
                        (append[list[nat]]
                             (append[list[nat]]
                                  (map[list[nat], list[nat]]
                                       (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                       (l1),
                                   map[list[nat], list[nat]]
                                       (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                       (l2)),
                              map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 2 :)))(l3)))")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide-all-but 1)
          (("2"
            (case "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                                 number_field_pred(x) AND real_pred(x)
                                             AND rational_pred(x) AND integer_pred(x)
                                             AND x >= 0)
                                         (append[nat](l, (: n :)))")
            (("1"
              (measure-induct+ "length(l1)+length(l2)+length(l3)"
               ("l1" "l2" "l3"))
              (("1" (expand "every" -2 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (expand "map" 1 1)
                      (("1" (assert)
                        (("1" (expand "append" 1 2)
                          (("1" (expand "every" -3 1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "map" 1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (expand "every" -4 1)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand "map" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "map" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "every" 2 1)
                                                  (("2"
                                                    (reveal -9)
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (split 2)
                                                        (("1"
                                                          (inst
                                                           -7
                                                           "car(x!3)"
                                                           "2")
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-2 1 2))
                                                          (("2"
                                                            (expand
                                                             "valid_path"
                                                             1)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 1
                                                                 2
                                                                 3)
                                                                (("2"
                                                                  (rewrite
                                                                   "rac_append")
                                                                  (("1"
                                                                    (rewrite
                                                                     "rdc_append")
                                                                    (("1"
                                                                      (expand
                                                                       "rdc")
                                                                      (("1"
                                                                        (expand
                                                                         "reverse"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "reverse"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "append"
                                                                             1
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "reverse")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "append_null")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (inst
                                                           -6
                                                           "null"
                                                           "null"
                                                           "cdr(x!3)")
                                                          (("3"
                                                            (expand
                                                             "every"
                                                             -6
                                                             (1 3))
                                                            (("3"
                                                              (expand
                                                               "map"
                                                               -6
                                                               (1 2))
                                                              (("3"
                                                                (expand
                                                                 "append"
                                                                 -6
                                                                 2)
                                                                (("3"
                                                                  (expand
                                                                   "append"
                                                                   -6
                                                                   1)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (hide-all-but
                                                                       (2
                                                                        3))
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "map" 2 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "append" 2 1)
                                      (("2"
                                        (expand "every" 2 1)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -7 "car(x!2)" 1)
                                            nil
                                            nil)
                                           ("2"
                                            (reveal -9)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "valid_path" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide-all-but
                                                     (-2 3 5))
                                                    (("2"
                                                      (rewrite
                                                       "rac_append")
                                                      (("1"
                                                        (rewrite
                                                         "rdc_append")
                                                        (("1"
                                                          (expand
                                                           "rdc")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "reverse"
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (reveal -9)
                                            (("3"
                                              (replaces -1)
                                              (("3"
                                                (inst
                                                 -5
                                                 "null"
                                                 "cdr(x!2)"
                                                 "x!3")
                                                (("3"
                                                  (expand "every" -5 1)
                                                  (("3"
                                                    (expand "map" -5 1)
                                                    (("3"
                                                      (expand
                                                       "append"
                                                       -5
                                                       2)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (hide-all-but
                                                           (2 3))
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (reveal -9)
                      (("2" (replaces -1)
                        (("2" (expand "map" 2 1)
                          (("2" (assert)
                            (("2" (expand "append" 2 2)
                              (("2"
                                (expand "append" 2 1)
                                (("2"
                                  (expand "every" 2 1)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -7 "car(x!1)" "0")
                                      nil
                                      nil)
                                     ("2"
                                      (hide-all-but (-2 1 2))
                                      (("2"
                                        (expand "valid_path" 1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide 1 3 4)
                                            (("2"
                                              (rewrite "rac_append")
                                              (("1"
                                                (rewrite "rdc_append")
                                                (("1"
                                                  (expand "rdc")
                                                  (("1"
                                                    (expand
                                                     "reverse"
                                                     1
                                                     2)
                                                    (("1"
                                                      (expand
                                                       "reverse"
                                                       1
                                                       2)
                                                      (("1"
                                                        (expand
                                                         "append"
                                                         1
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "reverse")
                                                          (("1"
                                                            (rewrite
                                                             "append_null")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (inst -4 "cdr(x!1)" "x!2" "x!3")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide-all-but (2 3))
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
               ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil)
               ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (measure-induct+ "length(l)" "l")
                (("2" (skeep)
                  (("2" (expand "append" 1)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (hide -) (("1" (grind) nil nil)) nil)
                         ("2" (expand "every" 2)
                          (("2" (inst -1 "cdr(x!1)")
                            (("1" (inst?)
                              (("1"
                                (expand "length" -1 2)
                                (("1"
                                  (assert)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (rac_append formula-decl nil more_list_props "structures/")
    (rdc const-decl "list[T]" more_list_props "structures/")
    (rac const-decl "T" more_list_props "structures/")
    (rdc_append formula-decl nil more_list_props "structures/"))
   nil)
  (valid_paths_TCC22-2 nil 3645267582
   ("" (skeep)
    (("" (replace -1)
      (("" (expand "<<")
        (("" (expand "restrict") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil)
  (valid_paths_TCC22-1 nil 3642412740 ("" (tcc))
   ((PVS0Expr type-decl nil PVS0Expr_adt nil)
    (cnst? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt
     nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op2? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[PVS0Expr])" PVS0Expr_adt
     nil))
   nil))
 (subset_member_sl 0
  (subset_member_sl-1 nil 3647694155
   ("" (measure-induct+ "length(l1)+length(l2)" (l1 l2))
    (("" (prop)
      (("1" (skeep)
        (("1" (expand "subset_sl?" -1)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (hide -3 1) (("1" (grind) nil nil)) nil)
               ("2" (expand "member" -3)
                (("2" (assert)
                  (("2" (inst -4 "cdr(x!1)" "x!2")
                    (("2" (assert)
                      (("2" (expand "length" -4 3)
                        (("2" (inst -4 "e") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "subset_sl?" 1)
        (("2" (lift-if)
          (("2" (prop)
            (("1" (inst -1 "car(x!1)")
              (("1" (assert)
                (("1" (expand "member" 3) (("1" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (inst -2 "cdr(x!1)" "x!2")
              (("2" (expand "length" -2 3)
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (expand "member" 3)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_sl_is_preorder name-judgement "(preorder?[list[T]])"
     set_as_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (subset_sl? def-decl
     "{b: bool | b IFF (forall x: member(x, l1) => member(x, l2))}"
     set_as_list "structures/")
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (list type-decl nil list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (suffix_subset_sl 0
  (suffix_subset_sl-1 nil 3649423687
   ("" (skeep)
    (("" (rewrite "suffix_supl")
      (("" (rewrite "subset_member_sl")
        (("" (skeep -1)
          (("" (replaces -1 :dir rl)
            (("" (skeep) (("" (rewrite "member_append_r") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((suffix_supl formula-decl nil more_list_props "structures/")
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (member_append_r formula-decl nil more_list_props "structures/")
    (subset_member_sl formula-decl nil pvs0_props nil))
   shostak))
 (path_conditions_cons_TCC1 0
  (path_conditions_cons_TCC1-1 nil 3642331537
   ("" (skeep)
    (("" (typepred "path")
      (("" (lemma "valid_paths_subexpr")
        (("" (inst -1 "body" "path")
          (("" (beta)
            (("" (inst -1 "(: n :)")
              (("1" (expand "append")
                (("1" (expand "append") (("1" (propax) nil nil)) nil))
                nil)
               ("2" (hide-all-but (-3 -4 -5 -6 1))
                (("2" (replace -4 :dir rl)
                  (("2" (expand "valid_path")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (expand "rdc")
                          (("2" (expand "reverse" 1 2)
                            (("2" (expand "reverse" 2 2)
                              (("2"
                                (expand "reverse" 3 2)
                                (("2"
                                  (expand "reverse" 1 2)
                                  (("2"
                                    (expand "reverse" 2 2)
                                    (("2"
                                      (expand "reverse" 3 2)
                                      (("2"
                                        (expand "append" 1)
                                        (("2"
                                          (expand "append" 2)
                                          (("2"
                                            (expand "append" 3)
                                            (("2"
                                              (expand "reverse")
                                              (("2"
                                                (expand "rac")
                                                (("2"
                                                  (expand "length")
                                                  (("2"
                                                    (expand "length")
                                                    (("2"
                                                      (expand "nth")
                                                      (("2"
                                                        (expand
                                                         "valid_path"
                                                         1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (expand
                                                             "valid_path"
                                                             2)
                                                            (("1"
                                                              (split 2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "valid_path")
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((valid_path def-decl "bool" pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil) nil nil
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (append def-decl "list[T]" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (valid_paths_subexpr formula-decl nil pvs0_props nil))
   shostak))
 (path_conditions_cons_TCC2 0
  (path_conditions_cons_TCC2-1 nil 3647855252
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (path_conditions_cons 0
  (path_conditions_cons-1 nil 3647794078
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (beta)
          (("" (prop)
            (("" (expand "path_conditions" 1 1)
              (("" (assert)
                (("" (lift-if)
                  (("" (prop)
                    (("1" (expand "append")
                      (("1" (expand "append")
                        (("1" (expand "path_conds_aux")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "append")
                      (("2" (expand "append")
                        (("2" (expand "path_conds_aux")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((path_conditions def-decl "Conditions" pvs0_cc nil)
    (append def-decl "list[T]" list_props nil)
    (path_conds_aux const-decl "PVS0Bool" pvs0_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (path_conditions_unmodified_TCC1 0
  (path_conditions_unmodified_TCC1-1 nil 3648297002
   ("" (skeep)
    (("" (replaces -1)
      (("" (lemma "valid_0_path_ext")
        (("" (inst?)
          (("" (assert)
            (("" (assert)
              (("" (flatten)
                (("" (typepred "expr")
                  (("" (replace -2) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil pvs0_props nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (valid_0_path_ext formula-decl nil pvs0_props nil))
   nil))
 (path_conditions_unmodified 0
  (path_conditions_unmodified-1 nil 3648297205
   ("" (skeep*)
    (("" (beta)
      (("" (prop)
        (("" (expand "path_conditions" 3 1)
          (("" (assert)
            (("" (expand "append") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((path_conditions def-decl "Conditions" pvs0_cc nil)
    (append def-decl "list[T]" list_props nil))
   shostak))
 (path_conditions_unmodified2_TCC1 0
  (path_conditions_unmodified2_TCC1-1 nil 3648476299
   ("" (skeep*)
    (("" (typepred "path")
      (("" (lemma "valid_1_path_ext")
        (("" (inst?)
          (("" (assert)
            (("" (replaces -6 :dir rl) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((valid_path def-decl "bool" pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (valid_1_path_ext formula-decl nil pvs0_props nil))
   nil))
 (path_conditions_unmodified2 0
  (path_conditions_unmodified2-1 nil 3648476342
   ("" (skeep*)
    (("" (beta)
      (("" (prop)
        (("" (expand "path_conditions" 1 1)
          (("" (assert)
            (("" (expand "append") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((path_conditions def-decl "Conditions" pvs0_cc nil)
    (append def-decl "list[T]" list_props nil))
   nil))
 (suffix_path_cnds_suffix 0
  (suffix_path_cnds_suffix-1 nil 3649079052
   ("" (skeep*)
    (("" (rewrite "suffix_supl" 1)
      (("" (rewrite "suffix_supl")
        (("" (generalize-skolem-constants)
          ((""
            (measure-induct+ "length(path_1)+length(path_ext_1)"
             ("expr_1" "path_1" "path_ext_1"))
            (("" (skeep -2)
              (("" (replace -2 1 :dir rl)
                (("" (expand "append" -2)
                  (("" (lift-if)
                    (("" (prop)
                      (("1" (expand "append" 1 2)
                        (("1" (assert)
                          (("1" (inst 1 "null")
                            (("1" (expand "append" 1)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "append" 2 2)
                        (("2" (assert)
                          (("2" (expand "path_conditions" 2 2)
                            (("2"
                              (case "NOT ite?(subterm_at(x!1, append(cdr(L), x!2))) OR
                    car(L) = 0")
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "append" 2 2)
                                  (("1"
                                    (inst
                                     -3
                                     "x!1"
                                     "x!2"
                                     "append(cdr(L),x!2)")
                                    (("1"
                                      (replace -2 :dir rl)
                                      (("1"
                                        (split -3)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (inst 1 "cdr(L)")
                                          nil
                                          nil)
                                         ("3"
                                          (expand "length" 1 4)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "x!3")
                                      (("2"
                                        (replace -4 :dir rl)
                                        (("2"
                                          (lemma
                                           "path_conditions_TCC1")
                                          (("2"
                                            (inst
                                             -1
                                             "x!1"
                                             "cons(car(L), append(cdr(L), x!2))"
                                             "car(L)"
                                             "append(cdr(L), x!2)")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (name-replace
                                     "head"
                                     "IF car(L) = 1
                  THEN (: pvs0bool(get_cond(subterm_at
                                           (x!1, append(cdr(L), x!2)))) :)
                ELSE (: pvs0not(get_cond(subterm_at
                                        (x!1, append(cdr(L), x!2)))) :)
                ENDIF")
                                    (("2"
                                      (inst
                                       -3
                                       "x!1"
                                       "x!2"
                                       "append(cdr(L),x!2)")
                                      (("2"
                                        (split)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1"
                                              (inst
                                               3
                                               "append(head,L_1)")
                                              (("1"
                                                (rewrite
                                                 "append_assoc")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (inst?) nil nil)
                                         ("3"
                                          (replace -2 :dir rl)
                                          (("3"
                                            (hide-all-but (1 3))
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (typepred "x!3")
                                (("3"
                                  (replace -3 :dir rl)
                                  (("3"
                                    (lemma "path_conditions_TCC1")
                                    (("3"
                                      (inst
                                       -1
                                       "x!1"
                                       "cons(car(L), append(cdr(L), x!2))"
                                       "car(L)"
                                       "append(cdr(L), x!2)")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((suffix_supl formula-decl nil more_list_props "structures/")
    (list type-decl nil list_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (path_conditions_TCC1 subtype-tcc nil pvs0_cc nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil nil nil
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (append_assoc formula-decl nil list_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]"
     PVS0Bool_adt nil)
    (get_cond adt-accessor-decl "[(ite?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (pvs0not? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (pvs0not adt-constructor-decl "[PVS0Expr[T] -> (pvs0not?)]"
     PVS0Bool_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (suffix_path_cnds 0
  (suffix_path_cnds-1 nil 3645971413
   ("" (skeep*)
    (("" (use "suffix_path_cnds_suffix")
      (("" (use "suffix_subset_sl") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((suffix_path_cnds_suffix formula-decl nil pvs0_props nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (subset_sl_is_preorder name-judgement "(preorder?[list[T]])"
     set_as_list_props "structures/")
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (suffix_subset_sl formula-decl nil pvs0_props nil))
   shostak))
 (member_conds_rec 0
  (member_conds_rec-1 nil 3647695484
   ("" (skeep)
    (("" (skeep)
      (("" (measure-induct+ "length(cnds)" cnds)
        (("" (skeep)
          (("" (expand "member" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "eval_conds_rec" -3)
                  (("1" (assert)
                    (("1" (lift-if)
                      (("1" (replace -1 :dir rl)
                        (("1" (prop)
                          (("1" (expand "eval_conds_rec" 2)
                            (("1" (assert)
                              (("1"
                                (expand "eval_conds_rec" 2)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "eval_conds_rec" 3)
                            (("2" (assert)
                              (("2"
                                (expand "eval_conds_rec" 3)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "eval_conds_rec" -3)
                  (("2" (assert)
                    (("2" (prop)
                      (("2" (inst -2 "cdr(x!1)")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (hide-all-but (1 2))
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (member_conds_rec2 0
  (member_conds_rec2-1 nil 3647696231
   ("" (skeep)
    (("" (skeep)
      (("" (measure-induct+ "length(cnds)" "cnds")
        (("" (expand "eval_conds_rec" 1)
          (("" (lift-if)
            (("" (split)
              (("1" (propax) nil nil)
               ("2" (flatten)
                (("2" (inst-cp -2 "car(x!1)")
                  (("1" (expand "eval_conds_rec" -3)
                    (("1" (expand "eval_conds_rec" -3)
                      (("1" (replaces -3)
                        (("1" (inst?)
                          (("1" (expand "length" -1 2)
                            (("1" (assert)
                              (("1"
                                (hide 2)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (typepred "e")
                                      (("1"
                                        (expand "member" 1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (1 2)) (("2" (grind) nil nil))
                    nil)
                   ("3" (hide-all-but (1 2)) (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (suffix_conds_rec 0
  (suffix_conds_rec-1 nil 3647692909
   ("" (skeep*)
    (("" (rewrite "subset_member_sl")
      (("" (lemma "member_conds_rec2")
        ((""
          (inst -1 "eval_op1" "eval_op2" "false_val" "env" "expr"
           "suffcnds")
          (("" (assert)
            (("" (skeep)
              (("" (inst?)
                (("" (typepred "e")
                  (("" (assert)
                    (("" (lemma "member_conds_rec")
                      (("" (inst?)
                        (("" (inst -1 "cnds") (("" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_member_sl formula-decl nil pvs0_props nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (list type-decl nil list_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member_conds_rec formula-decl nil pvs0_props nil)
    (member def-decl "bool" list_props nil)
    (member_conds_rec2 formula-decl nil pvs0_props nil))
   shostak))
 (suffix_conds_valid_sub 0
  (suffix_conds_valid_sub-2 nil 3665941590
   ("" (skeep*)
    (("" (use "suffix_path_cnds")
      (("" (assert)
        (("" (lemma "suffix_conds_rec")
          ((""
            (inst -1 "eval_op1" "eval_op2" "false_val" "env" "body"
             "path_conditions(sub_body, path)"
             " path_conditions(sub_body, path_ext)")
            (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((suffix_path_cnds formula-decl nil pvs0_props nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (suffix_conds_rec formula-decl nil pvs0_props nil)
    (subset_sl_is_preorder name-judgement "(preorder?[list[T]])"
     set_as_list_props "structures/")
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil))
   nil))
 (suffix_conds_valid 0
  (suffix_conds_valid-2 nil 3665941671
   ("" (skeep*)
    (("" (lemma "suffix_conds_valid_sub")
      ((""
        (inst -1 "eval_op1" "eval_op2" "false_val" "env" "body" "body"
         "path" "path_ext")
        (("1" (assert) nil nil)
         ("2" (hide-all-but (1)) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((suffix_conds_valid_sub formula-decl nil pvs0_props nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil) nil)
   nil))
 (rec_decreasing_TCC1 0
  (rec_decreasing_TCC1-1 nil 3642264615 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil))
   nil))
 (rec_decreasing_TCC2 0
  (rec_decreasing_TCC2-1 nil 3642264615 ("" (subtype-tcc) nil nil) nil
   nil))
 (rec_decreasing 0
  (rec_decreasing-4 "1130" 3665941831
   ("" (skeep)
    (("" (skeep)
      (("" (induct "expr")
        (("1" (skeep)
          (("1" (skeep) (("1" (beta) (("1" (inst?) nil nil)) nil))
            nil))
          nil)
         ("2" (skeep*)
          (("2" (hide-all-but (-1 -3 -5))
            (("2" (lemma "cnst_vr_path_ext")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep*)
          (("3" (hide-all-but (-1 -3 -5))
            (("3" (lemma "cnst_vr_path_ext")
              (("3" (inst?) (("3" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("4" (skeep*)
          (("4" (inst -1 "body" "cons(0,path)" "path_ext")
            (("1" (assert)
              (("1" (split -1)
                (("1" (propax) nil nil)
                 ("2" (hide-all-but (1 -1))
                  (("2" (lemma "subterm_append")
                    (("2" (inst -1 "body" "path")
                      (("2" (beta)
                        (("2" (inst -1 "(: 0 :)")
                          (("1" (expand "append" -1)
                            (("1" (expand "append" -1)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (replace -2 :dir RL)
                                    (("1"
                                      (expand "subterm_at" 1)
                                      (("1"
                                        (hide-all-but 1)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -1 :dir RL :hide? t)
                            (("2" (hide 2)
                              (("2"
                                (grind)
                                (("2"
                                  (case "null[nat] = (: :)")
                                  (("1"
                                    (replace -1 :dir RL :hide? t)
                                    (("1" (use "null_path") nil nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "every")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "eval_expr" -2)
                  (("3" (lift-if -2) (("3" (assert) nil nil)) nil))
                  nil)
                 ("4" (hide-all-but (1 -1 -3 -5))
                  (("4" (lemma "op1_rec_path_ext")
                    (("4" (inst?)
                      (("4" (assert)
                        (("4" (assert) (("4" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1))
              (("2" (typepred "path")
                (("2" (hide -1)
                  (("2" (use "valid_0_path_ext")
                    (("2" (assert) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (skolem 1 ("op_idx" "arg1_expr" "arg2_expr"))
          (("5" (flatten)
            (("5" (label "ih_arg2" -2)
              (("5" (hide "ih_arg2")
                (("5" (label "ih_arg1" -1)
                  (("5" (hide "ih_arg1")
                    (("5" (skeep*)
                      (("5" (use "op2_path_ext")
                        (("5" (assert)
                          (("5" (assert)
                            (("5" (split -1)
                              (("1"
                                (reveal "ih_arg1")
                                (("1"
                                  (inst
                                   -1
                                   "body"
                                   "cons(0,path)"
                                   "path_ext")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -1)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma "subterm_append")
                                          (("2"
                                            (inst -1 "body" "path")
                                            (("2"
                                              (beta)
                                              (("2"
                                                (inst
                                                 -1
                                                 "cons(0, null)")
                                                (("1"
                                                  (expand
                                                   "append"
                                                   -1
                                                   1)
                                                  (("1"
                                                    (expand
                                                     "append"
                                                     -1
                                                     1)
                                                    (("1"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (replace
                                                         -2
                                                         1
                                                         :dir
                                                         RL)
                                                        (("1"
                                                          (expand
                                                           "subterm_at"
                                                           1)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "valid_path"
                                                   1
                                                   1)
                                                  (("2"
                                                    (replace
                                                     -2
                                                     1
                                                     :dir
                                                     RL)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "reverse(cdr(reverse(cons[nat](0, null[real])))) = null")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "rac"
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "length")
                                                              (("1"
                                                                (expand
                                                                 "length")
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (expand
                                                                     "rdc"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "reverse"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "reverse"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "append")
                                                                          (("1"
                                                                            (expand
                                                                             "reverse")
                                                                            (("1"
                                                                              (expand
                                                                               "valid_path"
                                                                               1)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "reverse"
                                                           1
                                                           2)
                                                          (("2"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("2"
                                                              (expand
                                                               "append"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "reverse"
                                                                 1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "reverse"
                                                           1)
                                                          (("3"
                                                            (expand
                                                             "reverse"
                                                             1)
                                                            (("3"
                                                              (expand
                                                               "append")
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (hide-all-but
                                                           1)
                                                          (("4"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (assert)
                                                  (("3"
                                                    (expand "every")
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "eval_expr" -3)
                                        (("3"
                                          (lift-if -3)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "valid_0_path_ext")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (reveal "ih_arg2")
                                (("2"
                                  (inst
                                   -1
                                   "body"
                                   "cons(1,path)"
                                   "path_ext")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -1)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma "subterm_append")
                                          (("2"
                                            (inst -1 "body" "path")
                                            (("2"
                                              (beta)
                                              (("2"
                                                (inst
                                                 -1
                                                 "cons(1, null)")
                                                (("1"
                                                  (expand
                                                   "append"
                                                   -1
                                                   1)
                                                  (("1"
                                                    (expand
                                                     "append"
                                                     -1
                                                     1)
                                                    (("1"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (replace
                                                         -2
                                                         1
                                                         :dir
                                                         RL)
                                                        (("1"
                                                          (expand
                                                           "subterm_at"
                                                           1)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace
                                                   -2
                                                   1
                                                   :dir
                                                   RL)
                                                  (("2"
                                                    (expand
                                                     "valid_path"
                                                     1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "rac"
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "length")
                                                          (("2"
                                                            (expand
                                                             "length")
                                                            (("2"
                                                              (expand
                                                               "nth")
                                                              (("2"
                                                                (expand
                                                                 "rdc"
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "reverse"
                                                                   2
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "reverse"
                                                                     2
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "append")
                                                                      (("2"
                                                                        (expand
                                                                         "reverse")
                                                                        (("2"
                                                                          (expand
                                                                           "valid_path"
                                                                           2)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand "every")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3"
                                          (expand "eval_expr" -3)
                                          (("3"
                                            (lift-if -3)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (use "valid_1_path_ext")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "/=")
                                (("3"
                                  (replace -1 :dir RL)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (skolem 1 "arg_expr")
          (("6" (flatten)
            (("6" (skeep*)
              (("6" (case "path_ext = path")
                (("1" (replace -1 :hide? t)
                  (("1" (hide -1)
                    (("1" (expand "eval_expr" -2)
                      (("1" (lift-if -2)
                        (("1" (assert)
                          (("1" (split -2)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -3 :dir RL :hide? t)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -1 "body" "cons(0,path)" "path_ext")
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (propax) nil nil)
                       ("2" (hide-all-but (-1 1))
                        (("2" (lemma "subterm_append")
                          (("2" (inst -1 "body" "path")
                            (("2" (beta)
                              (("2"
                                (inst -1 "cons(0,null)")
                                (("1"
                                  (expand "append" -1 1)
                                  (("1"
                                    (expand "append" -1 1)
                                    (("1"
                                      (replace -1 :hide? t)
                                      (("1"
                                        (replace -1 :hide? t :dir RL)
                                        (("1"
                                          (expand "subterm_at")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (replace -1 :hide? t :dir RL)
                                    (("2"
                                      (grind)
                                      (("2" (use "null_path") nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "every")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "eval_expr" -2)
                        (("3" (lift-if -2) (("3" (assert) nil nil))
                          nil))
                        nil)
                       ("4" (hide-all-but (1 -3 -1 2))
                        (("4" (lemma "op1_rec_path_ext")
                          (("4" (inst?) (("4" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (1 -1))
                    (("2" (typepred "path")
                      (("2" (hide -1)
                        (("2" (use "valid_0_path_ext")
                          (("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("7" (skolem 1 ("cond_expr" "then_expr" "else_expr"))
          (("7" (flatten)
            (("7" (skeep*)
              (("7" (label "ih_cond" -1)
                (("7" (hide "ih_cond")
                  (("7" (label "ih_then" -1)
                    (("7" (hide "ih_then")
                      (("7" (label "ih_else" -1)
                        (("7" (hide "ih_else")
                          (("7" (use "ite_path_ext")
                            (("7" (assert)
                              (("7"
                                (assert)
                                (("7"
                                  (split)
                                  (("1"
                                    (reveal "ih_cond")
                                    (("1"
                                      (inst -1 "body")
                                      (("1"
                                        (inst
                                         -1
                                         "append((:0:),path)"
                                         "path_ext")
                                        (("1"
                                          (expand "append" -1 2)
                                          (("1"
                                            (expand "append" -1 2)
                                            (("1"
                                              (replace 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (use
                                                   "subterm_append")
                                                  (("1"
                                                    (beta)
                                                    (("1"
                                                      (inst -1 "(:0:)")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (replace
                                                           -2
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (expand
                                                             "subterm_at"
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "rac")
                                                              (("1"
                                                                (expand
                                                                 "length")
                                                                (("1"
                                                                  (expand
                                                                   "length")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (expand
                                                                       "rdc")
                                                                      (("1"
                                                                        (expand
                                                                         "reverse"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "reverse"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "append")
                                                                            (("1"
                                                                              (expand
                                                                               "reverse")
                                                                              (("1"
                                                                                (expand
                                                                                 "subterm_at"
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "eval_expr"
                                                                                   -3)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace
                                                         -2
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "valid_path")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "rac")
                                                                (("2"
                                                                  (expand
                                                                   "length")
                                                                  (("2"
                                                                    (expand
                                                                     "length")
                                                                    (("2"
                                                                      (expand
                                                                       "nth")
                                                                      (("2"
                                                                        (expand
                                                                         "rdc")
                                                                        (("2"
                                                                          (expand
                                                                           "reverse"
                                                                           1
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "reverse"
                                                                             1
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "append")
                                                                              (("2"
                                                                                (expand
                                                                                 "reverse")
                                                                                (("2"
                                                                                  (hide
                                                                                   2
                                                                                   3)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "valid_path")
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         1)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "valid_0_path_ext")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (expand "append" 1)
                                              (("2"
                                                (expand "append" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide-all-but 1)
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "suffix_conds_valid")
                                    (("2"
                                      (inst
                                       -1
                                       "eval_op1"
                                       "eval_op2"
                                       "false_val"
                                       "env"
                                       "body"
                                       "cons(1,path)"
                                       "path_ext")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use "path_conditions_cons")
                                          (("1"
                                            (beta)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (expand
                                                   "eval_conds_rec"
                                                   -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (expand
                                                         "path_conds_aux")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (replace
                                                             -3
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (reveal
                                                                 "ih_then")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "body")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "cons(1,path)"
                                                                     "path_ext")
                                                                    (("1"
                                                                      (replace
                                                                       2)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           "subterm_append")
                                                                          (("1"
                                                                            (beta)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "(:1:)")
                                                                              (("1"
                                                                                (expand
                                                                                 "append"
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "append"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "subterm_at"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "rac")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "length")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "rdc")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "reverse"
                                                                                                     1
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "reverse"
                                                                                                       1
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "append")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "reverse")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "subterm_at"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "eval_expr"
                                                                                                               -4)
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "eval_expr_semantic_rel")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "false_val"
                                                                                                                           "eval_op1"
                                                                                                                           "eval_op2"
                                                                                                                           "env"
                                                                                                                           "cond_expr"
                                                                                                                           "body"
                                                                                                                           "val(eval_expr(false_val, eval_op1, eval_op2)
                                                                                   (n, cond_expr, body, env))"
                                                                                                                           "n")
                                                                                                                          (("1"
                                                                                                                            (beta)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "deterministic_expr")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "false_val"
                                                                                                                                   "eval_op1"
                                                                                                                                   "eval_op2"
                                                                                                                                   "env"
                                                                                                                                   "cond_expr"
                                                                                                                                   "body"
                                                                                                                                   " val(eval_expr(false_val, eval_op1, eval_op2)
                                                                                                   (n, cond_expr, body, env))"
                                                                                                                                   "val")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -3
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "valid_path")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (hide
                                                                                         1
                                                                                         3)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "rac")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "length")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "nth")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "rdc")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "reverse"
                                                                                                     1
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "reverse"
                                                                                                       1
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "append")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "reverse")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "valid_path")
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("3"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (use
                                                                       "valid_1_path_ext")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "valid_1_path_ext")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (lemma "suffix_conds_valid")
                                    (("3"
                                      (inst
                                       -1
                                       "eval_op1"
                                       "eval_op2"
                                       "false_val"
                                       "env"
                                       "body"
                                       "cons(2,path)"
                                       "path_ext")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use "path_conditions_cons")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (expand
                                                 "eval_conds_rec"
                                                 -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (expand
                                                       "path_conds_aux")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (replace
                                                           -4
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (reveal
                                                               "ih_else")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "body")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "cons(2,path)"
                                                                   "path_ext")
                                                                  (("1"
                                                                    (replace
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (use
                                                                         "subterm_append")
                                                                        (("1"
                                                                          (beta)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "(:2:)")
                                                                            (("1"
                                                                              (expand
                                                                               "append")
                                                                              (("1"
                                                                                (expand
                                                                                 "append")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -4
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "subterm_at"
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "rac")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "rdc")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "reverse"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "reverse"
                                                                                                     1
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "append")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "reverse")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "subterm_at"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "eval_expr"
                                                                                                             -5)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (split)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "eval_expr_semantic_rel")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "false_val"
                                                                                                                       "eval_op1"
                                                                                                                       "eval_op2"
                                                                                                                       "env"
                                                                                                                       "cond_expr"
                                                                                                                       "body"
                                                                                                                       "val(eval_expr(false_val, eval_op1, eval_op2)
                                                                                              (n, cond_expr, body, env))"
                                                                                                                       "n")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "deterministic_expr")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "false_val"
                                                                                                                               "eval_op1"
                                                                                                                               "eval_op2"
                                                                                                                               "env"
                                                                                                                               "cond_expr"
                                                                                                                               "body"
                                                                                                                               "val(eval_expr(false_val, eval_op1, eval_op2)
                                                                                                   (n, cond_expr, body, env))"
                                                                                                                               "val")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (lemma
                                                                                                                   "deterministic_expr")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "false_val"
                                                                                                                     "eval_op1"
                                                                                                                     "eval_op2"
                                                                                                                     "env"
                                                                                                                     "cond_expr"
                                                                                                                     "body"
                                                                                                                     "val(eval_expr(false_val, eval_op1, eval_op2)
                                                                                                   (n, cond_expr, body, env))"
                                                                                                                     "val")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               -4
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "valid_path")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (hide
                                                                                       1
                                                                                       2)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "rac")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "length")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "length")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nth")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "rdc")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "reverse"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "reverse"
                                                                                                     1
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "append")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "reverse")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "valid_path")
                                                                                                          (("2"
                                                                                                            (lift-if)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "valid_2_path_ext")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "valid_2_path_ext")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("8" (assert) (("8" (skeep) (("8" (skeep) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil (path_conditions_cons formula-decl nil pvs0_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (deterministic_expr formula-decl nil pvs0_expr nil)
    (eval_expr_semantic_rel formula-decl nil pvs0_expr nil)
    (path_conds_aux const-decl "PVS0Bool" pvs0_props nil)
    (suffix_conds_valid formula-decl nil pvs0_props nil)
    (valid_2_path_ext formula-decl nil pvs0_props nil)
    (ite_path_ext formula-decl nil pvs0_props nil) nil nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil nil (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (valid_1_path_ext formula-decl nil pvs0_props nil)
    (op2_path_ext formula-decl nil pvs0_props nil)
    (valid_0_path_ext formula-decl nil pvs0_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (op1_rec_path_ext formula-decl nil pvs0_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (reverse def-decl "list[T]" list_props nil)
    (rdc const-decl "list[T]" more_list_props "structures/")
    (append def-decl "list[T]" list_props nil)
    (null_path formula-decl nil pvs0_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (rac const-decl "T" more_list_props "structures/")
    (subterm_append formula-decl nil pvs0_props nil) nil
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    nil (cnst_vr_path_ext formula-decl nil pvs0_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (PVS0Expr_induction formula-decl nil PVS0Expr_adt nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" PVS0Expr_adt
     nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (eval_expr def-decl "Maybe[Val]" pvs0_expr nil) nil nil nil
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil) nil nil
    (suffix? def-decl "bool" more_list_props "structures/")
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[T] |
   some?(myv) IMPLIES
    n > 0 AND
     (forall (m: upfrom(n)):
        myv = eval_expr(false_val, eval_op1, eval_op2)(m, expr, body, env))}"
     pvs0_props nil)
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[T] |
   some?(myv) IMPLIES
    semantic_rel_expr(false_val, eval_op1, eval_op2)
                     (expr, body, env, val(myv))}" pvs0_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (rec_mu_decreasing_TCC1 0
  (rec_mu_decreasing_TCC1-1 nil 3642352026 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil))
   nil))
 (rec_mu_decreasing_TCC2 0
  (rec_mu_decreasing_TCC2-1 nil 3642352026 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (terminates_expr const-decl "bool" pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (determined? const-decl "bool" pvs0_lang nil))
   nil))
 (rec_mu_decreasing_TCC3 0
  (rec_mu_decreasing_TCC3-1 nil 3666649609 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (mu const-decl "posnat" pvs0_lang nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[T] |
   some?(myv) IMPLIES
    n > 0 AND
     (forall (m: upfrom(n)):
        myv = eval_expr(false_val, eval_op1, eval_op2)(m, expr, body, env))}"
     pvs0_props nil)
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[T] |
   some?(myv) IMPLIES
    semantic_rel_expr(false_val, eval_op1, eval_op2)
                     (expr, body, env, val(myv))}" pvs0_props nil))
   nil))
 (rec_mu_decreasing_TCC4 0
  (rec_mu_decreasing_TCC4-1 nil 3666649609 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (terminating? const-decl "bool" pvs0_lang nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (terminates_expr const-decl "bool" pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (mu const-decl "posnat" pvs0_lang nil)
    (semantic_rel const-decl "bool" pvs0_lang nil)
    (determined? const-decl "bool" pvs0_lang nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[T] |
   some?(myv) IMPLIES
    n > 0 AND
     (forall (m: upfrom(n)):
        myv = eval_expr(false_val, eval_op1, eval_op2)(m, expr, body, env))}"
     pvs0_props nil)
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[T] |
   some?(myv) IMPLIES
    semantic_rel_expr(false_val, eval_op1, eval_op2)
                     (expr, body, env, val(myv))}" pvs0_props nil))
   nil))
 (rec_mu_decreasing 0
  (rec_mu_decreasing-3 nil 3666650976
   ("" (skeep*)
    (("" (beta)
      (("" (flatten)
        (("" (skeep*)
          (("" (lemma "rec_decreasing")
            ((""
              (inst -1 "pvs0`2" "pvs0`3" "pvs0`1" "env" "n" "pvs0`4"
               "pvs0`4" "null" "path_ext")
              (("1" (beta)
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (flatten)
                      (("1"
                        (case "val(eval_expr(pvs0`1, pvs0`2, pvs0`3)
                                                                                 (n,
                                                                                  get_arg
                                                                                  (subterm_at
                                                                                   (pvs0`4, path_ext)),
                                                                                  pvs0`4,
                                                                                  env)) = vact")
                        (("1" (replace -1 :hide? t)
                          (("1" (expand "mu" 1)
                            (("1" (hide-all-but (-2 1))
                              (("1"
                                (expand "eval")
                                (("1"
                                  (typepred
                                   "min({n: nat |
                                             some?(eval_expr(pvs0`1, pvs0`2, pvs0`3)
                                                            (n, pvs0`4, pvs0`4,
                                                             vact))})")
                                  (("1"
                                    (inst -2 "n-1")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (expand "nonempty?")
                                    (("2"
                                      (expand "empty?")
                                      (("2"
                                        (inst -1 "n-1")
                                        (("2"
                                          (expand "member")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "semantic_rel_eval_expr")
                          (("2" (assert)
                            (("2" (skolem -1 "m")
                              (("2"
                                (flatten)
                                (("2"
                                  (replace -2 :hide? t)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (case "n<m")
                                      (("1"
                                        (lemma "eval_expr_ge_n")
                                        (("1"
                                          (inst
                                           -1
                                           "pvs0`1"
                                           "pvs0`2"
                                           "pvs0`3"
                                           "n"
                                           "m"
                                           "get_arg(subterm_at(pvs0`4, path_ext))"
                                           "pvs0`4"
                                           "env")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "eval_expr_ge_n")
                                        (("2"
                                          (inst
                                           -1
                                           "pvs0`1"
                                           "pvs0`2"
                                           "pvs0`3"
                                           "m"
                                           "n"
                                           "get_arg(subterm_at(pvs0`4, path_ext))"
                                           "pvs0`4"
                                           "env")
                                          (("1"
                                            (assert)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "subterm_at" 1)
                      (("2" (propax) nil nil)) nil)
                     ("3" (hide-all-but (-1 1))
                      (("3" (expand "mu")
                        (("3"
                          (typepred "min({n: nat |
                                     some?(eval(pvs0)(n)
                                               (env))})")
                          (("1" (assert)
                            (("1" (expand "eval")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (use "mu_nonempty")
                            (("1" (assert) nil nil)
                             ("2" (typepred "pvs0")
                              (("2"
                                (lemma "terminating_determined_all")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2" (inst -1 "env") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "valid_path")
                (("2" (lift-if 1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    (terminating? const-decl "bool" pvs0_lang nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[T] |
   some?(myv) IMPLIES
    semantic_rel_expr(false_val, eval_op1, eval_op2)
                     (expr, body, env, val(myv))}" pvs0_props nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[T] |
   some?(myv) IMPLIES
    n > 0 AND
     (forall (m: upfrom(n)):
        myv = eval_expr(false_val, eval_op1, eval_op2)(m, expr, body, env))}"
     pvs0_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (terminating_determined_all formula-decl nil pvs0_lang nil)
    (determined? const-decl "bool" pvs0_lang nil) nil
    (mu_nonempty formula-decl nil pvs0_lang nil)
    (semantic_rel_eval_expr formula-decl nil pvs0_expr nil)
    (< const-decl "bool" reals nil) nil nil
    (upfrom nonempty-type-eq-decl nil integers nil)
    (eval_expr_ge_n formula-decl nil pvs0_expr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (forall x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (eval const-decl "Maybe[Val]" pvs0_lang nil)
    (mu const-decl "posnat" pvs0_lang nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (eval_expr def-decl "Maybe[Val]" pvs0_expr nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" PVS0Expr_adt
     nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (rec_decreasing formula-decl nil pvs0_props nil))
   nil))
 (decreasing_rec_TCC1 0
  (decreasing_rec_TCC1-1 nil 3642438537 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (valid_path def-decl "bool" pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil))
   nil))
 (decreasing_rec_TCC2 0
  (decreasing_rec_TCC2-1 nil 3642438537 ("" (subtype-tcc) nil nil) nil
   nil))
 (decreasing_rec 0
  (decreasing_rec-3 "" 3648034604
   ("" (skeep)
    (("" (measure-induct "lex2(n, sizepvs0(expr))" ("n" "expr"))
      (("1" (skolem 1 ("n" "e"))
        (("1" (flatten)
          (("1" (skeep*)
            (("1" (expand "eval_expr" 1)
              (("1" (lift-if 1)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (hide -2) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (assert) nil nil)
                       ("2" (flatten)
                        (("2" (split 2)
                          (("1" (prop)
                            (("1" (inst -4 "path")
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "eval_expr" -6)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -3)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split 2)
                              (("1"
                                (prop)
                                (("1"
                                  (inst -4 "path")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "eval_expr" -6)
                                        (("1"
                                          (replace -3)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide 2 3 4 5)
                                      (("1"
                                        (beta)
                                        (("1"
                                          (label "ih" -2)
                                          (("1"
                                            (copy "ih")
                                            (("1"
                                              (inst
                                               -1
                                               "n"
                                               "get_cond(e)")
                                              (("1"
                                                (hide "ih")
                                                (("1"
                                                  (inst -4 "path")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "eval_expr"
                                                         -6)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (case "rec?(e)")
                                      (("1"
                                        (hide 1 3 4 5 6)
                                        (("1"
                                          (beta)
                                          (("1"
                                            (lift-if 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (copy -2)
                                                (("1"
                                                  (label "ih" -1)
                                                  (("1"
                                                    (hide "ih")
                                                    (("1"
                                                      (inst -4 "path")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "e")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep*) nil nil) ("3" (skeep*) nil nil)
       ("4" (skeep*) nil nil)
       ("5" (skeep*)
        (("5" (inst -10 "path")
          (("5" (flatten)
            (("5" (replace -9) (("5" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("6" (skeep*) nil nil) ("7" (skeep*) nil nil)
       ("8" (skeep*)
        (("8" (inst -10 "path")
          (("8" (flatten)
            (("8" (replace -9) (("8" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("9" (skeep*) nil nil) ("10" (skeep*) nil nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (T formal-nonempty-type-decl nil pvs0_props nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (sizepvs0 const-decl "[PVS0Expr -> nat]" pvs0_expr nil)
    (< def-decl "bool" ordinals nil)
    (well_founded_le formula-decl nil ordinals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (eval_expr_semantic_rel_j rec-application-judgement
     "{myv: Maybe[T] |
   some?(myv) IMPLIES
    semantic_rel_expr(false_val, eval_op1, eval_op2)
                     (expr, body, env, val(myv))}" pvs0_props nil)
    (eval_expr_ge_n_j rec-application-judgement "{myv: Maybe[T] |
   some?(myv) IMPLIES
    n > 0 AND
     (forall (m: upfrom(n)):
        myv = eval_expr(false_val, eval_op1, eval_op2)(m, expr, body, env))}"
     pvs0_props nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (eval_conds_rec def-decl "bool" pvs0_cc nil) nil nil nil
    (eval_expr def-decl "Maybe[Val]" pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (path_conditions def-decl "Conditions" pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (subterm_at def-decl "({res: PVS0Expr | subterm(res, expr)})"
     pvs0_cc nil)
    (subterm adt-def-decl "boolean" PVS0Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil
    (valid_path def-decl "bool" pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (get_arg shared-adt-accessor-decl
     "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" PVS0Expr_adt
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (ite? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    nil
    (get_cond adt-accessor-decl "[(ite?) -> PVS0Expr]" PVS0Expr_adt
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)
  (decreasing_rec-2 "" 3642440033
   ("" (skeep)
    (("" (measure-induct "lex2(n, sizepvs0(expr))" ("n" "expr"))
      (("1" (skolem 1 ("n" "e"))
        (("1" (flatten)
          (("1" (skeep*)
            (("1" (expand "eval_expr" 1)
              (("1" (lift-if 1)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (hide -2) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (assert) nil nil)
                       ("2" (flatten)
                        (("2" (split 2)
                          (("1" (postpone) nil nil)
                           ("2" (flatten)
                            (("2" (split 2)
                              (("1" (postpone) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide 2 3 4 5)
                                      (("1"
                                        (beta)
                                        (("1"
                                          (label "ih" -2)
                                          (("1"
                                            (copy "ih")
                                            (("1"
                                              (inst
                                               -1
                                               "n"
                                               "get_cond(e)")
                                              (("1"
                                                (hide "ih")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "cons(0,path)"
                                                     "env")
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (label
                                                           "subexpr_props"
                                                           -4)
                                                          (("1"
                                                            (copy
                                                             "subexpr_props")
                                                            (("1"
                                                              (hide
                                                               "subexpr_props")
                                                              (("1"
                                                                (lift-if
                                                                 1)
                                                                (("1"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (reveal
                                                                       "ih")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "n"
                                                                         "get_if(e)")
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "cons(1,path)"
                                                                             "env")
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (postpone)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (postpone)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (case "rec?(e)")
                                      (("1"
                                        (hide 1 3 4 5 6)
                                        (("1"
                                          (beta)
                                          (("1"
                                            (lift-if 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (copy -2)
                                                (("1"
                                                  (label "ih" -1)
                                                  (("1"
                                                    (hide "ih")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "n"
                                                       "get_arg(e)")
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "cons(0,path)"
                                                           "env")
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (reveal
                                                                 "ih")
                                                                (("1"
                                                                  (inst
                                                                   "ih"
                                                                   "n-1"
                                                                   "body")
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (postpone)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil) ("3" (postpone) nil nil)
       ("4" (postpone) nil nil) ("5" (postpone) nil nil)
       ("6" (postpone) nil nil) ("7" (postpone) nil nil)
       ("8" (postpone) nil nil) ("9" (postpone) nil nil)
       ("10" (postpone) nil nil))
      nil))
    nil)
   nil shostak)
  (decreasing_rec-1 nil 3642431705
   ("" (skeep)
    (("" (induct "expr")
      (("1" (assert) nil nil)
       ("2" (typepred "expr!1") (("2" (assert) nil nil)) nil)
       ("3" (skeep)
        (("3" (hide -1)
          (("3" (expand "eval_expr" 1) (("3" (propax) nil nil)) nil))
          nil))
        nil)
       ("4" (flatten)
        (("4" (hide -1)
          (("4" (expand "eval_expr" 1) (("4" (propax) nil nil)) nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (hide -2)
          (("5" (split -1)
            (("1" (skeep)
              (("1" (inst -1 "cons(0,path)")
                (("1" (split -1)
                  (("1" (expand "eval_expr" 1)
                    (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (skeep)
                    (("2" (inst? -2)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (use "op1_rec_path_ext")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (lemma "subterm_append")
                    (("3" (inst -1 "body" "path")
                      (("3" (assert)
                        (("3" (inst -1 "cons(0,null[nat])")
                          (("1" (expand "append " -1)
                            (("1" (expand "append " -1)
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (replace -1 :hide? t :dir rl)
                                  (("1"
                                    (hide-all-but 1)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind)
                              (("2" (use "null_path") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "path")
                  (("2" (hide-all-but (1 -2 -3))
                    (("2" (use "valid_0_path_ext")
                      (("2" (assert)
                        (("2" (replace -3 :dir rl)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "op12_var") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("6" (postpone) nil nil)
       ("7" (skeep)
        (("7" (split -1)
          (("1" (hide -2)
            (("1" (skeep)
              (("1" (inst -1 "cons(0,null[nat])")
                (("1" (split -1)
                  (("1" (expand "eval_expr" 1)
                    (("1" (lift-if 1)
                      (("1" (assert) (("1" (postpone) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil) ("3" (postpone) nil nil))
                  nil)
                 ("2" (postpone) nil nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil))
          nil))
        nil)
       ("8" (postpone) nil nil) ("9" (assert) nil nil))
      nil))
    nil)
   nil shostak)))


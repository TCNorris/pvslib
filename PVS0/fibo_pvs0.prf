(fibo_pvs0
 (fibo_op1_TCC1 0
  (fibo_op1_TCC1-1 nil 3707344354 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (/= const-decl "boolean" notequal nil))
   nil (fibo_op1 subtype "(number_fields.-)(fibo_pvs0.n, 1)" "nat")))
 (M_TCC1 0
  (M_TCC1-1 nil 3707344354 ("" (subtype-tcc) nil nil) nil nil
   (M subtype "LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n)"
    "(orders[MT].well_founded?)")))
 (A_TCC1 0
  (A_TCC1-1 nil 3707344354 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil (A subtype "(: 1 :)" "listn[Sign3].listn(1)")))
 (A_TCC2 0
  (A_TCC2-1 nil 3707344354 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil (A subtype "(: (: 1 :) :)" "Measure_Matrix[1]")))
 (fibo_mm_TCC1 0
  (fibo_mm_TCC1-3 nil 3707344991 ("" (pvs0-mm "fibo") nil nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (indi_f_equiv formula-decl nil ccg_to_mwg CCG)
    (CallingContext type-eq-decl nil cc_def CCG)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (FunMeasures type-eq-decl nil ccg_def CCG)
    (CCG type-eq-decl nil ccg_def CCG)
    (below type-eq-decl nil naturalnumbers nil)
    (FunMeasure type-eq-decl nil ccg_def CCG)
    (make_ccg const-decl "CCG" ccg_def CCG)
    (sound_ccg_digraph const-decl "bool" pvs0_to_dg nil)
    (fibo_dg const-decl "(sound_ccg_digraph(pvs0_fibo))" fibo_pvs0 nil)
    (fibo_measures const-decl "FunMeasures" fibo_pvs0 nil)
    (digraph_type type-eq-decl nil c_digraphs_imp digraphs)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
                   digraphs)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
                   c_digraphs_imp digraphs)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp digraphs)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp digraphs)
    (vert? const-decl "bool" digraphs_ digraphs)
    (vert type-eq-decl nil digraphs_ digraphs)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 reals)
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn structures)
    (Measure_Matrix type-eq-decl nil measures CCG)
    (indi_f type-eq-decl nil ccg_to_mwg CCG)
    (A const-decl "Measure_Matrix" fibo_pvs0 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Path type-eq-decl nil pvs0_cc nil) (MT type-eq-decl nil pvs0_prelude nil)
    (< const-decl "bool" reals nil) (PVS0 type-eq-decl nil pvs0_expr nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (pvs0_fibo const-decl "PVS0" fibo_pvs0 nil)
    (eval_conds def-decl "bool" pvs0_cc nil)
    (indi_f_sound_iter def-decl "{b: bool |
   (FORALL (i_: below(N), j_: below(N)):
      i_ > i OR (i_ = i AND j_ >= j) IMPLIES
       FORALL (c: vert(dg(G))):
         (get(f(c))(i_, j_) = 1 IMPLIES gt(ms(G), c, i_, j_, FALSE)) AND
          (get(f(c))(i_, j_) = 0 IMPLIES gt(ms(G), c, i_, j_, TRUE)))
    = b}" ccg_to_mwg CCG)
    (indi_f_sound_all_vertex def-decl "bool" ccg_to_mwg CCG)
    (ge const-decl "bool" ccg_def CCG) (nth def-decl "T" list_props nil)
    (eval_op1 const-decl "Val" pvs0_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (le const-decl "bool" ccg_def CCG) (gt const-decl "bool" ccg CCG)
    (pvs0not adt-constructor-decl "[PVS0Expr[T] -> (pvs0not?)]" PVS0Bool_adt
     nil)
    (pvs0not? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (fibo_mm subtype
            "LAMBDA (v: digraphs_[CallingContext[[nat, nat, nat], PVS0Expr[[nat, nat, nat]], list[PVS0Bool[[nat, nat, nat]]], Path[[nat, nat, nat]]], digraph_type[CallingContext[[nat, nat, nat], PVS0Expr[[nat, nat, nat]], list[PVS0Bool[[nat, nat, nat]]], Path[[nat, nat, nat]]]], c_digraphs_imp[CallingContext[[nat, nat, nat], PVS0Expr[[nat, nat, nat]], list[PVS0Bool[[nat, nat, nat]]], Path[[nat, nat, nat]]]].digraph_verts, c_digraphs_imp[CallingContext[[nat, nat, nat], PVS0Expr[[nat, nat, nat]], list[PVS0Bool[[nat, nat, nat]]], Path[[nat, nat, nat]]]].digraph_edges, c_digraphs_imp[CallingContext[[nat, nat, nat], PVS0Expr[[nat, nat, nat]], list[PVS0Bool[[nat, nat, nat]]], Path[[nat, nat, nat]]]].digraph_size, c_digraphs_imp[CallingContext[[nat, nat, nat], PVS0Expr[[nat, nat, nat]], list[PVS0Bool[[nat, nat, nat]]], Path[[nat, nat, nat]]]].digraph_make].vert(dg(ccg_def[[nat, nat, nat], PVS0Expr_adt[[nat, nat, nat]].PVS0Expr, list_adt[PVS0Bool_adt[[nat, nat, nat]].PVS0Bool].list, Path[[nat, nat, nat]], MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n), 1].make_ccg(fibo_pvs0.fibo_dg, fibo_pvs0.fibo_measures)))): fibo_pvs0.A"
            "(ccg_to_mwg[[nat, nat, nat], PVS0Expr_adt[[nat, nat, nat]].PVS0Expr, list_adt[PVS0Bool_adt[[nat, nat, nat]].PVS0Bool].list, Path[[nat, nat, nat]], MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n), 1, pvs0_expr[[nat, nat, nat]].semantic_rel_expr(fibo_pvs0.pvs0_fibo), pvs0_cc[[nat, nat, nat]].eval_conds(fibo_pvs0.pvs0_fibo)].indi_f_sound(ccg_def[[nat, nat, nat], PVS0Expr_adt[[nat, nat, nat]].PVS0Expr, list_adt[PVS0Bool_adt[[nat, nat, nat]].PVS0Bool].list, Path[[nat, nat, nat]], MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n), 1].make_ccg(fibo_pvs0.fibo_dg, fibo_pvs0.fibo_measures)))"))
  (fibo_mm_TCC1-2 nil 3707344678
   ("" (rewrite "indi_f_equiv")
    (("" (expand "indi_f_sound_iter")
      (("" (expand "indi_f_sound_iter")
        (("" (expand "indi_f_sound_iter")
          (("" (eval-expr "factorial_ccg`dg`data")
            (("" (replaces -1)
              (("" (expand "indi_f_sound_all_vertex")
                (("" (expand "indi_f_sound_all_vertex")
                  (("" (split)
                    (("1" (flatten)
                      (("1" (eval-formula -1)
                        (("1" (hide -1)
                          (("1" (expand "gt")
                            (("1" (expand "factorial_ccg")
                              (("1" (expand "make_ccg")
                                (("1" (expand "factorial_measures")
                                  (("1" (expand "ge")
                                    (("1" (expand "le")
                                      (("1"
                                        (expand "eval_conds")
                                        (("1"
                                          (expand "eval_conds_rec")
                                          (("1"
                                            (expand "eval_conds_rec")
                                            (("1"
                                              (expand* "pvs0_factorial")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (expand "semantic_rel_expr")
                                                  (("1"
                                                    (expand
                                                     "semantic_rel_expr")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (ground)
                                                        nil)))))))))))))))))))))))))))))))))))
                     ("2" (flatten)
                      (("2" (eval-formula -1) nil))))))))))))))))))))
    nil)
   nil nil
   (fibo_mm subtype
            "LAMBDA (v: digraphs_[CallingContext[[nat, nat, nat], PVS0Expr[[nat, nat, nat]], list[PVS0Bool[[nat, nat, nat]]], Path[[nat, nat, nat]]], digraph_type[CallingContext[[nat, nat, nat], PVS0Expr[[nat, nat, nat]], list[PVS0Bool[[nat, nat, nat]]], Path[[nat, nat, nat]]]], c_digraphs_imp[CallingContext[[nat, nat, nat], PVS0Expr[[nat, nat, nat]], list[PVS0Bool[[nat, nat, nat]]], Path[[nat, nat, nat]]]].digraph_verts, c_digraphs_imp[CallingContext[[nat, nat, nat], PVS0Expr[[nat, nat, nat]], list[PVS0Bool[[nat, nat, nat]]], Path[[nat, nat, nat]]]].digraph_edges, c_digraphs_imp[CallingContext[[nat, nat, nat], PVS0Expr[[nat, nat, nat]], list[PVS0Bool[[nat, nat, nat]]], Path[[nat, nat, nat]]]].digraph_size, c_digraphs_imp[CallingContext[[nat, nat, nat], PVS0Expr[[nat, nat, nat]], list[PVS0Bool[[nat, nat, nat]]], Path[[nat, nat, nat]]]].digraph_make].vert(dg(ccg_def[[nat, nat, nat], PVS0Expr_adt[[nat, nat, nat]].PVS0Expr, list_adt[PVS0Bool_adt[[nat, nat, nat]].PVS0Bool].list, Path[[nat, nat, nat]], MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n), 1].make_ccg(fibo_pvs0.fibo_dg, fibo_pvs0.fibo_measures)))): fibo_pvs0.A"
            "(ccg_to_mwg[[nat, nat, nat], PVS0Expr_adt[[nat, nat, nat]].PVS0Expr, list_adt[PVS0Bool_adt[[nat, nat, nat]].PVS0Bool].list, Path[[nat, nat, nat]], MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n), 1, pvs0_expr[[nat, nat, nat]].semantic_rel_expr(fibo_pvs0.pvs0_fibo), pvs0_cc[[nat, nat, nat]].eval_conds(fibo_pvs0.pvs0_fibo)].indi_f_sound(ccg_def[[nat, nat, nat], PVS0Expr_adt[[nat, nat, nat]].PVS0Expr, list_adt[PVS0Bool_adt[[nat, nat, nat]].PVS0Bool].list, Path[[nat, nat, nat]], MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n), 1].make_ccg(fibo_pvs0.fibo_dg, fibo_pvs0.fibo_measures)))"))
  (fibo_mm_TCC1-1 nil 3707344354 ("" (subtype-tcc) nil nil) nil nil
   (fibo_mm subtype
            "LAMBDA (v: digraphs_[CallingContext[[nat, nat, nat], PVS0Expr[[nat, nat, nat]], list[PVS0Bool[[nat, nat, nat]]], Path[[nat, nat, nat]]], digraph_type[CallingContext[[nat, nat, nat], PVS0Expr[[nat, nat, nat]], list[PVS0Bool[[nat, nat, nat]]], Path[[nat, nat, nat]]]], c_digraphs_imp[CallingContext[[nat, nat, nat], PVS0Expr[[nat, nat, nat]], list[PVS0Bool[[nat, nat, nat]]], Path[[nat, nat, nat]]]].digraph_verts, c_digraphs_imp[CallingContext[[nat, nat, nat], PVS0Expr[[nat, nat, nat]], list[PVS0Bool[[nat, nat, nat]]], Path[[nat, nat, nat]]]].digraph_edges, c_digraphs_imp[CallingContext[[nat, nat, nat], PVS0Expr[[nat, nat, nat]], list[PVS0Bool[[nat, nat, nat]]], Path[[nat, nat, nat]]]].digraph_size, c_digraphs_imp[CallingContext[[nat, nat, nat], PVS0Expr[[nat, nat, nat]], list[PVS0Bool[[nat, nat, nat]]], Path[[nat, nat, nat]]]].digraph_make].vert(dg(ccg_def[[nat, nat, nat], PVS0Expr_adt[[nat, nat, nat]].PVS0Expr, list_adt[PVS0Bool_adt[[nat, nat, nat]].PVS0Bool].list, Path[[nat, nat, nat]], MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n), 1].make_ccg(fibo_pvs0.fibo_dg, fibo_pvs0.fibo_measures)))): fibo_pvs0.A"
            "(ccg_to_mwg[[nat, nat, nat], PVS0Expr_adt[[nat, nat, nat]].PVS0Expr, list_adt[PVS0Bool_adt[[nat, nat, nat]].PVS0Bool].list, Path[[nat, nat, nat]], MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n), 1, pvs0_expr[[nat, nat, nat]].semantic_rel_expr(fibo_pvs0.pvs0_fibo), pvs0_cc[[nat, nat, nat]].eval_conds(fibo_pvs0.pvs0_fibo)].indi_f_sound(ccg_def[[nat, nat, nat], PVS0Expr_adt[[nat, nat, nat]].PVS0Expr, list_adt[PVS0Bool_adt[[nat, nat, nat]].PVS0Bool].list, Path[[nat, nat, nat]], MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n), 1].make_ccg(fibo_pvs0.fibo_dg, fibo_pvs0.fibo_measures)))")))
 (pvs0_fibo_terminating 0
  (pvs0_fibo_terminating-1 nil 3707344354
   ("" (pvs0-terminating "fibo") nil nil)
   ((scp_iff_pvs0_terminates formula-decl nil scp_iff_pvs0 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pvs0_fibo const-decl "PVS0" fibo_pvs0 nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (list type-decl nil list_adt nil)
    (ccg_termination_pvs0 const-decl "bool" ccg_to_pvs0 nil)
    (eval_conds def-decl "bool" pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (mwg_termination_to_ccg_termination formula-decl nil ccg_to_mwg CCG)
    (CCG type-eq-decl nil ccg_def CCG) (make_ccg const-decl "CCG" ccg_def CCG)
    (c_bounding_from_gl_termination formula-decl nil bounding_circuits CCG)
    (ccg_to_mwg const-decl "{W: wgd_type |
   dg(W) = dg(G) AND
    FORALL (e: (edges(dg(G)))): get_wgt(W, e) = weight(G)(f)(e)}" ccg_to_mwg
     CCG)
    (weight const-decl "Measure_Matrix[N]" ccg_to_mwg CCG)
    (edge type-eq-decl nil digraphs_ digraphs)
    (edge? const-decl "bool" digraphs_ digraphs)
    (get_wgt const-decl "Weight" c_weighted_digraphs_def digraphs)
    (edges const-decl "bool" c_digraphs_def digraphs)
    (c_digraph type-eq-decl nil c_digraphs_def digraphs)
    (wgd_type type-eq-decl nil c_weighted_digraphs_def digraphs)
    (wdg type-eq-decl nil matrix_wdg CCG)
    (all_edges_in_map? const-decl "bool" c_weighted_digraphs_def digraphs)
    (id const-decl "Measure_Matrix" measures CCG)
    (* const-decl "Measure_Matrix" measures CCG)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (fibo_mm const-decl "(indi_f_sound(make_ccg(fibo_dg, fibo_measures)))"
             fibo_pvs0 nil)
    (indi_f_sound const-decl "bool" ccg_to_mwg CCG)
    (indi_f type-eq-decl nil ccg_to_mwg CCG)
    (Measure_Matrix type-eq-decl nil measures CCG)
    (listn type-eq-decl nil listn structures)
    (length def-decl "nat" list_props nil)
    (Sign3 type-eq-decl nil sign3 reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (vert type-eq-decl nil digraphs_ digraphs)
    (vert? const-decl "bool" digraphs_ digraphs)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp digraphs)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp digraphs)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
                   c_digraphs_imp digraphs)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
                   digraphs)
    (digraph_type type-eq-decl nil c_digraphs_imp digraphs)
    (fibo_dg const-decl "(sound_ccg_digraph(pvs0_fibo))" fibo_pvs0 nil)
    (sound_ccg_digraph const-decl "bool" pvs0_to_dg nil)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (CallingContext type-eq-decl nil cc_def CCG)
    (fibo_measures const-decl "FunMeasures" fibo_pvs0 nil)
    (FunMeasures type-eq-decl nil ccg_def CCG)
    (FunMeasure type-eq-decl nil ccg_def CCG)
    (Path type-eq-decl nil pvs0_cc nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (ccg_implies_scp_pvs0 formula-decl nil ccg_to_pvs0 nil)
    (MT type-eq-decl nil pvs0_prelude nil) (< const-decl "bool" reals nil))
   nil
   (pvs0_fibo_terminating subtype "fibo_pvs0.pvs0_fibo"
    "(pvs0_lang[[nat, nat, nat]].terminating?)")))
 (pvs0_fibo_tcc_termination 0
  (pvs0_fibo_tcc_termination-2 nil 3707344913
   ("" (use "terminates_implies_pvs0_tcc") (("" (assert) nil nil)) nil)
   ((pvs0_fibo_terminating name-judgement "(terminating?)" fibo_pvs0 nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (pvs0_fibo const-decl "PVS0" fibo_pvs0 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (terminates_implies_pvs0_tcc formula-decl nil measure_termination nil))
   nil
   (pvs0_fibo_tcc_termination subtype "fibo_pvs0.pvs0_fibo"
    "(measure_termination_defs[[nat, nat, nat], MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n)].pvs0_tcc_termination)"))
  (pvs0_fibo_tcc_termination-1 nil 3707344354 ("" (judgement-tcc) nil nil) nil
   nil
   (pvs0_fibo_tcc_termination subtype "fibo_pvs0.pvs0_fibo"
    "(measure_termination_defs[[nat, nat, nat], MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n)].pvs0_tcc_termination)")))
 (fibo_msr 0
  (fibo_msr-1 nil 3707345511
   ("" (typepred "pvs0_fibo")
    (("" (expand "pvs0_tcc_termination") (("" (propax) nil nil)) nil)) nil)
   ((pvs0_fibo_tcc_termination name-judgement "(pvs0_tcc_termination)"
     fibo_pvs0 nil)
    (pvs0_fibo_terminating name-judgement "(terminating?)" fibo_pvs0 nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (MT type-eq-decl nil pvs0_prelude nil) (< const-decl "bool" reals nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs nil)
    (pvs0_fibo const-decl "PVS0" fibo_pvs0 nil)
    (terminating? const-decl "bool" pvs0_lang nil))
   nil))
 (fibo_wfm_TCC1 0
  (fibo_wfm_TCC1-2 nil 3707344938
   ("" (typepred "pvs0_fibo")
    (("" (expand "pvs0_tcc_termination")
      (("" (skeep -) (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((wfm skolem-const-decl
     "WFM[[nat, nat, nat], MT, LAMBDA (m, n: nat): m < n]" fibo_pvs0 nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (pvs0_tcc_termination_pred const-decl "bool" measure_termination_defs nil)
    (pvs0_fibo_tcc_termination name-judgement "(pvs0_tcc_termination)"
     fibo_pvs0 nil)
    (pvs0_fibo_terminating name-judgement "(terminating?)" fibo_pvs0 nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (MT type-eq-decl nil pvs0_prelude nil) (< const-decl "bool" reals nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs nil)
    (pvs0_fibo const-decl "PVS0" fibo_pvs0 nil)
    (terminating? const-decl "bool" pvs0_lang nil))
   nil
   (fibo_wfm existence ""
    "(measure_termination_defs[[nat, nat, nat], MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n)].pvs0_tcc_termination_pred(fibo_pvs0.pvs0_fibo))"))
  (fibo_wfm_TCC1-1 nil 3707344354 ("" (existence-tcc) nil nil) nil nil
   (fibo_wfm existence ""
    "(measure_termination_defs[[nat, nat, nat], MT, LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n)].pvs0_tcc_termination_pred(fibo_pvs0.pvs0_fibo))"))))


(ccg_to_pvs0
 (ccg_implies_scp_pvs0 1
  (ccg_implies_scp_pvs0-5 "" 3693017930
   ("" (skeep)
    (("" (expand "ccg_termination_pvs0")
      (("" (expand "scp_termination_pvs0")
        ((""
          (lemma
           "ccg_termination_implies_scp[Val,PVS0Expr,Conditions,Path,MT,lt,N,semantic_relation(pvs0),eval_conditions(pvs0)]")
          (("" (inst? -1)
            (("" (split -)
              (("1" (hide -2)
                (("1" (expand "scp_termination?")
                  (("1" (skeep)
                    (("1" (insteep -)
                      (("1" (expand "infinite_seq_ccs")
                        (("1" (skeep)
                          (("1" (typepred "dg")
                            (("1" (expand "sound_ccg_digraph")
                              (("1" (flatten)
                                (("1" (inst-cp -2 "ccs(i)")
                                  (("1" (assert)
                                    (("1" (inst -2 "ccs(i+1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst? -4)
                                          (("1"
                                            (inst-cp -5 "i")
                                            (("1"
                                              (inst -5 "i+1")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst? -4)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scp_termination_pvs0 const-decl "bool" scp_iff_pvs0 nil)
    (scp_termination? const-decl "bool" scp CCG)
    (Seq_val type-eq-decl nil cc_def CCG) (Seq_cc type-eq-decl nil ccg CCG)
    (edges const-decl "bool" c_digraphs_def digraphs)
    (c_digraph type-eq-decl nil c_digraphs_def digraphs)
    (vert const-decl "bool" c_digraphs_def digraphs)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}" more_list_props
     structures)
    (infinite_seq_ccs const-decl "bool" scp CCG)
    (FunMeasure type-eq-decl nil ccg_def CCG)
    (FunMeasures type-eq-decl nil ccg_def CCG)
    (CallingContext type-eq-decl nil cc_def CCG)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (sound_ccg_digraph const-decl "bool" pvs0_to_dg nil)
    (ccg_termination_implies_scp formula-decl nil ccg CCG)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (list type-decl nil list_adt nil) (Path type-eq-decl nil pvs0_cc nil)
    (well_founded? const-decl "bool" orders nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (eval_conds def-decl "bool" pvs0_cc nil))
   shostak)
  (ccg_implies_scp_pvs0-4 "" 3681989032
   ("" (skeep)
    (("" (expand "ccg_termination_pvs0")
      (("" (expand "scp_termination_pvs0")
        ((""
          (lemma
           "ccg_termination_implies_scp[Val,PVS0Expr,Conditions,Path,MT,lt,N,semantic_rel_expr(pvs0),eval_conds(pvs0)]")
          (("" (skeep -2)
            (("" (inst -1 "pvs0_to_dg")
              (("" (split -)
                (("1" (hide -2)
                  (("1" (expand "scp_termination?")
                    (("1" (skeep)
                      (("1" (insteep -)
                        (("1" (assert)
                          (("1" (expand "infinite_seq_ccs")
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (expand "infinite_seq_ccs")
                          (("2" (skeep)
                            (("2" (typepred "pvs0_to_dg")
                              (("2" (expand "sound_ccg_digraph")
                                (("2" (flatten)
                                  (("2" (inst-cp -2 "ccs(i)")
                                    (("2" (assert)
                                      (("2"
                                        (inst -2 "ccs(i+1)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst? -4)
                                            (("2"
                                              (inst-cp -5 "i")
                                              (("2"
                                                (inst -5 "i+1")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst? -4)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2) (("2" (inst? 1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ccg_termination_pvs0 const-decl "bool" ccg_to_pvs0 nil)
    (eval_conds def-decl "bool" pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (N formal-const-decl "posnat" ccg_to_pvs0 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lt formal-const-decl "(well_founded?[MT])" ccg_to_pvs0 nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (MT formal-type-decl nil ccg_to_pvs0 nil)
    (Path type-eq-decl nil pvs0_cc nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val formal-nonempty-type-decl nil ccg_to_pvs0 nil)
    (ccg_termination_implies_scp formula-decl nil ccg CCG)
    (sound_ccg_digraph const-decl "bool" pvs0_to_dg nil)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (CallingContext type-eq-decl nil cc_def CCG)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FunMeasures type-eq-decl nil ccg_def CCG)
    (FunMeasure type-eq-decl nil ccg_def CCG)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (infinite_seq_ccs const-decl "bool" scp CCG)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}" more_list_props
     structures)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ccs skolem-const-decl "[nat -> (cc_of_pvs0(pvs0`4))]" ccg_to_pvs0 nil)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (pvs0_to_dg skolem-const-decl "(sound_ccg_digraph(pvs0))" ccg_to_pvs0 nil)
    (pvs0 skolem-const-decl "PVS0[Val]" ccg_to_pvs0 nil)
    (vert const-decl "bool" c_digraphs_def digraphs)
    (c_digraph type-eq-decl nil c_digraphs_def digraphs)
    (edges const-decl "bool" c_digraphs_def digraphs)
    (Seq_cc type-eq-decl nil ccg CCG) (Seq_val type-eq-decl nil cc_def CCG)
    (scp_termination? const-decl "bool" scp CCG)
    (scp_termination_pvs0 const-decl "bool" scp_iff_pvs0 nil))
   nil)
  (ccg_implies_scp_pvs0-3 "" 3662377153
   ("" (skeep)
    (("" (expand "ccg_termination_pvs0")
      (("" (expand "scp_termination_pvs0")
        ((""
          (lemma
           "ccg_termination_implies_scp[Val,PVS0Expr,Conditions,MT,lt,N,semantic_relation(pvs0),eval_conditions(pvs0)]")
          (("" (inst? -1)
            (("" (split -)
              (("1" (hide -2)
                (("1" (expand "scp_termination?")
                  (("1" (skeep)
                    (("1" (insteep -)
                      (("1" (rewrite "semantic_relation" :dir rl)
                        (("1" (rewrite "eval_conditions" :dir rl)
                          (("1" (expand "infinite_seq_ccs")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "infinite_seq_ccs")
                        (("2" (skeep)
                          (("2" (typepred "dg")
                            (("2" (expand "sound_ccg_digraph")
                              (("2" (flatten)
                                (("2" (inst-cp -2 "ccs(i)")
                                  (("2" (assert)
                                    (("2" (inst -2 "ccs(i+1)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst? -4)
                                          (("2"
                                            (inst-cp -5 "i")
                                            (("2"
                                              (inst -5 "i+1")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (inst? -4)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (well_founded? const-decl "bool" orders nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (ccg_termination_implies_scp formula-decl nil ccg CCG)
    (scp_termination? const-decl "bool" scp CCG)
    (Seq_val type-eq-decl nil cc_def CCG) (Seq_cc type-eq-decl nil ccg CCG)
    (edges const-decl "bool" c_digraphs_def digraphs)
    (c_digraph type-eq-decl nil c_digraphs_def digraphs)
    (vert const-decl "bool" c_digraphs_def digraphs)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}" more_list_props
     structures)
    (infinite_seq_ccs const-decl "bool" scp CCG)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}" more_list_props
     structures)
    (cc_of_pvs0 const-decl "bool" pvs0_to_dg nil)
    (vert const-decl "bool" c_digraphs_def digraphs)
    (c_digraph type-eq-decl nil c_digraphs_def digraphs)
    (edges const-decl "bool" c_digraphs_def digraphs)
    (Seq_cc type-eq-decl nil ccg CCG) (Seq_val type-eq-decl nil cc_def CCG)
    (scp_termination? const-decl "bool" scp CCG)
    (scp_termination_pvs0 const-decl "bool" scp_iff_pvs0 nil))
   nil))
 (ccg_implies_pvs0_tcc_TCC1 0
  (ccg_implies_pvs0_tcc_TCC1-2 "" 3790336437
   ("" (use "wf_nat") (("" (assert) nil nil)) nil) nil shostak
   (ccg_implies_pvs0_tcc subtype
    "LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n)"
    "(orders[MT].well_founded?)"))
  (ccg_implies_pvs0_tcc_TCC1-1 nil 3653169156
   ("" (use "wf_nat")
    (("" (expand "restrict") (("" (assert) (("" (skeep) nil nil)) nil)) nil))
    nil)
   ((wf_nat formula-decl nil naturalnumbers nil)) nil
   (ccg_implies_pvs0_tcc subtype
    "LAMBDA (m, n: naturalnumbers.nat): reals.<(m, n)"
    "(orders[MT].well_founded?)")))
 (ccg_implies_pvs0_tcc 0
  (ccg_implies_pvs0_tcc-1 nil 3653157358
   ("" (skeep)
    (("" (rewrite "scp_implies_pvs0_tcc")
      (("" (hide 2)
        (("" (use "ccg_implies_scp_pvs0") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((scp_implies_pvs0_tcc formula-decl nil scp_iff_pvs0 nil)
    (list type-decl nil list_adt nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PVS0 type-eq-decl nil pvs0_expr nil)
    (Val formal-nonempty-type-decl nil ccg_to_pvs0 nil)
    (ccg_implies_scp_pvs0 formula-decl nil ccg_to_pvs0 nil))
   shostak)))


(subseq (subseq_index 0
         (subseq_index-1 nil 3398148619
          ("" (skolem + ("f" "_"))
           (("" (typepred "f")
             (("" (expand "strict_increasing?")
               (("" (induct "i")
                 (("1" (assert) nil nil)
                  ("2" (skosimp)
                   (("2" (inst - "j!1" "j!1+1") (("2" (assert) nil nil)) nil))
                   nil))
                 nil))
               nil))
             nil))
           nil)
          ((strict_increasing? const-decl "bool" real_fun_preds reals)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (>= const-decl "bool" reals nil)
           (int nonempty-type-eq-decl nil integers nil)
           (integer_pred const-decl "[rational -> boolean]" integers nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (real nonempty-type-from-decl nil reals nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (number_field_pred const-decl "[number -> boolean]" number_fields
            nil)
           (number nonempty-type-decl nil numbers nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (boolean nonempty-type-decl nil booleans nil)
           (pred type-eq-decl nil defined_types nil)
           (nat_induction formula-decl nil naturalnumbers nil)
           (real_ge_is_total_order name-judgement "(total_order?[real])"
            real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil))
          shostak))
        (reflexive_subseq 0
         (reflexive_subseq-1 nil 3398150273
          ("" (skosimp)
           (("" (expand "subseq?")
             (("" (inst + "lambda i:i")
               (("1" (skosimp) nil nil)
                ("2" (expand "strict_increasing?") (("2" (skosimp) nil nil))
                 nil))
               nil))
             nil))
           nil)
          ((subseq? const-decl "bool" subseq nil)
           (number nonempty-type-decl nil numbers nil)
           (boolean nonempty-type-decl nil booleans nil)
           (number_field_pred const-decl "[number -> boolean]" number_fields
            nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers nil)
           (int nonempty-type-eq-decl nil integers nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (strict_increasing? const-decl "bool" real_fun_preds reals))
          shostak))
        (transitive_subseq 0
         (transitive_subseq-1 nil 3398150181
          ("" (expand "subseq?")
           (("" (skosimp*)
             (("" (inst + "f!2 o f!1")
               (("1" (skosimp)
                 (("1" (inst - "i!1")
                   (("1" (inst - "f!1(i!1)")
                     (("1" (expand "o ") (("1" (assert) nil nil)) nil)) nil))
                   nil))
                 nil)
                ("2" (hide -1 -2)
                 (("2" (typepred "f!2")
                   (("2" (typepred "f!1")
                     (("2" (expand "o")
                       (("2" (expand "strict_increasing?")
                         (("2" (skosimp)
                           (("2" (inst - "x!1" "y!1")
                             (("2" (inst - "f!1(x!1)" "f!1(y!1)")
                               (("2" (assert) nil nil)) nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil)
          ((real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (number nonempty-type-decl nil numbers nil)
           (boolean nonempty-type-decl nil booleans nil)
           (number_field_pred const-decl "[number -> boolean]" number_fields
            nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers nil)
           (int nonempty-type-eq-decl nil integers nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (strict_increasing? const-decl "bool" real_fun_preds reals)
           (O const-decl "T3" function_props nil)
           (f!2 skolem-const-decl
            "({f: [nat -> nat] | strict_increasing?(f)})" subseq nil)
           (f!1 skolem-const-decl
            "({f: [nat -> nat] | strict_increasing?(f)})" subseq nil)
           (subseq? const-decl "bool" subseq nil))
          shostak)))


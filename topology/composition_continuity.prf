(composition_continuity
 (composition_continuous_at 0
  (composition_continuous_at-1 nil 3293831935
   ("" (expand "continuous_at?")
    (("" (skosimp*)
      (("" (inst -2 "U1!1")
        (("" (expand "o" -3)
          (("" (assert)
            (("" (inst - "inverse_image(f!1, U1!1)")
              (("" (assert)
                (("" (expand "neighbourhood?")
                  (("" (expand "interior_point?")
                    (("" (skosimp*)
                      (("" (inst + "U!1")
                        (("" (assert)
                          (("" (expand "subset?")
                            (("" (skosimp*)
                              (("" (inst - "x!2")
                                (("" (assert)
                                  (("" (expand "inverse_image")
                                    (("" (assert)
                                      ((""
                                        (expand "o")
                                        (("" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "T3" function_props nil)
    (T2 formal-type-decl nil composition_continuity nil)
    (inverse_image const-decl "set[D]" function_image nil)
    (neighbourhood? const-decl "bool" topology nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (open nonempty-type-eq-decl nil topology nil)
    (open? const-decl "bool" topology nil)
    (S formal-const-decl "topology[T1]" composition_continuity nil)
    (topology nonempty-type-eq-decl nil topology_prelim nil)
    (topology? const-decl "bool" topology_prelim nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T1 formal-type-decl nil composition_continuity nil)
    (interior_point? const-decl "bool" topology nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T3 formal-type-decl nil composition_continuity nil)
    (continuous_at? const-decl "bool" continuity_def nil))
   shostak))
 (composition_continuous 0
  (composition_continuous-1 nil 3293833511
   ("" (skosimp)
    (("" (expand "continuous?")
      (("" (skosimp*)
        (("" (inst - "x!1")
          (("" (inst - "g!1(x!1)")
            ((""
              (lemma "composition_continuous_at"
               ("f" "f!1" "g" "g!1" "x" "x!1"))
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" continuity_def nil)
    (T1 formal-type-decl nil composition_continuity nil)
    (T3 formal-type-decl nil composition_continuity nil)
    (composition_continuous_at formula-decl nil composition_continuity nil)
    (T2 formal-type-decl nil composition_continuity nil))
   shostak))
 (composition_is_continuous 0
  (composition_is_continuous-1 nil 3358748001
   ("" (skosimp) (("" (rewrite "composition_continuous") nil nil)) nil)
   ((composition_continuous formula-decl nil composition_continuity nil)
    (T2 formal-type-decl nil composition_continuity nil)
    (T3 formal-type-decl nil composition_continuity nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (topology? const-decl "bool" topology_prelim nil)
    (topology nonempty-type-eq-decl nil topology_prelim nil)
    (T formal-const-decl "topology[T2]" composition_continuity nil)
    (U formal-const-decl "topology[T3]" composition_continuity nil)
    (continuous? const-decl "bool" continuity_def nil)
    (continuous type-eq-decl nil continuity_def nil)
    (T1 formal-type-decl nil composition_continuity nil)
    (S formal-const-decl "topology[T1]" composition_continuity nil))
   nil
   (composition_is_continuous subtype
    "function_props[composition_continuity.T1, composition_continuity.T2, composition_continuity.T3].o(composition_continuity.F, composition_continuity.G)"
    "continuous[T1, S, T3, U]"))))


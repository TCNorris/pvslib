(homeomorphic_symmetric
 (homeomorphic_symmetric 0
  (homeomorphic_symmetric-1 nil 3301318565
   ("" (split)
    (("1" (expand "homeomorphic?")
      (("1" (skosimp*)
        (("1" (inst + "inverse_alt(f!1)")
          (("1" (expand "homeomorphism?")
            (("1" (flatten)
              (("1"
                (lemma "bijective_inverse_alt_is_bijective[T1,T2]"
                 ("f" "f!1"))
                (("1" (assert)
                  (("1" (lemma "inverse_inverse_alt" ("f" "f!1"))
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (propax) nil nil)
                 ("3" (hide-all-but (1 -1))
                  (("3" (expand "bijective?")
                    (("3" (flatten)
                      (("3" (expand "surjective?")
                        (("3" (skosimp*)
                          (("3" (inst - "r!1")
                            (("3" (skosimp) (("3" (inst + "x!1") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "homeomorphism?")
            (("2" (flatten)
              (("2" (expand "bijective?")
                (("2" (flatten)
                  (("2" (expand "surjective?")
                    (("2" (skosimp*)
                      (("2" (inst - "r!1")
                        (("2" (skosimp*) (("2" (inst + "x!1") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "homeomorphic?")
      (("2" (skosimp*)
        (("2" (inst + "inverse_alt(f!1)")
          (("1" (expand "homeomorphism?")
            (("1" (flatten)
              (("1"
                (lemma "bij_inv_is_bij_alt"
                 ("f" "f!1" "g" "inverse_alt(f!1)"))
                (("1" (assert)
                  (("1" (lemma "inverse_inverse_alt" ("f" "f!1"))
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide-all-but (-1 1))
                  (("2" (expand "bijective?")
                    (("2" (flatten)
                      (("2" (skosimp*)
                        (("2" (expand "surjective?")
                          (("2" (inst - "r!1")
                            (("2" (skosimp) (("2" (inst + "x!1") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (expand "homeomorphism?")
            (("2" (expand "bijective?")
              (("2" (expand "surjective?")
                (("2" (flatten)
                  (("2" (skosimp)
                    (("2" (inst - "r!1")
                      (("2" (skosimp) (("2" (inst + "x!1") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bij_inv_is_bij_alt formula-decl nil function_inverse_def nil)
    (homeomorphic? const-decl "bool" homeomorphism_def nil)
    (FALSE const-decl "bool" booleans nil)
    (T2 formal-type-decl nil homeomorphic_symmetric nil)
    (TRUE const-decl "bool" booleans nil)
    (T1 formal-type-decl nil homeomorphic_symmetric nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (inverse? const-decl "bool" function_inverse_def nil)
    (inverses nonempty-type-eq-decl nil function_inverse_alt nil)
    (inverse_alt const-decl "inverses(f)" function_inverse_alt nil)
    (surjective? const-decl "bool" functions nil)
    (inverse_inverse_alt formula-decl nil function_inverse_alt_aux structures)
    (bijective? const-decl "bool" functions nil)
    (bijective_inverse_alt_is_bijective judgement-tcc nil function_inverse_alt
     nil)
    (homeomorphism? const-decl "bool" homeomorphism_def nil))
   shostak)))


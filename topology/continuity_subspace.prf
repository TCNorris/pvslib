(continuity_subspace
 (subspace_continuous_at 0
  (subspace_continuous_at-1 nil 3301763709
   ("" (expand "continuous_at?")
    (("" (expand "restrict")
      (("" (skosimp*)
        (("" (expand "neighbourhood?")
          (("" (expand "interior_point?")
            (("" (skosimp*)
              (("" (typepred "U!2")
                (("" (inst -2 "U!2")
                  (("" (split -2)
                    (("1" (skosimp*)
                      (("1" (typepred "U!3")
                        (("1" (inst + "U!3")
                          (("1" (typepred "x!1")
                            (("1" (assert)
                              (("1" (expand "restrict")
                                (("1" (expand "subset?")
                                  (("1" (expand "inverse_image")
                                    (("1" (assert)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst -6 "f!1(x!2)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst - "x!2")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "open?")
                            (("2" (expand "induced_topology")
                              (("2" (expand "restrict")
                                (("2" (expand "image")
                                  (("2" (assert)
                                    (("2" (inst + "U!3") nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (inst + "U!2")
                        (("2" (assert)
                          (("2" (expand "subset?") (("2" (skosimp) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (neighbourhood? const-decl "bool" topology nil)
    (T3_pred const-decl "[T1 -> boolean]" continuity_subspace nil)
    (T3 formal-subtype-decl nil continuity_subspace nil)
    (induced_topology const-decl "setofsets[T2]" subspace nil)
    (U!3 skolem-const-decl "open[T1, S]" continuity_subspace nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (inverse_image const-decl "set[D]" function_image nil)
    (image const-decl "set[R]" function_image nil)
    (S formal-const-decl "topology[T1]" continuity_subspace nil)
    (T1 formal-type-decl nil continuity_subspace nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T2 formal-type-decl nil continuity_subspace nil)
    (set type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (topology? const-decl "bool" topology_prelim nil)
    (topology nonempty-type-eq-decl nil topology_prelim nil)
    (T formal-const-decl "topology[T2]" continuity_subspace nil)
    (open? const-decl "bool" topology nil)
    (open nonempty-type-eq-decl nil topology nil)
    (interior_point? const-decl "bool" topology nil)
    (continuous_at? const-decl "bool" continuity_def nil))
   shostak))
 (subspace_continuous 0
  (subspace_continuous-1 nil 3302357092
   ("" (lemma "subspace_continuous_at")
    (("" (expand "continuous?")
      (("" (skosimp*)
        (("" (typepred "x!1")
          (("" (inst - "f!1" "x!1")
            (("" (inst - "x!1") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" continuity_def nil)
    (T3 formal-subtype-decl nil continuity_subspace nil)
    (T3_pred const-decl "[T1 -> boolean]" continuity_subspace nil)
    (T1 formal-type-decl nil continuity_subspace nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T2 formal-type-decl nil continuity_subspace nil)
    (subspace_continuous_at formula-decl nil continuity_subspace nil))
   shostak))
 (restrict_is_continuous 0
  (restrict_is_continuous-1 nil 3358748528
   ("" (skosimp)
    (("" (typepred "F!1")
      (("" (lemma "subspace_continuous" ("f" "F!1")) (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((continuous type-eq-decl nil continuity_def nil)
    (continuous? const-decl "bool" continuity_def nil)
    (T formal-const-decl "topology[T2]" continuity_subspace nil)
    (S formal-const-decl "topology[T1]" continuity_subspace nil)
    (topology nonempty-type-eq-decl nil topology_prelim nil)
    (topology? const-decl "bool" topology_prelim nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (T2 formal-type-decl nil continuity_subspace nil)
    (T1 formal-type-decl nil continuity_subspace nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subspace_continuous formula-decl nil continuity_subspace nil))
   nil
   (restrict_is_continuous subtype
    "restrict[continuity_subspace.T1, T3, continuity_subspace.T2].restrict(continuity_subspace.F)"
    "continuous[T3, induced_topology[T1, S, T3], T2, T]"))))


(cont_vect
 (continuity_def 0
  (continuity_def-1 nil 3302273405
   ("" (skosimp*)
    (("" (expand "continuous_vv?")
      (("" (expand "convergence") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((continuous_vv? const-decl "bool" cont_vect nil)
    (convergence const-decl "bool" limit_vect nil))
   nil))
 (continuity_def2 0
  (continuity_def2-1 nil 3302273405
   ("" (skosimp*)
    (("" (rewrite "continuity_def")
      (("" (lemma "convergent_in_domain")
        (("" (inst?) (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((continuity_def formula-decl nil cont_vect nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" cont_vect nil)
    (Index type-eq-decl nil vectors vectors)
    (Vector type-eq-decl nil vectors vectors)
    (m formal-const-decl "posnat" cont_vect nil)
    (convergent_in_domain formula-decl nil limit_vect nil))
   nil))
 (sum_continuous_vv 0
  (sum_continuous_vv-1 nil 3302273405
   ("" (skosimp*)
    (("" (rewrite "continuity_def")
      (("" (rewrite "continuity_def")
        (("" (rewrite "continuity_def")
          (("" (lemma "cv_sum[n,m]")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((continuity_def formula-decl nil cont_vect nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" cont_vect nil)
    (Index type-eq-decl nil vectors vectors)
    (Vector type-eq-decl nil vectors vectors)
    (m formal-const-decl "posnat" cont_vect nil)
    (+ const-decl "real" vectors vectors)
    (cv_sum formula-decl nil limit_vect nil))
   nil))
 (diff_continuous_vv 0
  (diff_continuous_vv-2 nil 3442334818
   ("" (grind :defs nil :rewrites ("continuity_def2" "diff_fun_convergent"))
    nil nil)
   ((diff_fun_convergent formula-decl nil limit_vect nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" cont_vect nil)
    (m formal-const-decl "posnat" cont_vect nil)
    (continuity_def2 formula-decl nil cont_vect nil))
   nil)
  (diff_continuous_vv-1 nil 3302273405
   ("" (grind :defs nil :rewrites ("continuity_def2" "diff_fun_convergent"))
    nil nil)
   nil nil))
 (const_continuous_vv 0
  (const_continuous_vv-1 nil 3302273405
   ("" (skeep)
    (("" (expand "continuous_vv?")
      (("" (skosimp*)
        (("" (expand "const_fun")
          (("" (inst + "epsilon!1")
            (("" (skosimp*) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vv? const-decl "bool" cont_vect nil)
    (const_fun const-decl "Vector[m]" limit_vect nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_zero formula-decl nil vectors vectors)
    (sub_eq_args formula-decl nil vectors vectors)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (neg_continuous_vv 0
  (neg_continuous_vv-1 nil 3302273405
   ("" (skosimp*)
    (("" (expand "continuous_vv?")
      (("" (skosimp*)
        (("" (inst - "epsilon!1")
          (("" (skosimp*)
            (("" (inst + "delta!1")
              (("" (skosimp*)
                (("" (inst?)
                  (("" (assert)
                    (("" (lemma "norm_neg[m]")
                      (("" (inst - "f!1(x!1) - f!1(x0!1)")
                        (("" (expand "-") (("" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vv? const-decl "bool" cont_vect nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" cont_vect nil)
    (Index type-eq-decl nil vectors vectors)
    (Vector type-eq-decl nil vectors vectors)
    (norm_neg formula-decl nil vectors vectors)
    (m formal-const-decl "posnat" cont_vect nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "Vector" vectors vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "real" vectors vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (continuous_vv_fun_TCC1 0
  (continuous_vv_fun_TCC1-1 nil 3302273405
   ("" (inst + "(LAMBDA (x: Vector[n]): vectors.zero)")
    (("" (expand "continuous_vv?")
      (("" (skosimp*)
        (("" (rewrite "continuity_def")
          (("" (lemma "cv_const") (("" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((continuity_def formula-decl nil cont_vect nil)
    (cv_const formula-decl nil limit_vect nil)
    (zero const-decl "Vector" vectors vectors)
    (continuous_vv? const-decl "bool" cont_vect nil)
    (m formal-const-decl "posnat" cont_vect nil)
    (Vector type-eq-decl nil vectors vectors)
    (Index type-eq-decl nil vectors vectors)
    (n formal-const-decl "posnat" cont_vect nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (continuous_vv_fun existence ""
    "{f | cont_vect.continuous_vv?(cont_vect.f)}")))
 (sum_fun_continuous_vv 0
  (sum_fun_continuous_vv-1 nil 3302273405
   ("" (skosimp*)
    (("" (typepred "h1!1")
      (("" (typepred "h2!1")
        (("" (expand "continuous_vv?")
          (("" (skosimp*)
            (("" (inst?)
              (("" (inst?) (("" (rewrite "sum_continuous_vv") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vv_fun nonempty-type-eq-decl nil cont_vect nil)
    (continuous_vv? const-decl "bool" cont_vect nil)
    (m formal-const-decl "posnat" cont_vect nil)
    (Vector type-eq-decl nil vectors vectors)
    (Index type-eq-decl nil vectors vectors)
    (n formal-const-decl "posnat" cont_vect nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sum_continuous_vv formula-decl nil cont_vect nil))
   nil
   (sum_fun_continuous_vv subtype
    "LAMBDA (v: vectors[cont_vect.n].Vector) -> Vector[m]: (vectors[cont_vect.m].+)(cont_vect.h1(v), cont_vect.h2(v))"
    "continuous_vv_fun")))
 (diff_fun_continuous_vv 0
  (diff_fun_continuous_vv-1 nil 3302273405
   ("" (skosimp*)
    (("" (typepred "h1!1")
      (("" (typepred "h2!1")
        (("" (expand "continuous_vv?")
          (("" (skosimp*)
            (("" (inst?)
              (("" (inst?) (("" (rewrite "diff_continuous_vv") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vv_fun nonempty-type-eq-decl nil cont_vect nil)
    (continuous_vv? const-decl "bool" cont_vect nil)
    (m formal-const-decl "posnat" cont_vect nil)
    (Vector type-eq-decl nil vectors vectors)
    (Index type-eq-decl nil vectors vectors)
    (n formal-const-decl "posnat" cont_vect nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (diff_continuous_vv formula-decl nil cont_vect nil))
   nil
   (diff_fun_continuous_vv subtype
    "LAMBDA (v: vectors[cont_vect.n].Vector) -> Vector[m]: (vectors[cont_vect.m].-)(cont_vect.h1(v), cont_vect.h2(v))"
    "continuous_vv_fun")))
 (const_fun_continuous_vv 0
  (const_fun_continuous_vv-1 nil 3302273405
   ("" (expand "continuous_vv?")
    (("" (grind :defs nil :rewrites ("const_continuous_vv")) nil nil)) nil)
   ((const_continuous_vv formula-decl nil cont_vect nil)
    (continuous_vv? const-decl "bool" cont_vect nil))
   nil
   (const_fun_continuous_vv subtype
    "limit_vect[cont_vect.n, cont_vect.m].const_fun(cont_vect.u)"
    "continuous_vv_fun")))
 (neg_fun_continuous_vv 0
  (neg_fun_continuous_vv-1 nil 3302273405
   ("" (skosimp*)
    (("" (typepred "h!1")
      (("" (expand "continuous_vv?")
        (("" (skosimp*)
          (("" (inst?) (("" (rewrite "neg_continuous_vv") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vv_fun nonempty-type-eq-decl nil cont_vect nil)
    (continuous_vv? const-decl "bool" cont_vect nil)
    (m formal-const-decl "posnat" cont_vect nil)
    (Vector type-eq-decl nil vectors vectors)
    (Index type-eq-decl nil vectors vectors)
    (n formal-const-decl "posnat" cont_vect nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (neg_continuous_vv formula-decl nil cont_vect nil))
   nil
   (neg_fun_continuous_vv subtype
    "LAMBDA (v: vectors[cont_vect.n].Vector) -> Vector[m]: (vectors[cont_vect.m].-)(cont_vect.h(v))"
    "continuous_vv_fun")))
 (sum_cont_fun 0
  (sum_cont_fun-1 nil 3393866517
   ("" (skosimp*)
    (("" (assert)
      (("" (expand "continuous_vv?")
        (("" (skosimp*)
          (("" (inst?)
            (("" (inst?)
              (("" (lemma "sum_fun_continuous_vv")
                (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((m formal-const-decl "posnat" cont_vect nil)
    (continuous_vv_fun nonempty-type-eq-decl nil cont_vect nil)
    (sum_fun_continuous_vv judgement-tcc nil cont_vect nil)
    (Vector type-eq-decl nil vectors vectors)
    (Index type-eq-decl nil vectors vectors)
    (n formal-const-decl "posnat" cont_vect nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (continuous_vv? const-decl "bool" cont_vect nil))
   shostak))
 (diff_cont_fun 0
  (diff_cont_fun-1 nil 3393866553
   ("" (skosimp*)
    (("" (expand "continuous_vv?")
      (("" (skosimp*)
        (("" (inst?)
          (("" (inst?) (("" (rewrite "diff_continuous_vv") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vv? const-decl "bool" cont_vect nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" cont_vect nil)
    (Index type-eq-decl nil vectors vectors)
    (Vector type-eq-decl nil vectors vectors)
    (diff_continuous_vv formula-decl nil cont_vect nil)
    (m formal-const-decl "posnat" cont_vect nil))
   shostak))
 (const_cont_fun 0
  (const_cont_fun-1 nil 3393866606
   ("" (skosimp*)
    (("" (lemma "const_fun_continuous_vv") (("" (inst?) nil nil)) nil)) nil)
   ((const_fun_continuous_vv judgement-tcc nil cont_vect nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (m formal-const-decl "posnat" cont_vect nil)
    (Index type-eq-decl nil vectors vectors)
    (Vector type-eq-decl nil vectors vectors))
   shostak))
 (neg_cont_fun 0
  (neg_cont_fun-1 nil 3393866960
   ("" (skosimp*)
    (("" (assert)
      (("" (expand "continuous_vv?")
        (("" (skosimp*)
          (("" (inst?) (("" (rewrite "neg_continuous_vv") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((neg_continuous_vv formula-decl nil cont_vect nil)
    (m formal-const-decl "posnat" cont_vect nil)
    (Vector type-eq-decl nil vectors vectors)
    (Index type-eq-decl nil vectors vectors)
    (n formal-const-decl "posnat" cont_vect nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (continuous_vv? const-decl "bool" cont_vect nil))
   shostak)))


(vect_vect_2D_continuity
 (div_vvr_TCC1 0
  (div_vvr_TCC1-1 nil 3515487776 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (nzero_vvr? const-decl "bool" vect_vect_2D_continuity nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (div_vvr subtype
    "vect_vect_2D_continuity.ggnz(vect_vect_2D_continuity.s, vect_vect_2D_continuity.nzv)"
    "nznum")))
 (sum_vvv_cont 0
  (sum_vvv_cont-1 nil 3515488189
   ("" (skeep)
    (("" (expand "continuous_vvv?")
      (("" (skeep)
        (("" (typepred "ffvc")
          (("" (typepred "ggvc")
            (("" (expand "continuous_vvv?")
              (("" (inst - "epsil/2" "s" "nzv")
                (("" (inst - "epsil/2" "s" "nzv")
                  (("" (skosimp*)
                    (("" (inst + "min(ds!1,ds!2)" "min(dv!1,dv!2)")
                      (("" (skeep)
                        (("" (inst - "sp" "nzvp")
                          (("" (inst - "sp" "nzvp")
                            (("" (assert)
                              (("" (expand "sum_vvv")
                                (("" (lemma "norm_add_le")
                                  ((""
                                    (inst - "ffvc(s,nzv) - ffvc(sp,nzvp)"
                                     "ggvc(s,nzv) - ggvc(sp,nzvp)")
                                    (("" (grind :exclude ("norm" "min")) nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vvv? const-decl "bool" vect_vect_2D_continuity nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_add_le formula-decl nil vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (sum_vvv const-decl "Vect2" vect_vect_2D_continuity nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   shostak))
 (sum_vvr_cont 0
  (sum_vvr_cont-1 nil 3515494507
   ("" (skeep)
    (("" (expand "continuous_vvr?")
      (("" (skeep)
        (("" (typepred "ffrc")
          (("" (typepred "ggrc")
            (("" (expand "continuous_vvr?")
              (("" (inst - "epsil/2" "s" "nzv")
                (("" (inst - "epsil/2" "s" "nzv")
                  (("" (skosimp*)
                    (("" (inst + "min(ds!1,ds!2)" "min(dv!1,dv!2)")
                      (("" (skeep)
                        (("" (inst - "sp" "nzvp")
                          (("" (inst - "sp" "nzvp")
                            (("" (assert)
                              (("" (expand "sum_vvr")
                                (("" (lemma "triangle")
                                  ((""
                                    (inst - "ffrc(s,nzv) - ffrc(sp,nzvp)"
                                     "ggrc(s,nzv) - ggrc(sp,nzvp)")
                                    (("" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (continuous_vvr? const-decl "bool" vect_vect_2D_continuity nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (triangle formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum_vvr const-decl "real" vect_vect_2D_continuity nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   nil))
 (diff_vvv_cont 0
  (diff_vvv_cont-2 nil 3515488435
   ("" (skeep)
    (("" (expand "continuous_vvv?")
      (("" (skeep)
        (("" (typepred "ffvc")
          (("" (typepred "ggvc")
            (("" (expand "continuous_vvv?")
              (("" (inst - "epsil/2" "s" "nzv")
                (("" (inst - "epsil/2" "s" "nzv")
                  (("" (skosimp*)
                    (("" (inst + "min(ds!1,ds!2)" "min(dv!1,dv!2)")
                      (("" (skeep)
                        (("" (inst - "sp" "nzvp")
                          (("" (inst - "sp" "nzvp")
                            (("" (assert)
                              (("" (expand "diff_vvv")
                                (("" (lemma "norm_add_le")
                                  ((""
                                    (inst - "ffvc(s,nzv) - ffvc(sp,nzvp)"
                                     "ggvc(sp,nzvp) - ggvc(s,nzv)")
                                    (("" (lemma "norm_neg")
                                      ((""
                                        (inst
                                         -
                                         "ggvc(sp, nzvp) - ggvc(s, nzv)")
                                        ((""
                                          (grind :exclude ("norm" "min"))
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vvv? const-decl "bool" vect_vect_2D_continuity nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_add_le formula-decl nil vectors_2D vectors)
    (norm_neg formula-decl nil vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (diff_vvv const-decl "Vect2" vect_vect_2D_continuity nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   nil)
  (diff_vvv_cont-1 nil 3515488366
   ("" (skeep)
    (("" (expand "continuous_vvv?")
      (("" (skeep)
        (("" (typepred "ffvc")
          (("" (typepred "ggvc")
            (("" (expand "continuous_vvv?")
              (("" (inst - "epsil/2" "s" "nzv")
                (("" (inst - "epsil/2" "s" "nzv")
                  (("" (skosimp*)
                    (("" (inst + "min(ds!1,ds!2)" "min(dv!1,dv!2)")
                      (("" (skeep)
                        (("" (inst - "sp" "nzvp")
                          (("" (inst - "sp" "nzvp")
                            (("" (assert)
                              (("" (expand "sum_vvv")
                                (("" (lemma "norm_add_le")
                                  ((""
                                    (inst - "ffvc(s,nzv) - ffvc(sp,nzvp)"
                                     "ggvc(s,nzv) - ggvc(sp,nzvp)")
                                    (("" (grind :exclude ("norm" "min"))
                                      nil))))))))))))))))))))))))))))))))))
    nil)
   nil nil))
 (scal_vvv_cont 0
  (scal_vvv_cont-1 nil 3515833806
   ("" (skeep)
    (("" (typepred "ffvc")
      (("" (expand "continuous_vvv?")
        (("" (skosimp*)
          (("" (inst - "epsil!1/(abs(c)+1)" "s!1" "nzv!1")
            (("" (skosimp*)
              (("" (inst + "ds!1" "dv!1")
                (("" (skosimp*)
                  (("" (inst - "sp!1" "nzvp!1")
                    (("" (assert)
                      (("" (expand "scal_vvv")
                        (("" (lemma "norm_scal")
                          ((""
                            (inst - "c"
                             "ffvc(s!1, nzv!1) - ffvc(sp!1, nzvp!1)")
                            (("" (assert)
                              ((""
                                (case "c * (ffvc(s!1, nzv!1) - ffvc(sp!1, nzvp!1))=c * ffvc(s!1, nzv!1) - c * ffvc(sp!1, nzvp!1)")
                                (("1" (replace -1)
                                  (("1" (hide -1)
                                    (("1"
                                      (case
                                       "abs(c) * norm(ffvc(s!1, nzv!1) - ffvc(sp!1, nzvp!1)) < epsil!1")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide (-1 2))
                                        (("2"
                                          (cross-mult -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1) (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vvv? const-decl "bool" vect_vect_2D_continuity nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_scal formula-decl nil vectors_2D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (* const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "Vector" vectors_2D vectors)
    (scal_vvv const-decl "Vect2" vect_vect_2D_continuity nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   shostak))
 (dot_vvv_cont 0
  (dot_vvv_cont-2 nil 3515489053
   ("" (skeep)
    (("" (expand "continuous_vvr?")
      (("" (skosimp*)
        (("" (typepred "ffvc")
          (("" (typepred "ggvc")
            (("" (expand "continuous_vvv?")
              (("" (label "fcont" -2)
                (("" (label "gcont" -1)
                  (("" (name "ep1" "epsil!1/(8*norm(ggvc(s!1,nzv!1))+1)")
                    ((""
                      (name "ep2" "epsil!1/(8*(norm(ffvc(s!1,nzv!1)) + ep1))")
                      (("" (label "ep1name" -2)
                        (("" (label "ep2name" -1)
                          (("" (inst - "ep2" "s!1" "nzv!1")
                            (("" (inst - "ep1" "s!1" "nzv!1")
                              (("" (skosimp*)
                                ((""
                                  (inst + "min(ds!1,ds!2)" "min(dv!1,dv!2)")
                                  (("" (skosimp*)
                                    (("" (inst - "sp!1" "nzvp!1")
                                      ((""
                                        (inst - "sp!1" "nzvp!1")
                                        ((""
                                          (assert)
                                          ((""
                                            (expand "dot_vvv")
                                            ((""
                                              (lemma "triangle")
                                              ((""
                                                (inst
                                                 -
                                                 "ffvc(s!1,nzv!1) * ggvc(s!1,nzv!1) - ffvc(sp!1,nzvp!1) * ggvc(s!1,nzv!1)"
                                                 " ffvc(sp!1,nzvp!1) * ggvc(s!1,nzv!1) -
                                                                                                                                                                                                                                                       ffvc(sp!1,nzvp!1) * ggvc(sp!1,nzvp!1)")
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (lemma "schwarz")
                                                    ((""
                                                      (inst
                                                       -
                                                       "ffvc(s!1,nzv!1)-ffvc(sp!1,nzvp!1)"
                                                       "ggvc(s!1,nzv!1)")
                                                      ((""
                                                        (assert)
                                                        ((""
                                                          (lemma "schwarz")
                                                          ((""
                                                            (inst
                                                             -
                                                             "ffvc(sp!1,nzvp!1)"
                                                             "ggvc(s!1,nzv!1) - ggvc(sp!1,nzvp!1)")
                                                            ((""
                                                              (assert)
                                                              ((""
                                                                (rewrite
                                                                 "dot_sub_right")
                                                                ((""
                                                                  (rewrite
                                                                   "dot_sub_left")
                                                                  ((""
                                                                    (case
                                                                     "norm(ffvc(s!1, nzv!1) - ffvc(sp!1, nzvp!1)) * norm(ggvc(s!1, nzv!1)) + norm(ffvc(sp!1, nzvp!1)) *
                      norm(ggvc(s!1, nzv!1) - ggvc(sp!1, nzvp!1))<epsil!1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       (-1
                                                                        -2
                                                                        -3
                                                                        2))
                                                                      (("2"
                                                                        (case
                                                                         "norm(ffvc(sp!1,nzvp!1)) <= norm(ffvc(s!1,nzv!1)) + ep1")
                                                                        (("1"
                                                                          (replace
                                                                           "ep1name"
                                                                           -
                                                                           rl)
                                                                          (("1"
                                                                            (hide
                                                                             "ep1name")
                                                                            (("1"
                                                                              (replace
                                                                               "ep2name"
                                                                               -
                                                                               rl)
                                                                              (("1"
                                                                                (hide
                                                                                 "ep2name")
                                                                                (("1"
                                                                                  (name
                                                                                   "A"
                                                                                   "ffvc(s!1,nzv!1)")
                                                                                  (("1"
                                                                                    (name
                                                                                     "B"
                                                                                     "ffvc(sp!1,nzvp!1)")
                                                                                    (("1"
                                                                                      (name
                                                                                       "X"
                                                                                       "ggvc(s!1,nzv!1)")
                                                                                      (("1"
                                                                                        (name
                                                                                         "Y"
                                                                                         "ggvc(sp!1,nzvp!1)")
                                                                                        (("1"
                                                                                          (label
                                                                                           "yname"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (label
                                                                                             "xname"
                                                                                             -2)
                                                                                            (("1"
                                                                                              (label
                                                                                               "bname"
                                                                                               -3)
                                                                                              (("1"
                                                                                                (label
                                                                                                 "aname"
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   "aname")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     "bname")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       "xname")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         "yname")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           "aname")
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             "bname")
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               "xname")
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 "yname")
                                                                                                                (("1"
                                                                                                                  (copy
                                                                                                                   "gcont")
                                                                                                                  (("1"
                                                                                                                    (reveal
                                                                                                                     "ep1name")
                                                                                                                    (("1"
                                                                                                                      (reveal
                                                                                                                       "xname")
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (name
                                                                                                                               "myvar"
                                                                                                                               "norm(A) + epsil!1 / (1+8 * norm(X))")
                                                                                                                              (("1"
                                                                                                                                (label
                                                                                                                                 "namemyvar"
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "norm(A - B) * norm(X) < epsil!1/2 AND norm(B) * norm(X - Y) <= epsil!1/2")
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (split
                                                                                                                                       +)
                                                                                                                                      (("1"
                                                                                                                                        (case
                                                                                                                                         "ep1*norm(X) < epsil!1/2")
                                                                                                                                        (("1"
                                                                                                                                          (copy
                                                                                                                                           "fcont")
                                                                                                                                          (("1"
                                                                                                                                            (mult-by
                                                                                                                                             -1
                                                                                                                                             "norm(X)")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             "ep1name"
                                                                                                                                             +
                                                                                                                                             :dir
                                                                                                                                             rl)
                                                                                                                                            (("2"
                                                                                                                                              (cross-mult
                                                                                                                                               1)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (copy
                                                                                                                                         -4)
                                                                                                                                        (("2"
                                                                                                                                          (mult-by
                                                                                                                                           -1
                                                                                                                                           "norm(X-Y)")
                                                                                                                                          (("2"
                                                                                                                                            (copy
                                                                                                                                             -4)
                                                                                                                                            (("2"
                                                                                                                                              (cross-mult
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             ("fcont"
                                                                              1))
                                                                            (("2"
                                                                              (lemma
                                                                               "norm_add_le")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "ffvc(s!1, nzv!1)-ffvc(sp!1, nzvp!1)"
                                                                                 "-ffvc(s!1, nzv!1)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (continuous_vvr? const-decl "bool" vect_vect_2D_continuity nil)
    (continuous_vvv? const-decl "bool" vect_vect_2D_continuity nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (triangle formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "Vector" vectors_2D vectors)
    (dot_sub_left formula-decl nil vectors_2D vectors)
    (norm_add_le formula-decl nil vectors_2D vectors)
    (sub_cancel formula-decl nil vectors_2D vectors)
    (add_neg_sub formula-decl nil vectors_2D vectors)
    (norm_neg formula-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (X skolem-const-decl "Vect2" vect_vect_2D_continuity nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (< const-decl "bool" reals nil)
    (dot_sub_right formula-decl nil vectors_2D vectors)
    (schwarz formula-decl nil vectors_2D vectors)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors_2D vectors)
    (dot_vvv const-decl "real" vect_vect_2D_continuity nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors))
   nil)
  (dot_vvv_cont-1 nil 3515488825 ("" (postpone) nil nil) nil shostak))
 (prod_vvr_cont 0
  (prod_vvr_cont-1 nil 3515496006
   ("" (skeep)
    (("" (name "fffv" "LAMBDA (s,nzv): (# x:= ffrc(s,nzv), y:= 0 #)")
      (("" (name "gggv" "LAMBDA (s,nzv): (# x:= ggrc(s,nzv), y:= 0 #)")
        (("" (lemma "dot_vvv_cont")
          (("" (inst - "fffv" "gggv")
            (("1" (hide -2 -3)
              (("1" (expand "dot_vvv")
                (("1" (expand "prod_vvr")
                  (("1" (expand "gggv")
                    (("1" (expand "fffv")
                      (("1" (expand "*") (("1" (propax) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (expand "continuous_vvv?")
                (("2" (typepred "ggrc")
                  (("2" (expand "continuous_vvr?")
                    (("2" (skosimp*)
                      (("2" (inst - "epsil!1" "s!1" "nzv!1")
                        (("2" (skosimp*)
                          (("2" (inst + "ds!1" "dv!1")
                            (("2" (skosimp*)
                              (("2" (inst - "sp!1" "nzvp!1")
                                (("2" (assert)
                                  (("2" (rewrite "sqrt_sqv_norm" 1 :dir rl)
                                    (("2"
                                      (case
                                       "FORALL (vvww:Vect2): sqv(vvww) = sq(vvww`x) + sq(vvww`y)")
                                      (("1"
                                        (rewrite -1)
                                        (("1"
                                          (expand "gggv" +)
                                          (("1"
                                            (expand "-" +)
                                            (("1"
                                              (rewrite "sq_0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "FORALL (aaa:real): sqrt(sq(aaa)) = abs(aaa)")
                                                  (("1"
                                                    (rewrite -1 1)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (case "aaa>=0")
                                                        (("1" (grind) nil nil)
                                                         ("2"
                                                          (lemma "sqrt_sq")
                                                          (("2"
                                                            (inst - "-aaa")
                                                            (("2"
                                                              (rewrite
                                                               "sq_neg")
                                                              (("2"
                                                                (split -)
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (expand
                                                                     "abs")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide-all-but 1)
              (("3" (expand "continuous_vvv?")
                (("3" (typepred "ffrc")
                  (("3" (expand "continuous_vvr?")
                    (("3" (skosimp*)
                      (("3" (inst - "epsil!1" "s!1" "nzv!1")
                        (("3" (skosimp*)
                          (("3" (inst + "ds!1" "dv!1")
                            (("3" (skosimp*)
                              (("3" (inst - "sp!1" "nzvp!1")
                                (("3" (assert)
                                  (("3" (rewrite "sqrt_sqv_norm" 1 :dir rl)
                                    (("3"
                                      (case
                                       "FORALL (vvww:Vect2): sqv(vvww) = sq(vvww`x) + sq(vvww`y)")
                                      (("1"
                                        (rewrite -1)
                                        (("1"
                                          (expand "fffv" +)
                                          (("1"
                                            (expand "-" +)
                                            (("1"
                                              (rewrite "sq_0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "FORALL (aaa:real): sqrt(sq(aaa)) = abs(aaa)")
                                                  (("1"
                                                    (rewrite -1 1)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (case "aaa>=0")
                                                        (("1" (grind) nil nil)
                                                         ("2"
                                                          (lemma "sqrt_sq")
                                                          (("2"
                                                            (inst - "-aaa")
                                                            (("2"
                                                              (rewrite
                                                               "sq_neg")
                                                              (("2"
                                                                (split -)
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (expand
                                                                     "abs")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vvr? const-decl "bool" vect_vect_2D_continuity nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (even_nat nonempty-type-eq-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (dot_vvv_cont formula-decl nil vect_vect_2D_continuity nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals) (sq_0 formula-decl nil sq reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt_sq formula-decl nil sqrt reals) (sq_neg formula-decl nil sq reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (sqrt_square formula-decl nil sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sqrt_sqv_norm formula-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (prod_vvr const-decl "real" vect_vect_2D_continuity nil)
    (* const-decl "real" vectors_2D vectors)
    (dot_vvv const-decl "real" vect_vect_2D_continuity nil)
    (gggv skolem-const-decl
     "[[Vect2, Nz_vect2] -> [# x: real, y: even_nat #]]"
     vect_vect_2D_continuity nil)
    (fffv skolem-const-decl
     "[[Vect2, Nz_vect2] -> [# x: real, y: even_nat #]]"
     vect_vect_2D_continuity nil)
    (continuous_vvv? const-decl "bool" vect_vect_2D_continuity nil))
   shostak))
 (const_vvr_cont 0
  (const_vvr_cont-1 nil 3515837711
   ("" (skeep)
    (("" (expand "continuous_vvr?")
      (("" (skosimp*)
        (("" (inst + "1" "1")
          (("" (skosimp*)
            (("" (expand "const_vvr")
              (("" (assert) (("" (expand "abs") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (continuous_vvr? const-decl "bool" vect_vect_2D_continuity nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (const_vvr const-decl "real" vect_vect_2D_continuity nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   shostak))
 (scal_vvr_vvv_cont 0
  (scal_vvr_vvv_cont-1 nil 3515494224
   ("" (skeep)
    (("" (name "ggx" "LAMBDA (s,nzv): ggvc(s,nzv)`x")
      (("" (name "ggy" "LAMBDA (s,nzv): ggvc(s,nzv)`y")
        (("" (name "ggvy" "LAMBDA (s,nzv): (# x:= 0, y:= ggvc(s,nzv)`y #)")
          (("" (name "ggvx" "LAMBDA (s,nzv): (# x:=ggvc(s,nzv)`x,y:=0 #)")
            (("" (lemma "sum_vvv_cont")
              ((""
                (inst - "scal_vvr_vvv(ffrc, ggvx)" "scal_vvr_vvv(ffrc,ggvy)")
                (("1" (hide-all-but (-1 1))
                  (("1" (expand "sum_vvv")
                    (("1" (expand "scal_vvr_vvv")
                      (("1" (expand "ggvy")
                        (("1" (expand "ggvx")
                          (("1" (expand "*")
                            (("1" (expand "+") (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "prod_vvr_cont")
                  (("2" (inst - "ffrc" "ggy")
                    (("1" (hide-all-but (-1 1))
                      (("1" (expand "prod_vvr")
                        (("1" (expand "scal_vvr_vvv")
                          (("1" (expand "ggvy")
                            (("1" (expand "*")
                              (("1" (expand "continuous_vvv?")
                                (("1" (expand "continuous_vvr?")
                                  (("1" (skosimp*)
                                    (("1" (inst - "epsil!1" "s!1" "nzv!1")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst + "ds!1" "dv!1")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst - "sp!1" "nzvp!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "ggy")
                                                  (("1"
                                                    (expand "-")
                                                    (("1"
                                                      (rewrite
                                                       "sqrt_sqv_norm"
                                                       1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (case
                                                         "FORALL (vvww:Vect2): sqv(vvww) = sq(vvww`x) + sq(vvww`y)")
                                                        (("1"
                                                          (rewrite -1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (case
                                                               "FORALL (aaa:real): sqrt(sq(aaa)) = abs(aaa)")
                                                              (("1"
                                                                (rewrite -1)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "abs")
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (typepred "ggvc")
                        (("2" (expand "continuous_vvv?")
                          (("2" (expand "continuous_vvr?")
                            (("2" (skosimp*)
                              (("2" (inst - "epsil!1" "s!1" "nzv!1")
                                (("2" (skosimp*)
                                  (("2" (inst + "ds!1" "dv!1")
                                    (("2" (skosimp*)
                                      (("2"
                                        (inst - "sp!1" "nzvp!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "ggy")
                                            (("2"
                                              (lemma "norm_ge_comps")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (grind :exclude "norm")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (lemma "prod_vvr_cont")
                  (("3" (inst - "ffrc" "ggx")
                    (("1" (hide-all-but (-1 1))
                      (("1" (expand "prod_vvr")
                        (("1" (expand "scal_vvr_vvv")
                          (("1" (expand "ggvx")
                            (("1" (expand "*")
                              (("1" (expand "continuous_vvv?")
                                (("1" (expand "continuous_vvr?")
                                  (("1" (skosimp*)
                                    (("1" (inst - "epsil!1" "s!1" "nzv!1")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst + "ds!1" "dv!1")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst - "sp!1" "nzvp!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "ggx")
                                                  (("1"
                                                    (expand "-")
                                                    (("1"
                                                      (rewrite
                                                       "sqrt_sqv_norm"
                                                       1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (case
                                                         "FORALL (vvww:Vect2): sqv(vvww) = sq(vvww`x) + sq(vvww`y)")
                                                        (("1"
                                                          (rewrite -1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (case
                                                               "FORALL (aaa:real): sqrt(sq(aaa)) = abs(aaa)")
                                                              (("1"
                                                                (rewrite -1)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "abs")
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (typepred "ggvc")
                        (("2" (expand "continuous_vvv?")
                          (("2" (expand "continuous_vvr?")
                            (("2" (skosimp*)
                              (("2" (inst - "epsil!1" "s!1" "nzv!1")
                                (("2" (skosimp*)
                                  (("2" (inst + "ds!1" "dv!1")
                                    (("2" (skosimp*)
                                      (("2"
                                        (inst - "sp!1" "nzvp!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "ggx")
                                            (("2"
                                              (lemma "norm_ge_comps")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (grind :exclude "norm")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vvv? const-decl "bool" vect_vect_2D_continuity nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (even_nat nonempty-type-eq-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sum_vvv_cont formula-decl nil vect_vect_2D_continuity nil)
    (ggx skolem-const-decl "[[Vect2, Nz_vect2] -> real]"
     vect_vect_2D_continuity nil)
    (prod_vvr_cont formula-decl nil vect_vect_2D_continuity nil)
    (norm_ge_comps formula-decl nil vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sqrt_sqv_norm formula-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors) (sq_0 formula-decl nil sq reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (sqrt_sq formula-decl nil sqrt reals)
    (sqrt_sq_neg formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (- const-decl "Vector" vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prod_vvr const-decl "real" vect_vect_2D_continuity nil)
    (ggy skolem-const-decl "[[Vect2, Nz_vect2] -> real]"
     vect_vect_2D_continuity nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (sum_vvv const-decl "Vect2" vect_vect_2D_continuity nil)
    (ggvy skolem-const-decl
     "[[Vect2, Nz_vect2] -> [# x: even_nat, y: real #]]"
     vect_vect_2D_continuity nil)
    (scal_vvr_vvv const-decl "Vect2" vect_vect_2D_continuity nil)
    (continuous_vvr? const-decl "bool" vect_vect_2D_continuity nil)
    (ffrc skolem-const-decl "(continuous_vvr?)" vect_vect_2D_continuity nil)
    (ggvx skolem-const-decl
     "[[Vect2, Nz_vect2] -> [# x: real, y: even_nat #]]"
     vect_vect_2D_continuity nil))
   shostak))
 (scal_vvr_cont 0
  (scal_vvr_cont-2 "" 3790093523
   ("" (skeep)
    (("" (typepred "ffrc")
      (("" (expand "continuous_vvr?")
        (("" (skosimp*)
          (("" (inst - "epsil!1/(abs(c)+1)" "s!1" "nzv!1")
            (("" (skosimp*)
              (("" (inst + "ds!1" "dv!1")
                (("" (skosimp*)
                  (("" (inst - "sp!1" "nzvp!1")
                    (("" (assert)
                      (("" (expand "scal_vvr")
                        (("" (lemma "abs_mult")
                          ((""
                            (inst - "c"
                             "ffrc(s!1, nzv!1) - ffrc(sp!1, nzvp!1)")
                            (("" (assert)
                              ((""
                                (case "abs(c) * abs(ffrc(s!1, nzv!1) - ffrc(sp!1, nzvp!1)) < epsil!1")
                                (("1" (assert) nil nil)
                                 ("2" (hide (-1 2))
                                  (("2" (cross-mult -1) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (scal_vvr_cont-1 nil 3515834436
   ("" (skeep)
    (("" (typepred "ffrc")
      (("" (expand "continuous_vvr?")
        (("" (skosimp*)
          (("" (inst - "epsil!1/(abs(c)+1)" "s!1" "nzv!1")
            (("" (skosimp*)
              (("" (inst + "ds!1" "dv!1")
                (("" (skosimp*)
                  (("" (inst - "sp!1" "nzvp!1")
                    (("" (assert)
                      (("" (expand "scal_vvr")
                        (("" (lemma "abs_mult")
                          ((""
                            (inst - "c"
                             "ffrc(s!1, nzv!1) - ffrc(sp!1, nzvp!1)")
                            (("" (assert)
                              (("" (assert)
                                ((""
                                  (case "abs(c) * abs(ffrc(s!1, nzv!1) - ffrc(sp!1, nzvp!1)) < epsil!1")
                                  (("1" (assert) nil nil)
                                   ("2" (hide (-1 2))
                                    (("2" (cross-mult -1) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vvr? const-decl "bool" vect_vect_2D_continuity nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scal_vvr const-decl "real" vect_vect_2D_continuity nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (div_vvr_cont 0
  (div_vvr_cont-1 nil 3515496927
   ("" (skeep)
    (("" (case "continuous_vvr?(div_vvr(LAMBDA (s,nzv): 1, ggnzc))")
      (("1" (lemma "prod_vvr_cont")
        (("1" (inst - "ffrc" "div_vvr(LAMBDA (s, nzv): 1, ggnzc)")
          (("1" (hide -2)
            (("1" (expand "prod_vvr")
              (("1" (expand "div_vvr") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (name "gg" "ggnzc")
          (("2" (replace -1)
            (("2" (hide -1)
              (("2" (typepred "gg")
                (("2" (expand "continuous_vvr?")
                  (("2" (skosimp*)
                    (("2" (expand "continuous_nz_vvr?")
                      (("2" (flatten)
                        (("2" (expand "continuous_vvr?")
                          (("2"
                            (name "newep"
                                  "min(abs(gg(s!1,nzv!1))/2,sq(gg(s!1,nzv!1))*epsil!1/4)")
                            (("2" (inst - "newep" "s!1" "nzv!1")
                              (("1" (skosimp*)
                                (("1" (inst + "ds!1" "dv!1")
                                  (("1" (skosimp*)
                                    (("1" (inst - "sp!1" "nzvp!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "div_vvr")
                                          (("1"
                                            (case
                                             "1 / gg(s!1, nzv!1) - 1 / gg(sp!1, nzvp!1) = (gg(sp!1,nzvp!1) - gg(s!1,nzv!1))/(gg(s!1,nzv!1)*gg(sp!1,nzvp!1))")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (rewrite "abs_div")
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (case
                                                     "abs((gg(s!1, nzv!1) * gg(sp!1, nzvp!1))) >= sq(gg(s!1, nzv!1))/2")
                                                    (("1"
                                                      (cross-mult 1)
                                                      (("1"
                                                        (typepred "newep")
                                                        (("1"
                                                          (mult-by
                                                           -4
                                                           "epsil!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand "abs")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (rewrite "abs_mult")
                                                        (("2"
                                                          (case
                                                           "abs(gg(sp!1, nzvp!1)) >= abs(gg(s!1,nzv!1))/2")
                                                          (("1"
                                                            (lemma "sq_abs")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "gg(s!1,nzv!1)")
                                                              (("1"
                                                                (expand
                                                                 "sq"
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (hide -1)
                                                                    (("1"
                                                                      (mult-by
                                                                       -1
                                                                       "abs(gg(s!1, nzv!1))")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (lemma
                                                               "triangle")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "gg(s!1, nzv!1) - gg(sp!1, nzvp!1)"
                                                                 "gg(sp!1, nzvp!1)")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (field) nil nil))
                                              nil)
                                             ("3"
                                              (expand "nzero_vvr?")
                                              (("3"
                                                (inst-cp - "s!1" "nzv!1")
                                                (("3"
                                                  (inst - "sp!1" "nzvp!1")
                                                  (("3"
                                                    (lemma
                                                     "nzreal_times_nzreal_is_nzreal")
                                                    (("3" (inst?) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (expand "nzero_vvr?")
                                  (("2" (inst - "s!1" "nzv!1")
                                    (("2" (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (lemma "sq_eq_0")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "min")
                                                (("2"
                                                  (lift-if)
                                                  (("2" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_nz_vvr? const-decl "bool" vect_vect_2D_continuity nil)
    (div_vvr const-decl "real" vect_vect_2D_continuity nil)
    (nzero_vvr? const-decl "bool" vect_vect_2D_continuity nil)
    (continuous_vvr? const-decl "bool" vect_vect_2D_continuity nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (ggnzc skolem-const-decl "(continuous_nz_vvr?)" vect_vect_2D_continuity
     nil)
    (prod_vvr const-decl "real" vect_vect_2D_continuity nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (prod_vvr_cont formula-decl nil vect_vect_2D_continuity nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gg skolem-const-decl "(continuous_nz_vvr?)" vect_vect_2D_continuity nil)
    (s!1 skolem-const-decl "Vect2" vect_vect_2D_continuity nil)
    (nzv!1 skolem-const-decl "Nz_vect2" vect_vect_2D_continuity nil)
    (epsil!1 skolem-const-decl "posreal" vect_vect_2D_continuity nil)
    (newep skolem-const-decl "{z: nonneg_real |
   z <= abs(gg(s!1, nzv!1)) / 2 AND z <= sq(gg(s!1, nzv!1)) * epsil!1 / 4}"
     vect_vect_2D_continuity nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil) (sq_abs formula-decl nil sq reals)
    (triangle formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (abs_mult formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nzvp!1 skolem-const-decl "Nz_vect2" vect_vect_2D_continuity nil)
    (sp!1 skolem-const-decl "Vect2" vect_vect_2D_continuity nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (abs_div formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_eq_0 formula-decl nil sq reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals) (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (nzv_vvv_cont 0
  (nzv_vvv_cont-1 nil 3515498484
   ("" (expand "continuous_vvv?")
    (("" (skosimp*)
      (("" (inst + "epsil!1" "epsil!1") (("" (skosimp*) nil nil)) nil)) nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (continuous_vvv? const-decl "bool" vect_vect_2D_continuity nil))
   shostak))
 (s_vvv_cont 0
  (s_vvv_cont-1 nil 3515498511
   ("" (expand "continuous_vvv?")
    (("" (skosimp*)
      (("" (inst + "epsil!1" "epsil!1") (("" (skosimp*) nil nil)) nil)) nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (continuous_vvv? const-decl "bool" vect_vect_2D_continuity nil))
   nil))
 (max_vvr_cont 0
  (max_vvr_cont-1 nil 3515834855
   ("" (skeep)
    (("" (typepred "ffrc")
      (("" (typepred "ggrc")
        (("" (expand "continuous_vvr?")
          (("" (skosimp*)
            (("" (inst - "epsil!1" "s!1" "nzv!1")
              (("" (inst - "epsil!1" "s!1" "nzv!1")
                (("" (skosimp*)
                  (("" (inst + "min(ds!1,ds!2)" "min(dv!1,dv!2)")
                    (("" (skosimp*)
                      (("" (inst - "sp!1" "nzvp!1")
                        (("" (inst - "sp!1" "nzvp!1")
                          (("" (assert)
                            (("" (hide (-3 -4))
                              (("" (expand "max_vvr") (("" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vvr? const-decl "bool" vect_vect_2D_continuity nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (max_vvr const-decl "real" vect_vect_2D_continuity nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil))
   shostak))
 (norm_vvv_cont 0
  (norm_vvv_cont-1 nil 3515853222
   ("" (skeep)
    (("" (typepred "ffvc")
      (("" (expand "continuous_vvr?")
        (("" (expand "continuous_vvv?")
          (("" (skeep)
            (("" (inst - "epsil" "s" "nzv")
              (("" (skeep -1)
                (("" (inst + "ds" "dv")
                  (("" (skeep)
                    (("" (inst - "sp" "nzvp")
                      (("" (assert)
                        (("" (expand "norm_vvv")
                          ((""
                            (case "FORALL (vv,ww:Vect2): abs(norm(vv)-norm(ww))<=norm(vv-ww)")
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (hide-all-but 1)
                              (("2" (skeep)
                                (("2" (lemma "vectors_2D.norm_add_le")
                                  (("2" (inst - "vv-ww" "ww")
                                    (("2" (assert)
                                      (("2"
                                        (lemma "vectors_2D.norm_add_le")
                                        (("2"
                                          (inst - "ww-vv" "vv")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma "vectors_2D.norm_neg")
                                              (("2"
                                                (inst - "ww-vv")
                                                (("2"
                                                  (case "-(ww-vv) = vv-ww")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (replace -1 :dir rl)
                                                        (("1"
                                                          (expand "abs")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vvv? const-decl "bool" vect_vect_2D_continuity nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (norm_vvv const-decl "nnreal" vect_vect_2D_continuity nil)
    (norm_add_le formula-decl nil vectors_2D vectors)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (add_cancel2 formula-decl nil vectors_2D vectors)
    (norm_neg formula-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "Vector" vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "Vector" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (continuous_vvr? const-decl "bool" vect_vect_2D_continuity nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)))


(vect_metric_space
 (IMP_metric_spaces_TCC1 0
  (IMP_metric_spaces_TCC1-1 nil 3460884927
   ("" (assuming-tcc)
    (("" (expand "metric_space?")
      (("" (prop)
        (("1" (expand "space_zero?")
          (("1" (skosimp*)
            (("1" (lemma "dist_eq_0") (("1" (inst?) nil nil)) nil)) nil))
          nil)
         ("2" (expand "space_symmetric?")
          (("2" (skosimp*)
            (("2" (lemma "dist_sym") (("2" (inst?) nil nil)) nil)) nil))
          nil)
         ("3" (expand "space_triangle?")
          (("3" (skosimp*)
            (("3" (lemma "dist_norm")
              (("3" (copy -1)
                (("3" (copy -1)
                  (("3" (inst - "x!1" "z!1")
                    (("3" (inst - "x!1" "y!1")
                      (("3" (inst - "y!1" "z!1")
                        (("3" (replace -1)
                          (("3" (replace -2)
                            (("3" (replace -3)
                              (("3" (lemma "norm_triangle[n]")
                                (("3" (inst?) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_space? const-decl "bool" metric_spaces_def analysis)
    (space_triangle? const-decl "bool" metric_spaces_def analysis)
    (dist_norm formula-decl nil distance vectors)
    (norm_triangle formula-decl nil vectors vectors)
    (space_symmetric? const-decl "bool" metric_spaces_def analysis)
    (dist_sym formula-decl nil distance vectors)
    (space_zero? const-decl "bool" metric_spaces_def analysis)
    (n formal-const-decl "posnat" vect_metric_space nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dist_eq_0 formula-decl nil distance vectors)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (Index type-eq-decl nil vectors vectors)
    (Vector type-eq-decl nil vectors vectors) (set type-eq-decl nil sets nil)
    (fullset const-decl "set" sets nil))
   nil
   (IMP_metric_spaces assuming
    "analysis@metric_spaces[Vector[n], distance[vect_metric_space.n].dist].metric_spaces"
    "fullset_metric_space: ASSUMPTION metric_spaces_def[metric_spaces.T, metric_spaces.d].metric_space?(sets[metric_spaces.T].fullset)")))
 (vectors_metric_space 0
  (vectors_metric_space-1 nil 3460885134
   ("" (lemma "subset_is_metric_space")
    (("" (skosimp*)
      (("" (inst?)
        (("" (inst - "fullset[Vector[n]]")
          (("" (assert)
            (("" (expand "fullset")
              (("" (expand "subset?")
                (("" (expand "member") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_space nonempty-type-eq-decl nil metric_spaces analysis)
    (fullset const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (subset_is_metric_space formula-decl nil metric_spaces analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" vect_metric_space nil)
    (Index type-eq-decl nil vectors vectors)
    (Vector type-eq-decl nil vectors vectors)
    (nnreal type-eq-decl nil real_types nil)
    (dist const-decl "nnreal" distance vectors))
   shostak))
 (vect_subset_metric_space 0
  (vect_subset_metric_space-1 nil 3460885265
   ("" (lemma "fullset_metric_space") (("" (propax) nil nil)) nil)
   ((fullset_metric_space formula-decl nil metric_spaces analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" vect_metric_space nil)
    (Index type-eq-decl nil vectors vectors)
    (Vector type-eq-decl nil vectors vectors)
    (nnreal type-eq-decl nil real_types nil)
    (dist const-decl "nnreal" distance vectors))
   shostak)))


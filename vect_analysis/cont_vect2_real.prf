(cont_vect2_real
 (continuity_def 0
  (continuity_def-1 nil 3302273405
   ("" (skosimp*)
    (("" (expand "continuous_vr?")
      (("" (expand "convergence") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (continuous_vr? const-decl "bool" cont_vect2_real nil)
    (convergence const-decl "bool" limit_vect2_real nil))
   nil))
 (continuity_def2 0
  (continuity_def2-1 nil 3302273405
   ("" (skosimp*)
    (("" (rewrite "continuity_def")
      (("" (rewrite "convergent_in_domain") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((continuity_def formula-decl nil cont_vect2_real nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (convergent_in_domain formula-decl nil limit_vect2_real nil))
   nil))
 (sum_continuous_vr 0
  (sum_continuous_vr-1 nil 3302273405
   ("" (grind :defs nil :rewrites ("continuity_def2" "sum_fun_convergent"))
    nil nil)
   ((sum_fun_convergent formula-decl nil limit_vect2_real nil)
    (continuity_def2 formula-decl nil cont_vect2_real nil))
   nil))
 (diff_continuous_vr 0
  (diff_continuous_vr-2 nil 3442334818
   ("" (grind :defs nil :rewrites ("continuity_def2" "diff_fun_convergent"))
    nil nil)
   ((diff_fun_convergent formula-decl nil limit_vect2_real nil)
    (continuity_def2 formula-decl nil cont_vect2_real nil))
   nil)
  (diff_continuous_vr-1 nil 3302273405
   ("" (grind :defs nil :rewrites ("continuity_def2" "diff_fun_convergent"))
    nil nil)
   nil nil))
 (prod_continuous_vr 0
  (prod_continuous_vr-1 nil 3302273405
   ("" (grind :defs nil :rewrites ("continuity_def2" "prod_fun_convergent"))
    nil nil)
   ((prod_fun_convergent formula-decl nil limit_vect2_real nil)
    (continuity_def2 formula-decl nil cont_vect2_real nil))
   nil))
 (const_continuous_vr 0
  (const_continuous_vr-1 nil 3302273405
   (""
    (grind :defs nil :rewrites
     ("continuity_def2" "const_fun_convergent" "adherence_fullset"))
    nil nil)
   ((const_fun_convergent formula-decl nil limit_vect2_real nil)
    (continuity_def2 formula-decl nil cont_vect2_real nil))
   nil))
 (scal_continuous_vr 0
  (scal_continuous_vr-1 nil 3302273405
   ("" (grind :defs nil :rewrites ("continuity_def2" "scal_fun_convergent"))
    nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (scal_fun_convergent formula-decl nil limit_vect2_real nil)
    (continuity_def2 formula-decl nil cont_vect2_real nil))
   nil))
 (neg_continuous_vr 0
  (neg_continuous_vr-1 nil 3302273405
   ("" (grind :defs nil :rewrites ("continuity_def2" "neg_fun_convergent"))
    nil nil)
   ((neg_fun_convergent formula-decl nil limit_vect2_real nil)
    (continuity_def2 formula-decl nil cont_vect2_real nil))
   nil))
 (div_continuous_vr 0
  (div_continuous_vr-1 nil 3302273405
   ("" (skosimp*)
    (("" (rewrite "continuity_def")
      (("" (rewrite "continuity_def")
        (("" (rewrite "continuity_def")
          (("" (grind :exclude "convergence" :rewrites ("cv_div")) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((continuity_def formula-decl nil cont_vect2_real nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (/ const-decl "[Vect2 -> real]" vect2_fun_ops vectors)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cv_div formula-decl nil limit_vect2_real nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (inv_continuous_vr 0
  (inv_continuous_vr-1 nil 3302273405
   ("" (skosimp*)
    (("" (rewrite "continuity_def")
      (("" (rewrite "continuity_def")
        (("" (grind :exclude "convergence" :rewrites ("cv_inv")) nil nil))
        nil))
      nil))
    nil)
   ((continuity_def formula-decl nil cont_vect2_real nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (cv_inv formula-decl nil limit_vect2_real nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (/ const-decl "[Vect2 -> real]" vect2_fun_ops vectors))
   nil))
 (expt_continuous_vr 0
  (expt_continuous_vr-1 nil 3322394322
   ("" (skolem 1 ("f" "_" "x0"))
    (("" (induct "n")
      (("1" (flatten)
        (("1" (lemma "const_continuous_vr" ("u" "1"))
          (("1" (inst - "x0")
            (("1" (expand "const_fun")
              (("1"
                (lemma "extensionality_postulate"
                 ("f" "LAMBDA (x: Vect2): 1" "g" "f^0"))
                (("1" (flatten)
                  (("1" (hide -2)
                    (("1" (split -1)
                      (("1" (assert) nil nil)
                       ("2" (hide-all-but 1)
                        (("2" (skosimp)
                          (("2" (expand "^")
                            (("2" (expand "^")
                              (("2" (expand "expt") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp)
        (("2" (assert)
          (("2" (lemma "prod_continuous_vr" ("x0" "x0" "f1" "f" "f2" "f^j!1"))
            (("2" (assert)
              (("2"
                (lemma "extensionality_postulate"
                 ("f" "f * f ^ j!1" "g" "f^(1+j!1)"))
                (("2" (flatten)
                  (("2" (hide -2)
                    (("2" (split -1)
                      (("1" (assert) nil nil)
                       ("2" (hide-all-but 1)
                        (("2" (skosimp)
                          (("2" (expand "*")
                            (("2" (expand "^")
                              (("2" (expand "^")
                                (("2" (expand "expt" 1 2)
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (continuous_vr? const-decl "bool" cont_vect2_real nil)
    (^ const-decl "[Vect2 -> real]" vect2_fun_ops vectors)
    (nat_induction formula-decl nil naturalnumbers nil)
    (const_continuous_vr formula-decl nil cont_vect2_real nil)
    (const_fun const-decl "[Vect2 -> real]" vect2_fun_ops vectors)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (extensionality_postulate formula-decl nil functions nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[Vect2 -> real]" vect2_fun_ops vectors)
    (prod_continuous_vr formula-decl nil cont_vect2_real nil))
   nil))
 (sum_cont_vr_fun 0
  (sum_cont_vr_fun-1 nil 3393866517
   ("" (skosimp*)
    (("" (assert)
      (("" (expand "continuous_vr?")
        (("" (skosimp*)
          (("" (inst?)
            (("" (inst?)
              (("" (lemma "sum_continuous_vr")
                (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (sum_continuous_vr formula-decl nil cont_vect2_real nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (continuous_vr? const-decl "bool" cont_vect2_real nil))
   shostak))
 (diff_cont_vr_fun 0
  (diff_cont_vr_fun-1 nil 3393866553
   ("" (skosimp*)
    (("" (expand "continuous_vr?")
      (("" (skosimp*)
        (("" (inst?)
          (("" (inst?) (("" (rewrite "diff_continuous_vr") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vr? const-decl "bool" cont_vect2_real nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (diff_continuous_vr formula-decl nil cont_vect2_real nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil))
   shostak))
 (prod_cont_vr_fun 0
  (prod_cont_vr_fun-1 nil 3393866579
   ("" (skosimp*)
    (("" (expand "continuous_vr?")
      (("" (skosimp*)
        (("" (inst?)
          (("" (inst?) (("" (rewrite "prod_continuous_vr") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vr? const-decl "bool" cont_vect2_real nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (prod_continuous_vr formula-decl nil cont_vect2_real nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil))
   shostak))
 (const_cont_vr_fun 0
  (const_cont_vr_fun-1 nil 3393866606
   ("" (skosimp*)
    (("" (expand "continuous_vr?")
      (("" (skosimp*)
        (("" (lemma "const_continuous_vr") (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((continuous_vr? const-decl "bool" cont_vect2_real nil)
    (const_continuous_vr formula-decl nil cont_vect2_real nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors))
   shostak))
 (scal_cont_vr_fun 0
  (scal_cont_vr_fun-1 nil 3393866656
   ("" (skosimp*)
    (("" (expand "continuous_vr?")
      (("" (skosimp*)
        (("" (inst -1 "x0!1") (("" (rewrite "scal_continuous_vr") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vr? const-decl "bool" cont_vect2_real nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (scal_continuous_vr formula-decl nil cont_vect2_real nil))
   shostak))
 (neg_cont_vr_fun 0
  (neg_cont_vr_fun-1 nil 3393866960
   ("" (skosimp*)
    (("" (assert)
      (("" (expand "continuous_vr?")
        (("" (skosimp*)
          (("" (inst?) (("" (rewrite "neg_continuous_vr") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((neg_continuous_vr formula-decl nil cont_vect2_real nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (continuous_vr? const-decl "bool" cont_vect2_real nil))
   shostak))
 (div_cont_vr_fun 0
  (div_cont_vr_fun-1 nil 3393867018
   ("" (skosimp*)
    (("" (assert)
      (("" (expand "continuous_vr?")
        (("" (skosimp*)
          (("" (inst?)
            (("" (inst?) (("" (rewrite "div_continuous_vr") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_continuous_vr formula-decl nil cont_vect2_real nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (continuous_vr? const-decl "bool" cont_vect2_real nil))
   nil))
 (inv_cont_vr_fun 0
  (inv_cont_vr_fun-1 nil 3393867066
   ("" (skosimp*)
    (("" (expand "continuous_vr?")
      (("" (skosimp*)
        (("" (inst -1 "x0!1") (("" (rewrite "inv_continuous_vr") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vr? const-decl "bool" cont_vect2_real nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inv_continuous_vr formula-decl nil cont_vect2_real nil))
   nil))
 (expt_cont_vr_fun 0
  (expt_cont_vr_fun-1 nil 3393867172
   ("" (skosimp*)
    (("" (expand "continuous_vr?")
      (("" (skosimp*)
        (("" (rewrite "expt_continuous_vr")
          (("" (hide 2) (("" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((continuous_vr? const-decl "bool" cont_vect2_real nil)
    (expt_continuous_vr formula-decl nil cont_vect2_real nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (continuous_vr_fun_TCC1 0
  (continuous_vr_fun_TCC1-1 nil 3302273405
   ("" (inst + "(LAMBDA (x: Vect2): 0)")
    (("" (expand "continuous_vr?")
      (("" (skosimp*)
        (("" (expand "continuous_vr?")
          (("" (skosimp*)
            (("" (inst + "1") (("" (skosimp*) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vr? const-decl "bool" cont_vect2_real nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (abs_nat formula-decl nil abs_lems reals)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (continuous_vr? const-decl "bool" cont_vect2_real nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil))
   nil
   (continuous_vr_fun existence ""
    "{f | cont_vect2_real.continuous_vr?(cont_vect2_real.f)}")))
 (sum_fun_continuous_vr 0
  (sum_fun_continuous_vr-1 nil 3302273405
   ("" (skosimp*)
    (("" (typepred "h1!1")
      (("" (typepred "h2!1")
        (("" (expand "continuous_vr?")
          (("" (skosimp*)
            (("" (inst?)
              (("" (inst?) (("" (rewrite "sum_continuous_vr") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vr_fun nonempty-type-eq-decl nil cont_vect2_real nil)
    (continuous_vr? const-decl "bool" cont_vect2_real nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sum_continuous_vr formula-decl nil cont_vect2_real nil))
   nil
   (sum_fun_continuous_vr subtype
    "(vect2_fun_ops.+)(cont_vect2_real.h1, cont_vect2_real.h2)"
    "continuous_vr_fun")))
 (diff_fun_continuous_vr 0
  (diff_fun_continuous_vr-1 nil 3302273405
   ("" (skosimp*)
    (("" (typepred "h1!1")
      (("" (typepred "h2!1")
        (("" (expand "continuous_vr?")
          (("" (skosimp*)
            (("" (inst?)
              (("" (inst?) (("" (rewrite "diff_continuous_vr") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vr_fun nonempty-type-eq-decl nil cont_vect2_real nil)
    (continuous_vr? const-decl "bool" cont_vect2_real nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (diff_continuous_vr formula-decl nil cont_vect2_real nil))
   nil
   (diff_fun_continuous_vr subtype
    "(vect2_fun_ops.-)(cont_vect2_real.h1, cont_vect2_real.h2)"
    "continuous_vr_fun")))
 (prod_fun_continuous_vr 0
  (prod_fun_continuous_vr-2 nil 3442335424
   ("" (skosimp*)
    (("" (typepred "h1!1")
      (("" (typepred "h2!1")
        (("" (expand "continuous_vr?")
          (("" (skosimp*)
            (("" (inst?)
              (("" (inst?) (("" (rewrite "prod_continuous_vr") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vr_fun nonempty-type-eq-decl nil cont_vect2_real nil)
    (continuous_vr? const-decl "bool" cont_vect2_real nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (prod_continuous_vr formula-decl nil cont_vect2_real nil))
   nil
   (prod_fun_continuous_vr subtype
    "vect2_fun_ops.*(cont_vect2_real.h1, cont_vect2_real.h2)"
    "continuous_vr_fun"))
  (prod_fun_continuous_vr-1 nil 3302273405
   (""
    (grind :defs nil :rewrites
     ("continuous_vr_def2" "prod_set_continuous_vr" "subset_reflexive"))
    nil nil)
   nil nil
   (prod_fun_continuous_vr subtype
    "vect2_fun_ops.*(cont_vect2_real.h1, cont_vect2_real.h2)"
    "continuous_vr_fun")))
 (const_fun_continuous_vr 0
  (const_fun_continuous_vr-1 nil 3302273405
   ("" (expand "continuous_vr?")
    (("" (grind :defs nil :rewrites ("const_continuous_vr")) nil nil)) nil)
   ((const_continuous_vr formula-decl nil cont_vect2_real nil)
    (continuous_vr? const-decl "bool" cont_vect2_real nil))
   nil
   (const_fun_continuous_vr subtype
    "vect2_fun_ops.const_fun(cont_vect2_real.u)" "continuous_vr_fun")))
 (scal_fun_continuous_vr 0
  (scal_fun_continuous_vr-1 nil 3302273405
   ("" (skosimp*)
    (("" (typepred "h!1")
      (("" (expand "continuous_vr?")
        (("" (skosimp*)
          (("" (inst?) (("" (rewrite "scal_continuous_vr") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vr_fun nonempty-type-eq-decl nil cont_vect2_real nil)
    (continuous_vr? const-decl "bool" cont_vect2_real nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (scal_continuous_vr formula-decl nil cont_vect2_real nil))
   nil
   (scal_fun_continuous_vr subtype
    "vect2_fun_ops.*(cont_vect2_real.u, cont_vect2_real.h)"
    "continuous_vr_fun")))
 (neg_fun_continuous_vr 0
  (neg_fun_continuous_vr-1 nil 3302273405
   ("" (skosimp*)
    (("" (typepred "h!1")
      (("" (expand "continuous_vr?")
        (("" (skosimp*)
          (("" (inst?) (("" (rewrite "neg_continuous_vr") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vr_fun nonempty-type-eq-decl nil cont_vect2_real nil)
    (continuous_vr? const-decl "bool" cont_vect2_real nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (neg_continuous_vr formula-decl nil cont_vect2_real nil))
   nil
   (neg_fun_continuous_vr subtype "(vect2_fun_ops.-)(cont_vect2_real.h)"
    "continuous_vr_fun")))
 (div_fun_continuous_vr 0
  (div_fun_continuous_vr-1 nil 3302273405
   ("" (skosimp*)
    (("" (typepred "h!1")
      (("" (typepred "h3!1")
        (("" (expand "continuous_vr?")
          (("" (skosimp*)
            (("" (inst?)
              (("" (inst?) (("" (rewrite "div_continuous_vr") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vr_fun nonempty-type-eq-decl nil cont_vect2_real nil)
    (continuous_vr? const-decl "bool" cont_vect2_real nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (div_continuous_vr formula-decl nil cont_vect2_real nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nz_continuous_vr_fun type-eq-decl nil cont_vect2_real nil))
   nil
   (div_fun_continuous_vr subtype
    "vect2_fun_ops./(cont_vect2_real.h, cont_vect2_real.h3)"
    "continuous_vr_fun")))
 (inv_fun_continuous_vr 0
  (inv_fun_continuous_vr-1 nil 3302273405
   ("" (skosimp*)
    (("" (typepred "h3!1")
      (("" (expand "continuous_vr?")
        (("" (skosimp*)
          (("" (inst?) (("" (rewrite "inv_continuous_vr") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nz_continuous_vr_fun type-eq-decl nil cont_vect2_real nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (continuous_vr? const-decl "bool" cont_vect2_real nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (inv_continuous_vr formula-decl nil cont_vect2_real nil))
   nil))
 (expt_fun_continuous_vr 0
  (expt_fun_continuous_vr-1 nil 3322394393
   ("" (skosimp*)
    (("" (expand "continuous_vr?")
      (("" (skosimp*)
        (("" (inst - "x0!1")
          (("" (lemma "expt_continuous_vr")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous_vr? const-decl "bool" cont_vect2_real nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (expt_continuous_vr formula-decl nil cont_vect2_real nil))
   shostak)))


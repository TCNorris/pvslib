(limit_vect2_vect2
 (cv_unique 0
  (cv_unique-3 nil 3445169897
   ("" (grind :exclude ("abs" "norm" "-" "sigma") :if-match nil)
    (("" (case "norm(l1!1 - l2!1) = 0")
      (("1" (lemma "norm_eq_0")
        (("1" (inst?)
          (("1" (assert)
            (("1" (lemma "add_move_right")
              (("1" (inst?)
                (("1" (inst -1 "zero") (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (name "eps" "norm(l1!1 - l2!1)")
        (("2" (replace -1)
          (("2" (inst -3 "eps/2")
            (("1" (inst -2 "eps/2")
              (("1" (skosimp*)
                (("1"
                  (case " EXISTS (x: Vect2): norm(x - a!1) < delta!1 AND norm(x - a!1) < delta!2")
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (inst?)
                        (("1" (lemma "norm_triangle")
                          (("1" (inst - "l1!1" "f!1(x!1)" "l2!1")
                            (("1" (case-replace "norm(l1!1 - l2!1) > 0")
                              (("1" (assert)
                                (("1" (lemma "norm_sym")
                                  (("1" (inst - "l1!1" "f!1(x!1)")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (lemma "norm_eq_0")
                                (("2" (inst?) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (name "DEL" "min(delta!1,delta!2)")
                    (("2" (inst + "a!1") (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vect2 type-eq-decl nil vectors_2D_def vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (add_move_right formula-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (norm_triangle formula-decl nil vectors_2D vectors)
    (norm_sym formula-decl nil vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_zero formula-decl nil vectors_2D vectors)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (eps skolem-const-decl "nnreal" limit_vect2_vect2 nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (convergence const-decl "bool" limit_vect2_vect2 nil))
   nil)
  (cv_unique-2 nil 3445169733
   ("" (grind :exclude ("abs" "norm" "-" "sigma") :if-match nil)
    (("" (case "norm(l1!1 - l2!1) = 0")
      (("1" (lemma "norm_eq_0")
        (("1" (inst?)
          (("1" (assert)
            (("1" (lemma "add_move_right")
              (("1" (inst?)
                (("1" (inst -1 "zero") (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (name "eps" "norm(l1!1 - l2!1)")
        (("2" (replace -1)
          (("2" (inst -3 "eps/2")
            (("1" (inst -2 "eps/2")
              (("1" (skosimp*)
                (("1"
                  (case " EXISTS (x: Vect2): a!1 /= x AND norm(x - a!1) < delta!1 AND norm(x - a!1) < delta!2")
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (inst?)
                        (("1" (lemma "norm_triangle")
                          (("1" (inst - "l1!1" "f!1(x!1)" "l2!1")
                            (("1" (case-replace "norm(l1!1 - l2!1) > 0")
                              (("1" (assert)
                                (("1" (lemma "norm_sym")
                                  (("1" (inst - "l1!1" "f!1(x!1)")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (lemma "norm_eq_0")
                                (("2" (inst?) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (name "DEL" "min(delta!1,delta!2)")
                    (("2" (postpone) nil nil)) nil))
                  nil))
                nil)
               ("2" (postpone) nil nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (cv_unique-1 nil 3299406886
   ("" (grind :exclude ("abs" "norm" "-") :if-match nil)
    (("" (rewrite "abs_diff_0")
      (("" (name "eps" "abs(l1!1 - l2!1)")
        (("" (replace -1)
          (("" (inst -4 "eps/2")
            (("1" (inst -5 "eps/2")
              (("1" (assert)
                (("1" (skosimp*)
                  (("1"
                    (case " EXISTS (x: Vect2): a!1 /= x AND norm(x - a!1) < delta!1 AND norm(x - a!1) < delta!2")
                    (("1" (skosimp*)
                      (("1" (inst?)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (case "0 < norm(x!1 - a!1)")
                              (("1" (assert)
                                (("1" (lemma "triangle2")
                                  (("1"
                                    (inst - "eps/2" "eps/2" "l1!1" "f!1(x!1)"
                                     "l2!1")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (lemma "norm_eq_0")
                                (("2" (inst?)
                                  (("2" (assert)
                                    (("2" (replace -1 * lr)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "sub_eq_zero")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -4 -5)
                      (("2" (name "DEL" "min(delta!1,delta!2)")
                        (("2" (inst + "(a!1`x + DEL/2, a!1`y)")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs_diff_0 formula-decl nil abs_lems reals)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sqrt_square formula-decl nil sqrt reals)
    (triangle2 formula-decl nil abs_lems reals)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (norm_zero formula-decl nil vectors_2D vectors)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors))
   nil))
 (cv_in_domain 0
  (cv_in_domain-4 nil 3445170107
   ("" (grind :exclude ("abs" "norm" "-") :if-match nil)
    (("" (case "norm(l!1 - f!1(x!1)) = 0")
      (("1" (lemma "norm_eq_0")
        (("1" (inst?)
          (("1" (assert) (("1" (rewrite "sub_eq_zero") nil nil)) nil)) nil))
        nil)
       ("2" (inst - "norm(l!1 - f!1(x!1))")
        (("1" (skosimp*)
          (("1" (inst?)
            (("1" (assert)
              (("1" (rewrite "norm_sym") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((Vect2 type-eq-decl nil vectors_2D_def vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (norm_zero formula-decl nil vectors_2D vectors)
    (norm_sym formula-decl nil vectors_2D vectors)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (l!1 skolem-const-decl "Vect2" limit_vect2_vect2 nil)
    (f!1 skolem-const-decl "[Vect2 -> Vect2]" limit_vect2_vect2 nil)
    (x!1 skolem-const-decl "Vect2" limit_vect2_vect2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (convergence const-decl "bool" limit_vect2_vect2 nil))
   nil)
  (cv_in_domain-3 nil 3445170048
   (";;; Proof cv_sum-1 for formula limit_real_vect2.cv_sum" (skeep)
    ((";;; Proof cv_sum-1 for formula limit_real_vect2.cv_sum"
      (grind :exclude ("abs" "norm" "+" "-") :if-match nil)
      ((";;; Proof cv_sum-1 for formula limit_real_vect2.cv_sum"
        (inst - "epsilon!1/4")
        ((";;; Proof cv_sum-1 for formula limit_real_vect2.cv_sum"
          (inst - "epsilon!1/4")
          ((";;; Proof cv_sum-1 for formula limit_real_vect2.cv_sum"
            (skosimp*)
            ((";;; Proof cv_sum-1 for formula limit_real_vect2.cv_sum"
              (inst 1 "min(delta!1, delta!2)")
              ((";;; Proof cv_sum-1 for formula limit_real_vect2.cv_sum"
                (skosimp*)
                ((";;; Proof cv_sum-1 for formula limit_real_vect2.cv_sum"
                  (inst?)
                  ((";;; Proof cv_sum-1 for formula limit_real_vect2.cv_sum"
                    (inst?)
                    ((";;; Proof cv_sum-1 for formula limit_real_vect2.cv_sum"
                      (assert)
                      ((";;; Proof cv_sum-1 for formula limit_real_vect2.cv_sum"
                        (lemma "norm_add_le")
                        ((";;; Proof cv_sum-1 for formula limit_real_vect2.cv_sum"
                          (inst - "f1(x!1) - l1" "f2(x!1)-l2")
                          ((";;; Proof cv_sum-1 for formula limit_real_vect2.cv_sum"
                            (case-replace
                             "norm(f1(x!1) - l1 + (f2(x!1) - l2)) = norm((f1 + f2)(x!1) - (l1 + l2))")
                            (("1" (assert) nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind :exclude "norm")
                                nil))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   nil nil)
  (cv_in_domain-2 nil 3445169975
   ("" (grind :exclude ("abs" "norm" "-") :if-match nil)
    (("" (case "norm(l!1 - f!1(x!1)) = 0")
      (("1" (lemma "norm_eq_0")
        (("1" (inst?)
          (("1" (assert) (("1" (rewrite "sub_eq_zero") nil nil)) nil)) nil))
        nil)
       ("2" (inst - "norm(l!1 - f!1(x!1))")
        (("1" (skosimp*)
          (("1" (inst?)
            (("1" (assert)
              (("1" (rewrite "norm_sym") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((norm_sym formula-decl nil vectors_2D vectors)
    (norm_zero formula-decl nil vectors_2D vectors)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors))
   nil)
  (cv_in_domain-1 nil 3299406886
   ("" (grind :exclude ("abs" "norm" "-") :if-match nil)
    (("" (rewrite "abs_diff_0")
      (("" (inst - "abs(l!1 - f!1(x!1))")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (rewrite "abs_diff_commute" -) (("" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vect2 type-eq-decl nil vectors_2D_def vectors)
    (abs_diff_0 formula-decl nil abs_lems reals)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (norm_zero formula-decl nil vectors_2D vectors)
    (abs_diff_commute formula-decl nil abs_lems reals))
   nil))
 (cv_sum 0
  (cv_sum-2 nil 3445170168
   ("" (skeep)
    (("" (grind :exclude ("abs" "norm" "+" "-") :if-match nil)
      (("" (inst - "epsilon!1/4")
        (("" (inst - "epsilon!1/4")
          (("" (skosimp*)
            (("" (inst 1 "min(delta!1, delta!2)")
              (("" (skosimp*)
                (("" (inst?)
                  (("" (inst?)
                    (("" (assert)
                      (("" (lemma "norm_add_le")
                        (("" (inst - "f1(x!1) - l1" "f2(x!1)-l2")
                          ((""
                            (case-replace
                             "norm(f1(x!1) - l1 + (f2(x!1) - l2)) = norm((f1 + f2)(x!1) - (l1 + l2))")
                            (("1" (assert) nil nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind :exclude "norm") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergence const-decl "bool" limit_vect2_vect2 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (+ const-decl "[Vect2 -> Vect2]" limit_vect2_vect2 nil)
    (norm_add_le formula-decl nil vectors_2D vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   nil)
  (cv_sum-1 nil 3299406886
   ("" (grind :exclude ("abs" "norm" "-") :if-match nil)
    (("" (inst - "epsilon!1/2")
      (("" (inst - "epsilon!1/2")
        (("" (skosimp*)
          (("" (inst 1 "min(delta!1, delta!2)")
            (("" (skosimp*)
              (("" (inst?)
                (("" (inst?)
                  (("" (assert)
                    ((""
                      (lemma "triangle"
                       ("x" "f1!1(x!1) - l1!1" "y" "f2!1(x!1) - l2!1"))
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vect2 type-eq-decl nil vectors_2D_def vectors)
    (+ const-decl "[Vect2 -> real]" vect2_fun_ops vectors))
   nil))
 (cv_neg 0
  (cv_neg-2 nil 3445170197
   ("" (skeep)
    (("" (grind :exclude ("abs" "norm" "-") :if-match nil)
      (("" (inst - "epsilon!1")
        (("" (skolem!)
          (("" (inst + "delta!1")
            (("" (skosimp)
              (("" (inst?)
                (("" (assert)
                  (("" (case-replace "norm((-f)(x!1) - -l) = norm(f(x!1) -l)")
                    (("" (assert)
                      (("" (hide-all-but 1)
                        (("" (lemma "norm_neg")
                          (("" (inst - "f(x!1) - l")
                            (("" (grind :exclude "norm") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergence const-decl "bool" limit_vect2_vect2 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_neg formula-decl nil vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (- const-decl "[Vect2 -> Vect2]" limit_vect2_vect2 nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors))
   nil)
  (cv_neg-1 nil 3299406886
   ("" (grind :exclude ("abs" "norm" "-") :if-match nil)
    (("" (inst - "epsilon!1")
      (("" (skolem!)
        (("" (inst + "delta!1")
          (("" (skosimp)
            (("" (inst?)
              (("" (assert)
                (("" (expand "-")
                  (("" (lemma "abs_neg")
                    (("" (inst - "f!1(x!1) - l!1") (("" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vect2 type-eq-decl nil vectors_2D_def vectors)
    (abs_neg formula-decl nil abs_lems reals))
   nil))
 (cv_diff 0
  (cv_diff-2 nil 3445170225
   ("" (skosimp*)
    (("" (case-replace "f1!1 - f2!1 = f1!1 + (-f2!1)")
      (("1" (lemma "cv_sum")
        (("1" (inst?)
          (("1" (inst - "(-f2!1)" "-l2!1")
            (("1" (assert)
              (("1" (hide 2)
                (("1" (lemma "cv_neg")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1)
        (("2" (grind) (("2" (apply-extensionality 1 :hide? t) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[Vect2 -> Vect2]" limit_vect2_vect2 nil)
    (+ const-decl "[Vect2 -> Vect2]" limit_vect2_vect2 nil)
    (- const-decl "[Vect2 -> Vect2]" limit_vect2_vect2 nil)
    (add_neg_sub formula-decl nil vectors_2D vectors)
    (cv_neg formula-decl nil limit_vect2_vect2 nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (cv_sum formula-decl nil limit_vect2_vect2 nil)
    (- const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (cv_diff-1 nil 3299406886
   ("" (skosimp*)
    (("" (rewrite "diff_function")
      (("" (lemma "cv_sum")
        (("" (inst?)
          (("" (inst - "(-f2!1)" "-l2!1")
            (("" (assert)
              (("" (hide 2)
                (("" (lemma "cv_neg")
                  (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_function formula-decl nil vect2_fun_ops vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors))
   nil))
 (cv_const 0
  (cv_const-1 nil 3299406886
   ("" (expand "convergence")
    (("" (skosimp*) (("" (expand "const_fun") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((norm_zero formula-decl nil vectors_2D vectors)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (const_fun const-decl "[Vect2 -> Vect2]" limit_vect2_vect2 nil)
    (convergence const-decl "bool" limit_vect2_vect2 nil))
   nil))
 (lim_TCC1 0
  (lim_TCC1-1 nil 3445162370
   ("" (skeep)
    (("" (typepred "x0")
      (("" (expand "nonempty?")
        (("" (expand "empty?")
          (("" (expand "convergent?")
            (("" (skosimp*)
              (("" (expand "member") (("" (inst?) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergent? const-decl "bool" limit_vect2_vect2 nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (lim subtype
    "LAMBDA l: limit_vect2_vect2.convergence(limit_vect2_vect2.f, limit_vect2_vect2.x0, limit_vect2_vect2.l)"
    "(sets[Vect2].nonempty?)")))
 (lim_fun_lemma 0
  (lim_fun_lemma-1 nil 3299406886
   ("" (skolem!)
    (("" (name-replace "ll" "lim(f!1, x0!1)" :hide? nil)
      (("" (expand "lim" -)
        (("" (typepred "x0!1")
          (("" (expand "convergent?")
            (("" (skosimp*) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (convergent? const-decl "bool" limit_vect2_vect2 nil)
    (lim const-decl "Vect2" limit_vect2_vect2 nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (lim_fun_def 0
  (lim_fun_def-1 nil 3299406886
   ("" (skolem!)
    (("" (use "lim_fun_lemma")
      (("" (ground)
        (("" (use "cv_unique" ("l2" "lim(f!1, x0!1)")) (("" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((lim_fun_lemma formula-decl nil limit_vect2_vect2 nil)
    (convergent? const-decl "bool" limit_vect2_vect2 nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (cv_unique formula-decl nil limit_vect2_vect2 nil)
    (lim const-decl "Vect2" limit_vect2_vect2 nil))
   nil))
 (convergence_equiv 0
  (convergence_equiv-2 "" 3790093476
   ("" (skolem!)
    (("" (prop)
      (("1" (expand "convergent?") (("1" (inst?) nil nil)) nil)
       ("2" (rewrite "lim_fun_def") nil nil)
       ("3" (rewrite "lim_fun_def") nil nil))
      nil))
    nil)
   nil shostak)
  (convergence_equiv-1 nil 3299406886
   ("" (skolem!)
    (("" (prop)
      (("1" (expand "convergent?") (("1" (inst?) nil nil)) nil)
       ("2" (rewrite "lim_fun_def")
        (("2" (expand "convergent?") (("2" (inst?) nil nil)) nil)) nil)
       ("3" (rewrite "lim_fun_def") nil nil))
      nil))
    nil)
   ((Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (convergent? const-decl "bool" limit_vect2_vect2 nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lim_fun_def formula-decl nil limit_vect2_vect2 nil))
   nil))
 (convergent_in_domain 0
  (convergent_in_domain-1 nil 3299406886
   ("" (grind :exclude "convergence")
    (("" (forward-chain "cv_in_domain") (("" (assert) nil nil)) nil)) nil)
   ((cv_in_domain formula-decl nil limit_vect2_vect2 nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (convergent? const-decl "bool" limit_vect2_vect2 nil))
   nil))
 (lim_in_domain 0
  (lim_in_domain-1 nil 3299406886
   ("" (skosimp)
    (("" (rewrite "lim_fun_def")
      (("" (rewrite "convergent_in_domain") nil nil)) nil))
    nil)
   ((lim_fun_def formula-decl nil limit_vect2_vect2 nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (convergent? const-decl "bool" limit_vect2_vect2 nil)
    (convergent_in_domain formula-decl nil limit_vect2_vect2 nil))
   nil))
 (sum_fun_convergent 0
  (sum_fun_convergent-1 nil 3299406886
   ("" (expand "convergent?")
    (("" (skosimp*)
      (("" (inst 1 "l!1 + l!2") (("" (rewrite "cv_sum") nil nil)) nil)) nil))
    nil)
   ((cv_sum formula-decl nil limit_vect2_vect2 nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (convergent? const-decl "bool" limit_vect2_vect2 nil))
   nil))
 (neg_fun_convergent 0
  (neg_fun_convergent-1 nil 3299406886
   ("" (expand "convergent?")
    (("" (skosimp*) (("" (forward-chain "cv_neg") (("" (inst?) nil nil)) nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (cv_neg formula-decl nil limit_vect2_vect2 nil)
    (convergent? const-decl "bool" limit_vect2_vect2 nil))
   nil))
 (diff_fun_convergent 0
  (diff_fun_convergent-1 nil 3299406886
   ("" (expand "convergent?")
    (("" (skosimp*)
      (("" (inst 1 "l!1 - l!2") (("" (rewrite "cv_diff") nil nil)) nil)) nil))
    nil)
   ((cv_diff formula-decl nil limit_vect2_vect2 nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (convergent? const-decl "bool" limit_vect2_vect2 nil))
   nil))
 (const_fun_convergent 0
  (const_fun_convergent-1 nil 3299406886
   ("" (expand "convergent?")
    (("" (skolem!) (("" (inst?) (("" (rewrite "cv_const") nil nil)) nil))
      nil))
    nil)
   ((cv_const formula-decl nil limit_vect2_vect2 nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (convergent? const-decl "bool" limit_vect2_vect2 nil))
   nil))
 (lim_sum_fun_TCC1 0
  (lim_sum_fun_TCC1-1 nil 3299406886
   ("" (skosimp) (("" (rewrite "sum_fun_convergent") nil nil)) nil)
   ((sum_fun_convergent formula-decl nil limit_vect2_vect2 nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors))
   nil
   (lim_sum_fun subtype "limit_vect2_vect2.a"
    "{a | limit_vect2_vect2.convergent?((limit_vect2_vect2.+)(limit_vect2_vect2.f1, limit_vect2_vect2.f2), limit_vect2_vect2.a)}")))
 (lim_sum_fun 0
  (lim_sum_fun-1 nil 3299406886
   (""
    (auto-rewrite "lim_fun_lemma" "lim_fun_def" "sum_fun_convergent"
                  ("cv_sum"))
    (("" (skosimp) (("" (assert) nil nil)) nil)) nil)
   ((lim_fun_lemma formula-decl nil limit_vect2_vect2 nil)
    (cv_sum formula-decl nil limit_vect2_vect2 nil)
    (lim_fun_def formula-decl nil limit_vect2_vect2 nil))
   nil))
 (lim_neg_fun_TCC1 0
  (lim_neg_fun_TCC1-1 nil 3299406886
   ("" (lemma "neg_fun_convergent") (("" (propax) nil nil)) nil)
   ((neg_fun_convergent formula-decl nil limit_vect2_vect2 nil)) nil
   (lim_neg_fun subtype "limit_vect2_vect2.a"
    "{a | limit_vect2_vect2.convergent?((limit_vect2_vect2.-)(limit_vect2_vect2.f), limit_vect2_vect2.a)}")))
 (lim_neg_fun 0
  (lim_neg_fun-1 nil 3299406886
   (""
    (auto-rewrite "lim_fun_lemma" "lim_fun_def" "neg_fun_convergent"
                  ("cv_neg"))
    (("" (skosimp) (("" (assert) nil nil)) nil)) nil)
   ((lim_fun_lemma formula-decl nil limit_vect2_vect2 nil)
    (cv_neg formula-decl nil limit_vect2_vect2 nil)
    (lim_fun_def formula-decl nil limit_vect2_vect2 nil))
   nil))
 (lim_diff_fun_TCC1 0
  (lim_diff_fun_TCC1-1 nil 3299406886
   ("" (skosimp) (("" (rewrite "diff_fun_convergent") nil nil)) nil)
   ((diff_fun_convergent formula-decl nil limit_vect2_vect2 nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors))
   nil
   (lim_diff_fun subtype "limit_vect2_vect2.a"
    "{a | limit_vect2_vect2.convergent?((limit_vect2_vect2.-)(limit_vect2_vect2.f1, limit_vect2_vect2.f2), limit_vect2_vect2.a)}")))
 (lim_diff_fun 0
  (lim_diff_fun-1 nil 3299406886
   (""
    (auto-rewrite "lim_fun_lemma" "lim_fun_def" "diff_fun_convergent"
                  ("cv_diff"))
    (("" (skosimp) (("" (assert) nil nil)) nil)) nil)
   ((lim_fun_lemma formula-decl nil limit_vect2_vect2 nil)
    (cv_diff formula-decl nil limit_vect2_vect2 nil)
    (lim_fun_def formula-decl nil limit_vect2_vect2 nil))
   nil))
 (lim_const_fun_TCC1 0
  (lim_const_fun_TCC1-1 nil 3299406886
   ("" (lemma "const_fun_convergent") (("" (propax) nil nil)) nil)
   ((const_fun_convergent formula-decl nil limit_vect2_vect2 nil)) nil
   (lim_const_fun subtype "limit_vect2_vect2.v"
    "{a | limit_vect2_vect2.convergent?(limit_vect2_vect2.const_fun(limit_vect2_vect2.b), limit_vect2_vect2.a)}")))
 (lim_const_fun 0
  (lim_const_fun-1 nil 3299406886
   (""
    (auto-rewrite "lim_fun_lemma" "lim_fun_def" "const_fun_convergent"
                  ("cv_const"))
    (("" (skosimp) (("" (assert) nil nil)) nil)) nil)
   ((cv_const formula-decl nil limit_vect2_vect2 nil)
    (lim_fun_def formula-decl nil limit_vect2_vect2 nil))
   nil)))


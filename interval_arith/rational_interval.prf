(rational_interval
 (posrat_approx_lb_TCC1 0
  (posrat_approx_lb_TCC1-1 nil 3627145197 ("" (subtype-tcc) nil nil) nil nil
   (posrat_approx_lb subtype "rational_interval.pr"
    "{r2 | reals.<((number_fields.-)(rational_interval.pr, rational_interval.newep), best_rational.r2)}")))
 (posrat_approx_lb_TCC2 0
  (posrat_approx_lb_TCC2-1 nil 3627145197
   ("" (skeep)
    (("" (split) (("1" (cross-mult 1) nil nil) ("2" (cross-mult 1) nil nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (posrat_approx_lb subtype
    "best_rational.best_rational((number_fields.-)(rational_interval.pr, rational_interval.newep), rational_interval.pr)"
    "posreal")))
 (posrat_approx_lb_increasing 0
  (posrat_approx_lb_increasing-2 nil 3627145590
   ("" (skeep)
    (("" (expand "posrat_approx_lb")
      (("" (expand "min")
        (("" (lemma "best_rational_increasing")
          (("" (lift-if)
            (("" (assert)
              (("" (lift-if)
                (("" (ground)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)
                   ("2" (inst?) (("2" (assert) nil nil)) nil)
                   ("3" (inst?) (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil)
    (posrat_approx_lb const-decl "posreal" rational_interval nil)
    (best_rational_increasing formula-decl nil best_rational reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil))
   nil)
  (posrat_approx_lb_increasing-1 nil 3627145411
   ("" (skeep)
    (("" (expand "posrat_approx_lb") (("" (postpone) nil nil)) nil)) nil)
   nil shostak))
 (posrat_approx_lb_def 0
  (posrat_approx_lb_def-2 "" 3790350945
   ("" (skeep)
    (("" (assert)
      (("" (expand "posrat_approx_lb") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posrat_approx_lb const-decl "posreal" rational_interval nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil))
   shostak)
  (posrat_approx_lb_def-1 nil 3627147659
   ("" (skeep)
    (("" (assert)
      (("" (expand "posrat_approx_lb")
        (("" (lift-if)
          (("" (ground)
            (("1" (typepred "ceiling(1/pr)")
              (("1" (cross-mult -1) (("1" (cross-mult 1) nil nil)) nil)) nil)
             ("2" (case "ceiling(1/pr)>0")
              (("1" (assert)
                (("1" (case "1/ceiling(1/pr)>0")
                  (("1" (assert) nil nil) ("2" (cross-mult 1) nil nil)) nil))
                nil)
               ("2" (assert) nil nil))
              nil)
             ("3" (cross-mult 1) nil nil)
             ("4" (cross-mult 1)
              (("4" (assert)
                (("4" (case "ceiling(1/epsil)*epsil>=1")
                  (("1" (assert) nil nil)
                   ("2" (typepred "ceiling(1/epsil)")
                    (("2" (cross-mult -1) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (posrat_approx_TCC1 0
  (posrat_approx_TCC1-1 nil 3625922110
   ("" (skeep)
    (("" (expand "Pos?")
      (("" (expand "Gt")
        (("" (expand "[||]") (("" (assert) (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((Pos? const-decl "bool" interval nil)
    ([\|\|] const-decl "Interval" interval nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Gt const-decl "bool" interval nil))
   nil
   (posrat_approx subtype
    "[|rational_interval.posrat_approx_lb(rational_interval.epsil)(rational_interval.pr), rational_interval.posrat_approx_lb(rational_interval.epsil)((number_fields.+)(rational_interval.pr, rational_interval.epsil))|]"
    "(interval.Pos?)")))
 (posrat_approx_def 0
  (posrat_approx_def-1 nil 3625922184
   ("" (skeep)
    (("" (expand "posrat_approx")
      (("" (assert)
        (("" (lemma "posrat_approx_lb_def")
          (("" (inst-cp - "epsil" "pr")
            (("" (inst - "epsil" "pr+epsil")
              (("" (assert) (("" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posrat_approx const-decl "(Pos?)" rational_interval nil)
    (posrat_approx_lb_def formula-decl nil rational_interval nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ub_interval formula-decl nil interval nil)
    (lb_interval formula-decl nil interval nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   shostak))
 (rat_interval_TCC1 0
  (rat_interval_TCC1-1 nil 3626002192 ("" (subtype-tcc) nil nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (rat_interval subtype "(number_fields.-)(lb(rational_interval.I))"
    "posreal")))
 (rat_interval_TCC2 0
  (rat_interval_TCC2-1 nil 3626002192 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (rat_interval subtype "lb(rational_interval.I)" "posreal")))
 (rat_interval_TCC3 0
  (rat_interval_TCC3-1 nil 3626002192 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_approx_lb const-decl "posreal" rational_interval nil)
    ([\|\|] const-decl "Interval" interval nil)
    (posrat_approx const-decl "(Pos?)" rational_interval nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (rat_interval subtype "(number_fields.-)(ub(rational_interval.I))"
    "posreal")))
 (rat_interval_TCC4 0
  (rat_interval_TCC4-1 nil 3626002192 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_approx_lb const-decl "posreal" rational_interval nil)
    ([\|\|] const-decl "Interval" interval nil)
    (posrat_approx const-decl "(Pos?)" rational_interval nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil (rat_interval subtype "ub(rational_interval.I)" "posreal")))
 (rat_interval_TCC5 0
  (rat_interval_TCC5-1 nil 3626002192
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (lift-if)
          (("" (expand "<<")
            (("" (expand "[||]")
              (("" (lemma "posrat_approx_def")
                (("" (split -)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (split -)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (split -)
                            (("1" (flatten)
                              (("1" (assert)
                                (("1"
                                  (typepred "posrat_approx(epsil)(-ub(I))")
                                  (("1" (expand "Pos?")
                                    (("1" (expand "Gt")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "posrat_approx_def")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2" (assert)
                                (("2" (typepred "posrat_approx(epsil)(ub(I))")
                                  (("2" (expand "Pos?")
                                    (("2" (expand "Gt")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "posrat_approx_def")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (split -)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (typepred "posrat_approx(epsil)(-lb(I))")
                              (("1" (expand "Pos?")
                                (("1" (expand "Gt")
                                  (("1" (flatten)
                                    (("1" (assert)
                                      (("1"
                                        (lemma "posrat_approx_def")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -)
                                                  (("1"
                                                    (flatten)
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "posrat_approx(epsil)(-ub(I))")
                                                              (("1"
                                                                (expand
                                                                 "Pos?")
                                                                (("1"
                                                                  (expand
                                                                   "Gt")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "posrat_approx_def")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "posrat_approx(epsil)(ub(I))")
                                                              (("2"
                                                                (expand
                                                                 "Pos?")
                                                                (("2"
                                                                  (expand
                                                                   "Gt")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "posrat_approx_def")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (typepred "posrat_approx(epsil)(lb(I))")
                              (("2" (expand "Pos?")
                                (("2" (expand "Gt")
                                  (("2" (flatten)
                                    (("2" (assert)
                                      (("2"
                                        (lemma "posrat_approx_def")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -)
                                                  (("1"
                                                    (flatten)
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "posrat_approx(epsil)(-ub(I))")
                                                              (("1"
                                                                (expand
                                                                 "Pos?")
                                                                (("1"
                                                                  (expand
                                                                   "Gt")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "posrat_approx_def")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "posrat_approx(epsil)(ub(I))")
                                                              (("2"
                                                                (expand
                                                                 "Pos?")
                                                                (("2"
                                                                  (expand
                                                                   "Gt")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "posrat_approx_def")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (([\|\|] const-decl "Interval" interval nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posrat_approx const-decl "(Pos?)" rational_interval nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Pos? const-decl "bool" interval nil)
    (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Gt const-decl "bool" interval nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posrat_approx_def formula-decl nil rational_interval nil)
    (<< const-decl "bool" interval nil)
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (rat_interval subtype
    "[|rational_interval.newlb, rational_interval.newub|]"
    "{J: interval.Interval |      (booleans.IFF(reals.>(lb(rational_interval.I), 0), reals.>(lb(J), 0))) AND (booleans.IFF(reals.<(lb(rational_interval.I), 0), reals.<(lb(J), 0))) AND (booleans.IFF(lb(rational_interval.I) = 0, lb(J) = 0)) AND (booleans.IFF(reals.>(ub(rational_interval.I), 0), reals.>(ub(J), 0))) AND (booleans.IFF(reals.<(ub(rational_interval.I), 0), reals.<(ub(J), 0))) AND (booleans.IFF(ub(rational_interval.I) = 0, ub(J) = 0)) AND (interval.<<(rational_interval.I, J)) AND (reals.<=(lb(J), lb(rational_interval.I))) AND (reals.<=(ub(rational_interval.I), ub(J))) AND (reals.<=((number_fields.-)(lb(rational_interval.I), lb(J)), rational_interval.epsil)) AND (reals.<=((number_fields.-)(ub(J), ub(rational_interval.I)), rational_interval.epsil))}")))
 (rat_interval_inclusion 0
  (rat_interval_inclusion-1 nil 3632310033
   ("" (skeep)
    (("" (typepred "rat_interval(epsil)(X)")
      (("" (hide-all-but (-13 -18 1))
        (("" (grind :exclude "rat_interval") nil nil)) nil))
      nil))
    nil)
   ((rat_interval const-decl "{J: Interval |
        (lb(I) > 0 IFF lb(J) > 0) AND (lb(I) < 0 IFF lb(J) < 0)
    AND (lb(I) = 0 IFF lb(J) = 0) AND (ub(I) > 0 IFF ub(J) > 0)
    AND (ub(I) < 0 IFF ub(J) < 0) AND (ub(I) = 0 IFF ub(J) = 0) AND (I << J)
    AND (lb(J) <= lb(I)) AND (ub(I) <= ub(J)) AND (lb(I) - lb(J) <= epsil)
    AND (ub(J) - ub(I) <= epsil)}" rational_interval nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil) (<< const-decl "bool" interval nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Interval type-eq-decl nil interval nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (|##| const-decl "bool" interval nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak))
 (rat_interval_fundamental 0
  (rat_interval_fundamental-1 nil 3627062970
   ("" (skeep)
    (("" (expand "rat_interval")
      (("" (expand "[||]")
        (("" (assert)
          (("" (expand "<<")
            (("" (lift-if)
              (("" (assert)
                (("" (lift-if)
                  (("" (assert)
                    (("" (lift-if)
                      (("" (lift-if)
                        (("" (assert)
                          (("" (lift-if)
                            (("" (lift-if)
                              (("" (lift-if)
                                (("" (lift-if)
                                  (("" (expand "posrat_approx")
                                    (("" (expand "[||]")
                                      ((""
                                        (lemma "posrat_approx_lb_def")
                                        ((""
                                          (lemma
                                           "posrat_approx_lb_increasing")
                                          ((""
                                            (ground)
                                            (("1"
                                              (neg-formula 1)
                                              (("1"
                                                (inst?)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil)
                                             ("3"
                                              (lift-if)
                                              (("3"
                                                (lift-if)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (lift-if)
                                                    (("3"
                                                      (ground)
                                                      (("1"
                                                        (neg-formula 1)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (lift-if)
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (lift-if)
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (lift-if)
                                                      (("4"
                                                        (ground)
                                                        (("1"
                                                          (neg-formula 1)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("5"
                                              (neg-formula 1)
                                              (("5"
                                                (inst?)
                                                (("5" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("6"
                                              (lift-if)
                                              (("6"
                                                (assert)
                                                (("6"
                                                  (lift-if)
                                                  (("6"
                                                    (assert)
                                                    (("6"
                                                      (lift-if)
                                                      (("6"
                                                        (ground)
                                                        (("1"
                                                          (neg-formula 1)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("7"
                                              (lift-if)
                                              (("7"
                                                (assert)
                                                (("7"
                                                  (lift-if)
                                                  (("7"
                                                    (assert)
                                                    (("7"
                                                      (lift-if)
                                                      (("7"
                                                        (ground)
                                                        (("1"
                                                          (neg-formula 1)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("8"
                                              (inst?)
                                              (("8" (assert) nil nil))
                                              nil)
                                             ("9"
                                              (lift-if)
                                              (("9"
                                                (assert)
                                                (("9"
                                                  (lift-if)
                                                  (("9"
                                                    (assert)
                                                    (("9"
                                                      (lift-if)
                                                      (("9"
                                                        (ground)
                                                        (("1"
                                                          (neg-formula 1)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rat_interval const-decl "{J: Interval |
        (lb(I) > 0 IFF lb(J) > 0) AND (lb(I) < 0 IFF lb(J) < 0)
    AND (lb(I) = 0 IFF lb(J) = 0) AND (ub(I) > 0 IFF ub(J) > 0)
    AND (ub(I) < 0 IFF ub(J) < 0) AND (ub(I) = 0 IFF ub(J) = 0) AND (I << J)
    AND (lb(J) <= lb(I)) AND (ub(I) <= ub(J)) AND (lb(I) - lb(J) <= epsil)
    AND (ub(J) - ub(I) <= epsil)}" rational_interval nil)
    (posrat_approx_lb_increasing formula-decl nil rational_interval nil)
    (neg_add formula-decl nil extra_tegies nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Interval type-eq-decl nil interval nil) (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (both_sides_times_neg_le1 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posrat_approx_lb const-decl "posreal" rational_interval nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_approx_lb_def formula-decl nil rational_interval nil)
    (posrat_approx const-decl "(Pos?)" rational_interval nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (<< const-decl "bool" interval nil)
    ([\|\|] const-decl "Interval" interval nil))
   shostak)))


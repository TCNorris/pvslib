(gbandb_boolexpr
 (combine_TCC1 0
  (combine_TCC1-1 nil 3639820331
   ("" (skeep :preds? t)
    (("" (typepred "M1`counterex")
      (("" (hide -1)
        (("" (typepred "M2`counterex")
          (("" (hide -1) (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((IntervalOutput type-eq-decl nil gbandb_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Maybe type-decl nil Maybe structures)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (combine subtype
    "IF list_adt[real].cons?(gbandb_boolexpr.M1`counterex) THEN gbandb_boolexpr.M1`counterex ELSE gbandb_boolexpr.M2`counterex ENDIF"
    "{l: list_adt[real].list | booleans.IMPLIES(list_adt[real].cons?(l), booleans.AND(Maybe[booleans.bool].some?(IF booleans.OR((booleans.AND(Maybe[booleans.bool].some?(gbandb_boolexpr.M1`answer), (booleans.NOT)(Maybe[booleans.bool].val(gbandb_boolexpr.M1`answer)))), (booleans.AND(Maybe[booleans.bool].some?(gbandb_boolexpr.M2`answer), (booleans.NOT)(Maybe[booleans.bool].val(gbandb_boolexpr.M2`answer))))) THEN Maybe[booleans.bool].Some(booleans.FALSE) ELSIF booleans.AND(Maybe[booleans.bool].some?(gbandb_boolexpr.M1`answer), Maybe[booleans.bool].some?(gbandb_boolexpr.M2`answer)) THEN Maybe[booleans.bool].Some(booleans.TRUE) ELSE Maybe[booleans.bool].None ENDIF), (booleans.NOT)(IF booleans.OR((booleans.AND(Maybe[booleans.bool].some?(gbandb_boolexpr.M1`answer), (booleans.NOT)(Maybe[booleans.bool].val(gbandb_boolexpr.M1`answer)))), (booleans.AND(Maybe[booleans.bool].some?(gbandb_boolexpr.M2`answer), (booleans.NOT)(Maybe[booleans.bool].val(gbandb_boolexpr.M2`answer))))) THEN booleans.FALSE ELSE IF booleans.AND(Maybe[booleans.bool].some?(gbandb_boolexpr.M1`answer), Maybe[booleans.bool].some?(gbandb_boolexpr.M2`answer)) THEN booleans.TRUE ELSE Maybe[booleans.bool].val(Maybe[booleans.bool].None) ENDIF ENDIF)))}")))
 (max_rec_TCC1 0
  (max_rec_TCC1-1 nil 3639822154 ("" (subtype-tcc) nil nil) nil nil
   (max_rec subtype "gbandb_boolexpr.b"
    "{b_1: box.Box | gbandb_boolexpr.n = (number_fields.+)(gbandb_boolexpr.i, list_props[Interval].length(b_1))}")))
 (max_rec_TCC2 0
  (max_rec_TCC2-2 "" 3790351013 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil) (Box type-eq-decl nil box nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (size const-decl "real" interval nil))
   shostak
   (max_rec subtype "gbandb_boolexpr.i"
    "naturalnumbers.below(gbandb_boolexpr.n)"))
  (max_rec_TCC2-1 nil 3639822154 ("" (grind))
   ((Interval type-eq-decl nil interval nil) (Box type-eq-decl nil box nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (size const-decl "real" interval nil))
   nil
   (max_rec subtype "gbandb_boolexpr.i"
    "naturalnumbers.below(gbandb_boolexpr.n)")))
 (max_rec_TCC3 0
  (max_rec_TCC3-2 "" 3790351013 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil) (Box type-eq-decl nil box nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (size const-decl "real" interval nil))
   shostak
   (max_rec subtype "(number_fields.+)(gbandb_boolexpr.i, 1)"
    "integers.subrange(1, gbandb_boolexpr.n)"))
  (max_rec_TCC3-1 nil 3639822154 ("" (grind))
   ((Interval type-eq-decl nil interval nil) (Box type-eq-decl nil box nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (size const-decl "real" interval nil))
   nil
   (max_rec subtype "(number_fields.+)(gbandb_boolexpr.i, 1)"
    "integers.subrange(1, gbandb_boolexpr.n)")))
 (max_rec_TCC4 0
  (max_rec_TCC4-1 nil 3639822154 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil) (Box type-eq-decl nil box nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (size const-decl "real" interval nil))
   nil (max_rec subtype "gbandb_boolexpr.b" "(list_adt[Interval].cons?)")))
 (max_rec_TCC5 0
  (max_rec_TCC5-2 "" 3790351013 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil) (Box type-eq-decl nil box nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (size const-decl "real" interval nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   shostak
   (max_rec subtype "list_adt[Interval].cdr(gbandb_boolexpr.b)"
    "{b: box.Box | gbandb_boolexpr.n = (number_fields.+)((number_fields.+)(1, gbandb_boolexpr.i), list_props[Interval].length(b))}"))
  (max_rec_TCC5-1 nil 3639822154 ("" (grind))
   ((Interval type-eq-decl nil interval nil) (Box type-eq-decl nil box nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (size const-decl "real" interval nil))
   nil
   (max_rec subtype "list_adt[Interval].cdr(gbandb_boolexpr.b)"
    "{b: box.Box | gbandb_boolexpr.n = (number_fields.+)((number_fields.+)(1, gbandb_boolexpr.i), list_props[Interval].length(b))}")))
 (max_rec_TCC6 0
  (max_rec_TCC6-1 nil 3639822154 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil) (Box type-eq-decl nil box nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (size const-decl "real" interval nil))
   nil
   (max_rec termination
    "gbandb_boolexpr.max_rec(gbandb_boolexpr.n, gbandb_boolexpr.mm, gbandb_boolexpr.i, (number_fields.+)(gbandb_boolexpr.i, 1), list_adt[Interval].cdr(gbandb_boolexpr.b))"
    "nil")))
 (max_rec_TCC7 0
  (max_rec_TCC7-2 "" 3790351013 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil) (Box type-eq-decl nil box nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (size const-decl "real" interval nil))
   shostak
   (max_rec subtype "(number_fields.+)(gbandb_boolexpr.i, 1)"
    "integers.subrange(1, gbandb_boolexpr.n)"))
  (max_rec_TCC7-1 nil 3639822154 ("" (grind))
   ((Interval type-eq-decl nil interval nil) (Box type-eq-decl nil box nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (size const-decl "real" interval nil))
   nil
   (max_rec subtype "(number_fields.+)(gbandb_boolexpr.i, 1)"
    "integers.subrange(1, gbandb_boolexpr.n)")))
 (max_rec_TCC8 0
  (max_rec_TCC8-1 nil 3639822154 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil) (Box type-eq-decl nil box nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (size const-decl "real" interval nil))
   nil (max_rec subtype "gbandb_boolexpr.b" "(list_adt[Interval].cons?)")))
 (max_rec_TCC9 0
  (max_rec_TCC9-2 "" 3790351014 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil) (Box type-eq-decl nil box nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (size const-decl "real" interval nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   shostak
   (max_rec subtype "list_adt[Interval].cdr(gbandb_boolexpr.b)"
    "{b: box.Box | gbandb_boolexpr.n = (number_fields.+)((number_fields.+)(1, gbandb_boolexpr.i), list_props[Interval].length(b))}"))
  (max_rec_TCC9-1 nil 3639822154 ("" (grind))
   ((Interval type-eq-decl nil interval nil) (Box type-eq-decl nil box nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (size const-decl "real" interval nil))
   nil
   (max_rec subtype "list_adt[Interval].cdr(gbandb_boolexpr.b)"
    "{b: box.Box | gbandb_boolexpr.n = (number_fields.+)((number_fields.+)(1, gbandb_boolexpr.i), list_props[Interval].length(b))}")))
 (max_rec_TCC10 0
  (max_rec_TCC10-1 nil 3639822154 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil) (Box type-eq-decl nil box nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (size const-decl "real" interval nil))
   nil
   (max_rec termination
    "gbandb_boolexpr.max_rec(gbandb_boolexpr.n, gbandb_boolexpr.m, gbandb_boolexpr.v, (number_fields.+)(gbandb_boolexpr.i, 1), list_adt[Interval].cdr(gbandb_boolexpr.b))"
    "nil")))
 (max_rec_TCC11 0
  (max_rec_TCC11-1 nil 3639822154 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil) (Box type-eq-decl nil box nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (max_rec subtype "gbandb_boolexpr.b" "(list_adt[Interval].cons?)")))
 (max_aux_TCC1 0
  (max_aux_TCC1-1 nil 3639822268 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box nil) (ProperBox? const-decl "bool" box nil)
    (ProperBox type-eq-decl nil box nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (max_aux subtype "list_props[Interval].length(gbandb_boolexpr.box)"
    "posnat")))
 (max_aux_TCC2 0
  (max_aux_TCC2-2 nil 3639822322
   ("" (skosimp*) (("" (typepred "box!1") (("" (grind) nil nil)) nil)) nil)
   ((ProperBox type-eq-decl nil box nil)
    (ProperBox? const-decl "bool" box nil) (Box type-eq-decl nil box nil)
    (list type-decl nil list_adt nil) (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (length def-decl "nat" list_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (max_aux subtype "gbandb_boolexpr.box" "(list_adt[Interval].cons?)"))
  (max_aux_TCC2-1 nil 3639822268 ("" (subtype-tcc) nil nil) nil nil
   (max_aux subtype "gbandb_boolexpr.box" "(list_adt[Interval].cons?)")))
 (max_aux_TCC3 0
  (max_aux_TCC3-1 nil 3639822268 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box nil) (ProperBox? const-decl "bool" box nil)
    (ProperBox type-eq-decl nil box nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (max_aux subtype "0"
    "naturalnumbers.below(list_props[Interval].length(gbandb_boolexpr.box))")))
 (max_aux_TCC4 0
  (max_aux_TCC4-1 nil 3639822268 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box nil) (ProperBox? const-decl "bool" box nil)
    (ProperBox type-eq-decl nil box nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (max_aux subtype "1"
    "integers.subrange(1, list_props[Interval].length(gbandb_boolexpr.box))")))
 (max_aux_TCC5 0
  (max_aux_TCC5-2 nil 3639822358
   ("" (skeep*)
    (("" (case-replace "box=null")
      (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ProperBox? const-decl "bool" box nil)
    (ProperBox type-eq-decl nil box nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (length def-decl "nat" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (max_aux subtype "list_adt[Interval].cdr(gbandb_boolexpr.box)"
    "{b: box.Box | list_props[Interval].length(gbandb_boolexpr.box) = (number_fields.+)(1, list_props[Interval].length(b))}"))
  (max_aux_TCC5-1 nil 3639822268 ("" (subtype-tcc) nil nil) nil nil
   (max_aux subtype "list_adt[Interval].cdr(gbandb_boolexpr.box)"
    "{b: box.Box | list_props[Interval].length(gbandb_boolexpr.box) = (number_fields.+)(1, list_props[Interval].length(b))}")))
 (altvar_TCC1 0
  (altvar_TCC1-1 nil 3639822268 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box nil) (ProperBox? const-decl "bool" box nil)
    (ProperBox type-eq-decl nil box nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (altvar subtype "list_props[Interval].length(gbandb_boolexpr.box)"
    "nonzero_real")))
 (altvar_TCC2 0
  (altvar_TCC2-2 nil 3639822395
   ("" (skeep :preds? t)
    (("" (lemma "mod_pos")
      (("" (inst?) (("1" (grind) nil nil) ("2" (assert) nil nil)) nil)) nil))
    nil)
   ((mod_pos formula-decl nil reals_mod reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod reals)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Maybe type-decl nil Maybe structures)
    (BoolExpr type-eq-decl nil IntervalExpr_adt nil)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt nil)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt nil)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil) (Interval type-eq-decl nil interval nil)
    (list type-decl nil list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (Box type-eq-decl nil box nil)
    (ProperBox? const-decl "bool" box nil)
    (ProperBox type-eq-decl nil box nil)
    (box skolem-const-decl "ProperBox" gbandb_boolexpr nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (altvar subtype
    "reals_mod.mod(length(gbandb_boolexpr.dirvars), list_props[Interval].length(gbandb_boolexpr.box))"
    "nat"))
  (altvar_TCC2-1 nil 3639822268 ("" (subtype-tcc) nil nil) nil nil
   (altvar subtype
    "reals_mod.mod(length(gbandb_boolexpr.dirvars), list_props[Interval].length(gbandb_boolexpr.box))"
    "nat"))))


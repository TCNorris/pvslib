(interval_expr (r2E_TCC1 0 (r2E_TCC1-1 nil 3576786010 ("" (subtype-tcc) nil nil) (([\|\|] const-decl "Interval" interval nil) (|##| const-decl "bool" interval nil) (Includes? const-decl "bool" interval nil)) nil (r2E subtype "[|interval_expr.r|]" "(interval.Includes?(interval_expr.r))"))) (I2E_TCC1 0 (I2E_TCC1-1 nil 3576786010 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (Interval type-eq-decl nil interval nil) (Proper? const-decl "bool" interval nil) (ProperInterval type-eq-decl nil interval nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (slice const-decl "real" interval nil) (midpoint const-decl "real" interval nil) (|##| const-decl "bool" interval nil) (Includes? const-decl "bool" interval nil) (real_plus_real_is_real application-judgement "real" reals nil)) nil (I2E subtype "interval_expr.X" "(interval.Includes?(interval.midpoint(interval_expr.X)))"))) (PreTrue_TCC1 0 (PreTrue_TCC1-1 nil 3577184980 ("" (subtype-tcc) nil nil) ((Precondition? const-decl "bool" interval nil)) nil (PreTrue subtype "LAMBDA (X: interval.Interval): booleans.TRUE" "(interval.Precondition?)"))) (real_bool_expr 0 (real_bool_expr-1 nil 3577460822 ("" (grind) nil nil) ((realexpr? const-decl "bool" interval_expr nil) (boolexpr? const-decl "bool" interval_expr nil)) shostak)) (eval_TCC1 0 (eval_TCC1-1 nil 3546625295 ("" (lemma "well_founded_restrict[IntervalExpr,RealExpr]") (("" (inst?) (("" (expand "well_founded?") (("" (propax) nil nil)) nil)) nil)) nil) ((<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (strict_well_founded? const-decl "bool" orders nil) (well_founded? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (well_founded_restrict judgement-tcc nil restrict_order_props nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (eval well-founded "restrict[[IntervalExpr_adt.IntervalExpr, IntervalExpr_adt.IntervalExpr], [RealExpr, RealExpr], booleans.bool].restrict(IntervalExpr_adt.<<)" "nil"))) (eval_TCC2 0 (eval_TCC2-1 nil 3546625295 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (eval subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.brel?(x) OR IntervalExpr_adt.fun4?(x) OR IntervalExpr_adt.fun2?(x) OR IntervalExpr_adt.div?(x) OR IntervalExpr_adt.mult?(x) OR IntervalExpr_adt.sub?(x) OR IntervalExpr_adt.add?(x)}"))) (eval_TCC3 0 (eval_TCC3-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op1(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC4 0 (eval_TCC4-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op2(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC5 0 (eval_TCC5-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (eval subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.bincludes?(x) OR IntervalExpr_adt.fun?(x) OR IntervalExpr_adt.pow?(x) OR IntervalExpr_adt.sq?(x) OR IntervalExpr_adt.neg?(x) OR IntervalExpr_adt.abs?(x)}"))) (eval_TCC6 0 (eval_TCC6-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC7 0 (eval_TCC7-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (eval subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.bincludes?(x) OR IntervalExpr_adt.fun?(x) OR IntervalExpr_adt.pow?(x) OR IntervalExpr_adt.sq?(x) OR IntervalExpr_adt.neg?(x) OR IntervalExpr_adt.abs?(x)}"))) (eval_TCC8 0 (eval_TCC8-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC9 0 (eval_TCC9-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (eval subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.brel?(x) OR IntervalExpr_adt.fun4?(x) OR IntervalExpr_adt.fun2?(x) OR IntervalExpr_adt.div?(x) OR IntervalExpr_adt.mult?(x) OR IntervalExpr_adt.sub?(x) OR IntervalExpr_adt.add?(x)}"))) (eval_TCC10 0 (eval_TCC10-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op1(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC11 0 (eval_TCC11-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op2(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC12 0 (eval_TCC12-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (eval subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.brel?(x) OR IntervalExpr_adt.fun4?(x) OR IntervalExpr_adt.fun2?(x) OR IntervalExpr_adt.div?(x) OR IntervalExpr_adt.mult?(x) OR IntervalExpr_adt.sub?(x) OR IntervalExpr_adt.add?(x)}"))) (eval_TCC13 0 (eval_TCC13-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op1(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC14 0 (eval_TCC14-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op2(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC15 0 (eval_TCC15-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (eval subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.bincludes?(x) OR IntervalExpr_adt.fun?(x) OR IntervalExpr_adt.pow?(x) OR IntervalExpr_adt.sq?(x) OR IntervalExpr_adt.neg?(x) OR IntervalExpr_adt.abs?(x)}"))) (eval_TCC16 0 (eval_TCC16-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC17 0 (eval_TCC17-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (eval subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.bincludes?(x) OR IntervalExpr_adt.fun?(x) OR IntervalExpr_adt.pow?(x) OR IntervalExpr_adt.sq?(x) OR IntervalExpr_adt.neg?(x) OR IntervalExpr_adt.abs?(x)}"))) (eval_TCC18 0 (eval_TCC18-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC19 0 (eval_TCC19-1 nil 3546625295 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (/= const-decl "boolean" notequal nil)) nil (eval subtype "IntervalExpr_adt.opn(interval_expr.expr)" "{i: integers.int | booleans.OR(interval_expr.eval(IntervalExpr_adt.op(interval_expr.expr), interval_expr.vs, interval_expr.n) /= 0, reals.>=(i, 0))}"))) (eval_TCC20 0 (eval_TCC20-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) nil (eval subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.brel?(x) OR IntervalExpr_adt.fun4?(x) OR IntervalExpr_adt.fun2?(x) OR IntervalExpr_adt.div?(x) OR IntervalExpr_adt.mult?(x) OR IntervalExpr_adt.sub?(x) OR IntervalExpr_adt.add?(x)}"))) (eval_TCC21 0 (eval_TCC21-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op1(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC22 0 (eval_TCC22-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op2(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC23 0 (eval_TCC23-1 nil 3546625295 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (/= const-decl "boolean" notequal nil)) nil (eval subtype "interval_expr.eval(IntervalExpr_adt.op2(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nznum"))) (eval_TCC24 0 (eval_TCC24-1 nil 3546625295 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (eval subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.brel?(x) OR IntervalExpr_adt.fun4?(x) OR IntervalExpr_adt.fun2?(x) OR IntervalExpr_adt.div?(x) OR IntervalExpr_adt.mult?(x) OR IntervalExpr_adt.sub?(x) OR IntervalExpr_adt.add?(x)}"))) (eval_TCC25 0 (eval_TCC25-1 nil 3546710894 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op2(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC26 0 (eval_TCC26-1 nil 3546710894 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (eval subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.bincludes?(x) OR IntervalExpr_adt.fun?(x) OR IntervalExpr_adt.pow?(x) OR IntervalExpr_adt.sq?(x) OR IntervalExpr_adt.neg?(x) OR IntervalExpr_adt.abs?(x)}"))) (eval_TCC27 0 (eval_TCC27-1 nil 3568989877 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC28 0 (eval_TCC28-1 nil 3580034334 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (eval subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.brel?(x) OR IntervalExpr_adt.fun4?(x) OR IntervalExpr_adt.fun2?(x) OR IntervalExpr_adt.div?(x) OR IntervalExpr_adt.mult?(x) OR IntervalExpr_adt.sub?(x) OR IntervalExpr_adt.add?(x)}"))) (eval_TCC29 0 (eval_TCC29-1 nil 3580034334 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op1(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC30 0 (eval_TCC30-1 nil 3580034334 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op2(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC31 0 (eval_TCC31-1 nil 3580034334 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (eval subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.brel?(x) OR IntervalExpr_adt.fun4?(x) OR IntervalExpr_adt.fun2?(x) OR IntervalExpr_adt.div?(x) OR IntervalExpr_adt.mult?(x) OR IntervalExpr_adt.sub?(x) OR IntervalExpr_adt.add?(x)}"))) (eval_TCC32 0 (eval_TCC32-1 nil 3679234752 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op1(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC33 0 (eval_TCC33-1 nil 3679234752 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op2(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC34 0 (eval_TCC34-1 nil 3679234752 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op3(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC35 0 (eval_TCC35-1 nil 3684336541 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.op4(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (eval_TCC36 0 (eval_TCC36-1 nil 3684336541 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) nil (eval subtype "interval_expr.expr" "(IntervalExpr_adt.letin?)"))) (eval_TCC37 0 (eval_TCC37-1 nil 3684336541 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.rin(interval_expr.expr), interval_expr.vs WITH [`n := interval_expr.rlet], (number_fields.+)(interval_expr.n, 1))" "nil"))) (eval_TCC38 0 (eval_TCC38-1 nil 3684336541 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (eval subtype "interval_expr.expr" "(IntervalExpr_adt.letin?)"))) (eval_TCC39 0 (eval_TCC39-1 nil 3684336541 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (eval termination "interval_expr.eval(IntervalExpr_adt.rlet(interval_expr.expr), interval_expr.vs, interval_expr.n)" "nil"))) (Eval_TCC1 0 (Eval_TCC1-1 nil 3546624714 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (Eval subtype "IntervalExpr_adt.varidx(interval_expr.expr)" "below[length[Interval](box)]"))) (Eval_TCC2 0 (Eval_TCC2-1 nil 3546624714 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (restrict const-decl "R" restrict nil)) nil (Eval termination "interval_expr.Eval(IntervalExpr_adt.op1(interval_expr.expr), interval_expr.box)" "nil"))) (Eval_TCC3 0 (Eval_TCC3-1 nil 3580034334 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (Proper? const-decl "bool" interval nil)) nil (Eval subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr | booleans.OR(IntervalExpr_adt.fun4?(x), IntervalExpr_adt.fun2?(x))}"))) (Eval_TCC4 0 (Eval_TCC4-1 nil 3684336541 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (Proper? const-decl "bool" interval nil)) nil (Eval subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr | booleans.OR(IntervalExpr_adt.fun4?(x), IntervalExpr_adt.fun2?(x))}"))) (Eval_TCC5 0 (Eval_TCC5-1 nil 3684336541 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (Proper? const-decl "bool" interval nil) (restrict const-decl "R" restrict nil)) nil (Eval termination "interval_expr.Eval(IntervalExpr_adt.rin(interval_expr.expr), list_props[Interval].append(interval_expr.box, (: interval_expr.rlet :)))" "nil"))) (well_typed?_TCC1 0 (well_typed?_TCC1-1 nil 3576776063 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (well_typed? subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.brel?(x) OR IntervalExpr_adt.fun4?(x) OR IntervalExpr_adt.fun2?(x) OR IntervalExpr_adt.div?(x) OR IntervalExpr_adt.mult?(x) OR IntervalExpr_adt.sub?(x) OR IntervalExpr_adt.add?(x)}"))) (well_typed?_TCC2 0 (well_typed?_TCC2-1 nil 3576776063 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (well_typed? subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.bincludes?(x) OR IntervalExpr_adt.fun?(x) OR IntervalExpr_adt.pow?(x) OR IntervalExpr_adt.sq?(x) OR IntervalExpr_adt.neg?(x) OR IntervalExpr_adt.abs?(x)}"))) (well_typed?_TCC3 0 (well_typed?_TCC3-1 nil 3576776063 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (well_typed? subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.brel?(x) OR IntervalExpr_adt.fun4?(x) OR IntervalExpr_adt.fun2?(x) OR IntervalExpr_adt.div?(x) OR IntervalExpr_adt.mult?(x) OR IntervalExpr_adt.sub?(x) OR IntervalExpr_adt.add?(x)}"))) (well_typed?_TCC4 0 (well_typed?_TCC4-1 nil 3576776063 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (well_typed? subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.bincludes?(x) OR IntervalExpr_adt.fun?(x) OR IntervalExpr_adt.pow?(x) OR IntervalExpr_adt.sq?(x) OR IntervalExpr_adt.neg?(x) OR IntervalExpr_adt.abs?(x)}"))) (well_typed?_TCC5 0 (well_typed?_TCC5-1 nil 3576776063 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (well_typed? subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.brel?(x) OR IntervalExpr_adt.fun4?(x) OR IntervalExpr_adt.fun2?(x) OR IntervalExpr_adt.div?(x) OR IntervalExpr_adt.mult?(x) OR IntervalExpr_adt.sub?(x) OR IntervalExpr_adt.add?(x)}"))) (well_typed?_TCC6 0 (well_typed?_TCC6-1 nil 3576776063 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (well_typed? subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.bincludes?(x) OR IntervalExpr_adt.fun?(x) OR IntervalExpr_adt.pow?(x) OR IntervalExpr_adt.sq?(x) OR IntervalExpr_adt.neg?(x) OR IntervalExpr_adt.abs?(x)}"))) (well_typed?_TCC7 0 (well_typed?_TCC7-1 nil 3576776063 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil)) nil (well_typed? subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.brel?(x) OR IntervalExpr_adt.fun4?(x) OR IntervalExpr_adt.fun2?(x) OR IntervalExpr_adt.div?(x) OR IntervalExpr_adt.mult?(x) OR IntervalExpr_adt.sub?(x) OR IntervalExpr_adt.add?(x)}"))) (well_typed?_TCC8 0 (well_typed?_TCC8-1 nil 3576776063 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (Zeroless? const-decl "bool" interval nil)) nil (well_typed? subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.bincludes?(x) OR IntervalExpr_adt.fun?(x) OR IntervalExpr_adt.pow?(x) OR IntervalExpr_adt.sq?(x) OR IntervalExpr_adt.neg?(x) OR IntervalExpr_adt.abs?(x)}"))) (well_typed?_TCC9 0 (well_typed?_TCC9-1 nil 3576776063 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (Zeroless? const-decl "bool" interval nil)) nil (well_typed? subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.bincludes?(x) OR IntervalExpr_adt.fun?(x) OR IntervalExpr_adt.pow?(x) OR IntervalExpr_adt.sq?(x) OR IntervalExpr_adt.neg?(x) OR IntervalExpr_adt.abs?(x)}"))) (well_typed?_TCC10 0 (well_typed?_TCC10-1 nil 3683827037 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (Zeroless? const-decl "bool" interval nil)) nil (well_typed? subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.brel?(x) OR IntervalExpr_adt.fun4?(x) OR IntervalExpr_adt.fun2?(x) OR IntervalExpr_adt.div?(x) OR IntervalExpr_adt.mult?(x) OR IntervalExpr_adt.sub?(x) OR IntervalExpr_adt.add?(x)}"))) (well_typed?_TCC11 0 (well_typed?_TCC11-1 nil 3684336541 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (Zeroless? const-decl "bool" interval nil)) nil (well_typed? subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr | booleans.OR(IntervalExpr_adt.fun4?(x), IntervalExpr_adt.fun2?(x))}"))) (well_typed?_TCC12 0 (well_typed?_TCC12-1 nil 3684336541 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (Zeroless? const-decl "bool" interval nil)) nil (well_typed? subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.brel?(x) OR IntervalExpr_adt.fun4?(x) OR IntervalExpr_adt.fun2?(x) OR IntervalExpr_adt.div?(x) OR IntervalExpr_adt.mult?(x) OR IntervalExpr_adt.sub?(x) OR IntervalExpr_adt.add?(x)}"))) (well_typed?_TCC13 0 (well_typed?_TCC13-1 nil 3684336541 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (Zeroless? const-decl "bool" interval nil)) nil (well_typed? subtype "interval_expr.expr" "{x: IntervalExpr_adt.IntervalExpr | booleans.OR(IntervalExpr_adt.fun4?(x), IntervalExpr_adt.fun2?(x))}"))) (Proper_well_typed 0 (Proper_well_typed-2 nil 3580040755 ("" (deftactic binop (then (skolem 1 ("r1" "r2") :skolem-typepreds? t) (replaces -) (flatten) (skeep) (insteep) (insteep) (expand "well_typed?" 1) (expand "Eval" -3) (branch (case "Proper?(Eval(r1, box)) AND Proper?(Eval(r2, box))") ((then (flatten) (assert)) (then (hide-all-but (-3 1)) (lemma "Proper_NonEmpty") (ground)))))) (("" (deftactic unop (then (skolem 1 "r1" :skolem-typepreds? t) (replaces -1) (flatten) (skeep) (insteep -) (insteep -) (expand "well_typed?" 1) (expand "Eval" -2) (branch (case "Proper?(Eval(r1, box))") ((then (flatten) (assert)) (then (hide-all-but (-2 1)) (lemma "Proper_NonEmpty") (ground)))))) (("" (induct "expr") (("1" (typepred "expr!1") (("1" (assert) nil nil)) nil) ("2" (skeep) (("2" (hide -1) (("2" (expand "well_typed?") (("2" (propax) nil nil)) nil)) nil)) nil) ("3" (skeep) (("3" (hide -1) (("3" (skeep) (("3" (expand "well_typed?") (("3" (expand "Proper?") (("3" (expand "Eval" -1) (("3" (assert) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (binop) nil nil) ("5" (unop) nil nil) ("6" (unop) (("6" (grind) nil nil)) nil) ("7" (binop) nil nil) ("8" (binop) nil nil) ("9" (unop) nil nil) ("10" (skolem 1 (_ "n")) (("10" (unop) nil nil)) nil) ("11" (skolem 1 ("r1" "r2") :skolem-typepreds? t) (("11" (replaces -) (("11" (flatten) (("11" (skeep) (("11" (insteep) (("11" (insteep) (("11" (expand "well_typed?" 1) (("11" (expand "Eval" -3) (("11" (case "Proper?(Eval(r1, box)) AND Proper?(Eval(r2, box)) AND Zeroless?(Eval(r2,box))") (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (hide-all-but (-3 1)) (("2" (lemma "Proper_NonEmpty") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("12" (skolem 1 ("Pre" "f" "F" _)) (("12" (skolem 1 "r1" :skolem-typepreds? t) (("12" (replaces -1) (("12" (flatten) (("12" (skeep) (("12" (insteep) (("12" (expand "well_typed?" 1) (("12" (expand "Eval" -2) (("12" (case "Proper?(Eval(r1, box)) AND Pre(Eval(r1, box))") (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (hide-all-but (-2 1)) (("2" (lemma "Proper_NonEmpty") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("13" (skolem 1 ("Pre" "pre2" "f" "F" _ _)) (("13" (skolem 1 ("r1" "r2") :skolem-typepreds? t) (("13" (replaces -1) (("13" (replaces -1) (("13" (flatten) (("13" (skeep) (("13" (insteep) (("13" (insteep) (("13" (expand "well_typed?" 1) (("13" (expand "Eval" -3) (("13" (case "Proper?(Eval(r1, box)) AND
          Proper?(Eval(r2, box)) AND
           Pre(Eval(r1, box)) AND pre2(Eval(r1, box), Eval(r2, box))") (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (hide-all-but (-3 1)) (("2" (lemma "Proper_NonEmpty") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("14" (skolem 1 ("r1" "r2") :skolem-typepreds? t) (("14" (replaces -) (("14" (flatten) (("14" (skeep) (("14" (insteep) (("14" (expand "well_typed?" 1) (("14" (expand "Eval" -3) (("14" (case-replace "Proper?(Eval(r1, box))") (("1" (assert) (("1" (inst? -3) (("1" (assert) nil nil)) nil)) nil) ("2" (hide-all-but (-3 1)) (("2" (lemma "Proper_NonEmpty") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (assert) nil nil) ("23" (assert) nil nil) ("24" (skolem 1 ("Pre" "pre2" "pre3" "pre4" "f" "F" _ _ _ _)) (("24" (skolem 1 ("r1" "r2" "r3" "r4") :skolem-typepreds? t) (("24" (replaces -1) (("24" (replaces -1) (("24" (replaces -1) (("24" (replaces -1) (("24" (flatten) (("24" (skeep) (("24" (insteep) (("24" (insteep) (("24" (insteep) (("24" (insteep) (("24" (expand "well_typed?" 1) (("24" (expand "Eval" -5) (("24" (invoke (case "%1") (! -5 1)) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (hide-all-but (-5 1)) (("2" (lemma "Proper_NonEmpty") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((Precondition3? const-decl "bool" interval nil) (Precondition4? const-decl "bool" interval nil) (append def-decl "list[T]" list_props nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (Precondition2? const-decl "bool" interval nil) (PRED type-eq-decl nil defined_types nil) (Precondition? const-decl "bool" interval nil) (Zeroless? const-decl "bool" interval nil) (Zeroless_Precondition name-judgement "(Precondition?)" interval nil) (minus_real_is_real application-judgement "real" reals nil) (Neg const-decl "Interval" interval nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (Proper_NonEmpty formula-decl nil interval nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (EmptyInterval const-decl "Interval" interval nil) ([\|\|] const-decl "Interval" interval nil) (NOT const-decl "[bool -> bool]" booleans nil) (IntervalExpr_induction formula-decl nil IntervalExpr_adt nil) (well_typed? inductive-decl "bool" interval_expr nil) (Eval def-decl "Interval" interval_expr nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (Proper? const-decl "bool" interval nil) (Box type-eq-decl nil box nil) (list type-decl nil list_adt nil) (Interval type-eq-decl nil interval nil) (real nonempty-type-from-decl nil reals nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (TRUE const-decl "bool" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil) (Proper_well_typed-1 nil 3580040577 ("" (deftactic binop (then (skolem 1 ("r1" "r2") :skolem-typepreds? t) (replaces -) (flatten) (skeep) (insteep -) (insteep -) (expand "well_typed?" 1) (expand "Eval" -3) (branch (case "Proper?(Eval(r1, box)) AND Proper?(Eval(r2, box))") ((then (flatten) (assert)) (then (hide-all-but (-3 1)) (lemma "Proper_NonEmpty") (ground)))))) (("" (deftactic unop (then (skolem 1 "r1" :skolem-typepreds? t) (replaces -1) (flatten) (skeep) (insteep -) (insteep -) (expand "well_typed?" 1) (expand "Eval" -2) (branch (case "Proper?(Eval(r1, box))") ((then (flatten) (assert)) (then (hide-all-but (-2 1)) (lemma "Proper_NonEmpty") (ground)))))) (("" (induct "expr") (("1" (typepred "expr!1") (("1" (assert) nil nil)) nil) ("2" (skeep) (("2" (hide -1) (("2" (expand "well_typed?") (("2" (propax) nil nil)) nil)) nil)) nil) ("3" (skeep) (("3" (hide -1) (("3" (skeep) (("3" (expand "well_typed?") (("3" (expand "Proper?") (("3" (expand "Eval" -1) (("3" (assert) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (binop) nil nil) ("5" (unop) nil nil) ("6" (unop) (("6" (grind) nil nil)) nil) ("7" (binop) nil nil) ("8" (binop) nil nil) ("9" (unop) nil nil) ("10" (skolem 1 (_ "n")) (("10" (unop) nil nil)) nil) ("11" (skolem 1 ("r1" "r2") :skolem-typepreds? t) (("11" (replaces -) (("11" (flatten) (("11" (skeep) (("11" (insteep) (("11" (insteep) (("11" (expand "well_typed?" 1) (("11" (expand "Eval" -3) (("11" (case "Proper?(Eval(r1, box)) AND Proper?(Eval(r2, box)) AND Zeroless?(Eval(r2,box))") (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (hide-all-but (-3 1)) (("2" (lemma "Proper_NonEmpty") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("12" (skolem 1 ("Pre" "f" "F" _)) (("12" (skolem 1 "r1" :skolem-typepreds? t) (("12" (replaces -1) (("12" (flatten) (("12" (skeep) (("12" (insteep) (("12" (expand "well_typed?" 1) (("12" (expand "Eval" -2) (("12" (case "Proper?(Eval(r1, box)) AND Pre(Eval(r1, box))") (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (hide-all-but (-2 1)) (("2" (lemma "Proper_NonEmpty") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("13" (skolem 1 ("r1" "r2") :skolem-typepreds? t) (("13" (replaces -) (("13" (flatten) (("13" (skeep) (("13" (postpone) nil nil)) nil)) nil)) nil)) nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (assert) nil nil)) nil)) nil)) nil) nil nil) (Proper_well_typed-4 nil 3576784677 ("" (deftactic binop (then (skolem 1 ("r1" "r2") :skolem-typepreds? t) (replaces -) (flatten) (expand "well_typed?" 1) (expand "Eval" -3) (branch (case "Proper?(Eval(r1, box)) AND Proper?(Eval(r2, box))") ((then (flatten) (assert)) (then (hide-all-but (-3 1)) (lemma "Proper_NonEmpty") (ground)))))) (("" (deftactic unop (then (skolem 1 "r1" :skolem-typepreds? t) (replaces -1) (flatten) (expand "well_typed?" 1) (expand "Eval" -2) (branch (case "Proper?(Eval(r1, box))") ((then (flatten) (assert)) (then (hide-all-but (-2 1)) (lemma "Proper_NonEmpty") (ground)))))) (("" (skeep :but "expr") (("" (induct "expr") (("1" (typepred "expr!1") (("1" (assert) nil nil)) nil) ("2" (skeep) (("2" (hide -1) (("2" (expand "well_typed?") (("2" (propax) nil nil)) nil)) nil)) nil) ("3" (skeep) (("3" (hide -1) (("3" (expand "well_typed?") (("3" (expand "Proper?") (("3" (expand "Eval" -1) (("3" (assert) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (binop) nil nil) ("5" (unop) nil nil) ("6" (unop) (("6" (grind) nil nil)) nil) ("7" (binop) nil nil) ("8" (binop) nil nil) ("9" (unop) nil nil) ("10" (skolem 1 (_ "n")) (("10" (unop) nil nil)) nil) ("11" (skolem 1 ("r1" "r2") :skolem-typepreds? t) (("11" (replaces -) (("11" (flatten) (("11" (expand "well_typed?" 1) (("11" (expand "Eval" -3) (("11" (case "Proper?(Eval(r1, box)) AND Proper?(Eval(r2, box)) AND Zeroless?(Eval(r2,box))") (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (hide-all-but (-3 1)) (("2" (lemma "Proper_NonEmpty") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("12" (skolem 1 ("Pre" "f" "F" _)) (("12" (skolem 1 "r1" :skolem-typepreds? t) (("12" (replaces -1) (("12" (flatten) (("12" (expand "well_typed?" 1) (("12" (expand "Eval" -2) (("12" (case "Proper?(Eval(r1, box)) AND Pre(Eval(r1, box))") (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (hide-all-but (-2 1)) (("2" (lemma "Proper_NonEmpty") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("13" (skolem 1 ("r1" "r2") :skolem-typepreds? t) (("13" (replaces -) (("13" (flatten) (("13" (postpone) nil nil)) nil)) nil)) nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (assert) nil nil)) nil)) nil)) nil)) nil) ((IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (Interval type-eq-decl nil interval nil) (Proper? const-decl "bool" interval nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (Box type-eq-decl nil box nil) (IntervalExpr_induction formula-decl nil IntervalExpr_adt nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (le_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (EmptyInterval const-decl "Interval" interval nil) (Proper_NonEmpty formula-decl nil interval nil) (Neg const-decl "Interval" interval nil) (Zeroless? const-decl "bool" interval nil) (Zeroless_Precondition name-judgement "(Precondition?)" interval nil) (Precondition? const-decl "bool" interval nil)) nil)) (Eval_inclusion 0 (Eval_inclusion-1 nil 3580041393 ("" (deftactic binop (then (skolem 1 ("r1" "r2") :skolem-typepreds? t) (flatten) (replaces (-1 -2)) (skeep) (insteep) (insteep) (expand "well_typed?" -3) (flatten) (assert) (expand "eval" 1) (expand "Eval" 1) (lemma "Member_Proper") (copy -1) (inst? -1 :where -3) (inst? -2 :where -4) (assert) (let ((lm (format nil "~a_inclusion" (operator (extra-get-expr (quote (! 1 r))))))) (rewrite lm)))) (("" (deftactic unop (then (skolem 1 "r" :skolem-typepreds? t) (flatten) (replaces -1) (skeep) (insteep) (insteep) (expand "well_typed?" -2) (flatten) (assert) (expand "eval" 1) (expand "Eval" 1) (lemma "Member_Proper") (inst? -1 :where -2) (assert) (let ((lm (format nil "~a_inclusion" (operator (extra-get-expr (quote (! 1 r))))))) (rewrite lm)))) (("" (induct "expr") (("1" (typepred "expr!1") (("1" (assert) nil nil)) nil) ("2" (skeep :preds? t) (("2" (hide -2) (("2" (skeep) (("2" (expand* "Eval" "eval") (("2" (expand "Includes?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (skeep) (("3" (hide -1) (("3" (skeep) (("3" (expand* "Eval" "eval" "well_typed?") (("3" (assert) (("3" (typepred "vs") (("3" (expand "vars_in_box?") (("3" (inst? -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (binop) nil nil) ("5" (unop) nil nil) ("6" (unop) nil nil) ("7" (binop) nil nil) ("8" (binop) nil nil) ("9" (unop) nil nil) ("10" (skolem 1 (_ "n")) (("10" (unop) nil nil)) nil) ("11" (skolem 1 ("r1" "r2") :skolem-typepreds? t) (("11" (flatten) (("11" (replaces (-1 -2)) (("11" (skeep) (("11" (insteep) (("11" (insteep) (("11" (expand "well_typed?" -3) (("11" (flatten) (("11" (assert) (("11" (expand "eval" 1) (("11" (expand "Eval" 1) (("11" (lemma "Member_Proper") (("11" (copy -1) (("11" (inst? -1 :where -3) (("11" (inst? -2 :where -4) (("11" (assert) (("11" (lift-if) (("11" (split 1) (("1" (flatten) (("1" (replaces -1) (("1" (hide-all-but (-2 -4 -7)) (("1" (grind :exclude "Eval") nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (rewrite "Div_inclusion") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("12" (skolem 1 ("Pre" "f" "F" _)) (("12" (skolem 1 "r" :skolem-typepreds? t) (("12" (flatten) (("12" (replaces -1) (("12" (skeep) (("12" (insteep) (("12" (expand "well_typed?" -2) (("12" (flatten) (("12" (assert) (("12" (lemma "Member_Proper") (("12" (inst? -1 :where -2) (("12" (assert) (("12" (expand "eval" 1) (("12" (expand "Eval" 1) (("12" (typepred "F") (("12" (expand "Inclusion?") (("12" (inst? -1) (("12" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("13" (skolem 1 ("Pre1" "Pre2" "f" "F" _ _)) (("13" (skolem 1 ("r1" "r2") :skolem-typepreds? t) (("13" (flatten) (("13" (replaces -1) (("13" (replaces -1) (("13" (skeep) (("13" (insteep) (("13" (insteep) (("13" (expand "well_typed?" -3) (("13" (flatten) (("13" (assert) (("13" (lemma "Member_Proper") (("13" (inst? -1 :where -2) (("13" (lemma "Member_Proper") (("13" (inst? -1 :where -4) (("13" (assert) (("13" (expand "eval" 1) (("13" (expand "Eval" 1) (("13" (typepred "F") (("13" (expand "Inclusion2?") (("13" (inst? -1) (("13" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("14" (skolem 1 ("r1" "r2") :skolem-typepreds? t) (("14" (flatten) (("14" (replaces -) (("14" (skeep) (("14" (insteep -) (("14" (expand "well_typed?" -3) (("14" (flatten) (("14" (assert) (("14" (expand "eval" 1) (("14" (expand "Eval" 1) (("14" (inst? - :where -4) (("14" (assert) (("14" (rewrite "length_append") (("14" (case-replace "Proper?(Eval(r1,box))") (("1" (inst? -) (("1" (hide 2) (("1" (expand "vars_in_box?") (("1" (skeep) (("1" (case-replace "i=length(box)") (("1" (assert) (("1" (rewrite "nth_append[Interval]") (("1" (expand "nth") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (rewrite "nth_append[Interval]") (("1" (typepred "i") (("1" (rewrite "length_append") (("1" (assert) (("1" (typepred "vs") (("1" (expand "vars_in_box?") (("1" (insteep) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "i") (("2" (rewrite "length_append") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide-all-but (-1 1)) (("2" (grind :exclude "Eval") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (assert) nil nil) ("23" (assert) nil nil) ("24" (skolem 1 ("Pre1" "Pre2" "Pre3" "Pre4" "f" "F" _ _ _ _)) (("24" (skolem 1 ("r1" "r2" "r3" "r4") :skolem-typepreds? t) (("24" (flatten) (("24" (replaces -1) (("24" (replaces -1) (("24" (replaces -1) (("24" (replaces -1) (("24" (skeep) (("24" (insteep) (("24" (insteep) (("24" (insteep) (("24" (insteep) (("24" (expand "well_typed?" -5) (("24" (flatten) (("24" (assert) (("24" (lemma "Member_Proper") (("24" (inst? -1 :where -2) (("24" (lemma "Member_Proper") (("24" (inst? -1 :where -4 :copy? t) (("24" (inst? -1 :where -6 :copy? t) (("24" (inst? -1 :where -8) (("24" (assert) (("24" (expand "eval" 1) (("24" (expand "Eval" 1) (("24" (typepred "F") (("24" (expand "Inclusion4?") (("24" (inst? -1) (("24" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((Inclusion4? const-decl "bool" interval nil) (Precondition3? const-decl "bool" interval nil) (Precondition4? const-decl "bool" interval nil) (Fundamental4? const-decl "bool" interval nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (append def-decl "list[T]" list_props nil) (length_append formula-decl nil list_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (length_singleton formula-decl nil more_list_props structures) (box skolem-const-decl "Box" interval_expr nil) (r1 skolem-const-decl "RealExpr" interval_expr nil) (vs skolem-const-decl "(vars_in_box?(box))" interval_expr nil) (nth_append formula-decl nil more_list_props structures) (int_minus_int_is_int application-judgement "int" integers nil) (nth def-decl "T" list_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (Inclusion2? const-decl "bool" interval nil) (Precondition2? const-decl "bool" interval nil) (Fundamental2? const-decl "bool" interval nil) (PRED type-eq-decl nil defined_types nil) (Inclusion? const-decl "bool" interval nil) (Precondition? const-decl "bool" interval nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (Fundamental? const-decl "bool" interval nil) (Zeroless_Precondition name-judgement "(Precondition?)" interval nil) (Div_inclusion formula-decl nil interval nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (Proper? const-decl "bool" interval nil) (Zeroless? const-decl "bool" interval nil) (Pow_inclusion formula-decl nil interval nil) (Sq_inclusion formula-decl nil interval nil) (Mult_inclusion formula-decl nil interval nil) (real_times_real_is_real application-judgement "real" reals nil) (Sub_inclusion formula-decl nil interval nil) (real_minus_real_is_real application-judgement "real" reals nil) (Neg_inclusion formula-decl nil interval nil) (minus_real_is_real application-judgement "real" reals nil) (Abs_inclusion formula-decl nil interval nil) (Add_inclusion formula-decl nil interval nil) (real_plus_real_is_real application-judgement "real" reals nil) (Member_Proper formula-decl nil interval nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (Includes? const-decl "bool" interval nil) (NOT const-decl "[bool -> bool]" booleans nil) (IntervalExpr_induction formula-decl nil IntervalExpr_adt nil) (Eval def-decl "Interval" interval_expr nil) (length def-decl "nat" list_props nil) (eval def-decl "real" interval_expr nil) (|##| const-decl "bool" interval nil) (well_typed? inductive-decl "bool" interval_expr nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (vars_in_box? const-decl "bool" box nil) (Env type-eq-decl nil box nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (Box type-eq-decl nil box nil) (list type-decl nil list_adt nil) (Interval type-eq-decl nil interval nil) (real nonempty-type-from-decl nil reals nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (TRUE const-decl "bool" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil) (Eval_inclusion-4 nil 3576777542 ("" (skeep) (("" (deftactic binop (then (skolem 1 ("r1" "r2") :skolem-typepreds? t) (flatten) (replaces (-1 -2)) (expand "well_typed?" -3) (flatten) (assert) (expand "eval" 1) (expand "Eval" 1) (lemma "Member_Proper") (copy -1) (inst? -1 :where -3) (inst? -2 :where -4) (assert) (let ((lm (format nil "~a_inclusion" (operator (extra-get-expr (quote (! 1 r))))))) (rewrite lm)))) (("" (deftactic unop (then (skolem 1 "r" :skolem-typepreds? t) (flatten) (replaces -1) (expand "well_typed?" -2) (flatten) (assert) (expand "eval" 1) (expand "Eval" 1) (lemma "Member_Proper") (inst? -1 :where -2) (assert) (let ((lm (format nil "~a_inclusion" (operator (extra-get-expr (quote (! 1 r))))))) (rewrite lm)))) (("" (induct "expr") (("1" (typepred "expr!1") (("1" (assert) nil nil)) nil) ("2" (skeep :preds? t) (("2" (hide -2) (("2" (expand* "Eval" "eval") (("2" (expand "Includes?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("3" (skeep) (("3" (hide -1) (("3" (expand* "Eval" "eval" "well_typed?") (("3" (assert) (("3" (typepred "vs") (("3" (expand "vars_in_box?") (("3" (inst? -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (binop) nil nil) ("5" (unop) nil nil) ("6" (unop) nil nil) ("7" (binop) nil nil) ("8" (binop) nil nil) ("9" (unop) nil nil) ("10" (skolem 1 (_ "n")) (("10" (unop) nil nil)) nil) ("11" (skolem 1 ("r1" "r2") :skolem-typepreds? t) (("11" (flatten) (("11" (replaces (-1 -2)) (("11" (expand "well_typed?" -3) (("11" (flatten) (("11" (assert) (("11" (expand "eval" 1) (("11" (expand "Eval" 1) (("11" (lemma "Member_Proper") (("11" (copy -1) (("11" (inst? -1 :where -3) (("11" (inst? -2 :where -4) (("11" (assert) (("11" (lift-if) (("11" (split 1) (("1" (flatten) (("1" (replaces -1) (("1" (hide-all-but (-2 -4 -7)) (("1" (grind :exclude "Eval") nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (rewrite "Div_inclusion") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("12" (skolem 1 ("Pre" "f" "F" _)) (("12" (skolem 1 "r" :skolem-typepreds? t) (("12" (flatten) (("12" (replaces -1) (("12" (expand "well_typed?" -2) (("12" (flatten) (("12" (assert) (("12" (lemma "Member_Proper") (("12" (inst? -1 :where -2) (("12" (assert) (("12" (expand "eval" 1) (("12" (expand "Eval" 1) (("12" (typepred "F") (("12" (expand "Inclusion?") (("12" (inst? -1) (("12" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("13" (assert) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil)) nil)) nil)) nil)) nil) ((IntervalExpr type-decl nil IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (Interval type-eq-decl nil interval nil) (Box type-eq-decl nil box nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (|##| const-decl "bool" interval nil) (Env type-eq-decl nil box nil) (vars_in_box? const-decl "bool" box nil) (IntervalExpr_induction formula-decl nil IntervalExpr_adt nil) (Includes? const-decl "bool" interval nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (lt_realorder name-judgement "RealOrder" real_orders reals) (Add_inclusion formula-decl nil interval nil) (Member_Proper formula-decl nil interval nil) (Abs_inclusion formula-decl nil interval nil) (Neg_inclusion formula-decl nil interval nil) (Sub_inclusion formula-decl nil interval nil) (Mult_inclusion formula-decl nil interval nil) (Sq_inclusion formula-decl nil interval nil) (Pow_inclusion formula-decl nil interval nil) (Zeroless_Precondition name-judgement "(Precondition?)" interval nil) (Div_inclusion formula-decl nil interval nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (le_realorder name-judgement "RealOrder" real_orders reals) (Proper? const-decl "bool" interval nil) (Zeroless? const-decl "bool" interval nil) (Fundamental? const-decl "bool" interval nil) (Precondition? const-decl "bool" interval nil) (Inclusion? const-decl "bool" interval nil)) nil)) (Eval_inclusion_Proper 0 (Eval_inclusion_Proper-1 nil 3576776063 ("" (skeep*) (("" (beta) (("" (flatten) (("" (lemma "Proper_well_typed") (("" (inst?) (("" (assert) (("" (lemma "Eval_inclusion") (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((Proper_well_typed formula-decl nil interval_expr nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (Env type-eq-decl nil box nil) (vars_in_box? const-decl "bool" box nil) (Eval_inclusion formula-decl nil interval_expr nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (Box type-eq-decl nil box nil) (list type-decl nil list_adt nil) (Interval type-eq-decl nil interval nil) (real nonempty-type-from-decl nil reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil)) (well_typed_Proper 0 (well_typed_Proper-1 nil 3576777667 ("" (skeep) (("" (lemma "Eval_inclusion") (("" (inst? -1) (("" (inst -1 "midvars(pox)") (("" (assert) (("" (lemma "Member_Proper") (("" (inst? -1) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((Eval_inclusion formula-decl nil interval_expr nil) (midvars const-decl "(vars_in_box?(pox))" box nil) (vars_in_box? const-decl "bool" box nil) (Env type-eq-decl nil box nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (Member_Proper formula-decl nil interval nil) (length def-decl "nat" list_props nil) (eval def-decl "real" interval_expr nil) (Eval def-decl "Interval" interval_expr nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (ProperBox type-eq-decl nil box nil) (ProperBox? const-decl "bool" box nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (Box type-eq-decl nil box nil) (list type-decl nil list_adt nil) (Interval type-eq-decl nil interval nil) (real nonempty-type-from-decl nil reals nil)) shostak)) (Eval_fundamental_aux 0 (Eval_fundamental_aux-3 "test" 3580046533 ("" (deftactic binop (then (skolem 1 ("r1" "r2") :skolem-typepreds? t) (flatten) (replaces (-1 -2)) (skeep) (insteep) (insteep) (assert) (expand "well_typed?" -4) (label "PP" -5) (flatten) (assert) (expand "Eval" ("PP" 1)) (branch (case "Proper?(Eval(r1, box)) AND Proper?(Eval(r2, box))") ((then (flatten) (assert) (lemma "Incl_Proper") (copy -1) (inst? -1 :where -5) (inst? -2 :where -6) (assert) (let ((lm (format nil "~a_fundamental" (operator (extra-get-expr (quote (! 1 r))))))) (rewrite lm))) (then (hide-all-but ("PP" 1)) (lemma "Proper_NonEmpty") (ground)))))) (("" (deftactic unop (then (skolem 1 "r" :skolem-typepreds? t) (flatten) (replaces -1) (skeep) (insteep) (assert) (expand "well_typed?" -3) (label "PP" -4) (assert) (expand "Eval" ("PP" 1)) (branch (case "Proper?(Eval(r, box))") ((then (assert) (lemma "Incl_Proper") (inst? -1 :where -3) (assert) (let ((lm (format nil "~a_fundamental" (operator (extra-get-expr (quote (! 1 r))))))) (rewrite lm))) (then (hide-all-but ("PP" 1)) (assert) (rewrite "Proper_NonEmpty")))))) (("" (induct "expr") (("1" (typepred "expr!1") (("1" (assert) nil nil)) nil) ("2" (skeep) (("2" (hide -1) (("2" (expand "Eval") (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (skeep) (("3" (hide -1) (("3" (skeep) (("3" (expand "well_typed?") (("3" (expand "Inclusion?") (("3" (flatten) (("3" (expand "Eval") (("3" (assert) (("3" (inst? -) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (binop) nil nil) ("5" (unop) nil nil) ("6" (unop) (("6" (grind) nil nil)) nil) ("7" (binop) nil nil) ("8" (binop) nil nil) ("9" (unop) nil nil) ("10" (skolem 1 (_ "n")) (("10" (unop) nil nil)) nil) ("11" (skolem 1 ("r1" "r2") :skolem-typepreds? t) (("11" (flatten) (("11" (replaces (-1 -2)) (("11" (skeep) (("11" (insteep) (("11" (insteep) (("11" (assert) (("11" (expand "well_typed?" -4) (("11" (label "PP" -5) (("11" (flatten) (("11" (assert) (("11" (expand "Eval" ("PP" 1)) (("11" (case "Proper?(Eval(r1, box)) AND Proper?(Eval(r2, box))") (("1" (flatten) (("1" (assert) (("1" (lemma "Incl_Proper") (("1" (copy -1) (("1" (inst? -1 :where -5) (("1" (inst? -2 :where -6) (("1" (assert) (("1" (lift-if 1) (("1" (split 1) (("1" (flatten) (("1" (assert) (("1" (rewrite "Div_fundamental") nil nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (rewrite "Proper_NonEmpty") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but ("PP" 1)) (("2" (lemma "Proper_NonEmpty") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("12" (skolem 1 ("Pre" "f" "F" _)) (("12" (skolem 1 "r" :skolem-typepreds? t) (("12" (flatten) (("12" (replaces -1) (("12" (skeep) (("12" (insteep) (("12" (assert) (("12" (expand "well_typed?" -3) (("12" (label "PP" -4) (("12" (flatten) (("12" (assert) (("12" (expand "Eval" ("PP" 1)) (("12" (case "Proper?(Eval(r, box))") (("1" (assert) (("1" (lemma "Incl_Proper") (("1" (inst? -1 :where -3) (("1" (assert) (("1" (lift-if 1) (("1" (split) (("1" (flatten) (("1" (assert) (("1" (typepred "F") (("1" (expand "Fundamental?") (("1" (inst? -) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (rewrite "Proper_NonEmpty") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but ("PP" 1)) (("2" (assert) (("2" (rewrite "Proper_NonEmpty") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("13" (skolem 1 ("Pre1" "Pre2" "f" "F" _ _)) (("13" (skolem 1 ("r1" "r2") :skolem-typepreds? t) (("13" (flatten) (("13" (replaces -1) (("13" (replaces -1) (("13" (skeep) (("13" (insteep) (("13" (insteep) (("13" (assert) (("13" (expand "well_typed?" -4) (("13" (label "PP" -5) (("13" (flatten) (("13" (assert) (("13" (expand "Eval" ("PP" 1)) (("13" (case "Proper?(Eval(r1, box)) AND Proper?(Eval(r2, box))") (("1" (flatten) (("1" (assert) (("1" (lemma "Incl_Proper") (("1" (inst? -1 :where -4 :copy? t) (("1" (inst? -1 :where -6) (("1" (assert) (("1" (lift-if 1) (("1" (split) (("1" (flatten) (("1" (assert) (("1" (typepred "F") (("1" (expand "Fundamental2?") (("1" (inst? -) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (rewrite "Proper_NonEmpty") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but ("PP" 1)) (("2" (rewrite "Proper_NonEmpty") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("14" (skolem 1 ("r1" "r2") :skolem-typepreds? t) (("14" (flatten) (("14" (replaces (-1 -2)) (("14" (skeep) (("14" (insteep) (("14" (assert) (("14" (expand "well_typed?" -4) (("14" (flatten) (("14" (assert) (("14" (label "PP" -6) (("14" (expand "Eval" ("PP" 1)) (("14" (case "Proper?(Eval(r1, box)) AND Proper?(Eval(r2, append(box, (: Eval(r1, box) :))))") (("1" (flatten) (("1" (assert) (("1" (lemma "Incl_Proper") (("1" (copy -1) (("1" (inst? -1 :where -5) (("1" (copy -7) (("1" (expand "Inclusion?" -1) (("1" (flatten) (("1" (inst -8 "append(box, (: Eval(r1, box) :))" "append(pox, (: Eval(r1, pox) :))") (("1" (case "length(append(box, (: Eval(r1, box) :))) = length(append(pox, (: Eval(r1, pox) :)))") (("1" (inst? -5 :where -9) (("1" (assert) (("1" (assert) (("1" (hide 2) (("1" (expand "Inclusion?" 1) (("1" (hide -5) (("1" (skeep :preds? t) (("1" (rewrite "nth_append") (("1" (rewrite "nth_append") (("1" (case-replace "i<length(box)") (("1" (assert) (("1" (inst? -) nil nil)) nil) ("2" (assert) (("2" (case "i=length(box)") (("1" (replace -1) (("1" (replace -4) (("1" (assert) (("1" (expand "nth" 2) (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (rewrite "length_append") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "length_append") (("2" (assert) nil nil)) nil)) nil) ("2" (rewrite "length_append") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (rewrite "length_append") (("2" (rewrite "length_append") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (hide "PP" 2) (("2" (rewrite "proper_append") (("2" (hide 2) (("2" (expand "ProperBox?" 1) (("2" (expand "every") (("2" (expand "every") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but ("PP" 1)) (("2" (lemma "Proper_NonEmpty") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (assert) nil nil) ("23" (assert) nil nil) ("24" (skolem 1 ("Pre1" "Pre2" "Pre3" "Pre4" "f" "F" _ _ _ _)) (("24" (skolem 1 ("r1" "r2" "r3" "r4") :skolem-typepreds? t) (("24" (flatten) (("24" (replaces -1) (("24" (replaces -1) (("24" (replaces -1) (("24" (replaces -1) (("24" (skeep) (("24" (insteep) (("24" (insteep) (("24" (insteep) (("24" (insteep) (("24" (assert) (("24" (expand "well_typed?" -6) (("24" (label "PP" -7) (("24" (flatten) (("24" (assert) (("24" (expand "Eval" ("PP" 1)) (("24" (case "Proper?(Eval(r1, box)) AND Proper?(Eval(r2, box))
          AND Proper?(Eval(r3, box)) AND Proper?(Eval(r4, box))") (("1" (flatten) (("1" (assert) (("1" (lemma "Incl_Proper") (("1" (inst? -1 :where -6 :copy? t) (("1" (inst? -1 :where -8 :copy? t) (("1" (inst? -1 :where -10 :copy? t) (("1" (inst? -1 :where -12) (("1" (assert) (("1" (lift-if 1) (("1" (split) (("1" (flatten) (("1" (assert) (("1" (typepred "F") (("1" (expand "Fundamental4?") (("1" (inst? -) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (rewrite "Proper_NonEmpty") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but ("PP" 1)) (("2" (rewrite "Proper_NonEmpty") (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((Fundamental4? const-decl "bool" interval nil) (Precondition4? const-decl "bool" interval nil) (Precondition3? const-decl "bool" interval nil) (Inclusion4? const-decl "bool" interval nil) (pox skolem-const-decl "ProperBox" interval_expr nil) (r1 skolem-const-decl "RealExpr" interval_expr nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length_append formula-decl nil list_props nil) (nth def-decl "T" list_props nil) (length_singleton formula-decl nil more_list_props structures) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nth_append formula-decl nil more_list_props structures) (proper_append formula-decl nil box nil) (every adt-def-decl "boolean" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (append def-decl "list[T]" list_props nil) (Fundamental2? const-decl "bool" interval nil) (Precondition2? const-decl "bool" interval nil) (Inclusion2? const-decl "bool" interval nil) (ProperInterval type-eq-decl nil interval nil) (Fundamental? const-decl "bool" interval nil) (Precondition? const-decl "bool" interval nil) (Inclusion? const-decl "bool" interval nil) (PRED type-eq-decl nil defined_types nil) (Zeroless_Precondition name-judgement "(Precondition?)" interval nil) (Div_fundamental formula-decl nil interval nil) (Pow_fundamental formula-decl nil interval nil) (Sq_fundamental formula-decl nil interval nil) (Mult_fundamental formula-decl nil interval nil) (Sub_fundamental formula-decl nil interval nil) (Neg_fundamental formula-decl nil interval nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_real_is_real application-judgement "real" reals nil) (Neg const-decl "Interval" interval nil) ([\|\|] const-decl "Interval" interval nil) (Abs_fundamental formula-decl nil interval nil) (Add_fundamental formula-decl nil interval nil) (Incl_Proper formula-decl nil interval nil) (Proper_NonEmpty formula-decl nil interval nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil) (below type-eq-decl nil naturalnumbers nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (Incl_reflx formula-decl nil interval nil) (NOT const-decl "[bool -> bool]" booleans nil) (IntervalExpr_induction formula-decl nil IntervalExpr_adt nil) (<< const-decl "bool" interval nil) (Eval def-decl "Interval" interval_expr nil) (Proper? const-decl "bool" interval nil) (well_typed? inductive-decl "bool" interval_expr nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (Inclusion? const-decl "bool" box nil) (ProperBox type-eq-decl nil box nil) (ProperBox? const-decl "bool" box nil) (Box type-eq-decl nil box nil) (list type-decl nil list_adt nil) (Interval type-eq-decl nil interval nil) (real nonempty-type-from-decl nil reals nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (TRUE const-decl "bool" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil)) (well_typed_Inclusion_aux 0 (well_typed_Inclusion_aux-2 nil 3580050685 ("" (deftactic skeepreds2 (then (skolem 1 ("r1" "r2") :skolem-typepreds? t) (flatten) (replaces (-1 -2)) (skeep) (insteep) (insteep) (expand "well_typed?" (-4 1)) (flatten) (assert))) (("" (deftactic skeepreds1 (then (skolem 1 "r" :skolem-typepreds? t) (flatten) (replaces -1) (skeep) (insteep) (expand "well_typed?" (-3 1)) (assert))) (("" (lemma "Inclusion_Proper") (("" (induct "expr") (("1" (typepred "expr!1") (("1" (assert) nil nil)) nil) ("2" (skeep) (("2" (hide -1) (("2" (expand "well_typed?" 1) (("2" (propax) nil nil)) nil)) nil)) nil) ("3" (skeep) (("3" (hide -1) (("3" (skeep) (("3" (insteep) (("3" (expand "well_typed?") (("3" (expand "Inclusion?") (("3" (flatten) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (skeepreds2) nil nil) ("5" (skeepreds1) nil nil) ("6" (skeepreds1) nil nil) ("7" (skeepreds2) nil nil) ("8" (skeepreds2) nil nil) ("9" (skeepreds1) nil nil) ("10" (skolem 1 (_ "n")) (("10" (skeepreds1) nil nil)) nil) ("11" (skeepreds2) (("11" (insteep) (("11" (assert) (("11" (lemma "Eval_fundamental_aux") (("11" (inst -1 "pox" "box" "r2") (("11" (assert) (("11" (lemma "well_typed_Proper") (("11" (inst? - :where -4) (("11" (assert) (("11" (hide-all-but (-1 -2 -8 1)) (("11" (grind :exclude "Eval") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("12" (skolem 1 ("Pre" "f" "F" _)) (("12" (skeepreds1) (("12" (insteep) (("12" (assert) (("12" (lemma "Eval_fundamental_aux") (("12" (inst -1 "pox" "box" "r") (("12" (assert) (("12" (flatten) (("12" (assert) (("12" (lemma "well_typed_Proper") (("12" (inst? -1) (("12" (assert) (("12" (typepred "Pre") (("12" (expand "Precondition?") (("12" (inst? -1) (("12" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("13" (skolem 1 ("Pre1" "Pre2" "f" "F" _ _)) (("13" (skeepreds2) (("13" (insteep) (("13" (assert) (("13" (lemma "Eval_fundamental_aux") (("13" (inst-cp -1 "pox" "box" "r1") (("13" (inst -1 "pox" "box" "r2") (("13" (assert) (("13" (lemma "well_typed_Proper") (("13" (inst? -1 :where -4 :copy? t) (("13" (inst? -1 :where -6) (("13" (assert) (("13" (typepred "Pre1") (("13" (typepred "Pre2") (("13" (expand "Precondition?") (("13" (expand "Precondition2?") (("13" (inst? -2 :where -6) (("13" (assert) (("13" (inst? -1 :where -6) (("13" (inst? -1 :where -5) (("13" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("14" (skolem 1 ("r1" "r2") :skolem-typepreds? t) (("14" (flatten) (("14" (replaces (-1 -2)) (("14" (skeep) (("14" (insteep) (("14" (assert) (("14" (expand "well_typed?" -4) (("14" (flatten) (("14" (assert) (("14" (expand "well_typed?" 1) (("14" (inst -2 "append(box, (: Eval(r1, box) :))" "append(pox, (: Eval(r1, pox) :))") (("1" (assert) (("1" (hide 2) (("1" (expand "Inclusion?" 1) (("1" (rewrite "length_append") (("1" (rewrite "length_append") (("1" (assert) (("1" (insteep) (("1" (assert) (("1" (expand "Inclusion?") (("1" (flatten) (("1" (assert) (("1" (skeep :preds? t) (("1" (rewrite "length_append") (("1" (rewrite "nth_append") (("1" (rewrite "nth_append") (("1" (case "i< length(pox)") (("1" (assert) (("1" (insteep) nil nil)) nil) ("2" (assert) (("2" (case-replace "i=length(box)") (("1" (replace -4) (("1" (assert) (("1" (hide 1) (("1" (expand "nth") (("1" (lemma "Eval_fundamental_aux") (("1" (inst?) (("1" (assert) (("1" (lemma "well_typed_Proper") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (rewrite "proper_append") (("2" (hide 2) (("2" (expand "ProperBox?" 1) (("2" (expand "every" 1) (("2" (expand "every" 1) (("2" (lemma "well_typed_Proper") (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (assert) nil nil) ("23" (assert) nil nil) ("24" (skolem 1 ("Pre1" "Pre2" "Pre3" "Pre4" "f" "F" _ _ _ _)) (("24" (skolem 1 ("r1" "r2" "r3" "r4") :skolem-typepreds? t) (("24" (flatten) (("24" (replaces (-1 -2 -3 -4)) (("24" (skeep) (("24" (insteep) (("24" (insteep) (("24" (insteep) (("24" (insteep) (("24" (expand "well_typed?" (-6 1)) (("24" (flatten) (("24" (assert) (("24" (insteep) (("24" (assert) (("24" (lemma "Eval_fundamental_aux") (("24" (inst-cp -1 "pox" "box" "r1") (("24" (inst-cp -1 "pox" "box" "r2") (("24" (inst-cp -1 "pox" "box" "r3") (("24" (inst -1 "pox" "box" "r4") (("24" (assert) (("24" (lemma "well_typed_Proper") (("24" (inst? -1 :where -6 :copy? t) (("24" (inst? -1 :where -8 :copy? t) (("24" (inst? -1 :where -10 :copy? t) (("24" (inst? -1 :where -12) (("24" (assert) (("24" (typepred "Pre1") (("24" (typepred "Pre2") (("24" (typepred "Pre3") (("24" (typepred "Pre4") (("24" (expand "Precondition?") (("24" (expand "Precondition2?") (("24" (expand "Precondition3?") (("24" (expand "Precondition4?") (("24" (inst? -4 :where -12) (("24" (inst? -3 :where 1) (("24" (inst? -3) (("24" (assert) (("24" (inst? -2 :where 1) (("24" (inst? -2) (("24" (assert) (("24" (inst? -1 :where 1) (("24" (inst? -1) (("24" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((IntervalExpr type-decl nil IntervalExpr_adt nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (real nonempty-type-from-decl nil reals nil) (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil) (Box type-eq-decl nil box nil) (ProperBox? const-decl "bool" box nil) (ProperBox type-eq-decl nil box nil) (Inclusion? const-decl "bool" box nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (well_typed? inductive-decl "bool" interval_expr nil) (IntervalExpr_induction formula-decl nil IntervalExpr_adt nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (Eval_fundamental_aux formula-decl nil interval_expr nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (gt_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (Proper? const-decl "bool" interval nil) (<< const-decl "bool" interval nil) (Zeroless? const-decl "bool" interval nil) (well_typed_Proper formula-decl nil interval_expr nil) (Zeroless_Precondition name-judgement "(Precondition?)" interval nil) (ProperInterval type-eq-decl nil interval nil) (Eval def-decl "Interval" interval_expr nil) (Precondition? const-decl "bool" interval nil) (PRED type-eq-decl nil defined_types nil) (Precondition2? const-decl "bool" interval nil) (every adt-def-decl "boolean" list_adt nil) (proper_append formula-decl nil box nil) (int_minus_int_is_int application-judgement "int" integers nil) (nth def-decl "T" list_props nil) (below type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (nth_append formula-decl nil more_list_props structures) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length_singleton formula-decl nil more_list_props structures) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (length_append formula-decl nil list_props nil) (r1 skolem-const-decl "RealExpr" interval_expr nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (pox skolem-const-decl "ProperBox" interval_expr nil) (append def-decl "list[T]" list_props nil) (Precondition4? const-decl "bool" interval nil) (Precondition3? const-decl "bool" interval nil) (Inclusion_Proper formula-decl nil box nil) (TRUE const-decl "bool" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil)) (well_typed_Inclusion 0 (well_typed_Inclusion-2 nil 3580050420 ("" (skeep*) (("" (lemma "well_typed_Inclusion_aux") (("" (insteep) (("" (assert) nil nil)) nil)) nil)) nil) ((well_typed_Inclusion_aux formula-decl nil interval_expr nil) (real nonempty-type-from-decl nil reals nil) (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil) (Box type-eq-decl nil box nil) (ProperBox? const-decl "bool" box nil) (ProperBox type-eq-decl nil box nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil)) (Proper_Inclusion 0 (Proper_Inclusion-1 nil 3576849784 ("" (skeep*) (("" (lemma "Proper_well_typed") (("" (inst?) (("" (assert) (("" (lemma "well_typed_Inclusion") (("" (inst?) (("" (assert) (("" (inst?) (("" (assert) (("" (lemma "well_typed_Proper") (("" (inst? :where -2) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((Proper_well_typed formula-decl nil interval_expr nil) (ProperBox type-eq-decl nil box nil) (ProperBox? const-decl "bool" box nil) (well_typed_Proper formula-decl nil interval_expr nil) (well_typed_Inclusion formula-decl nil interval_expr nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (Box type-eq-decl nil box nil) (list type-decl nil list_adt nil) (Interval type-eq-decl nil interval nil) (real nonempty-type-from-decl nil reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) shostak)) (Eval_fundamental 0 (Eval_fundamental-1 nil 3549124802 ("" (skeep*) (("" (lemma "well_typed_Inclusion") (("" (inst?) (("" (assert) (("" (inst? -1) (("" (assert) (("" (lemma "Eval_fundamental_aux") (("" (inst? -1) (("1" (assert) (("1" (lemma "well_typed_Proper") (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (lemma "Inclusion_Proper") (("2" (inst? -) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((well_typed_Inclusion formula-decl nil interval_expr nil) (box skolem-const-decl "Box" interval_expr nil) (well_typed_Proper formula-decl nil interval_expr nil) (Inclusion_Proper formula-decl nil box nil) (Eval_fundamental_aux formula-decl nil interval_expr nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (ProperBox type-eq-decl nil box nil) (ProperBox? const-decl "bool" box nil) (Box type-eq-decl nil box nil) (list type-decl nil list_adt nil) (Interval type-eq-decl nil interval nil) (real nonempty-type-from-decl nil reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil)) (Eval_fundamental_proper 0 (Eval_fundamental_proper-1 nil 3576785019 ("" (skeep*) (("" (beta) (("" (flatten) (("" (lemma "Proper_well_typed") (("" (inst?) (("" (assert) (("" (lemma "Eval_fundamental") (("" (inst?) (("" (assert) (("" (inst? -) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((Proper_well_typed formula-decl nil interval_expr nil) (ProperBox type-eq-decl nil box nil) (ProperBox? const-decl "bool" box nil) (Eval_fundamental formula-decl nil interval_expr nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (Box type-eq-decl nil box nil) (list type-decl nil list_adt nil) (Interval type-eq-decl nil interval nil) (real nonempty-type-from-decl nil reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) shostak)) (split_TCC1 0 (split_TCC1-1 nil 3546789664 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil) (length def-decl "nat" list_props nil) (Box type-eq-decl nil box nil) (below type-eq-decl nil naturalnumbers nil)) nil (split subtype "interval_expr.i" "below[length[Interval](lrb`1)]"))) (split_TCC2 0 (split_TCC2-1 nil 3546789664 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil) (length def-decl "nat" list_props nil) (Box type-eq-decl nil box nil) (below type-eq-decl nil naturalnumbers nil) (slice const-decl "real" interval nil) (midpoint const-decl "real" interval nil) ([\|\|] const-decl "Interval" interval nil) (HalfLeft const-decl "Interval" interval nil) (real_plus_real_is_real application-judgement "real" reals nil)) nil (split subtype "interval_expr.i" "below[length[Interval](lrb`2)]"))) (split_TCC3 0 (split_TCC3-1 nil 3546789664 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (Box type-eq-decl nil box nil) (length def-decl "nat" list_props nil) (list type-decl nil list_adt nil) (Interval type-eq-decl nil interval nil) (< const-decl "bool" reals nil)) nil (split subtype "interval_expr.i" "below[length[Interval](lrb`1)]"))) (split_TCC4 0 (split_TCC4-1 nil 3546789664 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (Box type-eq-decl nil box nil) (length def-decl "nat" list_props nil) (list type-decl nil list_adt nil) (Interval type-eq-decl nil interval nil) (< const-decl "bool" reals nil)) nil (split subtype "interval_expr.i" "below[length[Interval](lrb`2)]"))) (split_TCC5 0 (split_TCC5-1 nil 3546789664 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (< const-decl "bool" reals nil) (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil) (Box type-eq-decl nil box nil) (below type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (slice const-decl "real" interval nil) (midpoint const-decl "real" interval nil) ([\|\|] const-decl "Interval" interval nil) (HalfLeft const-decl "Interval" interval nil) (HalfRight const-decl "Interval" interval nil) (real_plus_real_is_real application-judgement "real" reals nil)) nil (split subtype "(list_adt[Interval].null, list_adt[Interval].null)" "{lrb: [box.Box, box.Box] | booleans.AND(list_props[Interval].length(lrb`1) = list_props[Interval].length(interval_expr.box), booleans.AND(list_props[Interval].length(lrb`2) = list_props[Interval].length(interval_expr.box), FORALL (i: naturalnumbers.below(list_props[Interval].length(interval_expr.box))): IF i = interval_expr.v THEN booleans.AND(list_props[Interval].nth(lrb`1, i) = interval.HalfLeft(list_props[Interval].nth(interval_expr.box, i)), list_props[Interval].nth(lrb`2, i) = interval.HalfRight(list_props[Interval].nth(interval_expr.box, i))) ELSE booleans.AND(list_props[Interval].nth(lrb`1, i) = list_props[Interval].nth(interval_expr.box, i), list_props[Interval].nth(lrb`2, i) = list_props[Interval].nth(interval_expr.box, i)) ENDIF))}"))) (split_TCC6 0 (split_TCC6-1 nil 3546789664 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil (split subtype "interval_expr.box" "(list_adt[Interval].cons?)"))) (split_TCC7 0 (split_TCC7-1 nil 3546789664 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nth def-decl "T" list_props nil) (slice const-decl "real" interval nil) (midpoint const-decl "real" interval nil) ([\|\|] const-decl "Interval" interval nil) (HalfLeft const-decl "Interval" interval nil) (length def-decl "nat" list_props nil) (HalfRight const-decl "Interval" interval nil) (real_plus_real_is_real application-judgement "real" reals nil)) nil (split subtype "(list_adt[Interval].cons(interval.HalfLeft(list_adt[Interval].car(interval_expr.box)), list_adt[Interval].cdr(interval_expr.box)), list_adt[Interval].cons(interval.HalfRight(list_adt[Interval].car(interval_expr.box)), list_adt[Interval].cdr(interval_expr.box)))" "{lrb: [box.Box, box.Box] | booleans.AND(list_props[Interval].length(lrb`1) = list_props[Interval].length(interval_expr.box), booleans.AND(list_props[Interval].length(lrb`2) = list_props[Interval].length(interval_expr.box), FORALL (i: naturalnumbers.below(list_props[Interval].length(interval_expr.box))): IF i = interval_expr.v THEN booleans.AND(list_props[Interval].nth(lrb`1, i) = interval.HalfLeft(list_props[Interval].nth(interval_expr.box, i)), list_props[Interval].nth(lrb`2, i) = interval.HalfRight(list_props[Interval].nth(interval_expr.box, i))) ELSE booleans.AND(list_props[Interval].nth(lrb`1, i) = list_props[Interval].nth(interval_expr.box, i), list_props[Interval].nth(lrb`2, i) = list_props[Interval].nth(interval_expr.box, i)) ENDIF))}"))) (split_TCC8 0 (split_TCC8-1 nil 3546789664 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (split subtype "interval_expr.box" "(list_adt[Interval].cons?)"))) (split_TCC9 0 (split_TCC9-2 nil 3546791205 ("" (skeep :preds? t) (("" (skeep 3) (("" (name-replace "V" "v1(v - 1, cdr(box))" :hide? t) (("1" (typepred "V") (("1" (split) (("1" (hide -3) (("1" (grind) nil nil)) nil) ("2" (hide -3) (("2" (grind) nil nil)) nil) ("3" (skeep) (("3" (case-replace "i=0") (("1" (assert) (("1" (expand "nth" +) (("1" (propax) nil nil)) nil)) nil) ("2" (inst -3 "i-1") (("1" (assert) (("1" (split 2) (("1" (flatten) (("1" (assert) (("1" (flatten) (("1" (expand "nth" 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (assert) (("2" (expand "nth" 2) (("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (typepred "i") (("2" (assert) (("2" (expand "length" -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 4) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ((NOT const-decl "[bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (box skolem-const-decl "Box" interval_expr nil) (i skolem-const-decl "below(length(box))" interval_expr nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (HalfRight const-decl "Interval" interval nil) (HalfLeft const-decl "Interval" interval nil) (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil) (strict_well_founded? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (boolean nonempty-type-decl nil booleans nil) (Box type-eq-decl nil box nil) (list type-decl nil list_adt nil) (Interval type-eq-decl nil interval nil) (real nonempty-type-from-decl nil reals nil) (int_minus_int_is_int application-judgement "int" integers nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil (split subtype "(list_adt[Interval].cons(list_adt[Interval].car(interval_expr.box), interval_expr.lb), list_adt[Interval].cons(list_adt[Interval].car(interval_expr.box), interval_expr.rb))" "{lrb: [box.Box, box.Box] | booleans.AND(list_props[Interval].length(lrb`1) = list_props[Interval].length(interval_expr.box), booleans.AND(list_props[Interval].length(lrb`2) = list_props[Interval].length(interval_expr.box), FORALL (i: naturalnumbers.below(list_props[Interval].length(interval_expr.box))): IF i = interval_expr.v THEN booleans.AND(list_props[Interval].nth(lrb`1, i) = interval.HalfLeft(list_props[Interval].nth(interval_expr.box, i)), list_props[Interval].nth(lrb`2, i) = interval.HalfRight(list_props[Interval].nth(interval_expr.box, i))) ELSE booleans.AND(list_props[Interval].nth(lrb`1, i) = list_props[Interval].nth(interval_expr.box, i), list_props[Interval].nth(lrb`2, i) = list_props[Interval].nth(interval_expr.box, i)) ENDIF))}")) (split_TCC9-1 nil 3546789664 ("" (subtype-tcc) nil nil) nil nil (split subtype "(list_adt[Interval].cons(list_adt[Interval].car(interval_expr.box), interval_expr.lb), list_adt[Interval].cons(list_adt[Interval].car(interval_expr.box), interval_expr.rb))" "{lrb: [box.Box, box.Box] | booleans.AND(list_props[Interval].length(lrb`1) = list_props[Interval].length(interval_expr.box), booleans.AND(list_props[Interval].length(lrb`2) = list_props[Interval].length(interval_expr.box), FORALL (i: naturalnumbers.below(list_props[Interval].length(interval_expr.box))): IF i = interval_expr.v THEN booleans.AND(list_props[Interval].nth(lrb`1, i) = interval.HalfLeft(list_props[Interval].nth(interval_expr.box, i)), list_props[Interval].nth(lrb`2, i) = interval.HalfRight(list_props[Interval].nth(interval_expr.box, i))) ELSE booleans.AND(list_props[Interval].nth(lrb`1, i) = list_props[Interval].nth(interval_expr.box, i), list_props[Interval].nth(lrb`2, i) = list_props[Interval].nth(interval_expr.box, i)) ENDIF))}"))) (split_TCC10 0 (split_TCC10-1 nil 3546789664 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals)) nil (split subtype "(number_fields.-)(interval_expr.v, 1)" "nat"))) (split_TCC11 0 (split_TCC11-1 nil 3546789664 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals)) nil (split subtype "interval_expr.box" "(list_adt[Interval].cons?)"))) (split_TCC12 0 (split_TCC12-1 nil 3546789664 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals)) nil (split termination "interval_expr.split((number_fields.-)(interval_expr.v, 1), list_adt[Interval].cdr(interval_expr.box))" "nil"))) (split_eq_TCC1 0 (split_eq_TCC1-1 nil 3546811001 ("" (recursive-judgement-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil) (length def-decl "nat" list_props nil) (Box type-eq-decl nil box nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals)) nil (split_eq_ subtype "(list_adt[Interval].null, list_adt[Interval].null)" "{lrb: [box.Box, box.Box] | booleans.AND(lrb`1 = interval_expr.box, lrb`2 = interval_expr.box)}"))) (split_eq_TCC2 0 (split_eq_TCC2-1 nil 3546811001 ("" (recursive-judgement-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil) (length def-decl "nat" list_props nil) (Box type-eq-decl nil box nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_div_nzreal_is_real application-judgement "real" reals nil) (slice const-decl "real" interval nil) (midpoint const-decl "real" interval nil) ([\|\|] const-decl "Interval" interval nil) (HalfLeft const-decl "Interval" interval nil) (HalfRight const-decl "Interval" interval nil) (real_plus_real_is_real application-judgement "real" reals nil)) nil (split_eq_ subtype "(list_adt[Interval].cons(interval.HalfLeft(list_adt[Interval].car(interval_expr.box)), list_adt[Interval].cdr(interval_expr.box)), list_adt[Interval].cons(interval.HalfRight(list_adt[Interval].car(interval_expr.box)), list_adt[Interval].cdr(interval_expr.box)))" "{lrb: [box.Box, box.Box] | booleans.AND(lrb`1 = interval_expr.box, lrb`2 = interval_expr.box)}"))) (split_eq_TCC3 0 (split_eq_TCC3-1 nil 3546811001 ("" (recursive-judgement-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil) (length def-decl "nat" list_props nil) (Box type-eq-decl nil box nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) nil (split_eq_ subtype "list_adt[Interval].cdr(interval_expr.box)" "{box: box.Box | reals.<=(list_props[Interval].length(box), (number_fields.-)(interval_expr.v, 1))}"))) (split_eq_TCC4 0 (split_eq_TCC4-4 "" 3803696702 ("" (skeep) (("" (skeep 3) (("" (typepred "v1(v - 1, cdr(box))") (("1" (replaces (-3 -2)) (("1" (assert) (("1" (case "cons[Interval](car[Interval](box), cdr(box)) = box") (("1" (assert) nil nil) ("2" (hide 4) (("2" (lemma "list_cons_eta[Interval]") (("2" (inst -1 "box") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) nil shostak (split_eq_ subtype "(list_adt[Interval].cons(list_adt[Interval].car(interval_expr.box), interval_expr.lb), list_adt[Interval].cons(list_adt[Interval].car(interval_expr.box), interval_expr.rb))" "{lrb: [box.Box, box.Box] | booleans.AND(lrb`1 = interval_expr.box, lrb`2 = interval_expr.box)}")) (split_eq_TCC4-3 "" 3790350980 ("" (skeep) (("" (skeep 3) (("" (typepred "v1(v - 1, cdr(box))") (("1" (replaces (-1 -2)) (("1" (replaces (-1 -2)) (("1" (case "cons[Interval](car[Interval](box), cdr(box)) = box") (("1" (assert) nil nil) ("2" (hide 4) (("2" (lemma "list_cons_eta[Interval]") (("2" (inst -1 "box") nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ((TRUE const-decl "bool" booleans nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (list_cons_eta formula-decl nil list_adt nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (int_minus_int_is_int application-judgement "int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil) (Box type-eq-decl nil box nil) (= const-decl "[T, T -> boolean]" equalities nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (length def-decl "nat" list_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)) shostak (split_eq_ subtype "(list_adt[Interval].cons(list_adt[Interval].car(interval_expr.box), interval_expr.lb), list_adt[Interval].cons(list_adt[Interval].car(interval_expr.box), interval_expr.rb))" "{lrb: [box.Box, box.Box] | booleans.AND(lrb`1 = interval_expr.box, lrb`2 = interval_expr.box)}")) (split_eq_TCC4-2 nil 3546811387 ("" (skeep) (("" (skeep 3) (("" (typepred "v1(v - 1, cdr(box))") (("1" (replaces (-1 -2)) (("1" (replaces (-1 -2)) (("1" (case "cons[Interval](car[Interval](box), cdr(box)) = box") (("1" (assert) nil nil) ("2" (hide 4) (("2" (lemma "list_cons_eta[Interval]") (("2" (inst -1 "box") nil nil)) nil)) nil) ("3" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ((ge_realorder name-judgement "RealOrder" real_orders reals) (Interval type-eq-decl nil interval nil) (Box type-eq-decl nil box nil)) nil (split_eq_ subtype "(list_adt[Interval].cons(list_adt[Interval].car(interval_expr.box), interval_expr.lb), list_adt[Interval].cons(list_adt[Interval].car(interval_expr.box), interval_expr.rb))" "{lrb: [box.Box, box.Box] | booleans.AND(lrb`1 = interval_expr.box, lrb`2 = interval_expr.box)}")) (split_eq_TCC4-1 nil 3546811001 ("" (recursive-judgement-tcc) nil nil) ((Interval type-eq-decl nil interval nil) (Box type-eq-decl nil box nil)) nil (split_eq_ subtype "(list_adt[Interval].cons(list_adt[Interval].car(interval_expr.box), interval_expr.lb), list_adt[Interval].cons(list_adt[Interval].car(interval_expr.box), interval_expr.rb))" "{lrb: [box.Box, box.Box] | booleans.AND(lrb`1 = interval_expr.box, lrb`2 = interval_expr.box)}"))) (split_vars_in_box 0 (split_vars_in_box-1 nil 3546805651 ("" (skeep :preds? t) (("" (case "v < length(box)") (("1" (beta) (("1" (flatten) (("1" (expand "vars_in_box?") (("1" (skolem 1 "i1") (("1" (skolem 2 "i2") (("1" (typepred "split(v, box)") (("1" (case-replace "i1=v") (("1" (case-replace "i2=v") (("1" (inst -5 "v") (("1" (flatten) (("1" (replaces (-5 -6)) (("1" (inst -6 "v") (("1" (lemma "Halves_inclusion") (("1" (inst? -) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst -4 "i2") (("1" (assert) (("1" (flatten) (("1" (replaces -5) (("1" (inst -6 "i2") nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (inst -3 "i1") (("1" (assert) (("1" (flatten) (("1" (replaces -3) (("1" (inst -5 "i1") nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma "split_eq") (("2" (inst -1 "v" "box") (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ((Box type-eq-decl nil box nil) (length def-decl "nat" list_props nil) (list type-decl nil list_adt nil) (Interval type-eq-decl nil interval nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (split def-decl "{lrb: [Box, Box] |
   LET (lb, rb) = lrb IN
     length(lb) = length(box) AND
      length(rb) = length(box) AND
       FORALL (i: below(length(box))):
         IF i = v
           THEN nth(lb, i) = HalfLeft(nth(box, i)) AND
                 nth(rb, i) = HalfRight(nth(box, i))
         ELSE nth(lb, i) = nth(box, i) AND nth(rb, i) = nth(box, i)
         ENDIF}" interval_expr nil) (HalfRight const-decl "Interval" interval nil) (HalfLeft const-decl "Interval" interval nil) (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (below type-eq-decl nil naturalnumbers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (NOT const-decl "[bool -> bool]" booleans nil) (i1 skolem-const-decl "below(length(split(v, box)`1))" interval_expr nil) (Env type-eq-decl nil box nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (Halves_inclusion formula-decl nil interval nil) (TRUE const-decl "bool" booleans nil) (box skolem-const-decl "Box" interval_expr nil) (v skolem-const-decl "nat" interval_expr nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (i2 skolem-const-decl "below(length(split(v, box)`2))" interval_expr nil) (vars_in_box? const-decl "bool" box nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (le_realorder name-judgement "RealOrder" real_orders reals) (<= const-decl "bool" reals nil) (split_eq recursive-judgement-axiom nil interval_expr nil)) shostak)) (split_Inclusion 0 (split_Inclusion-2 nil 3576783085 ("" (skeep) (("" (skoletin*) (("" (expand "Inclusion?") (("" (typepred "split(v,pox)") (("" (assert) (("" (replaces (-4 -5) :dir rl) (("" (split) (("1" (skeep) (("1" (inst - "i") (("1" (split -) (("1" (flatten) (("1" (lemma "Halves_Incl") (("1" (inst?) (("1" (assert) (("1" (typepred "pox") (("1" (expand "ProperBox?") (("1" (rewrite "every_nth") (("1" (inst - "i") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep) (("2" (inst - "i") (("2" (split -) (("1" (flatten) (("1" (lemma "Halves_Incl") (("1" (inst?) (("1" (assert) (("1" (typepred "pox") (("1" (expand "ProperBox?") (("1" (rewrite "every_nth") (("1" (inst - "i") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replaces -2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (Interval type-eq-decl nil interval nil) (list type-decl nil list_adt nil) (Box type-eq-decl nil box nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil) (HalfLeft const-decl "Interval" interval nil) (HalfRight const-decl "Interval" interval nil) (split def-decl "{lrb: [Box, Box] |
   LET (lb, rb) = lrb IN
     length(lb) = length(box) AND
      length(rb) = length(box) AND
       FORALL (i: below(length(box))):
         IF i = v
           THEN nth(lb, i) = HalfLeft(nth(box, i)) AND
                 nth(rb, i) = HalfRight(nth(box, i))
         ELSE nth(lb, i) = nth(box, i) AND nth(rb, i) = nth(box, i)
         ENDIF}" interval_expr nil) (ProperBox? const-decl "bool" box nil) (ProperBox type-eq-decl nil box nil) (Inclusion? const-decl "bool" box nil) (NOT const-decl "[bool -> bool]" booleans nil) (Halves_Incl formula-decl nil interval nil) (every_nth formula-decl nil list_props nil) (PRED type-eq-decl nil defined_types nil) (Proper? const-decl "bool" interval nil) (Incl_reflx formula-decl nil interval nil)) nil) (split_Inclusion-1 nil 3549125269 ("" (skeep) (("" (skoletin* 1) (("" (expand "Inclusion?") (("" (typepred "split(v,box)") (("" (assert) (("" (replaces (-4 -5) :dir rl) (("" (split) (("1" (skeep 1) (("1" (inst -3 "i") (("1" (split -3) (("1" (flatten) (("1" (lemma "Halves_Incl") (("1" (inst?) (("1" (assert) (("1" (typepred "box") (("1" (expand "ProperBox?") (("1" (flatten) (("1" (rewrite "every_nth") (("1" (inst -2 "i") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replaces -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep 1) (("2" (inst -3 "i") (("2" (split -3) (("1" (flatten) (("1" (lemma "Halves_Incl") (("1" (inst?) (("1" (assert) (("1" (typepred "box") (("1" (expand "ProperBox?") (("1" (flatten) (("1" (rewrite "every_nth") (("1" (inst -2 "i") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (replaces -2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((Interval type-eq-decl nil interval nil) (Box type-eq-decl nil box nil) (HalfLeft const-decl "Interval" interval nil) (HalfRight const-decl "Interval" interval nil) (ProperBox? const-decl "bool" box nil) (ProperBox type-eq-decl nil box nil) (Inclusion? const-decl "bool" box nil) (Halves_Incl formula-decl nil interval nil) (Proper? const-decl "bool" interval nil) (Incl_reflx formula-decl nil interval nil)) shostak)) (split_Proper 0 (split_Proper-1 nil 3546795902 ("" (skeep) (("" (typepred "pox") (("" (expand "ProperBox?") (("" (rewrite "every_nth") (("" (rewrite "every_nth") (("" (rewrite "every_nth") (("" (typepred "split(v,pox)") (("" (ground) (("1" (skeep) (("1" (inst - "i") (("1" (inst - "i") (("1" (split -) (("1" (flatten) (("1" (replaces (-1 -3)) (("1" (rewrite "Proper_HalfRight") nil nil)) nil)) nil) ("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep) (("2" (inst - "i") (("2" (inst - "i") (("2" (split -) (("1" (flatten) (("1" (replaces (-1 -2)) (("1" (rewrite "Proper_HalfLeft") nil nil)) nil)) nil) ("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((ProperBox type-eq-decl nil box nil) (ProperBox? const-decl "bool" box nil) (Box type-eq-decl nil box nil) (list type-decl nil list_adt nil) (Interval type-eq-decl nil interval nil) (real nonempty-type-from-decl nil reals nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (every_nth formula-decl nil list_props nil) (PRED type-eq-decl nil defined_types nil) (Proper? const-decl "bool" interval nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (TRUE const-decl "bool" booleans nil) (Proper_HalfRight judgement-tcc nil interval nil) (ProperInterval type-eq-decl nil interval nil) (Proper_HalfLeft judgement-tcc nil interval nil) (split def-decl "{lrb: [Box, Box] |
   LET (lb, rb) = lrb IN
     length(lb) = length(box) AND
      length(rb) = length(box) AND
       FORALL (i: below(length(box))):
         IF i = v
           THEN nth(lb, i) = HalfLeft(nth(box, i)) AND
                 nth(rb, i) = HalfRight(nth(box, i))
         ELSE nth(lb, i) = nth(box, i) AND nth(rb, i) = nth(box, i)
         ENDIF}" interval_expr nil) (HalfRight const-decl "Interval" interval nil) (HalfLeft const-decl "Interval" interval nil) (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil)) nil (split_Proper subtype "interval_expr.split(interval_expr.v, interval_expr.pox)" "[ProperBox, ProperBox]"))) (length_split_1 0 (length_split_1-1 nil 3577554456 ("" (skeep) (("" (typepred "split(v, pox)") (("" (propax) nil nil)) nil)) nil) ((ProperBox type-eq-decl nil box nil) (ProperBox? const-decl "bool" box nil) (split def-decl "{lrb: [Box, Box] |
   LET (lb, rb) = lrb IN
     length(lb) = length(box) AND
      length(rb) = length(box) AND
       FORALL (i: below(length(box))):
         IF i = v
           THEN nth(lb, i) = HalfLeft(nth(box, i)) AND
                 nth(rb, i) = HalfRight(nth(box, i))
         ELSE nth(lb, i) = nth(box, i) AND nth(rb, i) = nth(box, i)
         ENDIF}" interval_expr nil) (HalfRight const-decl "Interval" interval nil) (HalfLeft const-decl "Interval" interval nil) (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (Box type-eq-decl nil box nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (list type-decl nil list_adt nil) (Interval type-eq-decl nil interval nil) (real nonempty-type-from-decl nil reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (split_Proper application-judgement "[ProperBox, ProperBox]" interval_expr nil)) shostak)) (length_split_2 0 (length_split_2-1 nil 3577554519 ("" (skeep) (("" (typepred "split(v, pox)") (("" (propax) nil nil)) nil)) nil) ((ProperBox type-eq-decl nil box nil) (ProperBox? const-decl "bool" box nil) (split def-decl "{lrb: [Box, Box] |
   LET (lb, rb) = lrb IN
     length(lb) = length(box) AND
      length(rb) = length(box) AND
       FORALL (i: below(length(box))):
         IF i = v
           THEN nth(lb, i) = HalfLeft(nth(box, i)) AND
                 nth(rb, i) = HalfRight(nth(box, i))
         ELSE nth(lb, i) = nth(box, i) AND nth(rb, i) = nth(box, i)
         ENDIF}" interval_expr nil) (HalfRight const-decl "Interval" interval nil) (HalfLeft const-decl "Interval" interval nil) (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (Box type-eq-decl nil box nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (list type-decl nil list_adt nil) (Interval type-eq-decl nil interval nil) (real nonempty-type-from-decl nil reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (split_Proper application-judgement "[ProperBox, ProperBox]" interval_expr nil)) nil)) (eval_vs_idempotence 0 (eval_vs_idempotence-1 nil 3645972757 ("" (deftactic unop (then (skolem 1 "e") (flatten) (hide -2) (spread (split -1) ((then (skeep) (inst? -1 :where 1) (inst -1 "n") (expand "eval" 1) (spread (split -1) ((assert) (then (skeep) (inst? -2 :where 1) (assert) (grind))))) (then (typepred e) (propax)))))) (("" (deftactic binop (then (skolem 1 ("e1" "e2")) (flatten) (hide -3) (spread (split -1) ((spread (split -2) ((then (skeep*) (expand "eval" 1) (inst? -1 :where 1) (inst? -2 :where 1) (spread (split -1) ((spread (split -2) ((assert) (then (hide-all-but (1 -2)) (skeep) (inst? -2 :where 1) (assert) (grind)))) (then (hide-all-but (1 -2)) (skeep) (inst? -2 :where 1) (assert) (grind))))) (then (typepred "e2") (propax)))) (then (typepred "e1") (propax)))))) (("" (induct "expr") (("1" (typepred "expr!1") (("1" (assert) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (binop) nil nil) ("5" (unop) nil nil) ("6" (unop) nil nil) ("7" (binop) nil nil) ("8" (binop) nil nil) ("9" (unop) nil nil) ("10" (skolem 1 ("e" "power")) (("10" (flatten) (("10" (hide -2) (("10" (split -1) (("1" (skeep) (("1" (inst? -1 :where 1) (("1" (inst -1 "n") (("1" (expand "eval" 1) (("1" (split -1) (("1" (assert) nil nil) ("2" (skeep) (("2" (inst? -2 :where 1) (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred e) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("11" (binop) (("11" (replace -1 :dir RL) (("11" (replace -2 :dir RL) (("11" (propax) nil nil)) nil)) nil)) nil) ("12" (skolem 1 ("pre" "f" "F" "e")) (("12" (flatten) (("12" (hide -2) (("12" (split -1) (("1" (skeep) (("1" (inst? -1 :where 1) (("1" (inst -1 "n") (("1" (expand "eval" 1) (("1" (split -1) (("1" (assert) nil nil) ("2" (skeep) (("2" (inst? -2 :where 1) (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred e) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("13" (skolem 1 ("pre1" "pre2" "f" "F" "e1" "e2")) (("13" (flatten) (("13" (hide -3) (("13" (split -1) (("1" (split -2) (("1" (skeep) (("1" (expand "eval" 1) (("1" (inst? -1 :where 1) (("1" (inst? -2 :where 1) (("1" (split -1) (("1" (split -2) (("1" (assert) nil nil) ("2" (skeep) (("2" (inst? -3 :where 1) (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (skeep) (("2" (inst? -3 :where 1) (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "e2") (("2" (propax) nil nil)) nil)) nil) ("2" (typepred "e1") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("14" (skolem 1 ("e1" "e2")) (("14" (flatten) (("14" (hide -3) (("14" (split -1) (("1" (split -2) (("1" (skeep*) (("1" (expand "eval" 1) (("1" (case "i=n") (("1" (replace -1 :hide? t) (("1" (assert) (("1" (case "vs WITH [(n) := x, (n) := eval(e1, vs WITH [(n) := x], n)] = vs WITH [(n) := eval(e1, vs WITH [(n) := x], n)]") (("1" (replace -1 :hide? t) (("1" (inst? -1 :where 1) (("1" (inst? -2 :where 1) (("1" (split -1) (("1" (split -2) (("1" (assert) nil nil) ("2" (hide-all-but (1 -2)) (("2" (skeep) (("2" (inst? -2 :where 1) (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (1 -2)) (("2" (skeep) (("2" (inst? -2 :where 1) (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (inst? -1 :where 2) (("2" (inst? -2 :where 2) (("2" (split -1) (("1" (split -2) (("1" (replace -1 :dir RL) (("1" (reveal -2) (("1" (inst -1 "i" "vs WITH [(n) := eval(e1, vs, n)]" "x" "n+1") (("1" (split -1) (("1" (assert) (("1" (case "vs WITH [(i) := x, (n) := eval(e1, vs, n)] = vs WITH [(n) := eval(e1, vs, n), (i) := x]") (("1" (replace -1 :hide? t) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (hide-all-but (1 -3)) (("2" (skeep) (("2" (inst? -2 :where 1) (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (1 -2)) (("2" (skeep) (("2" (inst? -2 :where 1) (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide-all-but (1 -2)) (("2" (skeep) (("2" (inst? -2 :where 1) (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "e2") (("2" (propax) nil nil)) nil)) nil) ("2" (typepred "e1") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (assert) nil nil) ("23" (assert) nil nil) ("24" (skolem 1 ("pre1" "pre2" "pre3" "pre4" "f" "F" "e1" "e2" "e3" "e4")) (("24" (flatten) (("24" (hide -5) (("24" (split -1) (("1" (split -2) (("1" (split -3) (("1" (split -4) (("1" (skeep) (("1" (expand "eval" 1) (("1" (inst? -1 :where 1) (("1" (inst? -2 :where 1) (("1" (inst? -3 :where 1) (("1" (inst? -4 :where 1) (("1" (split -1) (("1" (split -2) (("1" (split -3) (("1" (split -4) (("1" (assert) nil nil) ("2" (skeep) (("2" (inst? -5 :where 1) (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (skeep) (("2" (inst? -5 :where 1) (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (skeep) (("2" (inst? -5 :where 1) (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (skeep) (("2" (inst? -5 :where 1) (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "e4") (("2" (propax) nil nil)) nil)) nil) ("2" (typepred "e3") (("2" (propax) nil nil)) nil)) nil) ("2" (typepred "e2") (("2" (propax) nil nil)) nil)) nil) ("2" (typepred "e1") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_real_is_real application-judgement "real" reals nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (ge_realorder name-judgement "RealOrder" real_orders reals) (VARIDX adt-constructor-decl "[nat -> (varidx?)]" IntervalExpr_adt nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_realorder name-judgement "RealOrder" real_orders reals) (NOT const-decl "[bool -> bool]" booleans nil) (IntervalExpr_induction formula-decl nil IntervalExpr_adt nil) (eval def-decl "real" interval_expr nil) (RealExpr type-eq-decl nil IntervalExpr_adt nil) (varidx adt-accessor-decl "[(varidx?) -> nat]" IntervalExpr_adt nil) (< const-decl "bool" reals nil) (subterm adt-def-decl "boolean" IntervalExpr_adt nil) (upfrom nonempty-type-eq-decl nil integers nil) (Env type-eq-decl nil box nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt nil) (TRUE const-decl "bool" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil)))

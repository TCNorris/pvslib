(interval_props
 (gt_weak_cancelation_sub 0
  (gt_weak_cancelation_sub-1 nil 3712327054 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil)
    (Proper? const-decl "bool" interval nil)
    (ProperInterval type-eq-decl nil interval nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    ([\|\|] const-decl "Interval" interval nil)
    (Sub const-decl "Interval" interval nil)
    (Gt const-decl "bool" interval nil)
    (gt const-decl "bool" interval nil))
   shostak))
 (gt_weak_cancelation_div 0
  (gt_weak_cancelation_div-2 nil 3712250026
   ("" (skeep)
    (("" (case "ub(ppY) > 0")
      (("1" (assert)
        (("1" (hide -1)
          (("1" (case "lb(ppY) > 0")
            (("1" (assert)
              (("1" (hide -1)
                (("1"
                  (case "Gt(Div(pX, ppY), 1) = lb(Div(pX,ppY)) > 1")
                  (("1" (replace -1 :hide? t)
                    (("1" (case "gt(pX,ppY) = lb(pX) > ub(ppY)")
                      (("1" (replace -1 :hide? t)
                        (("1" (case "Gt(pX, 0)")
                          (("1"
                            (case "Div(pX, ppY)=pXp(pX, [|1 / ub(ppY), 1 / lb(ppY)|])")
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (expand "pXp")
                                (("1"
                                  (expand "[||]")
                                  (("1"
                                    (case
                                     "lb(pX) * (1 / ub(ppY)) = lb(pX) / ub(ppY)")
                                    (("1"
                                      (replace -1 :hide? t)
                                      (("1"
                                        (lemma
                                         "both_sides_div_pos_gt2")
                                        (("1"
                                          (inst
                                           -1
                                           "ub(ppY)"
                                           "lb(pX)"
                                           "lb(pX)")
                                          (("1"
                                            (replace
                                             -1
                                             :hide?
                                             t
                                             :dir
                                             rl)
                                            (("1"
                                              (case
                                               "lb(pX) / lb(pX) = 1")
                                              (("1"
                                                (replace
                                                 -1
                                                 :hide?
                                                 t
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (expand "Gt")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (expand "Div")
                                (("2"
                                  (expand "Mult")
                                  (("2"
                                    (case
                                     "Ge([|1 / ub(ppY), 1 / lb(ppY)|], 0)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case "Ge(pX, 0)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (expand "Gt")
                                              (("2"
                                                (expand "Ge")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (typepred "ppY")
                                        (("2"
                                          (expand "Ge")
                                          (("2"
                                            (expand "[||]")
                                            (("2"
                                              (use
                                               "posreal_div_posreal_is_posreal")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (use
                                                     "posreal_div_posreal_is_posreal")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (hide 1)
                                (("1"
                                  (typepred "ppY")
                                  (("1"
                                    (expand "Div")
                                    (("1"
                                      (expand "Mult")
                                      (("1"
                                        (case
                                         "Ge([|1 / ub(ppY), 1 / lb(ppY)|], 0)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if -4)
                                            (("1"
                                              (split -4)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "pXp")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "Ge")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand "Gt")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (grind-reals
                                                               -3)
                                                              (("1"
                                                                (lemma
                                                                 "both_sides_div_pos_gt2")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "ub(ppY)"
                                                                   "lb(pX)"
                                                                   "lb(pX)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "Pos?")
                                                                      (("1"
                                                                        (expand
                                                                         "Gt"
                                                                         :assert?
                                                                         none)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (typepred
                                                                             "pX")
                                                                            (("1"
                                                                              (expand
                                                                               "Proper?")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (lift-if -2)
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (ground)
                                                              (("2"
                                                                (expand
                                                                 "nXp")
                                                                (("2"
                                                                  (expand
                                                                   "pXp")
                                                                  (("2"
                                                                    (expand
                                                                     "Neg")
                                                                    (("2"
                                                                      (expand
                                                                       "[||]")
                                                                      (("2"
                                                                        (case
                                                                         "-(-lb(pX) * (1 / lb(ppY))) > 1 = lb(pX) / lb(ppY) > 1")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (case
                                                                             "lb(pX)>0")
                                                                            (("1"
                                                                              (expand
                                                                               "Gt")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "pX")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "Proper?")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "lb(pX) / lb(ppY) > 1 = lb(pX) > lb(ppY)")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "both_sides_div_pos_lt1")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "lb(ppY)"
                                                                                   "lb(ppY)"
                                                                                   "lb(pX)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "mXp")
                                                              (("2"
                                                                (expand
                                                                 "pXm")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (case
                                                                     "1 / lb(ppY) * lb(pX) > 1 =  lb(pX) > lb(ppY)")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (typepred
                                                                         "pX")
                                                                        (("1"
                                                                          (expand
                                                                           "Proper?")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "lb(pX) < 0")
                                                                      (("1"
                                                                        (lemma
                                                                         "both_sides_div_pos_lt1")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "lb(ppY)"
                                                                           "lb(pX)"
                                                                           "lb(ppY)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          3
                                                                          4
                                                                          5))
                                                                        (("2"
                                                                          (typepred
                                                                           "pX")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 -3)
                                          (("2"
                                            (expand "Ge")
                                            (("2"
                                              (expand "[||]")
                                              (("2"
                                                (use
                                                 "posreal_div_posreal_is_posreal")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (use
                                                       "posreal_div_posreal_is_posreal")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (hide 1)
                                (("2"
                                  (expand "Gt")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "pX")
                                      (("2"
                                        (expand "Proper?")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "gt") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "Gt")
                      (("2" (case "Proper?(Div(pX, ppY))")
                        (("1" (expand "Proper?")
                          (("1" (expand "<=")
                            (("1" (expand ">") (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (use "Proper_Div")
                            (("2" (expand "Zeroless?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "ppY")
                (("2" (expand "Pos?")
                  (("2" (expand "Gt") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (typepred "ppY")
          (("2" (expand "Pos?")
            (("2" (expand "Gt")
              (("2" (expand "Proper?") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Pos? const-decl "bool" interval nil)
    (ProperInterval type-eq-decl nil interval nil)
    (Proper? const-decl "bool" interval nil)
    (Interval type-eq-decl nil interval nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Div const-decl "Interval" interval nil)
    (Gt const-decl "bool" interval nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (gt const-decl "bool" interval nil)
    (Mult const-decl "Interval" interval nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (Pos_Precondition name-judgement "(Precondition?)" interval nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Ge const-decl "bool" interval nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (pX skolem-const-decl "ProperInterval" interval_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_div_pos_gt2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (pXp const-decl "Interval" interval nil)
    ([\|\|] const-decl "Interval" interval nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_simp formula-decl nil real_props nil)
    (ub_interval formula-decl nil interval nil)
    (lb_interval formula-decl nil interval nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Proper_Neg application-judgement "ProperInterval" interval nil)
    (Le const-decl "bool" interval nil)
    (Neg const-decl "Interval" interval nil)
    (nXn const-decl "Interval" interval nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nXp const-decl "Interval" interval nil)
    (mXp const-decl "Interval" interval nil)
    (< const-decl "bool" reals nil)
    (pXm const-decl "Interval" interval nil)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     nil)
    (Zeroless? const-decl "bool" interval nil)
    (ppY skolem-const-decl "{ppY: ProperInterval | Pos?(ppY)}"
     interval_props nil)
    (Proper_Div judgement-tcc nil interval nil)
    (pXn const-decl "Interval" interval nil)
    (nXm const-decl "Interval" interval nil)
    (mXn const-decl "Interval" interval nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (mXm const-decl "Interval" interval nil)
    (<= const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil)
  (gt_weak_cancelation_div-1 nil 3712152583
   ("" (skeep)
    (("" (case "ub(ppY) > 0")
      (("1" (assert)
        (("1" (hide -1)
          (("1" (case "lb(ppY) > 0")
            (("1" (assert)
              (("1" (hide -1)
                (("1"
                  (case "Gt(Div(ppX, ppY), 1) = lb(Div(ppX,ppY)) > 1")
                  (("1" (replace -1 :hide? t)
                    (("1" (case "gt(ppX,ppY) = lb(ppX) > ub(ppY)")
                      (("1" (replace -1 :hide? t)
                        (("1" (case "Gt(ppX, 0)")
                          (("1"
                            (case "Div(ppX, ppY)=pXp(ppX, [|1 / ub(ppY), 1 / lb(ppY)|])")
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (expand "pXp")
                                (("1"
                                  (expand "[||]")
                                  (("1"
                                    (case
                                     "lb(ppX) * (1 / ub(ppY)) = lb(ppX) / ub(ppY)")
                                    (("1"
                                      (replace -1 :hide? t)
                                      (("1"
                                        (lemma
                                         "both_sides_div_pos_gt2")
                                        (("1"
                                          (inst
                                           -1
                                           "ub(ppY)"
                                           "lb(ppX)"
                                           "lb(ppX)")
                                          (("1"
                                            (replace
                                             -1
                                             :hide?
                                             t
                                             :dir
                                             rl)
                                            (("1"
                                              (case
                                               "lb(ppX) / lb(ppX) = 1")
                                              (("1"
                                                (replace
                                                 -1
                                                 :hide?
                                                 t
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (expand "Gt")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (expand "Div")
                                (("2"
                                  (expand "Mult")
                                  (("2"
                                    (case
                                     "Ge([|1 / ub(ppY), 1 / lb(ppY)|], 0)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case "Ge(ppX, 0)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (expand "Gt")
                                              (("2"
                                                (expand "Ge")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (typepred "ppY")
                                        (("2"
                                          (expand "Ge")
                                          (("2"
                                            (expand "[||]")
                                            (("2"
                                              (use
                                               "posreal_div_posreal_is_posreal")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (use
                                                     "posreal_div_posreal_is_posreal")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (hide 1)
                                (("1"
                                  (typepred "ppY")
                                  (("1"
                                    (expand "Div")
                                    (("1"
                                      (expand "Mult")
                                      (("1"
                                        (case
                                         "Ge([|1 / ub(ppY), 1 / lb(ppY)|], 0)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if -4)
                                            (("1"
                                              (split -4)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "pXp")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "Ge")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand "Gt")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (grind-reals
                                                               -3)
                                                              (("1"
                                                                (lemma
                                                                 "both_sides_div_pos_gt2")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "ub(ppY)"
                                                                   "lb(ppX)"
                                                                   "lb(ppX)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "Pos?")
                                                                      (("1"
                                                                        (expand
                                                                         "Gt"
                                                                         :assert?
                                                                         none)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (typepred
                                                                             "ppX")
                                                                            (("1"
                                                                              (expand
                                                                               "Proper?")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (lift-if -2)
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (ground)
                                                              (("2"
                                                                (expand
                                                                 "nXp")
                                                                (("2"
                                                                  (expand
                                                                   "pXp")
                                                                  (("2"
                                                                    (expand
                                                                     "Neg")
                                                                    (("2"
                                                                      (expand
                                                                       "[||]")
                                                                      (("2"
                                                                        (case
                                                                         "-(-lb(ppX) * (1 / lb(ppY))) > 1 = lb(ppX) / lb(ppY) > 1")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (case
                                                                             "lb(ppX)>0")
                                                                            (("1"
                                                                              (expand
                                                                               "Gt")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "ppX")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "Proper?")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "lb(ppX) / lb(ppY) > 1 = lb(ppX) > lb(ppY)")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "both_sides_div_pos_lt1")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "lb(ppY)"
                                                                                   "lb(ppY)"
                                                                                   "lb(ppX)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "mXp")
                                                              (("2"
                                                                (expand
                                                                 "pXm")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (case
                                                                     "1 / lb(ppY) * lb(ppX) > 1 =  lb(ppX) > lb(ppY)")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (typepred
                                                                         "ppX")
                                                                        (("1"
                                                                          (expand
                                                                           "Proper?")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "lb(ppX) < 0")
                                                                      (("1"
                                                                        (lemma
                                                                         "both_sides_div_pos_lt1")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "lb(ppY)"
                                                                           "lb(ppX)"
                                                                           "lb(ppY)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          3
                                                                          4
                                                                          5))
                                                                        (("2"
                                                                          (typepred
                                                                           "ppX")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 -3)
                                          (("2"
                                            (expand "Ge")
                                            (("2"
                                              (expand "[||]")
                                              (("2"
                                                (use
                                                 "posreal_div_posreal_is_posreal")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (use
                                                       "posreal_div_posreal_is_posreal")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (hide 1)
                                (("2"
                                  (expand "Gt")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "ppX")
                                      (("2"
                                        (expand "Proper?")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "gt") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "Gt")
                      (("2" (case "Proper?(Div(ppX, ppY))")
                        (("1" (expand "Proper?")
                          (("1" (expand "<=")
                            (("1" (expand ">") (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (use "Proper_Div")
                            (("2" (expand "Zeroless?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "ppY")
                (("2" (expand "Pos?")
                  (("2" (expand "Gt") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (typepred "ppY")
          (("2" (expand "Pos?")
            (("2" (expand "Gt")
              (("2" (expand "Proper?") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mXm const-decl "Interval" interval nil)
    (mXn const-decl "Interval" interval nil)
    (nXm const-decl "Interval" interval nil)
    (pXn const-decl "Interval" interval nil)
    (Proper_Div judgement-tcc nil interval nil)
    (Zeroless? const-decl "bool" interval nil)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     nil)
    (pXm const-decl "Interval" interval nil)
    (mXp const-decl "Interval" interval nil)
    (nXp const-decl "Interval" interval nil)
    (Le const-decl "bool" interval nil)
    (Neg const-decl "Interval" interval nil)
    (nXn const-decl "Interval" interval nil)
    (Proper_Neg application-judgement "ProperInterval" interval nil)
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (pXp const-decl "Interval" interval nil)
    (Ge const-decl "bool" interval nil)
    (Pos_Precondition name-judgement "(Precondition?)" interval nil)
    (Mult const-decl "Interval" interval nil)
    (gt const-decl "bool" interval nil)
    (Gt const-decl "bool" interval nil)
    (Div const-decl "Interval" interval nil)
    (Interval type-eq-decl nil interval nil)
    (Proper? const-decl "bool" interval nil)
    (ProperInterval type-eq-decl nil interval nil)
    (Pos? const-decl "bool" interval nil))
   shostak))
 (lt_weak_cancelation_div 0
  (lt_weak_cancelation_div-1 nil 3712253868
   ("" (skeep :preds? t)
    (("" (expand "Proper?")
      (("" (expand "Pos?")
        (("" (expand "NonNeg?")
          (("" (expand "Gt")
            (("" (expand "Ge")
              (("" (flatten)
                (("" (assert)
                  (("" (hide-all-but 1)
                    (("" (expand "lt")
                      ((""
                        (case "Lt(Div(nnpY, ppX), 1) = ub(Div(nnpY, ppX)) < 1")
                        (("1" (replace -1 :hide? t)
                          (("1"
                            (case "Div(nnpY, ppX) = pXp(nnpY, [|1 / ub(ppX), 1 / lb(ppX)|])")
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (expand "pXp")
                                (("1"
                                  (expand "[||]")
                                  (("1"
                                    (case
                                     "ub(nnpY) * (1 / lb(ppX)) < 1 = ub(nnpY) < lb(ppX)")
                                    (("1"
                                      (replace -1 :hide? t)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (lemma
                                         "both_sides_div_pos_lt1")
                                        (("2"
                                          (inst
                                           -1
                                           "lb(ppX)"
                                           "ub(nnpY)"
                                           "lb(ppX)")
                                          (("2"
                                            (replace
                                             -1
                                             1
                                             :hide?
                                             t
                                             :dir
                                             rl)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (expand "Div")
                                (("2"
                                  (expand "Mult")
                                  (("2"
                                    (case
                                     "Ge(nnpY, 0) AND Ge([|1 / ub(ppX), 1 / lb(ppX)|], 0)")
                                    (("1"
                                      (lift-if 1)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (expand "Ge")
                                        (("2"
                                          (expand "[||]")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand ">=")
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (grind-reals)
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (grind-reals)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (case "Proper?(Div(nnpY, ppX))")
                            (("1" (expand "Proper?")
                              (("1"
                                (expand "Lt")
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (use "Proper_Div")
                                (("2"
                                  (expand "Zeroless?")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Proper? const-decl "bool" interval nil)
    (NonNeg? const-decl "bool" interval nil)
    (Ge const-decl "bool" interval nil)
    (NonNeg_Div application-judgement "(NonNeg?)" interval nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt const-decl "bool" interval nil)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     nil)
    (Zeroless? const-decl "bool" interval nil)
    (ppX skolem-const-decl "{ppX: ProperInterval | Pos?(ppX)}"
     interval_props nil)
    (Proper_Div judgement-tcc nil interval nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (pXm const-decl "Interval" interval nil)
    (pXn const-decl "Interval" interval nil)
    (nXp const-decl "Interval" interval nil)
    (Neg const-decl "Interval" interval nil)
    (Le const-decl "bool" interval nil)
    (Mult const-decl "Interval" interval nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    ([\|\|] const-decl "Interval" interval nil)
    (pXp const-decl "Interval" interval nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Lt const-decl "bool" interval nil)
    (Div const-decl "Interval" interval nil)
    (ProperInterval type-eq-decl nil interval nil)
    (< const-decl "bool" reals nil) (Gt const-decl "bool" interval nil)
    (Pos? const-decl "bool" interval nil))
   shostak))
 (both_sides_1minus_lt1 0
  (both_sides_1minus_lt1-1 nil 3712256293 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Lt const-decl "bool" interval nil)
    ([\|\|] const-decl "Interval" interval nil)
    ([\|\|] const-decl "Interval" interval nil)
    (Sub const-decl "Interval" interval nil)
    (Gt const-decl "bool" interval nil))
   shostak)))


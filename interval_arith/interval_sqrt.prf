(interval_sqrt
 (Sqrt_TCC1 0
  (Sqrt_TCC1-1 nil 3626962013 ("" (subtype-tcc) nil nil)
   ((Ge const-decl "bool" interval nil)) nil
   (Sqrt subtype "lb(interval_sqrt.X)" "nnreal")))
 (Sqrt_TCC2 0
  (Sqrt_TCC2-1 nil 3626989480 ("" (subtype-tcc) nil nil)
   ((Ge const-decl "bool" interval nil)) nil
   (Sqrt subtype "ub(interval_sqrt.X)" "nnreal")))
 (Sqrt_TCC3 0
  (Sqrt_TCC3-2 nil 3626989525
   ("" (skeep)
    (("" (name-replace "AA" "[|sqrt_lb(lb(X), n), sqrt_ub(ub(X), n)|]")
      (("1" (case "NonNeg?(AA)")
        (("1" (typepred "rat_interval(10 ^ -n)(AA)")
          (("1" (name-replace "BB" "rat_interval(10 ^ -n)(AA)")
            (("1" (hide (-16 -17)) (("1" (grind) nil nil)) nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "AA")
            (("2" (grind :exclude ("sqrt_lb" "sqrt_ub")) nil nil)) nil))
          nil))
        nil)
       ("2" (hide 2) (("2" (grind) nil nil)) nil)
       ("3" (hide 2) (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    ([\|\|] const-decl "Interval" interval nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt_lb const-decl "{zz | x >= sq(zz)}" sqrt_approx reals)
    (<= const-decl "bool" reals nil)
    (sqrt_ub const-decl "{zz | x <= sq(zz)}" sqrt_approx reals)
    (AA skolem-const-decl "Interval" interval_sqrt nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (rat_interval const-decl "{J: Interval |
        (lb(I) > 0 IFF lb(J) > 0) AND (lb(I) < 0 IFF lb(J) < 0)
    AND (lb(I) = 0 IFF lb(J) = 0) AND (ub(I) > 0 IFF ub(J) > 0)
    AND (ub(I) < 0 IFF ub(J) < 0) AND (ub(I) = 0 IFF ub(J) = 0) AND (I << J)
    AND (lb(J) <= lb(I)) AND (ub(I) <= ub(J)) AND (lb(I) - lb(J) <= epsil)
    AND (ub(J) - ub(I) <= epsil)}" rational_interval nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<< const-decl "bool" interval nil) (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (Ge const-decl "bool" interval nil)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NonNeg? const-decl "bool" interval nil))
   nil
   (Sqrt subtype
    "rational_interval.rat_interval(exponentiation.^(10, (number_fields.-)(interval_sqrt.n)))([|sqrt_approx.sqrt_lb(lb(interval_sqrt.X), interval_sqrt.n), sqrt_approx.sqrt_ub(ub(interval_sqrt.X), interval_sqrt.n)|])"
    "(interval.NonNeg?)"))
  (Sqrt_TCC3-1 nil 3626989480 ("" (subtype-tcc) nil nil) nil nil
   (Sqrt subtype
    "rational_interval.rat_interval(exponentiation.^(10, (number_fields.-)(interval_sqrt.n)))([|sqrt_approx.sqrt_lb(lb(interval_sqrt.X), interval_sqrt.n), sqrt_approx.sqrt_ub(ub(interval_sqrt.X), interval_sqrt.n)|])"
    "(interval.NonNeg?)")))
 (Sqrt_TCC4 0
  (Sqrt_TCC4-1 nil 3626989480 ("" (subtype-tcc) nil nil)
   ((Ge const-decl "bool" interval nil)
    ([\|\|] const-decl "Interval" interval nil)
    (EmptyInterval const-decl "Interval" interval nil)
    (NonNeg? const-decl "bool" interval nil))
   nil (Sqrt subtype "interval.EmptyInterval" "(interval.NonNeg?)")))
 (Sqrt_inclusion_TCC1 0
  (Sqrt_inclusion_TCC1-1 nil 3626989620 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Ge const-decl "bool" interval nil)
    (NonNeg? const-decl "bool" interval nil)
    (|##| const-decl "bool" interval nil))
   nil (Sqrt_inclusion subtype "interval_sqrt.x" "nonneg_real")))
 (Sqrt_inclusion 0
  (Sqrt_inclusion-1 nil 3626989657
   ("" (skeep)
    (("" (expand "NonNeg?")
      (("" (expand "Sqrt")
        (("" (assert)
          (("" (case "sqrt(x) ## [|sqrt_lb(lb(X), n), sqrt_ub(ub(X), n)|]")
            (("1" (rewrite "rat_interval_inclusion") nil nil)
             ("2" (hide 2)
              (("2" (expand* "##" "Ge")
                (("2" (assert)
                  (("2" (flatten)
                    (("2" (split 1)
                      (("1" (case "sqrt(lb(X))<= sqrt(x)")
                        (("1" (lemma "sqrt_bounds")
                          (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil)
                         ("2" (hide 2)
                          (("2" (lemma "sqrt_le")
                            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                          nil))
                        nil)
                       ("2" (case "sqrt(x)<=sqrt(ub(X))")
                        (("1" (lemma "sqrt_bounds")
                          (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil)
                         ("2" (hide 2)
                          (("2" (lemma "sqrt_le")
                            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2) (("3" (grind) nil nil)) nil)
             ("4" (hide 2) (("4" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg? const-decl "bool" interval nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (sqrt_le formula-decl nil sqrt reals)
    (sqrt_bounds formula-decl nil sqrt_approx reals)
    (X skolem-const-decl "Interval" interval_sqrt nil)
    (Ge const-decl "bool" interval nil)
    (rat_interval_inclusion formula-decl nil rational_interval nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (|##| const-decl "bool" interval nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    ([\|\|] const-decl "Interval" interval nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt_lb const-decl "{zz | x >= sq(zz)}" sqrt_approx reals)
    (<= const-decl "bool" reals nil)
    (sqrt_ub const-decl "{zz | x <= sq(zz)}" sqrt_approx reals)
    (Sqrt const-decl "(NonNeg?)" interval_sqrt nil))
   nil))
 (Sqrt_fundamental 0
  (Sqrt_fundamental-2 nil 3627423922
   ("" (skeep)
    (("" (expand "Sqrt")
      (("" (case "Ge(Y,0)")
        (("1" (case "Ge(X,0)")
          (("1" (assert)
            (("1" (tccs-formula 1)
              (("1"
                (case "[|sqrt_lb(lb(X), n), sqrt_ub(ub(X), n)|] << [|sqrt_lb(lb(Y), n), sqrt_ub(ub(Y), n)|]")
                (("1" (rewrite "rat_interval_fundamental")
                  (("1" (hide -1 2)
                    (("1" (expand "Proper?")
                      (("1" (assert)
                        (("1" (lemma "sqrt_bounds")
                          (("1" (inst?)
                            (("1" (flatten)
                              (("1" (lemma "sqrt_ub_increasing")
                                (("1" (inst -1 "n" "lb(X)" "ub(X)")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "[||]")
                    (("2" (expand "<<")
                      (("2" (split)
                        (("1" (rewrite "sqrt_lb_increasing") nil nil)
                         ("2" (rewrite "sqrt_ub_increasing") nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil) ("4" (propax) nil nil)
                 ("5" (propax) nil nil) ("6" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (grind) nil nil)) nil))
          nil)
         ("2" (hide 2) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((Sqrt const-decl "(NonNeg?)" interval_sqrt nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (sqrt_lb_increasing formula-decl nil sqrt_approx reals)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (rat_interval_fundamental formula-decl nil rational_interval nil)
    (Proper? const-decl "bool" interval nil)
    (sqrt_bounds formula-decl nil sqrt_approx reals)
    (sqrt_ub_increasing formula-decl nil sqrt_approx reals)
    (ub_interval formula-decl nil interval nil)
    (lb_interval formula-decl nil interval nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (<< const-decl "bool" interval nil)
    ([\|\|] const-decl "Interval" interval nil)
    (nnreal type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt_lb const-decl "{zz | x >= sq(zz)}" sqrt_approx reals)
    (<= const-decl "bool" reals nil)
    (sqrt_ub const-decl "{zz | x <= sq(zz)}" sqrt_approx reals)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (NonNeg? const-decl "bool" interval nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Ge const-decl "bool" interval nil))
   nil)
  (Sqrt_fundamental-1 nil 3626989916
   ("" (skeep)
    (("" (expand "Sqrt")
      (("" (case "Ge(Y,0)")
        (("1" (case "Ge(X,0)")
          (("1" (assert)
            (("1"
              (case "[|sqrt_lb(lb(X), n), sqrt_ub(ub(X), n)|] << [|sqrt_lb(lb(Y), n), sqrt_ub(ub(Y), n)|]")
              (("1"
                (name-replace "AX" "[|sqrt_lb(lb(X), n), sqrt_ub(ub(X), n)|]")
                (("1"
                  (name-replace "AY"
                   "[|sqrt_lb(lb(Y), n), sqrt_ub(ub(Y), n)|]")
                  (("1" (typepred "rat_interval(10 ^ -n)(AX)")
                    (("1" (name-replace "BBX" "rat_interval(10 ^ -n)(AX)")
                      (("1" (typepred "rat_interval(10 ^ -n)(AY)")
                        (("1" (name-replace "BBY" "rat_interval(10 ^ -n)(AY)")
                          (("1" (postpone) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil) ("3" (postpone) nil nil)
               ("4" (postpone) nil nil) ("5" (postpone) nil nil)
               ("6" (postpone) nil nil))
              nil))
            nil)
           ("2" (postpone) nil nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil nil))
 (Proper_Sqrt 0
  (Proper_Sqrt-1 nil 3579706736
   ("" (skeep :preds? t)
    (("" (lemma "Proper_Member")
      (("" (inst? -)
        (("" (assert)
          (("" (skeep)
            (("" (lemma "Member_Proper")
              (("" (inst? -1 :where 1)
                (("" (inst -1 "sqrt(x)")
                  (("1" (assert) (("1" (rewrite "Sqrt_inclusion") nil nil))
                    nil)
                   ("2" (hide-all-but (-1 -3 1)) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Proper_Member formula-decl nil interval nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval nil)
    (Member_Proper formula-decl nil interval nil)
    (x skolem-const-decl "real" interval_sqrt nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Sqrt_inclusion formula-decl nil interval_sqrt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (|##| const-decl "bool" interval nil) (Ge const-decl "bool" interval nil)
    (Sqrt const-decl "(NonNeg?)" interval_sqrt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NonNegInterval type-eq-decl nil proper_arith nil)
    (NonNeg? const-decl "bool" interval nil)
    (ProperInterval type-eq-decl nil interval nil)
    (Proper? const-decl "bool" interval nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil))
   nil
   (Proper_Sqrt subtype
    "interval_sqrt.Sqrt(interval_sqrt.n)(interval_sqrt.XNn)"
    "NonNegInterval"))))


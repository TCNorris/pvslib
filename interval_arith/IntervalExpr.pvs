IntervalExpr : DATATYPE WITH SUBTYPES RealExpr, BoolExpr
BEGIN

  IMPORTING interval,
            structures@Unit,
            reals@real_orders

  % Irrational constants are modeled as functions to force lazy evaluation
  CONST(opc:[Unit->real],opC:(Includes?(opc(unit)))) : const? : RealExpr
  VARIDX(varidx:nat) : varidx?                                : RealExpr
  ADD(op1,op2:RealExpr) : add?                                : RealExpr
  ABS(op:RealExpr) : abs?                                     : RealExpr
  NEG(op:RealExpr) : neg?                                     : RealExpr
  SUB(op1,op2:RealExpr) : sub?                                : RealExpr
  MULT(op1,op2:RealExpr) : mult?                              : RealExpr
  SQ(op:RealExpr) : sq?                                       : RealExpr
  POW(op:RealExpr,opn:nat) : pow?                             : RealExpr
  DIV(op1,op2:RealExpr) : div?                                : RealExpr
  FUN(pre:(Precondition?),
      opf:[real->real],
      opF:{F:[Interval->Interval]|
             Inclusion?(pre,opf)(F) AND Fundamental?(pre)(F)},
      op:RealExpr) : fun?                                    : RealExpr
  FUN2( pre1:(Precondition?),
	pre2:(Precondition2?),
        opf2:[real,real->real],
        opF2:{F:[[Interval,Interval]->Interval]|
                             Inclusion2?(pre1,pre2,opf2)(F)
       	                     AND Fundamental2?(pre1,pre2)(F)},
        op1,op2:RealExpr) : fun2?                            : RealExpr
  LETIN(rlet:RealExpr,rin:RealExpr) : letin?                  : RealExpr
  BCONST(opb:bool) : bconst?                                  : BoolExpr
  BNOT(bop:BoolExpr) : bnot?                                  : BoolExpr
  BAND(bop1,bop2:BoolExpr) : band?                            : BoolExpr
  BOR(bop1,bop2:BoolExpr) : bor?                              : BoolExpr
  BIMPLIES(bop1,bop2:BoolExpr) : bimplies?                    : BoolExpr
  BREL(rel:RealOrder,op1,op2:RealExpr) : brel?                : BoolExpr
  BINCLUDES(op:RealExpr,opi:Interval) : bincludes?            : BoolExpr
  BITE(bif,bthen,belse:BoolExpr) : bite?                      : BoolExpr
  BLETIN(blet:IntervalExpr,bin:BoolExpr) : bletin?            : BoolExpr
  FUN4( pre1:(Precondition?),
	pre2:(Precondition2?),
	pre3:(Precondition3?),
	pre4:(Precondition4?),
        opf4:[real,real,real,real->real],
        opF4:{F:[[Interval,Interval,Interval,Interval]->Interval]|
                   Inclusion4?(pre1,pre2,pre3,pre4,opf4)(F)
       	          AND Fundamental4?(pre1,pre2,pre3,pre4)(F)},
        op1,op2,op3,op4:RealExpr) : fun4?                     : RealExpr

END IntervalExpr

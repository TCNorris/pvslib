(interval_expr_extra
 (FLOOR_TCC1 0
  (FLOOR_TCC1-1 nil 3679234929 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IntervalExpr type-decl nil IntervalExpr_adt nil)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt nil)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt
     nil)
    (RealExpr type-eq-decl nil IntervalExpr_adt nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Any? const-decl "bool" interval nil)
    (ProperInterval type-eq-decl nil interval nil)
    (Proper? const-decl "bool" interval nil)
    (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil)
    (Any_Precondition name-judgement "(Precondition?)" interval nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval nil)
    ([\|\|] const-decl "Interval" interval nil)
    (Floor const-decl "Interval" interval nil)
    (Inclusion? const-decl "bool" interval nil)
    (<< const-decl "bool" interval nil)
    (Fundamental? const-decl "bool" interval nil))
   nil
   (FLOOR subtype "interval.Floor"
    "{F: [interval.Interval -> interval.Interval] | booleans.AND(interval.Inclusion?(interval.Any?, floor_ceil.floor)(F), interval.Fundamental?(interval.Any?)(F))}")))
 (MAX_TCC1 0
  (MAX_TCC1-1 nil 3708471307
   ("" (skeep)
    (("" (split) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil)
    (Any? const-decl "bool" interval nil)
    (Any2? const-decl "bool" interval nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    ([\|\|] const-decl "Interval" interval nil)
    (|##| const-decl "bool" interval nil)
    (Inclusion2? const-decl "bool" interval nil)
    (Any_Precondition name-judgement "(Precondition?)" interval nil)
    (Any2_Precondition2 name-judgement "(Precondition2?)" interval nil)
    (Proper? const-decl "bool" interval nil)
    (ProperInterval type-eq-decl nil interval nil)
    (<< const-decl "bool" interval nil)
    (Fundamental2? const-decl "bool" interval nil))
   nil
   (MAX subtype
    "LAMBDA (X, Y: interval.Interval): [|real_defs.max(lb(X), lb(Y)), real_defs.max(ub(X), ub(Y))|]"
    "{F: [[interval.Interval, interval.Interval] -> interval.Interval] | booleans.AND(interval.Inclusion2?(interval.Any?, interval.Any2?, LAMBDA (x, y: reals.real): real_defs.max(x, y))(F), interval.Fundamental2?(interval.Any?, interval.Any2?)(F))}")))
 (MIN_TCC1 0
  (MIN_TCC1-1 nil 3708471307
   ("" (skeep)
    (("" (split) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil)
    (Any? const-decl "bool" interval nil)
    (Any2? const-decl "bool" interval nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    ([\|\|] const-decl "Interval" interval nil)
    (|##| const-decl "bool" interval nil)
    (Inclusion2? const-decl "bool" interval nil)
    (Any_Precondition name-judgement "(Precondition?)" interval nil)
    (Any2_Precondition2 name-judgement "(Precondition2?)" interval nil)
    (Proper? const-decl "bool" interval nil)
    (ProperInterval type-eq-decl nil interval nil)
    (<< const-decl "bool" interval nil)
    (Fundamental2? const-decl "bool" interval nil))
   nil
   (MIN subtype
    "LAMBDA (X, Y: interval.Interval): [|real_defs.min(lb(X), lb(Y)), real_defs.min(ub(X), ub(Y))|]"
    "{F: [[interval.Interval, interval.Interval] -> interval.Interval] | booleans.AND(interval.Inclusion2?(interval.Any?, interval.Any2?, LAMBDA (x, y: reals.real): real_defs.min(x, y))(F), interval.Fundamental2?(interval.Any?, interval.Any2?)(F))}")))
 (Sqrt_Inclusion 0
  (Sqrt_Inclusion-2 nil 3708472387
   ("" (skeep)
    (("" (expand "Inclusion?")
      (("" (skeep :preds? t)
        (("" (expand "sqrt_safe")
          (("" (case-replace "max(x,0) = x")
            (("1" (rewrite "Sqrt_inclusion") nil nil)
             ("2" (hide 2) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Inclusion? const-decl "bool" interval nil)
    (sqrt_safe const-decl "nnreal" reals_safe_ops reals)
    (|##| const-decl "bool" interval nil) (Ge const-decl "bool" interval nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Sqrt_inclusion formula-decl nil interval_sqrt nil)
    (Interval type-eq-decl nil interval nil)
    (NonNeg? const-decl "bool" interval nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (Sqrt_Inclusion subtype "interval_sqrt.Sqrt(interval_expr_extra.n)"
    "(interval.Inclusion?(interval.NonNeg?, reals_safe_ops.sqrt_safe))"))
  (Sqrt_Inclusion-1 nil 3708472331 ("" (judgement-tcc) nil nil) nil nil
   (Sqrt_Inclusion subtype "interval_sqrt.Sqrt(interval_expr_extra.n)"
    "(interval.Inclusion?(interval.NonNeg?, reals_safe_ops.sqrt_safe))")))
 (Sqrt_Fundamental 0
  (Sqrt_Fundamental-1 nil 3708472331
   ("" (skeep)
    (("" (expand "Fundamental?")
      (("" (skeep) (("" (rewrite "Sqrt_fundamental") nil nil)) nil)) nil))
    nil)
   ((Fundamental? const-decl "bool" interval nil)
    (Sqrt_fundamental formula-decl nil interval_sqrt nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Proper? const-decl "bool" interval nil)
    (ProperInterval type-eq-decl nil interval nil)
    (NonNeg? const-decl "bool" interval nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (Sqrt_Fundamental subtype "interval_sqrt.Sqrt(interval_expr_extra.n)"
    "(interval.Fundamental?(interval.NonNeg?))")))
 (SQRT_n_TCC1 0
  (SQRT_n_TCC1-1 nil 3708472331 ("" (subtype-tcc) nil nil)
   ((Sqrt_Fundamental application-judgement "(Fundamental?(NonNeg?))"
     interval_expr_extra nil)
    (Sqrt_Inclusion application-judgement "(Inclusion?(NonNeg?, sqrt_safe))"
     interval_expr_extra nil))
   nil
   (SQRT_n subtype "interval_sqrt.Sqrt(interval_expr_extra.n)"
    "{F: [interval.Interval -> interval.Interval] | booleans.AND(interval.Inclusion?(interval.NonNeg?, reals_safe_ops.sqrt_safe)(F), interval.Fundamental?(interval.NonNeg?)(F))}"))))


(ring_with_one_prime_ideal
 (IMP_ring_prime_ideal_TCC1 0
  (IMP_ring_prime_ideal_TCC1-1 nil 3793905402
   ("" (lemma "fullset_is_ring_with_one")
    (("" (expand "ring_with_one?") (("" (assert) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (fullset_is_ring_with_one formula-decl nil
     ring_with_one_prime_ideal nil))
   nil
   (IMP_ring_prime_ideal assuming
    "ring_prime_ideal[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+, ring_with_one_prime_ideal.*, ring_with_one_prime_ideal.zero].ring_prime_ideal"
    "fullset_is_ring: ASSUMPTION ring_def[ring_prime_ideal.T, ring_prime_ideal.+, ring_prime_ideal.*, ring_prime_ideal.zero].ring?(sets[ring_prime_ideal.T].fullset)")))
 (IMP_quotient_rings_with_one_TCC1 0
  (IMP_quotient_rings_with_one_TCC1-1 nil 3793905402
   ("" (rewrite "fullset_is_ring_with_one") nil nil)
   ((fullset_is_ring_with_one formula-decl nil
     ring_with_one_prime_ideal nil))
   nil
   (IMP_quotient_rings_with_one assuming
    "quotient_rings_with_one[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+, ring_with_one_prime_ideal.*, ring_with_one_prime_ideal.zero, ring_with_one_prime_ideal.one].quotient_rings_with_one"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[quotient_rings_with_one.T, quotient_rings_with_one.+, quotient_rings_with_one.*, quotient_rings_with_one.zero, quotient_rings_with_one.one].ring_with_one?(sets[quotient_rings_with_one.T].fullset)")))
 (prime_ideal_nz_closed_TCC1 0
  (prime_ideal_nz_closed_TCC1-1 nil 3779133952
   ("" (skeep)
    (("" (inst 1 "P")
      (("" (rewrite "ideal_is_coset")
        (("" (expand "prime_ideal?") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (prime_ideal? const-decl "bool" ring_prime_ideal_def nil)
    (R skolem-const-decl "ring_with_one[T, +, *, zero, one]"
     ring_with_one_prime_ideal nil)
    (P skolem-const-decl "set[T]" ring_with_one_prime_ideal nil)
    (coset type-eq-decl nil cosets_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (one formal-const-decl "T" ring_with_one_prime_ideal nil)
    (zero formal-const-decl "T" ring_with_one_prime_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (coset? const-decl "bool" cosets_def nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil ring_with_one_prime_ideal nil))
   nil
   (prime_ideal_nz_closed existence ""
    "cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)")))
 (prime_ideal_nz_closed_TCC2 0
  (prime_ideal_nz_closed_TCC2-1 nil 3779133952
   ("" (skeep*)
    (("" (lemma "coset_add")
      (("" (inst -1 "R" "P" "x1`1" "x1`2")
        (("1" (assert) nil nil)
         ("2" (expand "prime_ideal?") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (R skolem-const-decl "ring_with_one[T, +, *, zero, one]"
     ring_with_one_prime_ideal nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (one formal-const-decl "T" ring_with_one_prime_ideal nil)
    (P skolem-const-decl "set[T]" ring_with_one_prime_ideal nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def algebra)
    (set type-eq-decl nil sets nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (prime_ideal? const-decl "bool" ring_prime_ideal_def nil)
    (coset_add formula-decl nil quotient_rings nil)
    (T formal-nonempty-type-decl nil ring_with_one_prime_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (zero formal-const-decl "T" ring_with_one_prime_ideal nil))
   nil
   (prime_ideal_nz_closed subtype
    "quotient_ring_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+, ring_with_one_prime_ideal.*].add(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)"
    "[[cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P), cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)] -> cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)]")))
 (prime_ideal_nz_closed_TCC3 0
  (prime_ideal_nz_closed_TCC3-1 nil 3779133952
   ("" (skeep*)
    (("" (lemma "coset_product")
      (("" (inst -1 "R" "P" "x1`1" "x1`2")
        (("1" (assert) nil nil)
         ("2" (expand "prime_ideal?") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (R skolem-const-decl "ring_with_one[T, +, *, zero, one]"
     ring_with_one_prime_ideal nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (one formal-const-decl "T" ring_with_one_prime_ideal nil)
    (P skolem-const-decl "set[T]" ring_with_one_prime_ideal nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def algebra)
    (set type-eq-decl nil sets nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (prime_ideal? const-decl "bool" ring_prime_ideal_def nil)
    (coset_product formula-decl nil quotient_rings nil)
    (T formal-nonempty-type-decl nil ring_with_one_prime_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (zero formal-const-decl "T" ring_with_one_prime_ideal nil))
   nil
   (prime_ideal_nz_closed subtype
    "quotient_ring_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+, ring_with_one_prime_ideal.*].product(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)"
    "[[cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P), cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)] -> cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)]")))
 (prime_ideal_nz_closed_TCC4 0
  (prime_ideal_nz_closed_TCC4-1 nil 3779133952
   ("" (skeep)
    (("" (rewrite "ideal_is_coset")
      (("" (expand "prime_ideal?") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((prime_ideal? const-decl "bool" ring_prime_ideal_def nil)
    (zero formal-const-decl "T" ring_with_one_prime_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (T formal-nonempty-type-decl nil ring_with_one_prime_ideal nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (one formal-const-decl "T" ring_with_one_prime_ideal nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (ring? const-decl "bool" ring_def algebra)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil))
   nil
   (prime_ideal_nz_closed subtype "ring_with_one_prime_ideal.P"
    "cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)")))
 (prime_ideal_nz_closed 0
  (prime_ideal_nz_closed-1 nil 3779134015
   ("" (skosimp)
    (("" (expand "nz_closed?")
      (("" (expand "star_closed?")
        (("" (skosimp)
          (("" (expand "member")
            (("" (expand "remove")
              (("" (expand "member")
                (("" (expand "restrict")
                  (("" (typepred "x!1" "y!1")
                    (("" (expand "remove")
                      (("" (expand "member")
                        (("" (expand "restrict")
                          (("" (flatten)
                            (("" (hide -2 -4)
                              ((""
                                (split)
                                (("1"
                                  (rewrite "lcoset_iff_coset" :dir rl)
                                  (("1"
                                    (rewrite
                                     "lcoset_iff_coset"
                                     :dir
                                     rl)
                                    (("1"
                                      (expand "left_coset?")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (replaces -2)
                                          (("1"
                                            (replaces -2)
                                            (("1"
                                              (rewrite
                                               "product_charac")
                                              (("1"
                                                (lemma
                                                 "prime_ideal_prop2")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "a!1"
                                                       "a!2")
                                                      (("1"
                                                        (expand
                                                         "prime_ideal?")
                                                        (("1"
                                                          (expand
                                                           "ideal?")
                                                          (("1"
                                                            (expand
                                                             "left_ideal?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 -3
                                                                 -5
                                                                 -6
                                                                 -7)
                                                                (("1"
                                                                  (lemma
                                                                   "self_coset")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "R!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "self_coset")
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "P!1"
                                                                               "R!1"
                                                                               "a!1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -2
                                                                               "P!1"
                                                                               "R!1"
                                                                               "a!2")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "prime_ideal?")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "lcoset_iff_coset" :dir rl)
                                  (("2"
                                    (rewrite
                                     "lcoset_iff_coset"
                                     :dir
                                     rl)
                                    (("2"
                                      (expand "left_coset?")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (replaces -1)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (expand "/")
                                              (("2"
                                                (rewrite
                                                 "lcoset_iff_coset"
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (expand
                                                   "left_coset?")
                                                  (("2"
                                                    (inst 1 "a!1*a!2")
                                                    (("1"
                                                      (rewrite
                                                       "product_charac")
                                                      (("1"
                                                        (expand
                                                         "prime_ideal?")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "commutative_ring?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide
                                                           -2
                                                           -3
                                                           2
                                                           3)
                                                          (("2"
                                                            (typepred
                                                             "a!1"
                                                             "a!2")
                                                            (("2"
                                                              (lemma
                                                               "R_prod_star_closed")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "R!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nz_closed? const-decl "bool" ring_nz_closed_def algebra)
    (remove const-decl "set" sets nil)
    (restrict const-decl "R" restrict nil)
    (commutative_ring? const-decl "bool" ring_def algebra)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil) nil
    nil nil (product const-decl "set[T]" quotient_ring_def nil) nil
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (TRUE const-decl "bool" booleans nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (ring? const-decl "bool" ring_def algebra)
    (product_charac formula-decl nil quotient_rings nil)
    (self_coset formula-decl nil ring_cosets_lemmas nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (prime_ideal? const-decl "bool" ring_prime_ideal_def nil)
    (prime_ideal_prop2 formula-decl nil ring_prime_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_with_one_prime_ideal nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (coset? const-decl "bool" cosets_def nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (zero formal-const-decl "T" ring_with_one_prime_ideal nil)
    (one formal-const-decl "T" ring_with_one_prime_ideal nil)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (coset type-eq-decl nil cosets_def nil)
    (setof type-eq-decl nil defined_types nil)
    (/ const-decl "setof[set[T]]" quotient_ring_def nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def algebra))
   nil))
 (prime_ideal_charac_TCC1 0
  (prime_ideal_charac_TCC1-1 nil 3779133952
   ("" (skeep)
    (("" (inst 1 "P") (("" (rewrite "ideal_is_coset") nil nil)) nil))
    nil)
   ((T formal-nonempty-type-decl nil ring_with_one_prime_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (coset? const-decl "bool" cosets_def nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (zero formal-const-decl "T" ring_with_one_prime_ideal nil)
    (one formal-const-decl "T" ring_with_one_prime_ideal nil)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (coset type-eq-decl nil cosets_def nil)
    (P skolem-const-decl "set[T]" ring_with_one_prime_ideal nil)
    (R skolem-const-decl "ring_with_one[T, +, *, zero, one]"
     ring_with_one_prime_ideal nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (ring? const-decl "bool" ring_def algebra)
    (ideal_is_coset formula-decl nil ring_cosets_lemmas nil))
   nil
   (prime_ideal_charac existence ""
    "cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)")))
 (prime_ideal_charac_TCC2 0
  (prime_ideal_charac_TCC2-1 nil 3779133952
   ("" (skeep*)
    (("" (lemma "coset_add")
      (("" (inst -1 "R" "P" "x1`1" "x1`2") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((zero formal-const-decl "T" ring_with_one_prime_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (T formal-nonempty-type-decl nil ring_with_one_prime_ideal nil)
    (coset_add formula-decl nil quotient_rings nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def algebra)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (P skolem-const-decl "set[T]" ring_with_one_prime_ideal nil)
    (one formal-const-decl "T" ring_with_one_prime_ideal nil)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (R skolem-const-decl "ring_with_one[T, +, *, zero, one]"
     ring_with_one_prime_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (prime_ideal_charac subtype
    "quotient_ring_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+, ring_with_one_prime_ideal.*].add(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)"
    "[[cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P), cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)] -> cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)]")))
 (prime_ideal_charac_TCC3 0
  (prime_ideal_charac_TCC3-1 nil 3779133952
   ("" (skeep*)
    (("" (lemma "coset_product")
      (("" (inst -1 "R" "P" "x1`1" "x1`2") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((zero formal-const-decl "T" ring_with_one_prime_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (T formal-nonempty-type-decl nil ring_with_one_prime_ideal nil)
    (coset_product formula-decl nil quotient_rings nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def algebra)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (P skolem-const-decl "set[T]" ring_with_one_prime_ideal nil)
    (one formal-const-decl "T" ring_with_one_prime_ideal nil)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (R skolem-const-decl "ring_with_one[T, +, *, zero, one]"
     ring_with_one_prime_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (prime_ideal_charac subtype
    "quotient_ring_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+, ring_with_one_prime_ideal.*].product(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)"
    "[[cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P), cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)] -> cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)]")))
 (prime_ideal_charac_TCC4 0
  (prime_ideal_charac_TCC4-1 nil 3779133952
   ("" (skeep*) (("" (rewrite "ideal_is_coset") nil nil)) nil)
   ((ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra)
    (one formal-const-decl "T" ring_with_one_prime_ideal nil)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (T formal-nonempty-type-decl nil ring_with_one_prime_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (zero formal-const-decl "T" ring_with_one_prime_ideal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (prime_ideal_charac subtype "ring_with_one_prime_ideal.P"
    "cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)")))
 (prime_ideal_charac_TCC5 0
  (prime_ideal_charac_TCC5-1 nil 3779133952
   ("" (skeep*)
    (("" (rewrite "lcoset_iff_coset" :dir rl)
      (("" (expand "left_coset?")
        (("" (inst 1 "one")
          (("" (typepred "R")
            (("" (expand "ring_with_one?")
              (("" (expand "monoid?")
                (("" (expand "monad?")
                  (("" (expand "member") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (+ const-decl "set[T]" cosets_def nil)
    (one formal-const-decl "T" ring_with_one_prime_ideal nil)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (T formal-nonempty-type-decl nil ring_with_one_prime_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (zero formal-const-decl "T" ring_with_one_prime_ideal nil)
    (R skolem-const-decl "ring_with_one[T, +, *, zero, one]"
     ring_with_one_prime_ideal nil)
    (monad? const-decl "bool" monad_def algebra)
    (member const-decl "bool" sets nil)
    (monoid? const-decl "bool" monoid_def algebra)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (prime_ideal_charac subtype
    "((cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].+)(ring_with_one_prime_ideal.one, ring_with_one_prime_ideal.P))"
    "cosets_def[ring_with_one_prime_ideal.T, ring_with_one_prime_ideal.+].coset(ring_with_one_prime_ideal.R, ring_with_one_prime_ideal.P)")))
 (prime_ideal_charac 0
  (prime_ideal_charac-1 nil 3779134090
   ("" (skosimp)
    (("" (prop)
      (("1" (expand "integral_domain_w_one?")
        (("1" (split)
          (("1" (expand "integral_domain?")
            (("1" (split)
              (("1" (rewrite "commutative_quotient_ring") nil nil)
               ("2" (rewrite "prime_ideal_nz_closed") nil nil))
              nil))
            nil)
           ("2" (expand "monad?")
            (("2" (split)
              (("1" (expand "star_closed?" 1)
                (("1" (skosimp)
                  (("1" (expand "member")
                    (("1" (expand "remove" 1)
                      (("1" (expand "member")
                        (("1" (expand "restrict")
                          (("1" (typepred "x!1" "y!1")
                            (("1" (expand "remove" (-2 -4))
                              (("1"
                                (expand "member")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -1 -3)
                                    (("1"
                                      (expand "restrict")
                                      (("1"
                                        (lemma
                                         "prime_ideal_prod_closed")
                                        (("1"
                                          (inst
                                           -1
                                           "R!1"
                                           "P!1"
                                           "x!1"
                                           "y!1")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (expand "remove")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "member")
                (("2" (expand "remove")
                  (("2" (split)
                    (("1" (typepred "R!1")
                      (("1" (expand "prime_ideal?")
                        (("1" (flatten)
                          (("1" (hide -4 -5 -5 -7 -8 -9 2)
                            (("1" (lemma "one_diff_zero_coset")
                              (("1"
                                (inst -1 "R!1" "P!1")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "member")
                      (("2" (expand "restrict")
                        (("2" (flatten)
                          (("2" (hide-all-but (-4 1))
                            (("2" (expand "/")
                              (("2"
                                (rewrite "lcoset_iff_coset" :dir rl)
                                (("2"
                                  (expand "left_coset?")
                                  (("2" (inst 1 "one") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "identity?")
                (("3" (skosimp)
                  (("3" (expand "restrict")
                    (("3" (lemma "quotient_ring_with_one")
                      (("3" (inst -1 "R!1" "P!1")
                        (("3" (expand "ring_with_one?")
                          (("3" (flatten)
                            (("3" (hide -1)
                              (("3"
                                (expand "monoid?")
                                (("3"
                                  (flatten)
                                  (("3"
                                    (hide -2)
                                    (("3"
                                      (expand "monad?")
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (expand "identity?")
                                          (("3"
                                            (inst -3 "x!1")
                                            (("1"
                                              (expand "restrict")
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (expand "restrict")
                                              (("2"
                                                (typepred "x!1")
                                                (("2"
                                                  (hide-all-but (-1 1))
                                                  (("2"
                                                    (expand "/")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "prime_ideal?")
        (("2" (assert)
          (("2" (split)
            (("1" (expand "integral_domain_w_one?")
              (("1" (flatten)
                (("1" (hide -2)
                  (("1" (expand "monad?")
                    (("1" (flatten)
                      (("1" (expand "member")
                        (("1" (expand "remove")
                          (("1" (flatten)
                            (("1" (hide -2 -3 -4 -5 -6 -8 2)
                              (("1"
                                (decompose-equality -1)
                                (("1"
                                  (inst -1 "one")
                                  (("1"
                                    (iff)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (lemma "self_coset")
                                        (("1"
                                          (inst -1 "P!1" "R!1" "one")
                                          (("1"
                                            (expand "ideal?")
                                            (("1"
                                              (expand "left_ideal?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide-all-but
                                                   (-1 -2 -5 1))
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (expand "subset?")
                (("2" (skosimp*)
                  (("2" (expand "member")
                    (("2" (inst -1 "x!1*x!2")
                      (("2" (expand "sum")
                        (("2" (prop)
                          (("1" (expand "integral_domain_w_one?")
                            (("1" (expand "integral_domain?")
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -4 -6)
                                  (("1"
                                    (expand "nz_closed?")
                                    (("1"
                                      (expand "star_closed?")
                                      (("1"
                                        (inst
                                         -4
                                         "+[T,+](x!1,P!1)"
                                         "+[T,+](x!2,P!1)")
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (expand "remove")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma
                                                 "product_charac")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "R!1"
                                                   "P!1"
                                                   "x!1"
                                                   "x!2")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (lemma
                                                       "self_coset")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "P!1"
                                                         "R!1"
                                                         "x!1*x!2")
                                                        (("1"
                                                          (case
                                                           "subring?(P!1, R!1)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-8 1))
                                                            (("2"
                                                              (expand
                                                               "ideal?")
                                                              (("2"
                                                                (expand
                                                                 "left_ideal?")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "B!1")
                                                    (("2"
                                                      (expand "ideal?")
                                                      (("2"
                                                        (expand
                                                         "left_ideal?")
                                                        (("2"
                                                          (expand
                                                           "subring?")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide-all-but
                                                               (-1
                                                                -7
                                                                1))
                                                              (("2"
                                                                (expand
                                                                 "subset?")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "x!2")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (typepred "A!1")
                                                    (("3"
                                                      (expand "ideal?")
                                                      (("3"
                                                        (expand
                                                         "left_ideal?")
                                                        (("3"
                                                          (expand
                                                           "subring?")
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (hide-all-but
                                                               (-1
                                                                -6
                                                                1))
                                                              (("3"
                                                                (expand
                                                                 "subset?")
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "x!1")
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "R!1(x!2)")
                                          (("1"
                                            (split)
                                            (("1"
                                              (rewrite
                                               "lcoset_iff_coset"
                                               :dir
                                               rl)
                                              (("1"
                                                (expand "left_coset?")
                                                (("1"
                                                  (hide-all-but (-1 1))
                                                  (("1"
                                                    (inst 1 "x!2")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "remove")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (lemma "self_coset")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "P!1"
                                                     "R!1"
                                                     "x!2")
                                                    (("1"
                                                      (expand "ideal?")
                                                      (("1"
                                                        (expand
                                                         "left_ideal?")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (hide-all-but
                                                             (-1
                                                              -2
                                                              -9
                                                              2))
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "member")
                                                  (("2"
                                                    (expand "restrict")
                                                    (("2"
                                                      (expand "/")
                                                      (("2"
                                                        (rewrite
                                                         "lcoset_iff_coset"
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "left_coset?")
                                                          (("2"
                                                            (hide-all-but
                                                             (-1 1))
                                                            (("2"
                                                              (inst
                                                               1
                                                               "x!2")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "B!1")
                                            (("2"
                                              (expand "ideal?")
                                              (("2"
                                                (expand "left_ideal?")
                                                (("2"
                                                  (expand "subring?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 -7 1))
                                                      (("2"
                                                        (expand
                                                         "subset?")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x!2")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (case
                                           "R!1(x!1)"
                                           "subring?(P!1,R!1)")
                                          (("1"
                                            (split)
                                            (("1"
                                              (rewrite
                                               "lcoset_iff_coset"
                                               :dir
                                               rl)
                                              (("1"
                                                (expand "left_coset?")
                                                (("1"
                                                  (hide-all-but (-2 1))
                                                  (("1"
                                                    (inst 1 "x!1")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "remove")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (lemma "self_coset")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "P!1"
                                                     "R!1"
                                                     "x!1")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -2 1 2))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "member")
                                                  (("2"
                                                    (expand "restrict")
                                                    (("2"
                                                      (expand "/")
                                                      (("2"
                                                        (rewrite
                                                         "lcoset_iff_coset"
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "left_coset?")
                                                          (("2"
                                                            (hide-all-but
                                                             (-2 1))
                                                            (("2"
                                                              (inst
                                                               1
                                                               "x!1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-7 1))
                                            (("2"
                                              (expand "ideal?")
                                              (("2"
                                                (expand "left_ideal?")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (typepred "A!1")
                                            (("3"
                                              (expand "ideal?")
                                              (("3"
                                                (expand "left_ideal?")
                                                (("3"
                                                  (expand "subring?")
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (hide-all-but
                                                       (-1 -6 1))
                                                      (("3"
                                                        (expand
                                                         "subset?")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "x!1")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-1 -2 1))
                            (("2" (inst 1 "x!1" "x!2") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero formal-const-decl "T" ring_with_one_prime_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_with_one_prime_ideal nil)
    (T formal-nonempty-type-decl nil ring_with_one_prime_ideal nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring_with_one nonempty-type-eq-decl nil ring_with_one algebra)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (one formal-const-decl "T" ring_with_one_prime_ideal nil)
    (commutative_ring? const-decl "bool" ring_def algebra)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (commutative_quotient_ring formula-decl nil quotient_rings nil)
    (prime_ideal_nz_closed formula-decl nil ring_with_one_prime_ideal
     nil)
    (integral_domain? const-decl "bool" integral_domain_def algebra)
    (remove const-decl "set" sets nil)
    (restrict const-decl "R" restrict nil) nil
    (prime_ideal? const-decl "bool" ring_prime_ideal_def nil) nil
    (prime_ideal type-eq-decl nil ring_prime_ideal_def nil)
    (prime_ideal_prod_closed formula-decl nil ring_prime_ideal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (coset? const-decl "bool" cosets_def nil)
    (coset type-eq-decl nil cosets_def nil)
    (setof type-eq-decl nil defined_types nil)
    (/ const-decl "setof[set[T]]" quotient_ring_def nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def algebra)
    (left_coset? const-decl "bool" cosets_def nil) nil
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (one_diff_zero_coset formula-decl nil quotient_rings_with_one nil)
    (quotient_ring_with_one formula-decl nil quotient_rings_with_one
     nil)
    nil (monoid? const-decl "bool" monoid_def algebra)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def algebra)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (subring? const-decl "bool" ring_def algebra)
    (TRUE const-decl "bool" booleans nil)
    (product_charac formula-decl nil quotient_rings nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (nz_closed? const-decl "bool" ring_nz_closed_def algebra) nil nil
    (sum const-decl "set[T]" cosets_def nil)
    (subset? const-decl "bool" sets nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (self_coset formula-decl nil ring_cosets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil)))


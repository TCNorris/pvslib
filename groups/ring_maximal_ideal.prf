(ring_maximal_ideal
 (IMP_ring_prime_ideal_TCC1 0
  (IMP_ring_prime_ideal_TCC1-1 nil 3793987454
   ("" (rewrite "fullset_is_ring") nil nil)
   ((fullset_is_ring formula-decl nil ring_maximal_ideal nil)) nil))
 (maximal_prime_ideal_TCC1 0
  (maximal_prime_ideal_TCC1-1 nil 3777908665 ("" (subtype-tcc) nil nil)
   ((maximal_ideal type-eq-decl nil ring_maximal_ideal_def nil)
    (maximal_ideal? const-decl "bool" ring_maximal_ideal_def nil)
    (commutative_ring? const-decl "bool" ring_def "algebra/")
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (/= const-decl "boolean" notequal nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (right_ideal? const-decl "bool" ring_ideal_def nil)
    (right_swallow? const-decl "bool" ring_ideal_def nil)
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (left_swallow? const-decl "bool" ring_ideal_def nil)
    (subring? const-decl "bool" ring_def "algebra/")
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def "algebra/")
    (zero formal-const-decl "T" ring_maximal_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_maximal_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_maximal_ideal nil)
    (T formal-nonempty-type-decl nil ring_maximal_ideal nil)
    (plus_zero formula-decl nil ring "algebra/")
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring "algebra/")
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def "algebra/")
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def "algebra/")
    (inv_exists? const-decl "bool" group_def "algebra/")
    (group? const-decl "bool" group_def "algebra/")
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def "algebra/")
    (left_distributive? const-decl "bool" operator_defs_more
     "algebra/")
    (right_distributive? const-decl "bool" operator_defs_more
     "algebra/")
    (ring? const-decl "bool" ring_def "algebra/"))
   nil))
 (maximal_prime_ideal 0
  (maximal_prime_ideal-1 nil 3777908794
   ("" (skosimp)
    (("" (typepred "M!1")
      (("" (expand "maximal_ideal?")
        (("" (rewrite "prime_ideal_prop1")
          (("" (skosimp)
            (("" (copy -3)
              ((""
                (inst -1
                 "sum[T,+](M!1, commutative_one_gen(R!1)(a!1))")
                (("1"
                  (case "subset?(M!1,
              sum[T, +]
                  (M!1,
                   extend[T, (R!1), bool, FALSE]
                       (commutative_one_gen(R!1)(a!1))))")
                  (("1" (assert)
                    (("1"
                      (case "subset?(sum[T, +]
                  (M!1,
                   extend[T, (R!1), bool, FALSE]
                       (commutative_one_gen(R!1)(a!1))),
              R!1)")
                      (("1" (assert)
                        (("1" (split)
                          (("1" (decompose-equality -1)
                            (("1" (inst -1 "a!1")
                              (("1"
                                (iff)
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide-all-but (-4 1 2))
                                    (("1"
                                      (expand "sum")
                                      (("1"
                                        (inst 2 "zero" "a!1")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (expand "extend")
                                          (("2"
                                            (expand
                                             "commutative_one_gen")
                                            (("2"
                                              (inst 1 "zero" "1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "times_int_one")
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "zero_is_member_R")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "ideal?")
                                          (("3"
                                            (expand "left_ideal?")
                                            (("3"
                                              (expand "subring?")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (hide-all-but (-2 1))
                                                  (("3"
                                                    (lemma
                                                     "zero_is_member_R")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (inst -6
                             "sum[T,+](M!1,commutative_one_gen(R!1)(b!1))")
                            (("1"
                              (case "subset?(M!1,
              sum[T, +]
                  (M!1,
                   extend[T, (R!1), bool, FALSE]
                       (commutative_one_gen(R!1)(b!1))))")
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "subset?(sum[T, +]
                  (M!1,
                   extend[T, (R!1), bool, FALSE]
                       (commutative_one_gen(R!1)(b!1))),
              R!1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -1 -2)
                                      (("1"
                                        (split)
                                        (("1"
                                          (decompose-equality -1)
                                          (("1"
                                            (inst -1 "b!1")
                                            (("1"
                                              (iff)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide-all-but
                                                   (-5 1 2))
                                                  (("1"
                                                    (expand "sum")
                                                    (("1"
                                                      (inst
                                                       2
                                                       "zero"
                                                       "b!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "extend")
                                                        (("2"
                                                          (expand
                                                           "commutative_one_gen")
                                                          (("2"
                                                            (inst
                                                             1
                                                             "zero"
                                                             "1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 "times_int_one")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               2)
                                                              (("2"
                                                                (lemma
                                                                 "zero_is_member_R")
                                                                (("2"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "R!1")
                                                                    (("2"
                                                                      (expand
                                                                       "commutative_ring?")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         "ideal?")
                                                        (("3"
                                                          (expand
                                                           "left_ideal?")
                                                          (("3"
                                                            (expand
                                                             "subring?")
                                                            (("3"
                                                              (flatten)
                                                              (("3"
                                                                (hide-all-but
                                                                 (-1
                                                                  1))
                                                                (("3"
                                                                  (lemma
                                                                   "zero_is_member_R")
                                                                  (("3"
                                                                    (inst?)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case
                                           "sum[T, *]( sum[T, +]
          (M!1,
           extend[T, (R!1), bool, FALSE](commutative_one_gen(R!1)(a!1))),  sum[T, +]
          (M!1,
           extend[T, (R!1), bool, FALSE](commutative_one_gen(R!1)(b!1)))) = R!1")
                                          (("1"
                                            (hide -2 -3 -8)
                                            (("1"
                                              (lemma
                                               "subset_prod_one_gen_ideal_prop2")
                                              (("1"
                                                (inst
                                                 -1
                                                 "R!1"
                                                 "a!1"
                                                 "b!1"
                                                 "M!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -2 -1)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (case
                                                         "subset?(M!1,R!1)")
                                                        (("1"
                                                          (rewrite
                                                           "subset_antisymmetric")
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "subset?")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (hide-all-but
                                                               (-1
                                                                -4
                                                                -6
                                                                1))
                                                              (("2"
                                                                (reveal
                                                                 -7)
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (inst
                                                                     -2
                                                                     "x!1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 -2 -7 1))
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-6 1))
                                    (("2"
                                      (lemma "sum_ideal_ideal")
                                      (("2"
                                        (inst
                                         -1
                                         "M!1"
                                         "commutative_one_gen(R!1)(b!1)"
                                         "R!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite
                                             "commutative_one_gen_is_ideal")
                                            (("2"
                                              (expand "ideal?")
                                              (("2"
                                                (expand "left_ideal?")
                                                (("2"
                                                  (expand "subring?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (expand "subset?")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (expand "sum")
                                        (("2"
                                          (inst 1 "x!1" "zero")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand "extend")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (expand
                                                 "commutative_one_gen")
                                                (("1"
                                                  (inst 1 "zero" "0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "times")
                                                      (("1"
                                                        (expand "^")
                                                        (("1"
                                                          (expand
                                                           "power")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "R!1")
                                                (("2"
                                                  (expand
                                                   "commutative_ring?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (lemma
                                                       "zero_is_member_R")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-5 1))
                              (("2"
                                (lemma "sum_ideal_ideal")
                                (("2"
                                  (inst
                                   -1
                                   "M!1"
                                   "commutative_one_gen(R!1)(b!1)"
                                   "R!1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide -1 2)
                                      (("2"
                                        (lemma
                                         "commutative_one_gen_is_ideal")
                                        (("2"
                                          (inst -1 "R!1" "b!1")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-4 1))
                        (("2" (lemma "sum_ideal_ideal")
                          (("2"
                            (inst -1 "M!1"
                             "commutative_one_gen(R!1)(a!1)" "R!1")
                            (("2" (assert)
                              (("2"
                                (lemma "commutative_one_gen_is_ideal")
                                (("2"
                                  (inst -1 "R!1" "a!1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide -1 -3)
                                      (("2"
                                        (expand "ideal?")
                                        (("2"
                                          (expand "left_ideal?")
                                          (("2"
                                            (expand "subring?")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "subset?")
                      (("2" (skosimp)
                        (("2" (expand "member")
                          (("2" (expand "sum")
                            (("2" (inst 1 "x!1" "zero")
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "extend")
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "commutative_one_gen")
                                    (("1"
                                      (inst 1 "zero" "0")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "times")
                                          (("1"
                                            (expand "^")
                                            (("1"
                                              (expand "power")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1)
                                    (("2"
                                      (lemma "zero_is_member_R")
                                      (("2"
                                        (inst?)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (typepred "R!1")
                                          (("2"
                                            (expand
                                             "commutative_ring?")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-2 1))
                  (("2" (lemma "sum_ideal_ideal")
                    (("2"
                      (inst -1 "M!1" "commutative_one_gen(R!1)(a!1)"
                       "R!1")
                      (("2" (assert)
                        (("2" (lemma "commutative_one_gen_is_ideal")
                          (("2" (inst -1 "R!1" "a!1") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((maximal_ideal type-eq-decl nil ring_maximal_ideal_def nil)
    (commutative_ring? const-decl "bool" ring_def "algebra/")
    (maximal_ideal? const-decl "bool" ring_maximal_ideal_def nil)
    (ring? const-decl "bool" ring_def "algebra/")
    (zero formal-const-decl "T" ring_maximal_ideal nil)
    (* formal-const-decl "[T, T -> T]" ring_maximal_ideal nil)
    (+ formal-const-decl "[T, T -> T]" ring_maximal_ideal nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_maximal_ideal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (prime_ideal_prop1 formula-decl nil ring_prime_ideal nil)
    (ring nonempty-type-eq-decl nil ring "algebra/")
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subring? const-decl "bool" ring_def "algebra/")
    (left_ideal? const-decl "bool" ring_ideal_def nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (times_int_one formula-decl nil ring_basic_properties nil)
    (zero_times formula-decl nil ring "algebra/")
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (zero_plus formula-decl nil ring "algebra/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subset_prod_one_gen_ideal_prop2 formula-decl nil
     ring_one_generator nil)
    (TRUE const-decl "bool" booleans nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (sum_ideal_ideal formula-decl nil ring_cosets_lemmas nil)
    (commutative_one_gen_is_ideal formula-decl nil ring_one_generator
     nil)
    (x!1 skolem-const-decl "T" ring_maximal_ideal nil)
    (plus_zero formula-decl nil ring "algebra/")
    (times const-decl "T" ring_basic_properties nil)
    (power def-decl "T" monoid_def "algebra/")
    (^ const-decl "T" group "algebra/")
    (b!1 skolem-const-decl "(R!1)" ring_maximal_ideal nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (x!1 skolem-const-decl "T" ring_maximal_ideal nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (sum const-decl "set[T]" cosets_def nil)
    (R!1 skolem-const-decl "(commutative_ring?)" ring_maximal_ideal
     nil)
    (M!1 skolem-const-decl "maximal_ideal[T, +, *, zero](R!1)"
     ring_maximal_ideal nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (commutative_one_gen const-decl "set[(R)]" ring_one_generator nil)
    (a!1 skolem-const-decl "(R!1)" ring_maximal_ideal nil))
   shostak)))


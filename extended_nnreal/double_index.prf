(double_index
 (single_double 0
  (single_double-1 nil 3397793933
   ("" (skosimp)
    (("" (expand "double_index")
      (("" (expand "single_index")
        (("" (expand "o ")
          (("" (apply-extensionality :hide? t)
            (("" (rewrite "double_index_n_ij") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((double_index const-decl "[[nat, nat] -> T]" double_index nil)
    (O const-decl "T3" function_props nil)
    (double_index_n_ij formula-decl nil code_product nil)
    (double_index_n const-decl "nat" code_product nil)
    (double_index_i const-decl "nat" code_product nil)
    (double_index_j const-decl "nat" code_product nil)
    (T formal-type-decl nil double_index nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (single_index const-decl "[nat -> T]" double_index nil))
   shostak))
 (double_single 0
  (double_single-1 nil 3397793981
   ("" (skosimp)
    (("" (expand "single_index")
      (("" (expand "double_index")
        (("" (apply-extensionality :hide? t)
          (("" (expand "o")
            (("" (lemma "double_index_ij_n" ("i" "x!1" "j" "x!2"))
              (("" (flatten)
                (("" (replace -1)
                  (("" (replace -2) (("" (propax) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((single_index const-decl "[nat -> T]" double_index nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil double_index nil)
    (double_index_n const-decl "nat" code_product nil)
    (double_index_j const-decl "nat" code_product nil)
    (double_index_i const-decl "nat" code_product nil)
    (O const-decl "T3" function_props nil)
    (double_index_ij_n formula-decl nil code_product nil)
    (double_index const-decl "[[nat, nat] -> T]" double_index nil))
   shostak)))


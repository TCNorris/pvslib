(real_lebesgue_scaf
 (limit_TCC1 0
  (limit_TCC1-1 nil 3396062613
   ("" (skosimp*)
    (("" (expand "convergent?")
      (("" (expand "convergence")
        (("" (split)
          (("1" (skosimp*)
            (("1" (inst + "l!1")
              (("1" (rewrite "metric_convergence_def" *)
                (("1" (expand "metric_converges_to")
                  (("1" (skosimp)
                    (("1" (inst - "r!1")
                      (("1" (skosimp)
                        (("1" (inst + "n!1")
                          (("1" (skosimp)
                            (("1" (inst - "i!1")
                              (("1"
                                (expand "ball")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst + "l!1")
              (("2" (skosimp)
                (("2" (rewrite "metric_convergence_def" *)
                  (("1" (expand "metric_converges_to")
                    (("1" (inst - "epsilon!1")
                      (("1" (skosimp)
                        (("1" (inst + "n!1")
                          (("1" (skosimp)
                            (("1" (inst - "i!1")
                              (("1"
                                (expand "ball")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergent? const-decl "bool" topological_convergence "topology/")
    (convergent? const-decl "bool" convergence_sequences "analysis/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (metric_converges_to const-decl "bool" metric_space_def
     "metric_space/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology "metric_space/")
    nil (member const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (ball const-decl "set[T]" metric_space_def "metric_space/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (metric_convergence_def formula-decl nil metric_space
     "metric_space/")
    (nnreal type-eq-decl nil real_types nil)
    (metric? const-decl "bool" metric_def "metric_space/")
    (metric_zero? const-decl "bool" metric_def "metric_space/")
    (metric_symmetric? const-decl "bool" metric_def "metric_space/")
    (metric_triangle? const-decl "bool" metric_def "metric_space/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (convergence const-decl "bool" convergence_sequences "analysis/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (limit subtype "convergence_sequences.limit"
    "[convergent[real, (metric_induced_topology[real, (LAMBDA (x, y: real): abs(x - y))])] -> real]")))
 (lebesgue_outer_measure_TCC1 0
  (lebesgue_outer_measure_TCC1-2 nil 3769715180
   (""
    (name-replace "L" "(LAMBDA A:
               x_inf({z |
                        EXISTS I:
                          x_le(x_sum(o[nat, interval, extended_nnreal]
                                         (x_length, I)),
                               z)
                           AND subset?[real](A, IUnion[nat, real](I))}))")
    (("" (expand "outer_measure?")
      (("" (case-replace "om_empty?(L)")
        (("1" (case-replace "om_increasing?(L)")
          (("1" (expand "om_countably_subadditive?")
            (("1" (skosimp)
              (("1" (expand "x_le")
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (case "forall (n:nat): L(X!1(n))`1")
                      (("1"
                        (case "forall (n:nat,r:posreal): exists I: subset?[real](X!1(n),IUnion[nat,real](I)) & x_lt(x_sum(LAMBDA (n: nat):x_length(I(n))),x_add((TRUE,r/2^n),L(X!1(n))))")
                        (("1"
                          (case "forall (r:posreal): EXISTS I:
                           subset?[real](IUnion(X!1), IUnion[nat, real](I)) &
                            x_lt(L(IUnion(X!1)),
                                 x_add((TRUE, r),x_sum(L o X!1)))")
                          (("1" (hide -2)
                            (("1" (inst-cp - "1")
                              (("1"
                                (skosimp)
                                (("1"
                                  (expand "x_add" -3)
                                  (("1"
                                    (expand "x_lt" -3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "x_sum(L o X!1)`2<L(IUnion(X!1))`2")
                                          (("1"
                                            (hide -3 -5 1)
                                            (("1"
                                              (inst
                                               -
                                               "L(IUnion(X!1))`2-x_sum(L o X!1)`2")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (expand "x_add")
                                                  (("1"
                                                    (expand "x_lt")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (skosimp)
                              (("2"
                                (case
                                 "EXISTS I:
                           subset?[real](IUnion(X!1), IUnion[nat, real](I)) &
                            x_lt(L(IUnion(X!1)),x_sum(LAMBDA n: x_add((TRUE, (r!1/2) / 2 ^ n), L(X!1(n)))))")
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (inst + "I!1")
                                    (("1"
                                      (hide -3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "x_eq(x_sum(LAMBDA n: x_add((TRUE, (r!1 / 2) / 2 ^ n), L(X!1(n)))),x_add((TRUE, r!1), x_sum(L o X!1)))")
                                          (("1"
                                            (name-replace
                                             "LHS"
                                             "L(IUnion(X!1))")
                                            (("1"
                                              (name-replace
                                               "MID"
                                               "x_sum(LAMBDA n: x_add((TRUE, (r!1 / 2) / 2 ^ n), L(X!1(n))))")
                                              (("1"
                                                (name-replace
                                                 "RHS"
                                                 "x_add((TRUE, r!1), x_sum(L o X!1))")
                                                (("1"
                                                  (hide-all-but
                                                   (-1 -3 1))
                                                  (("1"
                                                    (expand "x_lt")
                                                    (("1"
                                                      (expand "x_eq")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 -2 2)
                                            (("2"
                                              (expand "x_add")
                                              (("2"
                                                (expand "x_eq")
                                                (("2"
                                                  (expand "o ")
                                                  (("2"
                                                    (case-replace
                                                     "x_sum(LAMBDA n:
                                IF L(X!1(n))`1 THEN (TRUE, (r!1 / 2) / 2 ^ n + L(X!1(n))`2)
                                ELSE (FALSE, 0)
                                ENDIF)`1")
                                                    (("1"
                                                      (expand "x_sum")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (replace
                                                             -5)
                                                            (("1"
                                                              (replace
                                                               -3)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "const_geometric_series"
                                                                   ("x"
                                                                    "1/2"
                                                                    "c"
                                                                    "r!1/2"))
                                                                  (("1"
                                                                    (case-replace
                                                                     "r!1 / 2 / (1 - 1 / 2)=r!1")
                                                                    (("1"
                                                                      (expand
                                                                       "abs"
                                                                       -2)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "convergent?")
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (lemma
                                                                               "convergence_sequences.limit_def"
                                                                               ("v"
                                                                                "series(LAMBDA (i:nat):
                                           IF L(X!1(i))`1 THEN (r!1 / 2) / 2 ^ i + L(X!1(i))`2
                                           ELSE 0
                                           ENDIF)"
                                                                                "l"
                                                                                "l!2"))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1
                                                                                     -4
                                                                                     -7
                                                                                     -8)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "convergence_sequences.limit_def"
                                                                                       ("v"
                                                                                        "series(LAMBDA (i:nat):
                                           L(X!1(i))`2)"
                                                                                        "l"
                                                                                        "l!1"))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "cnv_seq_sum"
                                                                                               ("s1"
                                                                                                "series(LAMBDA (i:nat): L(X!1(i))`2)"
                                                                                                "l1"
                                                                                                "l!1"
                                                                                                "s2"
                                                                                                "series(r!1 / 2 * geometric(1 / 2))"
                                                                                                "l2"
                                                                                                "r!1"))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "series_sum")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "+"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (case-replace
                                                                                                       "(LAMBDA (i:nat):
                                                 IF L(X!1(i))`1
                                                   THEN (r!1 / 2) / 2 ^ i + L(X!1(i))`2
                                                 ELSE 0
                                                 ENDIF)=(LAMBDA (x: nat):
                                                 (r!1 / 2 * geometric(1 / 2))(x) + L(X!1(x))`2)")
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1
                                                                                                         -6)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "convergence_sequences.unique_limit"
                                                                                                           ("u"
                                                                                                            "series(LAMBDA (x: nat):
                                                    (r!1 / 2 * geometric(1 / 2))(x) + L(X!1(x))`2)"
                                                                                                            "l1"
                                                                                                            "l!2"
                                                                                                            "l2"
                                                                                                            "l!1+r!1"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (apply-extensionality
                                                                                                         :hide?
                                                                                                         t)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -5
                                                                                                           "x!1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "geometric")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "*")
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "inv_expt")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "x_sum")
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "i!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "geometric_conv"
                                                             ("x"
                                                              "1/2"))
                                                            (("2"
                                                              (expand
                                                               "abs")
                                                              (("2"
                                                                (lemma
                                                                 "series_scal"
                                                                 ("c"
                                                                  "r!1/2"
                                                                  "a"
                                                                  "geometric(1 / 2)"))
                                                                (("2"
                                                                  (lemma
                                                                   "convergent_scal"
                                                                   ("s1"
                                                                    "series(geometric(1 / 2))"
                                                                    "a"
                                                                    "r!1/2"))
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -2)
                                                                      (("2"
                                                                        (hide
                                                                         -2
                                                                         -3)
                                                                        (("2"
                                                                          (lemma
                                                                           "convergent_sum"
                                                                           ("s1"
                                                                            "series(LAMBDA n: r!1 / 2 * geometric(1 / 2)(n))"
                                                                            "s2"
                                                                            "series(LAMBDA n: L(X!1(n))`2)"))
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               -2
                                                                               -3)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "series_sum")
                                                                                (("2"
                                                                                  (expand
                                                                                   "+"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "(LAMBDA (x: nat):
                                                r!1 / 2 * geometric(1 / 2)(x) + L(X!1(x))`2)=(LAMBDA n:
                                                IF L(X!1(n))`1
                                                  THEN (r!1 / 2) / 2 ^ n + L(X!1(n))`2
                                                ELSE 0
                                                ENDIF)")
                                                                                    (("2"
                                                                                      (apply-extensionality
                                                                                       :hide?
                                                                                       t)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "geometric")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "inv_expt"
                                                                                               1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (lemma
                                     "posreal_div_posreal_is_posreal"
                                     ("px" "r!1" "py" "2"))
                                    (("2"
                                      (inst - "_" "r!1/2")
                                      (("2"
                                        (name-replace "R" "r!1/2")
                                        (("2"
                                          (name
                                           "I_n"
                                           "lambda n: choose({I | subset?[real](X!1(n), IUnion[nat, real](I)) &
                                x_lt(x_sum(LAMBDA (n: nat): x_length(I(n))),
                                     x_add((TRUE, R / 2 ^ n), L(X!1(n))))})")
                                          (("1"
                                            (case
                                             "forall n: subset?[real](X!1(n), IUnion[nat, real](I_n(n))) &
                                  x_lt(x_sum(LAMBDA (m: nat): x_length(I_n(n)(m))),
                                       x_add((TRUE, R / 2 ^ n), L(X!1(n))))")
                                            (("1"
                                              (lemma
                                               "double_index_n_ij")
                                              (("1"
                                                (lemma
                                                 "double_index_ij_n")
                                                (("1"
                                                  (name-replace
                                                   "NN"
                                                   "double_index_n")
                                                  (("1"
                                                    (name-replace
                                                     "II"
                                                     "double_index_i")
                                                    (("1"
                                                      (name-replace
                                                       "JJ"
                                                       "double_index_j")
                                                      (("1"
                                                        (inst
                                                         +
                                                         "lambda (n:nat): I_n(II(n))(JJ(n))")
                                                        (("1"
                                                          (case-replace
                                                           "subset?[real]
                              (IUnion(X!1),
                               IUnion[nat, real](LAMBDA (n: nat): I_n(II(n))(JJ(n))))")
                                                          (("1"
                                                            (hide -5)
                                                            (("1"
                                                              (case
                                                               "x_lt(x_sum(LAMBDA n:x_sum(LAMBDA (m: nat): x_length(I_n(n)(m)))),x_sum(LAMBDA n: x_add((TRUE, R/2^n), L(X!1(n)))))")
                                                              (("1"
                                                                (case
                                                                 "x_le(L(IUnion(X!1)),x_sum(LAMBDA n: x_sum(LAMBDA (m: nat): x_length(I_n(n)(m)))))")
                                                                (("1"
                                                                  (name-replace
                                                                   "LHS"
                                                                   "L(IUnion(X!1))")
                                                                  (("1"
                                                                    (name-replace
                                                                     "RHS"
                                                                     "x_sum(LAMBDA n: x_add((TRUE, R / 2 ^ n), L(X!1(n))))")
                                                                    (("1"
                                                                      (name-replace
                                                                       "MID"
                                                                       "x_sum(LAMBDA n: x_sum(LAMBDA (m: nat): x_length(I_n(n)(m))))")
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-1
                                                                          -2
                                                                          1))
                                                                        (("1"
                                                                          (expand
                                                                           "x_le")
                                                                          (("1"
                                                                            (expand
                                                                             "x_lt")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -1
                                                                   2)
                                                                  (("2"
                                                                    (lemma
                                                                     "double_x_sum"
                                                                     ("U"
                                                                      "lambda (i,j:nat): x_length(I_n(i)(j))"))
                                                                    (("2"
                                                                      (case
                                                                       "x_le(L(IUnion(X!1)),x_sum(single_index(LAMBDA (i, j: nat): x_length(I_n(i)(j)))))")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (name-replace
                                                                           "LHS"
                                                                           "L(IUnion(X!1))")
                                                                          (("1"
                                                                            (name-replace
                                                                             "RHS"
                                                                             "x_sum(LAMBDA n: x_sum(LAMBDA (m: nat): x_length(I_n(n)(m))))")
                                                                            (("1"
                                                                              (name-replace
                                                                               "MID"
                                                                               "x_sum(single_index(LAMBDA (i, j: nat): x_length(I_n(i)(j))))")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  1))
                                                                                (("1"
                                                                                  (expand
                                                                                   "x_eq")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "x_le")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -1
                                                                         2)
                                                                        (("2"
                                                                          (case
                                                                           "forall A,I: subset?(A,IUnion(I)) => x_le(L(A),x_sum(x_length o I))")
                                                                          (("1"
                                                                            (expand
                                                                             "single_index")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "IUnion(X!1)"
                                                                               "lambda n: I_n(II(n))(JJ(n))")
                                                                              (("1"
                                                                                (replace
                                                                                 -2)
                                                                                (("1"
                                                                                  (expand
                                                                                   "o"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "JJ")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "II")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (expand
                                                                                 "x_le")
                                                                                (("2"
                                                                                  (expand
                                                                                   "o ")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "L")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "o ")
                                                                                      (("2"
                                                                                        (case-replace
                                                                                         "x_sum(LAMBDA (x: nat): x_length(I!1(x)))`1")
                                                                                        (("1"
                                                                                          (case-replace
                                                                                           "x_inf({z |
                                                EXISTS I:
                                                  x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), z) AND
                                                   subset?[real](A!1, IUnion[nat, real](I))})`1")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "x_inf")
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "FORALL (x_1:
                                                     ({z |
                                                         EXISTS I:
                                                           x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), z)
                                                            AND subset?[real](A!1, IUnion[nat, real](I))})):
                                             NOT x_1`1")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 1
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (skosimp)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "x!1")
                                                                                                      (("1"
                                                                                                        (skosimp)
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "glb({z_1: real |
                                               EXISTS (x_1: extended_nnreal):
                                                 (EXISTS I:
                                                    x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                                                     subset?[real](A!1, IUnion[nat, real](I)))
                                                  AND x_1`1 AND x_1`2 = z_1})")
                                                                                                          (("1"
                                                                                                            (name-replace
                                                                                                             "GLB"
                                                                                                             "glb({z_1: real |
                                                 EXISTS (x_1: extended_nnreal):
                                                   (EXISTS I:
                                                      x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                                                       subset?[real](A!1, IUnion[nat, real](I)))
                                                    AND x_1`1 AND x_1`2 = z_1})")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "greatest_lower_bound?")
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "lower_bound?")
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "x_sum(LAMBDA (x: nat): x_length(I!1(x)))`2")
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           +
                                                                                                                           "x_sum(LAMBDA (x: nat): x_length(I!1(x)))")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -4)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               +
                                                                                                                               "I!1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "x_le")
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "nonempty?")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "empty?")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "member")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "x!1`2")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         +
                                                                                                                         "x!1")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "bounded_below?")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   +
                                                                                                                   "0")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "lower_bound?")
                                                                                                                    (("2"
                                                                                                                      (skosimp)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "s!1")
                                                                                                                        (("2"
                                                                                                                          (skosimp)
                                                                                                                          (("2"
                                                                                                                            (skosimp)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "x_inf")
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "x_sum(LAMBDA (x: nat): x_length(I!1(x)))")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "I!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "x_le")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "x_sum"
                                                                   1
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     "x_sum"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "x_lt"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (case-replace
                                                                         "FORALL (i:nat): x_add((TRUE, R / 2 ^ i), L(X!1(i)))`1")
                                                                        (("1"
                                                                          (case-replace
                                                                           "FORALL (i:nat): x_sum(LAMBDA (m: nat): x_length(I_n(i)(m)))`1")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (case-replace
                                                                                 "convergence_sequences.convergent?(series(LAMBDA (i:nat):
                                                         x_add((TRUE, R / 2 ^ i), L(X!1(i)))`2))")
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "convergence_sequences.convergent?(series(LAMBDA (i:nat):
                                                            x_sum(LAMBDA
                                                                  (m: nat):
                                                                  x_length(I_n(i)(m)))`2))")
                                                                                  (("1"
                                                                                    (case
                                                                                     "forall (nna,nnb:sequence[nnreal]): convergence_sequences.convergent?(series(nna))&convergence_sequences.convergent?(series(nnb))&(forall n: nna(n)<nnb(n)) => convergence_sequences.limit(series(nna))<convergence_sequences.limit(series(nnb))")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "LAMBDA (i:nat): x_sum(LAMBDA (m: nat): x_length(I_n(i)(m)))`2"
                                                                                       "LAMBDA (i:nat): x_add((TRUE, R / 2 ^ i), L(X!1(i)))`2")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -3)
                                                                                          (("1"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               -1
                                                                                               -2
                                                                                               2)
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -6
                                                                                                   "n!1")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "n!1")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "n!1")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "x_lt")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "series_first"
                                                                                           1)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "series_first"
                                                                                             1)
                                                                                            (("2"
                                                                                              (case
                                                                                               "forall (nna:sequence[nnreal]):series(nna, 1)=series(lambda n: if n=0 then 0 else nna(n) endif)")
                                                                                              (("1"
                                                                                                (inst-cp
                                                                                                 -
                                                                                                 "nna!1")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "nnb!1")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "convergent_diff"
                                                                                                         ("s1"
                                                                                                          "series(LAMBDA n: IF n = 0 THEN 0 ELSE nnb!1(n) ENDIF)"
                                                                                                          "s2"
                                                                                                          "series(LAMBDA n: IF n = 0 THEN 0 ELSE nna!1(n) ENDIF)"))
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "convergence_sequences.convergent?(series(LAMBDA n: IF n = 0 THEN 0 ELSE nnb!1(n) ENDIF))")
                                                                                                          (("1"
                                                                                                            (case-replace
                                                                                                             "convergence_sequences.convergent?(series(LAMBDA n: IF n = 0 THEN 0 ELSE nna!1(n) ENDIF))")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "series_diff")
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "limit_nonneg"
                                                                                                                 ("nna"
                                                                                                                  "series((LAMBDA n: IF n = 0 THEN 0 ELSE nnb!1(n) ENDIF) -
                                                                  (LAMBDA n: IF n = 0 THEN 0 ELSE nna!1(n) ENDIF))"))
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -4)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "series_diff"
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "limit_diff"
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "0")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   (-8
                                                                                                                    1))
                                                                                                                  (("2"
                                                                                                                    (skolem
                                                                                                                     +
                                                                                                                     ("n!1"))
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "series")
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "sigma_ge_0"
                                                                                                                         ("low"
                                                                                                                          "0"
                                                                                                                          "high"
                                                                                                                          "n!1"
                                                                                                                          "F"
                                                                                                                          "LAMBDA (x: nat):
                                                         IF x = 0 THEN 0 ELSE nnb!1(x) ENDIF -
                                                          IF x = 0 THEN 0 ELSE nna!1(x) ENDIF"))
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "-")
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (skosimp)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "n!2")
                                                                                                                                (("2"
                                                                                                                                  (lift-if
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               (-5
                                                                                                                1
                                                                                                                -4))
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "end_series_conv"
                                                                                                                 ("a"
                                                                                                                  "nna!1"
                                                                                                                  "m"
                                                                                                                  "1"))
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (lemma
                                                                                                             "end_series_conv"
                                                                                                             ("a"
                                                                                                              "nnb!1"
                                                                                                              "m"
                                                                                                              "1"))
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (skosimp)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "series")
                                                                                                    (("2"
                                                                                                      (apply-extensionality
                                                                                                       :hide?
                                                                                                       t)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "sigma_first"
                                                                                                         ("high"
                                                                                                          "x!1"
                                                                                                          "low"
                                                                                                          "0"
                                                                                                          "F"
                                                                                                          "LAMBDA n: IF n = 0 THEN 0 ELSE nna!2(n) ENDIF"))
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "sigma_eq"
                                                                                                             ("low"
                                                                                                              "1"
                                                                                                              "high"
                                                                                                              "x!1"
                                                                                                              "F"
                                                                                                              "nna!2"
                                                                                                              "G"
                                                                                                              "LAMBDA n: IF n = 0 THEN 0 ELSE nna!2(n) ENDIF"))
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (skosimp)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "comparison_test"
                                                                                       ("b"
                                                                                        "LAMBDA (i: nat):
                                                           x_add((TRUE, R / 2 ^ i), L(X!1(i)))`2"
                                                                                        "a"
                                                                                        "LAMBDA (i: nat):
                                                           x_sum(LAMBDA (m: nat): x_length(I_n(i)(m)))`2"))
                                                                                      (("2"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("2"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "abs"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lift-if
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "n!1")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "n!1")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -7
                                                                                                             "n!1")
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "x_lt"
                                                                                                                 -8)
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-3
                                                                                    1))
                                                                                  (("2"
                                                                                    (prop)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (inst
                                                                                 -5
                                                                                 "i!1")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "i!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "x_lt"
                                                                                       -6)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (expand
                                                                               "x_add"
                                                                               1)
                                                                              (("2"
                                                                                (inst
                                                                                 -7
                                                                                 "i!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "subset?"
                                                               1)
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (expand
                                                                     "IUnion"
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (skolem
                                                                       -
                                                                       ("n!1"))
                                                                      (("2"
                                                                        (inst
                                                                         -4
                                                                         "n!1")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "subset?"
                                                                             -4)
                                                                            (("2"
                                                                              (inst
                                                                               -4
                                                                               "x!1")
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "IUnion"
                                                                                     -4)
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "NN(n!1,i!1)")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "n!1"
                                                                                           "i!1")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst - "n!1")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (expand "I_n")
                                                        (("2"
                                                          (lemma
                                                           "choose_member"
                                                           ("a"
                                                            "{I
                                                          |
                                                          subset?[real]
                                                          (X!1(n!1), IUnion[nat, real](I))
                                                          &
                                                          x_lt
                                                          (x_sum
                                                           (LAMBDA (n: nat): x_length(I(n))),
                                                           x_add
                                                           ((TRUE, R / 2 ^ n!1), L(X!1(n!1))))}"))
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (name-replace
                                                               "II"
                                                               "choose({I |
                                               subset?[real](X!1(n!1), IUnion[nat, real](I)) &
                                                x_lt(x_sum(LAMBDA (n: nat): x_length(I(n))),
                                                     x_add((TRUE, R / 2 ^ n!1), L(X!1(n!1))))})")
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "nonempty?")
                                                                  (("2"
                                                                    (expand
                                                                     "empty?")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "I!1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 1)
                                                              (("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "I!1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (inst - "n!1")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (expand
                                                     "nonempty?")
                                                    (("2"
                                                      (expand "empty?")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "I!1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skosimp)
                            (("2" (expand "x_lt")
                              (("2"
                                (expand "x_add")
                                (("2"
                                  (inst - "n!1")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (expand "L" (-1 1))
                                      (("2"
                                        (expand "x_inf")
                                        (("2"
                                          (prop)
                                          (("2"
                                            (replace 1 2)
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (expand "o ")
                                                (("2"
                                                  (case
                                                   "nonempty?({z_1: real |
                                    EXISTS (x: extended_nnreal):
                                      (EXISTS I:
                                         x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x) AND
                                          subset?[real](X!1(n!1), IUnion[nat, real](I)))
                                       AND x`1 AND x`2 = z_1})")
                                                  (("1"
                                                    (case
                                                     "bounded_below?({z_1: real |
                                      EXISTS (x: extended_nnreal):
                                        (EXISTS I:
                                           x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x) AND
                                            subset?[real](X!1(n!1), IUnion[nat, real](I)))
                                         AND x`1 AND x`2 = z_1})")
                                                    (("1"
                                                      (typepred
                                                       "glb({z_1: real |
                                        EXISTS (x: extended_nnreal):
                                          (EXISTS I:
                                             x_le(x_sum(LAMBDA (x: nat): x_length(I(x))),
                                                  x)
                                              AND
                                              subset?[real]
                                                  (X!1(n!1), IUnion[nat, real](I)))
                                           AND x`1 AND x`2 = z_1})")
                                                      (("1"
                                                        (name-replace
                                                         "LIMIT"
                                                         "glb({z_1: real |
                                          EXISTS (x: extended_nnreal):
                                            (EXISTS I:
                                               x_le(x_sum(LAMBDA (x: nat): x_length(I(x))),
                                                    x)
                                                AND
                                                subset?[real]
                                                    (X!1(n!1), IUnion[nat, real](I)))
                                             AND x`1 AND x`2 = z_1})")
                                                        (("1"
                                                          (hide -2 -3)
                                                          (("1"
                                                            (expand
                                                             "greatest_lower_bound?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (lemma
                                                                 "posreal_div_posreal_is_posreal"
                                                                 ("px"
                                                                  "r!1"
                                                                  "py"
                                                                  "2^n!1"))
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "r!1 / 2 ^ n!1 + LIMIT")
                                                                  (("1"
                                                                    (expand
                                                                     "lower_bound?")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp)
                                                                        (("1"
                                                                          (case
                                                                           "s!1<r!1 / 2 ^ n!1 + LIMIT")
                                                                          (("1"
                                                                            (hide
                                                                             1)
                                                                            (("1"
                                                                              (typepred
                                                                               "s!1")
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "I!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "x_le")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "bounded_below?")
                                                        (("2"
                                                          (inst + "0")
                                                          (("2"
                                                            (expand
                                                             "lower_bound?")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (typepred
                                                                 "s!1")
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand
                                                       "nonempty?")
                                                      (("2"
                                                        (expand
                                                         "empty?")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "x!1`2")
                                                            (("2"
                                                              (inst
                                                               +
                                                               "x!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (typepred
                                                                   "x!1")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (expand
                                                                       "o")
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "I!1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "o ")
                          (("2" (expand "x_sum") (("2" (prop) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "om_increasing?")
              (("2" (skosimp)
                (("2" (expand "x_le")
                  (("2" (case-replace "L(a!1)`1")
                    (("1" (expand "L")
                      (("1" (expand "o")
                        (("1" (expand "x_inf")
                          (("1"
                            (case-replace "FORALL (x_1:
                             ({z |
                                 EXISTS I:
                                   x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), z)
                                    AND subset?[real](a!1, IUnion[nat, real](I))})):
                     NOT x_1`1")
                            (("1" (replace 1)
                              (("1"
                                (skolem + ("AAX"))
                                (("1"
                                  (prop)
                                  (("1"
                                    (replace 1)
                                    (("1"
                                      (skolem + ("BBX"))
                                      (("1"
                                        (hide -4)
                                        (("1"
                                          (case
                                           "nonempty?({z_1: real |
                            EXISTS (x_1: extended_nnreal):
                              (EXISTS I:
                                 x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                                  subset?[real](a!1, IUnion[nat, real](I)))
                               AND x_1`1 AND x_1`2 = z_1})")
                                          (("1"
                                            (case
                                             "bounded_below?({z_1: real |
                              EXISTS (x_1: extended_nnreal):
                                (EXISTS I:
                                   x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                                    subset?[real](a!1, IUnion[nat, real](I)))
                                 AND x_1`1 AND x_1`2 = z_1})")
                                            (("1"
                                              (typepred
                                               "glb({z_1: real |
                           EXISTS (x_1: extended_nnreal):
                             (EXISTS I:
                                x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                                 subset?[real](a!1, IUnion[nat, real](I)))
                              AND x_1`1 AND x_1`2 = z_1})")
                                              (("1"
                                                (name-replace
                                                 "GLBA"
                                                 "glb({z_1: real |
                             EXISTS (x_1: extended_nnreal):
                               (EXISTS I:
                                  x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                                   subset?[real](a!1, IUnion[nat, real](I)))
                                AND x_1`1 AND x_1`2 = z_1})")
                                                (("1"
                                                  (hide -2 -3)
                                                  (("1"
                                                    (case
                                                     "nonempty?({z_1: real |
                                   EXISTS (x_1: extended_nnreal):
                                     (EXISTS I:
                                        x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                                         subset?[real](b!1, IUnion[nat, real](I)))
                                      AND x_1`1 AND x_1`2 = z_1})")
                                                    (("1"
                                                      (case
                                                       "bounded_below?({z_1: real |
                                     EXISTS (x_1: extended_nnreal):
                                       (EXISTS I:
                                          x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                                           subset?[real](b!1, IUnion[nat, real](I)))
                                        AND x_1`1 AND x_1`2 = z_1})")
                                                      (("1"
                                                        (typepred
                                                         "glb({z_1: real |
                                  EXISTS (x_1: extended_nnreal):
                                    (EXISTS I:
                                       x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                                        subset?[real](b!1, IUnion[nat, real](I)))
                                     AND x_1`1 AND x_1`2 = z_1})")
                                                        (("1"
                                                          (name-replace
                                                           "GLBB"
                                                           "glb({z_1: real |
                                    EXISTS (x_1: extended_nnreal):
                                      (EXISTS I:
                                         x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                                          subset?[real](b!1, IUnion[nat, real](I)))
                                       AND x_1`1 AND x_1`2 = z_1})")
                                                          (("1"
                                                            (hide
                                                             -2
                                                             -3)
                                                            (("1"
                                                              (expand
                                                               "greatest_lower_bound?")
                                                              (("1"
                                                                (expand
                                                                 "lower_bound?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "GLBA")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp)
                                                                        (("1"
                                                                          (case
                                                                           "GLBB<GLBA")
                                                                          (("1"
                                                                            (hide
                                                                             2)
                                                                            (("1"
                                                                              (typepred
                                                                               "s!1")
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (hide
                                                                                   -6
                                                                                   -8)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "s!1")
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "x!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           +
                                                                                           "I!1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-2
                                                                                                -8
                                                                                                1))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "subset?")
                                                                                                (("1"
                                                                                                  (skosimp)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "x!2")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "x!2")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -2 2)
                                                        (("2"
                                                          (expand
                                                           "bounded_below?")
                                                          (("2"
                                                            (inst
                                                             +
                                                             "0")
                                                            (("2"
                                                              (expand
                                                               "lower_bound?")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (typepred
                                                                   "s!1")
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1 2)
                                                      (("2"
                                                        (expand
                                                         "nonempty?")
                                                        (("2"
                                                          (expand
                                                           "empty?")
                                                          (("2"
                                                            (expand
                                                             "member")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "BBX`2")
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "BBX")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide -1 2)
                                              (("2"
                                                (expand
                                                 "bounded_below?")
                                                (("2"
                                                  (inst + "0")
                                                  (("2"
                                                    (expand
                                                     "lower_bound?")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (typepred
                                                         "s!1")
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (expand "nonempty?")
                                              (("2"
                                                (expand "empty?")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (inst - "AAX`2")
                                                    (("2"
                                                      (inst + "AAX")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace 1)
                      (("2" (hide -3)
                        (("2" (expand "L")
                          (("2" (expand "o")
                            (("2" (expand "x_inf")
                              (("2"
                                (prop)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (typepred "x!1")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (inst - "x!1")
                                        (("2"
                                          (inst + "I!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide -1 -3)
                                              (("2"
                                                (expand "subset?")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst - "x!2")
                                                      (("2"
                                                        (inst - "x!2")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "om_empty?")
            (("2" (expand "L")
              (("2" (expand "o")
                (("2" (expand "x_inf")
                  (("2" (lift-if 1)
                    (("2" (assert)
                      (("2" (prop)
                        (("1" (inst - "(TRUE,0)")
                          (("1" (inst + "lambda n: emptyset[real]")
                            (("1" (split)
                              (("1"
                                (case-replace
                                 "x_length(emptyset[real]) = (TRUE,0)")
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand "x_le")
                                    (("1"
                                      (expand "x_sum")
                                      (("1"
                                        (rewrite "zero_series_conv")
                                        (("1"
                                          (rewrite "zero_series_limit")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand "x_length")
                                    (("2"
                                      (case-replace
                                       "length(emptyset[real])=0")
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (expand
                                                 "bounded_interval?")
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand "emptyset")
                                                    (("1"
                                                      (expand
                                                       "interval?")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "bounded?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "length_empty_rew")
                                        nil
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3"
                                          (expand "bounded_interval?")
                                          (("3"
                                            (split)
                                            (("1"
                                              (expand "emptyset")
                                              (("1"
                                                (expand "interval?")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "bounded?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide 2)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "subset?")
                                (("2"
                                  (expand "emptyset")
                                  (("2"
                                    (expand "member")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "bounded_open_interval?")
                              (("2"
                                (expand "bounded_interval?")
                                (("2"
                                  (split)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (expand "bounded?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (lemma
                                     "metric_open_def"
                                     ("S" "emptyset[real]"))
                                    (("3"
                                      (assert)
                                      (("3"
                                        (hide 2)
                                        (("3"
                                          (typepred
                                           "metric_induced_topology")
                                          (("3"
                                            (expand "open?")
                                            (("3"
                                              (expand "member")
                                              (("3"
                                                (expand
                                                 "hausdorff_space?")
                                                (("3"
                                                  (expand "topology?")
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (expand
                                                       "topology_empty?")
                                                      (("3"
                                                        (expand
                                                         "member")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp)
                          (("2"
                            (case "nonempty?({z_1: real |
                          EXISTS (x_1: extended_nnreal):
                            (EXISTS I:
                               x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                                subset?[real](emptyset[real], IUnion[nat, real](I)))
                             AND x_1`1 AND x_1`2 = z_1})")
                            (("1"
                              (case "bounded_below?({z_1: real |
                            EXISTS (x_1: extended_nnreal):
                              (EXISTS I:
                                 x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                                  subset?[real](emptyset[real], IUnion[nat, real](I)))
                               AND x_1`1 AND x_1`2 = z_1})")
                              (("1"
                                (typepred
                                 "glb({z_1: real |
                         EXISTS (x_1: extended_nnreal):
                           (EXISTS I:
                              x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                               subset?[real](emptyset[real], IUnion[nat, real](I)))
                            AND x_1`1 AND x_1`2 = z_1})")
                                (("1"
                                  (name-replace
                                   "GLB"
                                   "glb({z_1: real |
                           EXISTS (x_1: extended_nnreal):
                             (EXISTS I:
                                x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                                 subset?[real](emptyset[real], IUnion[nat, real](I)))
                              AND x_1`1 AND x_1`2 = z_1})")
                                  (("1"
                                    (hide -2 -3)
                                    (("1"
                                      (expand "greatest_lower_bound?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "lower_bound?")
                                          (("1"
                                            (inst -2 "0")
                                            (("1"
                                              (split)
                                              (("1"
                                                (inst - "0")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide -1 -2 2)
                                                  (("2"
                                                    (inst + "(TRUE,0)")
                                                    (("2"
                                                      (inst
                                                       +
                                                       "lambda n: emptyset[real]")
                                                      (("1"
                                                        (case-replace
                                                         "x_length(emptyset[real])=(TRUE,0)")
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (expand
                                                               "x_le")
                                                              (("1"
                                                                (expand
                                                                 "x_sum")
                                                                (("1"
                                                                  (rewrite
                                                                   "zero_series_conv")
                                                                  (("1"
                                                                    (rewrite
                                                                     "zero_series_limit")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "subset?")
                                                              (("2"
                                                                (expand
                                                                 "emptyset")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "x_length")
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (rewrite
                                                                   "length_empty_rew")
                                                                  (("2"
                                                                    (prop)
                                                                    (("2"
                                                                      (expand
                                                                       "bounded_interval?")
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "bounded?")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide 2)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "bounded_open_interval?")
                                                        (("2"
                                                          (expand
                                                           "bounded_interval?")
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "bounded?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (typepred
                                                               "metric_induced_topology")
                                                              (("3"
                                                                (rewrite
                                                                 "metric_open_def"
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "open?")
                                                                  (("1"
                                                                    (expand
                                                                     "hausdorff_space?")
                                                                    (("1"
                                                                      (expand
                                                                       "topology?")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "topology_empty?")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (typepred "s!1")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2"
                                (hide 2 -1)
                                (("2"
                                  (expand "bounded_below?")
                                  (("2"
                                    (inst + "0")
                                    (("2"
                                      (expand "lower_bound?")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (typepred "s!1")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (skosimp)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (propax) nil nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (expand "nonempty?")
                                (("2"
                                  (expand "empty?")
                                  (("2"
                                    (inst - "x!1`2")
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (inst + "x!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bounded_open_interval? const-decl "bool" real_topology
     "metric_space/")
    (bounded_open_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (sequence type-eq-decl nil sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (x_le const-decl "bool" extended_nnreal "extended_nnreal/") nil
    (interval? const-decl "bool" real_topology "metric_space/")
    (interval nonempty-type-eq-decl nil real_topology "metric_space/")
    (O const-decl "T3" function_props nil)
    (x_length const-decl "extended_nnreal" real_lebesgue_scaf nil)
    (subset? const-decl "bool" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (om_empty? const-decl "bool" outer_measure_def
     "measure_integration/")
    nil nil nil nil
    (om_countably_subadditive? const-decl "bool" outer_measure_def
     "measure_integration/")
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil) nil
    (x_lt const-decl "bool" extended_nnreal "extended_nnreal/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (FALSE const-decl "bool" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops "reals/")
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (inv_expt formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (unique_limit formula-decl nil convergence_sequences "analysis/")
    (series_sum formula-decl nil series "series/")
    (geometric const-decl "sequence[real]" series "series/") nil
    (cnv_seq_sum formula-decl nil convergence_ops "analysis/") nil
    (limit_def formula-decl nil convergence_sequences "analysis/")
    (convergent? const-decl "bool" convergence_sequences "analysis/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (const_geometric_series formula-decl nil series "series/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (geometric_conv formula-decl nil series "series/")
    (series_scal formula-decl nil series "series/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (convergent_sum formula-decl nil convergence_ops "analysis/")
    (convergent_scal formula-decl nil convergence_ops "analysis/") nil
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (double_index_ij_n formula-decl nil code_product
     "extended_nnreal/")
    (double_index_i const-decl "nat" code_product "extended_nnreal/")
    (comparison_test formula-decl nil series "series/")
    (limit const-decl "real" convergence_sequences "analysis/")
    (sigma_first formula-decl nil sigma "reals/")
    (sigma_eq formula-decl nil sigma "reals/") nil
    (sigma def-decl "real" sigma "reals/")
    (convergent_diff formula-decl nil convergence_ops "analysis/")
    (limit_nonneg formula-decl nil series_aux "series/") nil
    (limit_diff formula-decl nil convergence_ops "analysis/")
    (sigma_ge_0 formula-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (subrange type-eq-decl nil integers nil)
    (series_diff formula-decl nil series "series/")
    (end_series_conv formula-decl nil series "series/") nil
    (series_first formula-decl nil series "series/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (double_x_sum formula-decl nil extended_nnreal "extended_nnreal/")
    nil (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil) nil nil nil
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil) nil
    (NOT const-decl "[bool -> bool]" booleans nil) nil nil
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_index const-decl "[nat -> T]" double_index
     "extended_nnreal/")
    (double_index_j const-decl "nat" code_product "extended_nnreal/")
    (double_index_n const-decl "nat" code_product "extended_nnreal/")
    (double_index_n_ij formula-decl nil code_product
     "extended_nnreal/")
    nil (choose_member formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (om_increasing? const-decl "bool" outer_measure_def
     "measure_integration/")
    nil nil nil nil
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (zero_series_conv formula-decl nil series "series/")
    (zero_series_limit formula-decl nil series "series/")
    (length_empty_rew formula-decl nil real_intervals_aux nil)
    (bounded? const-decl "bool" real_topology "metric_space/")
    (bounded_interval? const-decl "bool" real_topology "metric_space/")
    (bounded_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (length const-decl "nnreal" real_intervals_aux nil)
    (metric_open_def formula-decl nil metric_space "metric_space/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (open? const-decl "bool" topology "topology/")
    (topology_empty? const-decl "bool" topology_prelim "topology/")
    (topology? const-decl "bool" topology_prelim "topology/")
    (second_countable? const-decl "bool" topology_def "topology/")
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (hausdorff_space? const-decl "bool" topology_prelim "topology/")
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology "metric_space/")
    nil (emptyset const-decl "set" sets nil)
    (metric? const-decl "bool" metric_def "metric_space/")
    (metric_zero? const-decl "bool" metric_def "metric_space/")
    (metric_symmetric? const-decl "bool" metric_def "metric_space/")
    (metric_triangle? const-decl "bool" metric_def "metric_space/")
    (minus_real_is_real application-judgement "real" reals nil)
    (outer_measure? const-decl "bool" outer_measure_def
     "measure_integration/"))
   nil
   (lebesgue_outer_measure subtype
    "LAMBDA A: extended_nnreal.x_inf({z | EXISTS I: booleans.AND(extended_nnreal.x_le(extended_nnreal.x_sum(function_props[nat, interval, extended_nnreal].o(real_lebesgue_scaf.x_length, real_lebesgue_scaf.I)), real_lebesgue_scaf.z), sets[real].subset?(real_lebesgue_scaf.A, indexed_sets[nat, real].IUnion(real_lebesgue_scaf.I)))})"
    "outer_measure[real]"))
  (lebesgue_outer_measure_TCC1-1 nil 3397030001
   ("" (skosimp)
    (("" (skolem + ("n!1"))
      (("" (typepred "I!1(n!1)")
        (("" (expand "bounded_open_interval?")
          (("" (expand "bounded_interval?") (("" (flatten) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_interval? const-decl "bool" real_topology "metric_space/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (set type-eq-decl nil sets nil)
    (bounded_open_interval? const-decl "bool" real_topology
     "metric_space/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bounded_open_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (sequence type-eq-decl nil sequences nil))
   nil
   (lebesgue_outer_measure subtype
    "LAMBDA A: extended_nnreal.x_inf({z | EXISTS I: booleans.AND(extended_nnreal.x_le(extended_nnreal.x_sum(function_props[nat, interval, extended_nnreal].o(real_lebesgue_scaf.x_length, real_lebesgue_scaf.I)), real_lebesgue_scaf.z), sets[real].subset?(real_lebesgue_scaf.A, indexed_sets[nat, real].IUnion(real_lebesgue_scaf.I)))})"
    "outer_measure[real]")))
 (lebesgue_outer_measure_singleton 0
  (lebesgue_outer_measure_singleton-1 nil 3408170906
   ("" (skosimp)
    (("" (expand "x_eq")
      (("" (expand "lebesgue_outer_measure")
        ((""
          (name "ZZ" "{z |
                  EXISTS I:
                    x_le(x_sum(x_length o I), z) AND
                     subset?[real](singleton[real](x!1), IUnion(I))}")
          (("1" (replace -1)
            (("1" (expand "x_inf")
              (("1" (hide -1)
                (("1" (case "forall (r:posreal): ZZ(TRUE,r)")
                  (("1" (case-replace "FORALL (x: (ZZ)): NOT x`1")
                    (("1" (inst -2 "1")
                      (("1" (inst - "(TRUE, 1)") nil nil)) nil)
                     ("2" (replace 1 2)
                      (("2" (hide 1)
                        (("2"
                          (case "nonempty?({x | EXISTS z: ZZ(z) AND z`1 AND z`2 = x})")
                          (("1"
                            (case "bounded_below?({x | EXISTS z: ZZ(z) AND z`1 AND z`2 = x})")
                            (("1"
                              (typepred
                               "glb({x | EXISTS z: ZZ(z) AND z`1 AND z`2 = x})")
                              (("1"
                                (name-replace
                                 "GLB"
                                 "glb({x | EXISTS z: ZZ(z) AND z`1 AND z`2 = x})")
                                (("1"
                                  (hide -2 -3)
                                  (("1"
                                    (expand "greatest_lower_bound?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "lower_bound?")
                                        (("1"
                                          (expand "<=" -2 2)
                                          (("1"
                                            (inst -2 "0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (inst -3 "GLB/2")
                                                    (("1"
                                                      (inst - "GLB/2")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         +
                                                         "(TRUE, GLB / 2)")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (typepred "s!1")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (expand "bounded_below?")
                                (("2"
                                  (inst + "0")
                                  (("2"
                                    (expand "lower_bound?")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (typepred "s!1")
                                        (("2"
                                          (skosimp)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (propax) nil nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "nonempty?")
                              (("2"
                                (expand "empty?")
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (inst - "1")
                                    (("2"
                                      (inst - "1")
                                      (("2"
                                        (inst + "(TRUE, 1)")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skosimp)
                      (("2" (expand "ZZ")
                        (("2"
                          (inst +
                           "lambda n: if n=0 then {x | x!1-r!1/2<x&x<x!1+r!1/2} else emptyset[real] endif")
                          (("1" (split)
                            (("1" (expand "o")
                              (("1"
                                (case-replace
                                 "x_length(emptyset[real])=(TRUE,0)")
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (case-replace
                                     "x_length({x
                                    |
                                    x!1 - r!1 / 2 < x & x < r!1 / 2 + x!1})=(TRUE,r!1)")
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "x_le")
                                        (("1"
                                          (expand "x_sum")
                                          (("1"
                                            (case-replace
                                             "FORALL (i:nat): IF i = 0 THEN TRUE ELSE TRUE ENDIF")
                                            (("1"
                                              (lemma
                                               "zero_tail_series_conv"
                                               ("a"
                                                "LAMBDA (i:nat): IF i = 0 THEN r!1 ELSE 0 ENDIF"
                                                "n"
                                                "0"))
                                              (("1"
                                                (lemma
                                                 "zero_tail_series_limit"
                                                 ("a"
                                                  "LAMBDA (i:nat): IF i = 0 THEN r!1 ELSE 0 ENDIF"
                                                  "n"
                                                  "0"))
                                                (("1"
                                                  (case-replace
                                                   "FORALL (m:nat):
         0 < m => (LAMBDA (i: nat): IF i = 0 THEN r!1 ELSE 0 ENDIF)(m) = 0")
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (expand
                                                         "series")
                                                        (("1"
                                                          (expand
                                                           "sigma")
                                                          (("1"
                                                            (expand
                                                             "sigma")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (skosimp) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (expand "x_length")
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (expand "length")
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "empty?")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "x!1")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "sup({x | x!1 - r!1 / 2 < x & x < r!1 / 2 + x!1}) ")
                                                          (("1"
                                                            (name-replace
                                                             "SUP"
                                                             "sup({x | x!1 - r!1 / 2 < x & x < r!1 / 2 + x!1})")
                                                            (("1"
                                                              (case-replace
                                                               "SUP=x!1+r!1/2")
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (typepred
                                                                     "inf({x | x!1 - r!1 / 2 < x & x < r!1 / 2 + x!1})")
                                                                    (("1"
                                                                      (case-replace
                                                                       "inf({x | x!1 - r!1 / 2 < x & x < r!1 / 2 + x!1})=x!1-r!1/2")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("2"
                                                                          (name-replace
                                                                           "INF"
                                                                           "inf({x | x!1 - r!1 / 2 < x & x < r!1 / 2 + x!1})")
                                                                          (("2"
                                                                            (expand
                                                                             "greatest_lower_bound")
                                                                            (("2"
                                                                              (expand
                                                                               "lower_bound")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (inst
                                                                                   -2
                                                                                   "x!1 - r!1 / 2")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "<="
                                                                                     -2
                                                                                     2)
                                                                                    (("2"
                                                                                      (replace
                                                                                       1
                                                                                       -2)
                                                                                      (("2"
                                                                                        (split
                                                                                         -2)
                                                                                        (("1"
                                                                                          (hide
                                                                                           1)
                                                                                          (("1"
                                                                                            (case
                                                                                             "exists x: x<=x!1 & x<INF & x!1 - r!1 / 2 < x")
                                                                                            (("1"
                                                                                              (skosimp)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "x!2")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (name
                                                                                               "EPS"
                                                                                               "INF+r!1/2-x!1")
                                                                                              (("2"
                                                                                                (case
                                                                                                 "EPS>0")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "min(x!1,INF-EPS/2)")
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "nonempty?")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "below_bounded")
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "x!1 - r!1 / 2")
                                                                            (("2"
                                                                              (expand
                                                                               "lower_bound")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2
                                                                 3)
                                                                (("2"
                                                                  (expand
                                                                   "least_upper_bound")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "upper_bound")
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "x!1+r!1/2")
                                                                        (("2"
                                                                          (expand
                                                                           "<="
                                                                           -2
                                                                           2)
                                                                          (("2"
                                                                            (replace
                                                                             1
                                                                             -2)
                                                                            (("2"
                                                                              (case
                                                                               "EXISTS x: x > SUP & x < r!1 / 2 + x!1 & x!1 <= x")
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "x!2")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -1
                                                                                 2)
                                                                                (("2"
                                                                                  (name
                                                                                   "EPS"
                                                                                   "x!1+r!1/2-SUP")
                                                                                  (("2"
                                                                                    (case
                                                                                     "EPS>0")
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "max(x!1,SUP+EPS/2)")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "nonempty?")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "above_bounded")
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "x!1+r!1/2")
                                                                  (("2"
                                                                    (expand
                                                                     "upper_bound")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "bounded_interval?")
                                                (("2"
                                                  (expand "bounded?")
                                                  (("2"
                                                    (expand
                                                     "nonempty?")
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (expand
                                                               "above_bounded")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "x!1+r!1/2")
                                                                (("1"
                                                                  (expand
                                                                   "upper_bound")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "below_bounded")
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "x!1-r!1/2")
                                                                (("2"
                                                                  (expand
                                                                   "lower_bound")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand "x_length")
                                    (("2"
                                      (expand "bounded_interval?")
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length")
                                            (("2"
                                              (case-replace
                                               "empty?[real](emptyset[real])")
                                              (("1"
                                                (prop)
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (ground)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide 2)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "emptyset")
                              (("2"
                                (expand "IUnion")
                                (("2"
                                  (expand "singleton")
                                  (("2"
                                    (expand "subset?")
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (inst + "0")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp)
                            (("2" (expand "bounded_open_interval?")
                              (("2"
                                (rewrite "metric_open_def")
                                (("2"
                                  (rewrite "emptyset_is_open")
                                  (("2"
                                    (expand "bounded_interval?")
                                    (("2"
                                      (split)
                                      (("1"
                                        (expand "interval?")
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "bounded?")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp)
                            (("3" (expand "bounded_open_interval?")
                              (("3"
                                (split)
                                (("1"
                                  (expand "bounded_interval?")
                                  (("1"
                                    (split)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (expand "bounded?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (replace 1 2)
                                            (("2"
                                              (split)
                                              (("1"
                                                (expand
                                                 "above_bounded")
                                                (("1"
                                                  (inst + "x!1+r!1/2")
                                                  (("1"
                                                    (expand
                                                     "upper_bound")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "below_bounded")
                                                (("2"
                                                  (inst + "x!1-r!1/2")
                                                  (("2"
                                                    (expand
                                                     "lower_bound")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "metric_open_ball"
                                   ("x" "x!1" "r" "r!1/2"))
                                  (("2"
                                    (expand "ball")
                                    (("2"
                                      (case-replace
                                       "{y: real | abs(x!1 - y) < r!1 / 2}={x | x!1 - r!1 / 2 < x & x < r!1 / 2 + x!1}")
                                      (("2"
                                        (apply-extensionality
                                         1
                                         :hide?
                                         t)
                                        (("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (skosimp)
                (("2" (typepred "I!1(x1!1)")
                  (("2" (expand "bounded_open_interval?")
                    (("2" (expand "bounded_interval?")
                      (("2" (flatten) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (IUnion const-decl "set[T]" indexed_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (x_length const-decl "extended_nnreal" real_lebesgue_scaf nil)
    (O const-decl "T3" function_props nil)
    (interval nonempty-type-eq-decl nil real_topology "metric_space/")
    (interval? const-decl "bool" real_topology "metric_space/") nil
    (x_le const-decl "bool" extended_nnreal "extended_nnreal/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (bounded_open_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (bounded_open_interval? const-decl "bool" real_topology
     "metric_space/")
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (nonempty? const-decl "bool" sets nil) nil
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (<= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (bounded_below? const-decl "bool" bounded_real_defs nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil) nil
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    nil nil nil nil nil nil nil
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (emptyset const-decl "set" sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (length const-decl "nnreal" real_intervals_aux nil)
    (pred type-eq-decl nil defined_types nil)
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (setof type-eq-decl nil defined_types nil)
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (lower_bound const-decl "bool" bound_defs "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil) nil
    nil
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (upper_bound const-decl "bool" bound_defs "reals/") nil
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (bounded? const-decl "bool" real_topology "metric_space/")
    (bounded_interval? const-decl "bool" real_topology "metric_space/")
    (zero_tail_series_conv formula-decl nil series_aux "series/")
    (sigma def-decl "real" sigma "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil) nil
    (zero_tail_series_limit formula-decl nil series_aux "series/")
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (setofsets type-eq-decl nil sets nil)
    (emptyset_is_open judgement-tcc nil topology "topology/")
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology "metric_space/")
    nil (metric_open_def formula-decl nil metric_space "metric_space/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (metric_open_ball formula-decl nil metric_space "metric_space/")
    (minus_real_is_real application-judgement "real" reals nil)
    (ball const-decl "set[T]" metric_space_def "metric_space/")
    (lebesgue_outer_measure const-decl "outer_measure"
     real_lebesgue_scaf nil))
   shostak))
 (lebesgue_outer_measure_closed_open_TCC1 0
  (lebesgue_outer_measure_closed_open_TCC1-1 nil 3475908490
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (set type-eq-decl nil sets nil)
    (bounded_interval? const-decl "bool" real_topology "metric_space/")
    (bounded_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (interval? const-decl "bool" real_topology "metric_space/")
    (upper_bound const-decl "bool" bound_defs "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (bounded? const-decl "bool" real_topology "metric_space/")
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/"))
   nil
   (lebesgue_outer_measure_closed_open subtype "real_lebesgue_scaf.b"
    "inf_set[real]")))
 (lebesgue_outer_measure_closed_open_TCC2 0
  (lebesgue_outer_measure_closed_open_TCC2-1 nil 3475908490
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (set type-eq-decl nil sets nil)
    (bounded_interval? const-decl "bool" real_topology "metric_space/")
    (bounded_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    nil
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (setof type-eq-decl nil defined_types nil)
    (<= const-decl "bool" reals nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (pred type-eq-decl nil defined_types nil)
    (inf_set type-eq-decl nil bounded_reals "reals/") nil
    (bounded? const-decl "bool" real_topology "metric_space/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (lower_bound const-decl "bool" bound_defs "reals/")
    (interval? const-decl "bool" real_topology "metric_space/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (upper_bound const-decl "bool" bound_defs "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/"))
   nil
   (lebesgue_outer_measure_closed_open subtype "real_lebesgue_scaf.b"
    "sup_set[real]")))
 (lebesgue_outer_measure_closed_open_TCC3 0
  (lebesgue_outer_measure_closed_open_TCC3-1 nil 3475908490
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (set type-eq-decl nil sets nil)
    (bounded_interval? const-decl "bool" real_topology "metric_space/")
    (bounded_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    nil nil (bounded? const-decl "bool" real_topology "metric_space/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (lower_bound const-decl "bool" bound_defs "reals/")
    (interval? const-decl "bool" real_topology "metric_space/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (upper_bound const-decl "bool" bound_defs "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/"))
   nil
   (lebesgue_outer_measure_closed_open subtype "real_lebesgue_scaf.b"
    "sup_set[real]")))
 (lebesgue_outer_measure_closed_open 0
  (lebesgue_outer_measure_closed_open-1 nil 3408180824
   ("" (skosimp)
    (("" (typepred "lebesgue_outer_measure")
      (("" (typepred "b!1")
        (("" (expand "bounded_interval?")
          (("" (flatten)
            (("" (expand "bounded?")
              (("" (assert)
                (("" (split -2)
                  (("1" (expand "nonempty?") (("1" (propax) nil nil))
                    nil)
                   ("2" (flatten)
                    (("2"
                      (lemma "x_le_antisymmetric"
                       ("x"
                        "lebesgue_outer_measure({x | inf(b!1) <= x AND x <= sup(b!1)})"
                        "y"
                        "lebesgue_outer_measure({x | inf(b!1) < x AND x < sup(b!1)})"))
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (split)
                            (("1"
                              (lemma "pairwise_subadditive"
                               ("y"
                                "{x | inf(b!1) <= x AND x <= sup(b!1)}"
                                "x"
                                "union[real](singleton[real](inf(b!1)),singleton[real](sup(b!1)))"))
                              (("1"
                                (case-replace
                                 "intersection
                                        ({x
                                          |
                                          inf(b!1) <= x AND x <= sup(b!1)},
                                         complement
                                         (union[real]
                                          (singleton[real](inf(b!1)),
                                           singleton[real](sup(b!1)))))= {x | inf(b!1) < x AND x < sup(b!1)}")
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (name-replace
                                     "LHS"
                                     "lebesgue_outer_measure({x | inf(b!1) <= x AND x <= sup(b!1)})")
                                    (("1"
                                      (name-replace
                                       "RHS"
                                       "lebesgue_outer_measure({x | inf(b!1) < x AND x < sup(b!1)})")
                                      (("1"
                                        (case-replace
                                         "intersection
                                        ({x
                                          |
                                          inf(b!1) <= x AND x <= sup(b!1)},
                                         union[real]
                                         (singleton[real](inf(b!1)),
                                          singleton[real](sup(b!1))))=union[real]
                                         (singleton[real](inf(b!1)),
                                          singleton[real](sup(b!1)))")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma
                                             "lebesgue_outer_measure_singleton"
                                             ("x" "inf(b!1)"))
                                            (("1"
                                              (lemma
                                               "lebesgue_outer_measure_singleton"
                                               ("x" "sup(b!1)"))
                                              (("1"
                                                (lemma
                                                 "outer_negligible_union"
                                                 ("n1"
                                                  "singleton[real](inf(b!1))"
                                                  "n2"
                                                  "singleton[real](sup(b!1))"))
                                                (("1"
                                                  (expand
                                                   "outer_negligible?")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (hide-all-but
                                                       (-4 1))
                                                      (("1"
                                                        (expand
                                                         "x_add")
                                                        (("1"
                                                          (expand
                                                           "x_le")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "outer_negligible?")
                                                  (("2"
                                                    (hide-all-but
                                                     (-1 1))
                                                    (("2"
                                                      (expand "x_eq")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (decompose-equality)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but (-2 1))
                                                  (("3"
                                                    (expand
                                                     "outer_negligible?")
                                                    (("3"
                                                      (expand "x_eq")
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (decompose-equality)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 2)
                                          (("2"
                                            (apply-extensionality
                                             :hide?
                                             t)
                                            (("2"
                                              (expand "intersection")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (case-replace
                                                   "union[real]
           (singleton[real](inf(b!1)), singleton[real](sup(b!1)))(x!1)")
                                                  (("1"
                                                    (expand
                                                     "singleton")
                                                    (("1"
                                                      (expand "union")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "sup(b!1)")
                                                              (("1"
                                                                (expand
                                                                 "least_upper_bound")
                                                                (("1"
                                                                  (expand
                                                                   "upper_bound")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "nonempty?")
                                                                      (("1"
                                                                        (expand
                                                                         "empty?")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (expand
                                                                             "member")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "x!2")
                                                                              (("1"
                                                                                (typepred
                                                                                 "inf(b!1)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "greatest_lower_bound")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "lower_bound")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "x!2")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "nonempty?")
                                                              (("2"
                                                                (expand
                                                                 "empty?")
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (typepred
                                                                       "inf(b!1)")
                                                                      (("2"
                                                                        (expand
                                                                         "greatest_lower_bound")
                                                                        (("2"
                                                                          (expand
                                                                           "lower_bound")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "x!2")
                                                                              (("2"
                                                                                (typepred
                                                                                 "sup(b!1)")
                                                                                (("2"
                                                                                  (expand
                                                                                   "least_upper_bound")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "upper_bound")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "x!2")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace 1 2)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1 2)
                                  (("2"
                                    (apply-extensionality :hide? t)
                                    (("2"
                                      (expand "singleton")
                                      (("2"
                                        (expand "union")
                                        (("2"
                                          (expand "complement")
                                          (("2"
                                            (expand "intersection")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case-replace
                                                   "inf(b!1) < x!1 AND x!1 < sup(b!1)")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace 1 2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "outer_measure?")
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "om_increasing?")
                                    (("2"
                                      (inst
                                       -
                                       "{x | inf(b!1) < x AND x < sup(b!1)}"
                                       "{x | inf(b!1) <= x AND x <= sup(b!1)}")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide-all-but (-1 -2 -6 2))
                                          (("2"
                                            (expand "subset?")
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp) nil nil) ("3" (skosimp) nil nil)
                       ("4" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lebesgue_outer_measure const-decl "outer_measure"
     real_lebesgue_scaf nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def
     "measure_integration/")
    (outer_measure? const-decl "bool" outer_measure_def
     "measure_integration/")
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bounded? const-decl "bool" real_topology "metric_space/")
    (nonempty? const-decl "bool" sets nil)
    (< const-decl "bool" reals nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (setof type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (pred type-eq-decl nil defined_types nil)
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (x_le_antisymmetric formula-decl nil extended_nnreal
     "extended_nnreal/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (om_increasing? const-decl "bool" outer_measure_def
     "measure_integration/")
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (pairwise_subadditive formula-decl nil outer_measure_props
     "measure_integration/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (upper_bound const-decl "bool" bound_defs "reals/") nil nil
    (lower_bound const-decl "bool" bound_defs "reals/")
    (empty? const-decl "bool" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (member const-decl "bool" sets nil) nil
    (TRUE const-decl "bool" booleans nil)
    (x_le const-decl "bool" extended_nnreal "extended_nnreal/") nil
    (outer_negligible nonempty-type-eq-decl nil outer_measure_props
     "measure_integration/")
    (outer_negligible? const-decl "bool" outer_measure_props
     "measure_integration/")
    (outer_negligible_union judgement-tcc nil outer_measure_props
     "measure_integration/")
    nil nil nil
    (lebesgue_outer_measure_singleton formula-decl nil
     real_lebesgue_scaf nil)
    nil nil nil nil nil nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (intersection const-decl "set" sets nil)
    (complement const-decl "set" sets nil)
    (bounded_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (bounded_interval? const-decl "bool" real_topology
     "metric_space/"))
   shostak))
 (lebesgue_outer_measure_closed_open_rew 0
  (lebesgue_outer_measure_closed_open_rew-1 nil 3408257030
   ("" (skosimp)
    (("" (typepred "b!1")
      (("" (expand "<=" -1)
        (("" (split)
          (("1"
            (lemma "lebesgue_outer_measure_closed_open"
             ("b" "{x | a!1 <= x AND x <= b!1}"))
            (("1"
              (case-replace
               "nonempty?[real]({x | a!1 <= x AND x <= b!1})")
              (("1"
                (case "above_bounded[real]({x | a!1 <= x AND x <= b!1})")
                (("1"
                  (case "below_bounded[real]({x | a!1 <= x AND x <= b!1})")
                  (("1"
                    (case-replace
                     "inf({x | a!1 <= x AND x <= b!1})=a!1")
                    (("1"
                      (case-replace
                       "sup({x | a!1 <= x AND x <= b!1})=b!1")
                      (("1" (hide-all-but (-3 -4 -6 1))
                        (("1"
                          (typepred "sup({x | a!1 <= x AND x <= b!1})")
                          (("1" (expand "least_upper_bound")
                            (("1" (flatten)
                              (("1"
                                (inst - "b!1")
                                (("1"
                                  (name-replace
                                   "SUP"
                                   "sup({x | a!1 <= x AND x <= b!1})")
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (expand "<=" -1)
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "upper_bound")
                                          (("1"
                                            (inst - "b!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (expand "upper_bound")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (hide-all-but (-1 -3 -5 1))
                      (("2"
                        (typepred "inf({x | a!1 <= x AND x <= b!1})")
                        (("1"
                          (name-replace "INF"
                           "inf({x | a!1 <= x AND x <= b!1})")
                          (("1" (expand "greatest_lower_bound")
                            (("1" (flatten)
                              (("1"
                                (expand "lower_bound")
                                (("1"
                                  (inst - "a!1")
                                  (("1"
                                    (inst - "a!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil)
                     ("3" (assert) nil nil))
                    nil)
                   ("2" (expand "below_bounded")
                    (("2" (inst + "a!1")
                      (("2" (expand "lower_bound")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "above_bounded")
                  (("2" (inst + " b!1")
                    (("2" (expand "upper_bound")
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 2)
                (("2" (expand "nonempty?")
                  (("2" (expand "empty?")
                    (("2" (inst - "a!1")
                      (("2" (expand "member") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "bounded_interval?")
                (("2" (split)
                  (("1" (expand "interval?") (("1" (grind) nil nil))
                    nil)
                   ("2" (expand "bounded?")
                    (("2" (expand "nonempty?")
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (split)
                            (("1" (expand "above_bounded")
                              (("1"
                                (inst + "b!1")
                                (("1"
                                  (expand "upper_bound")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "below_bounded")
                              (("2"
                                (inst + "a!1")
                                (("2"
                                  (expand "lower_bound")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2"
            (case-replace "{x | a!1 < x AND x < b!1}=emptyset[real]")
            (("1"
              (case-replace
               "{x | a!1 <= x AND x <= b!1}=singleton[real](b!1)")
              (("1"
                (lemma "lebesgue_outer_measure_singleton" ("x" "b!1"))
                (("1" (hide -2 -3)
                  (("1"
                    (name-replace "LHS"
                     "lebesgue_outer_measure(singleton[real](b!1))")
                    (("1" (typepred "lebesgue_outer_measure")
                      (("1" (expand "outer_measure?")
                        (("1" (flatten)
                          (("1"
                            (case-replace
                             "lebesgue_outer_measure(emptyset[real])=(TRUE, 0)")
                            (("1" (hide 2 -4)
                              (("1"
                                (hide-all-but 1)
                                (("1"
                                  (expand "lebesgue_outer_measure")
                                  (("1"
                                    (expand "x_inf")
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case-replace
                                           "FORALL (x:
                   ({z |
                       EXISTS I:
                         x_le(x_sum(x_length o I), z) AND
                          subset?[real](emptyset[real], IUnion(I))})):
           NOT x`1")
                                          (("1"
                                            (inst - "(TRUE,0)")
                                            (("1"
                                              (inst
                                               +
                                               "lambda (n:nat): emptyset[real]")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (expand "o")
                                                  (("1"
                                                    (case-replace
                                                     "x_length(emptyset[real])=(TRUE, 0)")
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (expand
                                                         "x_sum")
                                                        (("1"
                                                          (expand
                                                           "x_le")
                                                          (("1"
                                                            (rewrite
                                                             "zero_series_limit")
                                                            (("1"
                                                              (rewrite
                                                               "zero_series_conv")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "x_length")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (rewrite
                                                             "length_empty_rew")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (expand
                                                                   "bounded_interval?")
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "bounded?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide 2)
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "subset?")
                                                  (("2"
                                                    (expand "emptyset")
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "bounded_open_interval?")
                                                (("2"
                                                  (expand
                                                   "bounded_interval?")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "bounded?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (typepred
                                                       "metric_induced_topology")
                                                      (("3"
                                                        (expand
                                                         "metric_induced_topology")
                                                        (("3"
                                                          (rewrite
                                                           "metric_open_def")
                                                          (("3"
                                                            (expand
                                                             "open?")
                                                            (("3"
                                                              (expand
                                                               "hausdorff_space?")
                                                              (("3"
                                                                (expand
                                                                 "topology?")
                                                                (("3"
                                                                  (flatten)
                                                                  (("3"
                                                                    (expand
                                                                     "topology_empty?")
                                                                    (("3"
                                                                      (expand
                                                                       "member")
                                                                      (("3"
                                                                        (rewrite
                                                                         "metric_open_def")
                                                                        (("1"
                                                                          (expand
                                                                           "open?")
                                                                          (("1"
                                                                            (expand
                                                                             "member")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace 1)
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (case
                                                 "nonempty?({z_1: real |
             EXISTS (x:extended_nnreal):
               (EXISTS I:
                  x_le(x_sum(x_length o I), x) AND
                   subset?[real](emptyset[real], IUnion(I)))
                AND x`1 AND x`2 = z_1})")
                                                (("1"
                                                  (case
                                                   "below_bounded({z_1: real |
             EXISTS (x:extended_nnreal):
               (EXISTS I:
                  x_le(x_sum(x_length o I), x) AND
                   subset?[real](emptyset[real], IUnion(I)))
                AND x`1 AND x`2 = z_1})")
                                                  (("1"
                                                    (typepred
                                                     "glb({z_1: real |
             EXISTS (x: extended_nnreal):
               (EXISTS I:
                  x_le(x_sum(x_length o I), x) AND
                   subset?[real](emptyset[real], IUnion(I)))
                AND x`1 AND x`2 = z_1})")
                                                    (("1"
                                                      (name-replace
                                                       "GLB"
                                                       "glb({z_1: real |
             EXISTS (x: extended_nnreal):
               (EXISTS I:
                  x_le(x_sum(x_length o I), x) AND
                   subset?[real](emptyset[real], IUnion(I)))
                AND x`1 AND x`2 = z_1})")
                                                      (("1"
                                                        (hide -2 -3)
                                                        (("1"
                                                          (expand
                                                           "greatest_lower_bound?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "0")
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (expand
                                                                   "lower_bound?")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "0")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       +
                                                                       "(TRUE,0)")
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "lambda (n:nat): emptyset[real]")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (expand
                                                                               "o"
                                                                               1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 2)
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "x_length(emptyset[real])=(TRUE, 0)")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "x_sum")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "x_le")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "zero_series_conv")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "zero_series_limit")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "x_length")
                                                                                    (("2"
                                                                                      (hide
                                                                                       2
                                                                                       -1)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "length_empty_rew")
                                                                                            (("2"
                                                                                              (prop)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "bounded_interval?")
                                                                                                (("2"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "bounded?")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (hide
                                                                                     -1
                                                                                     2)
                                                                                    (("3"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -1
                                                                               -2
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "subset?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "emptyset")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "bounded_open_interval?")
                                                                            (("2"
                                                                              (expand
                                                                               "bounded_interval?")
                                                                              (("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "bounded?")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (typepred
                                                                                   "metric_induced_topology")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "metric_induced_topology")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "hausdorff_space?")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "topology?")
                                                                                        (("3"
                                                                                          (flatten)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "topology_empty?")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("3"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2
                                                                   -1
                                                                   -2)
                                                                  (("2"
                                                                    (expand
                                                                     "lower_bound?")
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (typepred
                                                                         "s!1")
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "bounded_below?")
                                                          (("2"
                                                            (inst
                                                             +
                                                             "0")
                                                            (("2"
                                                              (expand
                                                               "lower_bound?")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (typepred
                                                                   "s!1")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 2 -2)
                                                    (("2"
                                                      (expand
                                                       "below_bounded")
                                                      (("2"
                                                        (inst + "0")
                                                        (("2"
                                                          (expand
                                                           "lower_bound")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (typepred
                                                               "z!1")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand
                                                     "nonempty?")
                                                    (("2"
                                                      (expand "empty?")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (typepred
                                                           "x!1")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "x!1`2")
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "x!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 1))
                (("2" (apply-extensionality :hide? t)
                  (("2" (expand "singleton") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (apply-extensionality :hide? t)
                (("2" (expand "emptyset")
                  (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (emptyset const-decl "set" sets nil)
    (lebesgue_outer_measure_singleton formula-decl nil
     real_lebesgue_scaf nil)
    (lebesgue_outer_measure const-decl "outer_measure"
     real_lebesgue_scaf nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def
     "measure_integration/")
    (outer_measure? const-decl "bool" outer_measure_def
     "measure_integration/")
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil) nil nil
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    nil
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (open? const-decl "bool" topology "topology/")
    (topology? const-decl "bool" topology_prelim "topology/")
    (topology_empty? const-decl "bool" topology_prelim "topology/")
    (metric? const-decl "bool" metric_def "metric_space/")
    (metric_zero? const-decl "bool" metric_def "metric_space/")
    (metric_symmetric? const-decl "bool" metric_def "metric_space/")
    (metric_triangle? const-decl "bool" metric_def "metric_space/")
    (minus_real_is_real application-judgement "real" reals nil)
    (metric_open_def formula-decl nil metric_space "metric_space/")
    (second_countable? const-decl "bool" topology_def "topology/")
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (hausdorff_space? const-decl "bool" topology_prelim "topology/")
    (setofsets type-eq-decl nil sets nil)
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology "metric_space/")
    nil (zero_series_limit formula-decl nil series "series/")
    (zero_series_conv formula-decl nil series "series/")
    (length_empty_rew formula-decl nil real_intervals_aux nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil) nil
    nil nil nil nil nil nil
    (IUnion const-decl "set[T]" indexed_sets nil)
    (subset? const-decl "bool" sets nil)
    (x_length const-decl "extended_nnreal" real_lebesgue_scaf nil)
    (O const-decl "T3" function_props nil)
    (interval nonempty-type-eq-decl nil real_topology "metric_space/")
    nil (x_le const-decl "bool" extended_nnreal "extended_nnreal/")
    (sequence type-eq-decl nil sequences nil)
    (bounded_open_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (bounded_open_interval? const-decl "bool" real_topology
     "metric_space/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil) nil
    nil nil (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bounded_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (bounded_interval? const-decl "bool" real_topology "metric_space/")
    (set type-eq-decl nil sets nil)
    (lebesgue_outer_measure_closed_open formula-decl nil
     real_lebesgue_scaf nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (upper_bound const-decl "bool" bound_defs "reals/")
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (lower_bound const-decl "bool" bound_defs "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (nonempty? const-decl "bool" sets nil)
    (bounded? const-decl "bool" real_topology "metric_space/")
    (interval? const-decl "bool" real_topology "metric_space/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil))
   shostak))
 (lebesgue_outer_measure_closed 0
  (lebesgue_outer_measure_closed-1 nil 3408182751
   ("" (skosimp)
    (("" (typepred "b!1")
      (("" (expand "bounded_interval?")
        (("" (expand "bounded?")
          (("" (assert)
            (("" (flatten)
              (("" (split)
                (("1" (expand "nonempty?") (("1" (propax) nil nil))
                  nil)
                 ("2" (flatten)
                  (("2"
                    (lemma "lebesgue_outer_measure_closed_open"
                     ("b" "b!1"))
                    (("2" (assert)
                      (("2" (typepred "lebesgue_outer_measure")
                        (("2" (expand "outer_measure?")
                          (("2" (flatten)
                            (("2" (hide -1 -3)
                              (("2"
                                (expand "om_increasing?")
                                (("2"
                                  (inst-cp
                                   -
                                   "{x | inf(b!1) < x AND x < sup(b!1)}"
                                   "b!1")
                                  (("2"
                                    (inst
                                     -
                                     "b!1"
                                     "{x | inf(b!1) <= x AND x <= sup(b!1)}")
                                    (("2"
                                      (name-replace
                                       "OPEN"
                                       "lebesgue_outer_measure({x | inf(b!1) < x AND x < sup(b!1)})")
                                      (("2"
                                        (name-replace
                                         "CLOSED"
                                         "lebesgue_outer_measure({x | inf(b!1) <= x AND x <= sup(b!1)})")
                                        (("2"
                                          (name-replace
                                           "INTERVAL"
                                           "lebesgue_outer_measure(b!1)")
                                          (("2"
                                            (split)
                                            (("1"
                                              (split)
                                              (("1"
                                                (hide-all-but
                                                 (-1 -2 -3 1))
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (hide -1 -2 2)
                                                (("2"
                                                  (expand "subset?")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (typepred
                                                         "sup(b!1)")
                                                        (("2"
                                                          (expand
                                                           "least_upper_bound")
                                                          (("2"
                                                            (expand
                                                             "upper_bound")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "x!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (typepred
                                                                       "z!1")
                                                                      (("2"
                                                                        (case
                                                                         "x!1<z!1")
                                                                        (("1"
                                                                          (hide
                                                                           1)
                                                                          (("1"
                                                                            (typepred
                                                                             "inf(b!1)")
                                                                            (("1"
                                                                              (expand
                                                                               "greatest_lower_bound")
                                                                              (("1"
                                                                                (expand
                                                                                 "lower_bound")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "x!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "z!2")
                                                                                          (("1"
                                                                                            (case
                                                                                             "z!2<x!1")
                                                                                            (("1"
                                                                                              (hide
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "interval?")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "z!2"
                                                                                                   "z!1"
                                                                                                   "x!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but
                                               (-3 -4 -6 -5 1))
                                              (("2"
                                                (expand "subset?")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (typepred
                                                       "sup(b!1)")
                                                      (("2"
                                                        (typepred
                                                         "inf(b!1)")
                                                        (("2"
                                                          (expand
                                                           "least_upper_bound")
                                                          (("2"
                                                            (expand
                                                             "greatest_lower_bound")
                                                            (("2"
                                                              (expand
                                                               "lower_bound")
                                                              (("2"
                                                                (expand
                                                                 "upper_bound")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "x!1")
                                                                    (("2"
                                                                      (inst
                                                                       -3
                                                                       "x!1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (bounded_interval? const-decl "bool" real_topology "metric_space/")
    (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bounded? const-decl "bool" real_topology "metric_space/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (<= const-decl "bool" reals nil)
    (setof type-eq-decl nil defined_types nil)
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x_le const-decl "bool" extended_nnreal "extended_nnreal/") nil
    (subset? const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (interval? const-decl "bool" real_topology "metric_space/")
    (lower_bound const-decl "bool" bound_defs "reals/")
    (upper_bound const-decl "bool" bound_defs "reals/")
    (member const-decl "bool" sets nil)
    (om_increasing? const-decl "bool" outer_measure_def
     "measure_integration/")
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (outer_measure? const-decl "bool" outer_measure_def
     "measure_integration/")
    (outer_measure nonempty-type-eq-decl nil outer_measure_def
     "measure_integration/")
    (lebesgue_outer_measure const-decl "outer_measure"
     real_lebesgue_scaf nil)
    (lebesgue_outer_measure_closed_open formula-decl nil
     real_lebesgue_scaf nil)
    (nonempty? const-decl "bool" sets nil))
   shostak))
 (lebesgue_outer_measure_open 0
  (lebesgue_outer_measure_open-1 nil 3408184157
   ("" (skosimp)
    (("" (lemma "lebesgue_outer_measure_closed" ("b" "b!1"))
      (("" (lemma "lebesgue_outer_measure_closed_open" ("b" "b!1"))
        (("" (assert)
          (("" (typepred "b!1")
            (("" (expand "bounded_interval?")
              (("" (expand "bounded?")
                (("" (flatten)
                  (("" (split)
                    (("1" (expand "nonempty?") (("1" (propax) nil nil))
                      nil)
                     ("2" (flatten)
                      (("2"
                        (name-replace "OPEN"
                         "lebesgue_outer_measure({x | inf(b!1) < x AND x < sup(b!1)})")
                        (("1"
                          (name-replace "CLOSED"
                           "lebesgue_outer_measure({x | inf(b!1) <= x AND x <= sup(b!1)})")
                          (("1"
                            (name-replace "INTERVAL"
                             "lebesgue_outer_measure(b!1)")
                            (("1" (expand "x_eq")
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp) nil nil))
                          nil)
                         ("2" (skosimp) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (bounded_interval? const-decl "bool" real_topology "metric_space/")
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lebesgue_outer_measure_closed formula-decl nil real_lebesgue_scaf
     nil)
    nil
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (setof type-eq-decl nil defined_types nil)
    (<= const-decl "bool" reals nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (pred type-eq-decl nil defined_types nil)
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (lebesgue_outer_measure const-decl "outer_measure"
     real_lebesgue_scaf nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def
     "measure_integration/")
    (outer_measure? const-decl "bool" outer_measure_def
     "measure_integration/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (bounded? const-decl "bool" real_topology "metric_space/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lebesgue_outer_measure_closed_open formula-decl nil
     real_lebesgue_scaf nil))
   shostak))
 (lebesgue_outer_measure_le_length 0
  (lebesgue_outer_measure_le_length-1 nil 3408184601
   ("" (skosimp)
    (("" (case "nonempty?[real](b!1)")
      (("1" (lemma "lebesgue_outer_measure_open" ("b" "b!1"))
        (("1" (assert)
          (("1" (lemma "length_open" ("b" "b!1"))
            (("1" (assert)
              (("1" (typepred "b!1")
                (("1" (expand "bounded_interval?")
                  (("1" (expand "bounded?")
                    (("1" (flatten)
                      (("1" (split)
                        (("1" (expand "nonempty?")
                          (("1" (propax) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (typepred "inf(b!1)")
                            (("1" (name-replace "AA" "inf(b!1)")
                              (("1"
                                (typepred "sup(b!1)")
                                (("1"
                                  (name-replace "BB" "sup(b!1)")
                                  (("1"
                                    (case
                                     "x_le(lebesgue_outer_measure({x | AA < x AND x < BB}), x_length({x | AA < x AND x < BB}))")
                                    (("1"
                                      (name-replace
                                       "LHS"
                                       "lebesgue_outer_measure(b!1)")
                                      (("1"
                                        (name-replace
                                         "LHS1"
                                         "lebesgue_outer_measure({x | AA < x AND x < BB})")
                                        (("1"
                                          (expand "x_length")
                                          (("1"
                                            (replace -7 * rl)
                                            (("1"
                                              (case-replace
                                               "bounded_interval?({x | AA < x AND x < BB})")
                                              (("1"
                                                (hide-all-but
                                                 (-2 -9 1))
                                                (("1"
                                                  (expand "x_le")
                                                  (("1"
                                                    (expand "x_eq")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (1
                                                  -2
                                                  -3
                                                  -4
                                                  -5
                                                  -6
                                                  -9
                                                  1))
                                                (("2"
                                                  (expand
                                                   "bounded_interval?")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       "interval?")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (typepred
                                                           "x!1")
                                                          (("1"
                                                            (typepred
                                                             "y!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "bounded?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "nonempty?")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (expand
                                                                 "above_bounded")
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "BB")
                                                                  (("1"
                                                                    (expand
                                                                     "upper_bound")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "below_bounded")
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "AA")
                                                                  (("2"
                                                                    (expand
                                                                     "lower_bound")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2 -7)
                                      (("2"
                                        (expand "x_length")
                                        (("2"
                                          (case-replace
                                           "bounded_interval?({x | AA < x AND x < BB})")
                                          (("1"
                                            (expand "x_le")
                                            (("1"
                                              (expand
                                               "lebesgue_outer_measure")
                                              (("1"
                                                (expand "o ")
                                                (("1"
                                                  (expand "x_inf")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -
                                                       "(TRUE,length({x | AA < x AND x < BB}))")
                                                      (("1"
                                                        (inst
                                                         +
                                                         "lambda (i:nat): if i=0 then {x | AA < x AND x < BB} else emptyset[real] endif")
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (expand
                                                             "x_le")
                                                            (("1"
                                                              (expand
                                                               "x_sum")
                                                              (("1"
                                                                (expand
                                                                 "x_length"
                                                                 1)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (case-replace
                                                                     "bounded_interval?(emptyset[real])")
                                                                    (("1"
                                                                      (case-replace
                                                                       "length(emptyset[real])=0")
                                                                      (("1"
                                                                        (case-replace
                                                                         "FORALL (i:nat): IF i = 0 THEN TRUE ELSE TRUE ENDIF")
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "zero_tail_series_conv"
                                                                             ("a"
                                                                              "LAMBDA (i:nat):
                              IF i = 0 THEN length({x | AA < x AND x < BB})
                              ELSE 0
                              ENDIF"
                                                                              "n"
                                                                              "0"))
                                                                            (("1"
                                                                              (lemma
                                                                               "zero_tail_series_limit"
                                                                               ("a"
                                                                                "LAMBDA (i:nat):
                              IF i = 0 THEN length({x | AA < x AND x < BB})
                              ELSE 0
                              ENDIF"
                                                                                "n"
                                                                                "0"))
                                                                              (("1"
                                                                                (case-replace
                                                                                 "(FORALL (m:nat):
         0 < m =>
          (LAMBDA (i: nat):
             IF i = 0 THEN length({x | AA < x AND x < BB}) ELSE 0 ENDIF)
              (m)
           = 0)")
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "series")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "sigma")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "sigma")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   2)
                                                                                  (("2"
                                                                                    (skosimp)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (hide
                                                                                   2
                                                                                   -1
                                                                                   -2)
                                                                                  (("3"
                                                                                    (skosimp)
                                                                                    (("3"
                                                                                      (skosimp)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "length")
                                                                        (("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (case-replace
                                                                             "empty?[real](emptyset[real])")
                                                                            (("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "subset?")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (expand
                                                                   "IUnion")
                                                                  (("2"
                                                                    (inst
                                                                     +
                                                                     "0")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand
                                                             "bounded_open_interval?")
                                                            (("2"
                                                              (rewrite
                                                               "metric_open_def")
                                                              (("2"
                                                                (rewrite
                                                                 "emptyset_is_open")
                                                                (("2"
                                                                  (expand
                                                                   "bounded_interval?")
                                                                  (("2"
                                                                    (hide-all-but
                                                                     2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (skosimp)
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (expand
                                                               "bounded_open_interval?")
                                                              (("3"
                                                                (case
                                                                 "AA<BB")
                                                                (("1"
                                                                  (lemma
                                                                   "metric_open_ball"
                                                                   ("x"
                                                                    "(BB+AA)/2"
                                                                    "r"
                                                                    "(BB-AA)/2"))
                                                                  (("1"
                                                                    (case-replace
                                                                     "ball((BB + AA) / 2, (BB - AA) / 2)={x | AA < x AND x < BB}")
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       2)
                                                                      (("1"
                                                                        (apply-extensionality
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (expand
                                                                           "ball")
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-1
                                                                              1))
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case-replace
                                                                   "{x | AA < x AND x < BB}=emptyset[real]")
                                                                  (("1"
                                                                    (rewrite
                                                                     "metric_open_def")
                                                                    (("1"
                                                                      (rewrite
                                                                       "emptyset_is_open")
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      2))
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       :hide?
                                                                       t)
                                                                      (("2"
                                                                        (expand
                                                                         "emptyset")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case-replace
                                                       "FORALL (x_1:
                   ({z:extended_nnreal |
                       EXISTS I:
                         x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), z)
                          AND
                          subset?[real]
                              ({x | AA < x AND x < BB}, IUnion(I))})):
           NOT x_1`1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (replace 1 2)
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (case
                                                             "nonempty?({z_1: real |
             EXISTS (x_1: extended_nnreal):
               (EXISTS I:
                  x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                   subset?[real]({x | AA < x AND x < BB}, IUnion(I)))
                AND x_1`1 AND x_1`2 = z_1})")
                                                            (("1"
                                                              (case
                                                               "bounded_below?({z_1: real |
                         EXISTS (x_1: extended_nnreal):
                           (EXISTS I:
                              x_le(x_sum(LAMBDA (x: nat): x_length(I(x))),
                                   x_1)
                               AND
                               subset?[real]
                                   ({x | AA < x AND x < BB},
                                    IUnion[nat, real](I)))
                            AND x_1`1 AND x_1`2 = z_1})")
                                                              (("1"
                                                                (typepred
                                                                 "glb({z_1: real |
             EXISTS (x_1: extended_nnreal):
               (EXISTS I:
                  x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                   subset?[real]({x | AA < x AND x < BB}, IUnion(I)))
                AND x_1`1 AND x_1`2 = z_1})")
                                                                (("1"
                                                                  (name-replace
                                                                   "GLB"
                                                                   "glb({z_1: real |
             EXISTS (x_1: extended_nnreal):
               (EXISTS I:
                  x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                   subset?[real]({x | AA < x AND x < BB}, IUnion(I)))
                AND x_1`1 AND x_1`2 = z_1})")
                                                                  (("1"
                                                                    (hide
                                                                     -2
                                                                     -3)
                                                                    (("1"
                                                                      (expand
                                                                       "greatest_lower_bound?")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "lower_bound?")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "length({x | AA < x AND x < BB})")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "(TRUE,length({x | AA < x AND x < BB}))")
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 2)
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "lambda (i:nat): if i=0 then {x | AA < x AND x < BB} else emptyset[real] endif")
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "x_sum")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "x_le")
                                                                                        (("1"
                                                                                          (case-replace
                                                                                           "x_length(emptyset[real])=(TRUE,0)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "x_length"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -8
                                                                                                     *
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (case-replace
                                                                                                       "FORALL (i:nat): IF i = 0 THEN TRUE ELSE TRUE ENDIF")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "zero_tail_series_conv"
                                                                                                         ("a"
                                                                                                          "LAMBDA (i:nat):
                              IF i = 0 THEN length(b!1) ELSE 0 ENDIF"
                                                                                                          "n"
                                                                                                          "0"))
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "zero_tail_series_limit"
                                                                                                           ("a"
                                                                                                            "LAMBDA (i:nat):
                              IF i = 0 THEN length(b!1) ELSE 0 ENDIF"
                                                                                                            "n"
                                                                                                            "0"))
                                                                                                          (("1"
                                                                                                            (case-replace
                                                                                                             "FORALL (m:nat):
         0 < m =>
          (LAMBDA (i: nat): IF i = 0 THEN length(b!1) ELSE 0 ENDIF)(m) = 0")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -3)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "series")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "sigma")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "sigma")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (skosimp)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skosimp)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "x_length")
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "length")
                                                                                                    (("1"
                                                                                                      (case-replace
                                                                                                       "empty?[real](emptyset[real])")
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("3"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "subset?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "IUnion")
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "0")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "bounded_open_interval?")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "metric_open_def")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "emptyset_is_open")
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             2)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (skosimp)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "bounded_open_interval?")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("3"
                                                                                            (case
                                                                                             "AA<BB")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "metric_open_ball"
                                                                                               ("x"
                                                                                                "(AA+BB)/2"
                                                                                                "r"
                                                                                                "(BB-AA)/2"))
                                                                                              (("1"
                                                                                                (case-replace
                                                                                                 "ball((AA + BB) / 2, (BB - AA) / 2)={x | AA < x AND x < BB}")
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "ball")
                                                                                                    (("1"
                                                                                                      (apply-extensionality
                                                                                                       :hide?
                                                                                                       t)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("3"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case-replace
                                                                                               "{x | AA < x AND x < BB}=emptyset[real]")
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "metric_open_def")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "emptyset_is_open")
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (apply-extensionality
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "emptyset")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "bounded_below?")
                                                                  (("2"
                                                                    (inst
                                                                     +
                                                                     "0")
                                                                    (("2"
                                                                      (expand
                                                                       "lower_bound?")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (typepred
                                                                           "s!1")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "nonempty?"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "empty?"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "x!1`2")
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "x!1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -6 2)
                                            (("2"
                                              (expand
                                               "bounded_interval?")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (expand "interval?")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "bounded?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "nonempty?")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (expand
                                                             "above_bounded")
                                                            (("1"
                                                              (inst
                                                               +
                                                               "BB")
                                                              (("1"
                                                                (expand
                                                                 "upper_bound")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "below_bounded")
                                                            (("2"
                                                              (inst
                                                               +
                                                               "AA")
                                                              (("2"
                                                                (expand
                                                                 "lower_bound")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2 -7 -6)
                                      (("3"
                                        (expand "interval?")
                                        (("3"
                                          (skosimp)
                                          (("3"
                                            (typepred "z!1")
                                            (("3"
                                              (typepred "x!1")
                                              (("3"
                                                (inst
                                                 -
                                                 "x!1"
                                                 "y!1"
                                                 "z!1")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (typepred "y!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "nonempty?")
        (("2" (expand "x_length")
          (("2" (expand "length")
            (("2" (assert)
              (("2" (typepred "lebesgue_outer_measure")
                (("2" (expand "outer_measure?")
                  (("2" (flatten)
                    (("2" (rewrite "emptyset_is_empty?")
                      (("2" (replace -4)
                        (("2" (expand "om_empty?")
                          (("2" (replace -1)
                            (("2" (expand "x_le")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((om_empty? const-decl "bool" outer_measure_def
     "measure_integration/")
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (lebesgue_outer_measure_open formula-decl nil real_lebesgue_scaf
     nil)
    (length_open formula-decl nil real_intervals_aux nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bounded? const-decl "bool" real_topology "metric_space/")
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (setof type-eq-decl nil defined_types nil)
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (<= const-decl "bool" reals nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (pred type-eq-decl nil defined_types nil)
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (x_le const-decl "bool" extended_nnreal "extended_nnreal/")
    (outer_measure? const-decl "bool" outer_measure_def
     "measure_integration/")
    (outer_measure nonempty-type-eq-decl nil outer_measure_def
     "measure_integration/")
    (lebesgue_outer_measure const-decl "outer_measure"
     real_lebesgue_scaf nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (interval? const-decl "bool" real_topology "metric_space/")
    (interval nonempty-type-eq-decl nil real_topology "metric_space/")
    (x_length const-decl "extended_nnreal" real_lebesgue_scaf nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (upper_bound const-decl "bool" bound_defs "reals/") nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (O const-decl "T3" function_props nil) nil nil nil nil nil nil nil
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (emptyset const-decl "set" sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (empty? const-decl "bool" sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (zero_tail_series_conv formula-decl nil series_aux "series/")
    (sigma def-decl "real" sigma "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil) nil
    (zero_tail_series_limit formula-decl nil series_aux "series/")
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (setofsets type-eq-decl nil sets nil)
    (emptyset_is_open judgement-tcc nil topology "topology/") nil
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology "metric_space/")
    (metric_open_def formula-decl nil metric_space "metric_space/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ball const-decl "set[T]" metric_space_def "metric_space/") nil
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (metric_open_ball formula-decl nil metric_space "metric_space/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (metric? const-decl "bool" metric_def "metric_space/")
    (metric_zero? const-decl "bool" metric_def "metric_space/")
    (metric_symmetric? const-decl "bool" metric_def "metric_space/")
    (metric_triangle? const-decl "bool" metric_def "metric_space/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bounded_open_interval? const-decl "bool" real_topology
     "metric_space/")
    (bounded_open_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (sequence type-eq-decl nil sequences nil) nil
    (subset? const-decl "bool" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (TRUE const-decl "bool" booleans nil)
    (length const-decl "nnreal" real_intervals_aux nil) nil nil nil nil
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (sigma_0_neg formula-decl nil sigma_nat "reals/") nil
    (bounded_below? const-decl "bool" bounded_real_defs nil) nil nil
    nil (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (bounded_interval? const-decl "bool" real_topology "metric_space/")
    (bounded_interval nonempty-type-eq-decl nil real_topology
     "metric_space/"))
   shostak))
 (lebesgue_outer_measure_eq_length 0
  (lebesgue_outer_measure_eq_length-6 nil 3769791683
   (""
    (case "FORALL (b: bounded_interval): x_le(lebesgue_outer_measure(b),x_length(b))")
    (("1"
      (case "FORALL (b: bounded_interval):
                 x_le(x_length(b),lebesgue_outer_measure(b))")
      (("1" (skosimp)
        (("1" (inst - "b!1")
          (("1" (inst - "b!1")
            (("1" (expand "x_le")
              (("1" (expand "x_eq")
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2 -1)
        (("2"
          (case "FORALL (a, b: real, I):
                   a <= b & subset?({x | a <= x & x <= b}, IUnion(I)) =>
                    x_le((TRUE, b - a), x_sum(x_length o I))")
          (("1" (skosimp)
            (("1" (case "nonempty?[real](b!1)")
              (("1" (lemma "lebesgue_outer_measure_closed" ("b" "b!1"))
                (("1" (lemma "length_closed" ("b" "b!1"))
                  (("1" (assert)
                    (("1" (typepred "inf(b!1)")
                      (("1" (typepred "sup(b!1)")
                        (("1" (expand "x_length" 1)
                          (("1" (expand "length" 1)
                            (("1" (expand "nonempty?" -5)
                              (("1"
                                (assert)
                                (("1"
                                  (name-replace "AA" "inf(b!1)")
                                  (("1"
                                    (name-replace "BB" "sup(b!1)")
                                    (("1"
                                      (inst - "AA" "BB" "_")
                                      (("1"
                                        (name-replace
                                         "RHS"
                                         "lebesgue_outer_measure(b!1)")
                                        (("1"
                                          (case-replace "AA<=BB")
                                          (("1"
                                            (case-replace
                                             "x_le((TRUE, BB - AA), lebesgue_outer_measure({x | AA <= x AND x <= BB}))")
                                            (("1"
                                              (name-replace
                                               "DRL1"
                                               "lebesgue_outer_measure({x | AA <= x AND x <= BB})")
                                              (("1"
                                                (hide-all-but
                                                 (-1 -6 2))
                                                (("1"
                                                  (expand "x_le")
                                                  (("1"
                                                    (expand "x_eq")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -5 3)
                                              (("2"
                                                (expand
                                                 "lebesgue_outer_measure")
                                                (("2"
                                                  (expand "x_le" 1)
                                                  (("2"
                                                    (expand "x_inf")
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (replace 1 2)
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (case
                                                             "nonempty?({z_1: real |
                                     EXISTS (x_1: extended_nnreal):
                                       (EXISTS I:
                                          ((x_sum(x_length o I)`1 AND
                                             x_1`1 AND x_sum(x_length o I)`2 <= x_1`2)
                                            OR (NOT x_1`1))
                                           AND
                                           subset?[real]({x | AA <= x AND x <= BB}, IUnion(I)))
                                        AND x_1`1 AND x_1`2 = z_1})")
                                                            (("1"
                                                              (case
                                                               "bounded_below?({z_1: real |
                                       EXISTS (x_1: extended_nnreal):
                                         (EXISTS I:
                                            ((x_sum(x_length o I)`1 AND
                                               x_1`1 AND x_sum(x_length o I)`2 <= x_1`2)
                                              OR (NOT x_1`1))
                                             AND
                                             subset?[real]({x | AA <= x AND x <= BB}, IUnion(I)))
                                          AND x_1`1 AND x_1`2 = z_1})")
                                                              (("1"
                                                                (typepred
                                                                 "glb({z_1: real |
                                    EXISTS (x_1: extended_nnreal):
                                      (EXISTS I:
                                         ((x_sum(x_length o I)`1 AND
                                            x_1`1 AND x_sum(x_length o I)`2 <= x_1`2)
                                           OR (NOT x_1`1))
                                          AND
                                          subset?[real]({x | AA <= x AND x <= BB}, IUnion(I)))
                                       AND x_1`1 AND x_1`2 = z_1})")
                                                                (("1"
                                                                  (hide
                                                                   -2
                                                                   -3)
                                                                  (("1"
                                                                    (name-replace
                                                                     "GLB"
                                                                     "glb({z_1: real |
                                      EXISTS (x_1: extended_nnreal):
                                        (EXISTS I:
                                           ((x_sum(x_length o I)`1 AND
                                              x_1`1 AND x_sum(x_length o I)`2 <= x_1`2)
                                             OR (NOT x_1`1))
                                            AND
                                            subset?[real]({x | AA <= x AND x <= BB}, IUnion(I)))
                                         AND x_1`1 AND x_1`2 = z_1})")
                                                                    (("1"
                                                                      (expand
                                                                       "greatest_lower_bound?"
                                                                       -1)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "BB-AA")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "lower_bound?"
                                                                               1)
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "s!1")
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (skosimp)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -11
                                                                                         "I!1")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "x_le"
                                                                                             -11)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "bounded_below?")
                                                                  (("2"
                                                                    (inst
                                                                     +
                                                                     "0")
                                                                    (("2"
                                                                      (expand
                                                                       "lower_bound?")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (typepred
                                                                           "s!1")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "nonempty?")
                                                                (("2"
                                                                  (expand
                                                                   "empty?"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "x!1`2")
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "x!1")
                                                                        (("2"
                                                                          (typepred
                                                                           "x!1")
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 -2 1 2))
                                            (("2"
                                              (expand "empty?")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (expand
                                                     "least_upper_bound")
                                                    (("2"
                                                      (expand
                                                       "greatest_lower_bound")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide -2 -4)
                                                          (("2"
                                                            (expand
                                                             "upper_bound")
                                                            (("2"
                                                              (expand
                                                               "lower_bound")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "x!1")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "b!1")
                          (("2" (expand "bounded_interval?")
                            (("2" (expand "bounded?")
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "nonempty?")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "b!1")
                        (("2" (expand "bounded_interval?")
                          (("2" (expand "bounded?")
                            (("2" (expand "nonempty?")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nonempty?")
                (("2" (hide -2)
                  (("2" (expand "x_length")
                    (("2" (expand "length")
                      (("2" (assert)
                        (("2" (expand "x_le")
                          (("2" (flatten)
                            (("2" (assert) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (lemma "real_heine_borel" ("a" "a!1" "b" "b!1"))
                (("2" (assert)
                  (("2" (expand "compact?")
                    (("2" (expand "compact_subset?")
                      (("2"
                        (inst -
                         "image[nat,set[real]](I!1,fullset[nat])")
                        (("2" (split -1)
                          (("1" (skosimp)
                            (("1" (expand "finite_cover?")
                              (("1"
                                (expand "cover?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (case "nonempty?(V!1)")
                                    (("1"
                                      (lemma
                                       "nonempty_card[set[real]]"
                                       ("S" "V!1"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "x_le((TRUE, b!1 - a!1), x_sum(x_length o lambda n: if V!1(I!1(n)) then I!1(n) else emptyset[real] endif))")
                                          (("1"
                                            (hide-all-but (-1 1 -7))
                                            (("1"
                                              (expand "o")
                                              (("1"
                                                (expand
                                                 "x_length"
                                                 -1
                                                 2)
                                                (("1"
                                                  (rewrite
                                                   "length_empty_rew"
                                                   -1)
                                                  (("1"
                                                    (case-replace
                                                     "bounded_interval?(emptyset[real])")
                                                    (("1"
                                                      (expand "x_le")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (replace -4)
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "x_sum")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (replace
                                                                         -3)
                                                                        (("1"
                                                                          (replace
                                                                           -4)
                                                                          (("1"
                                                                            (lemma
                                                                             "convergent_diff"
                                                                             ("s1"
                                                                              "series(LAMBDA (i:nat): x_length(I!1(i))`2)"
                                                                              "s2"
                                                                              "series(LAMBDA (i:nat):
                                          IF V!1(I!1(i)) THEN x_length(I!1(i))`2 ELSE 0 ENDIF)"))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "limit_diff"
                                                                                 ("v1"
                                                                                  "series(LAMBDA (i:nat): x_length(I!1(i))`2)"
                                                                                  "v2"
                                                                                  "series(LAMBDA (i:nat):
                                            IF V!1(I!1(i)) THEN x_length(I!1(i))`2 ELSE 0 ENDIF)"))
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "series_diff")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "-"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "-"
                                                                                       -2)
                                                                                      (("1"
                                                                                        (name-replace
                                                                                         "RHS"
                                                                                         "convergence_sequences.limit(series(LAMBDA (i:nat): x_length(I!1(i))`2))")
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "DRL1"
                                                                                           "convergence_sequences.limit
                                 (series(LAMBDA (i:nat):
                                           IF V!1(I!1(i)) THEN x_length(I!1(i))`2 ELSE 0 ENDIF))")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "limit_nonneg"
                                                                                             ("nna"
                                                                                              "series(LAMBDA (x: nat):
                                            x_length(I!1(x))`2 -
                                             IF V!1(I!1(x)) THEN x_length(I!1(x))`2 ELSE 0 ENDIF)"))
                                                                                            (("1"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "series"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "sigma_ge_0")
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (skosimp)
                                                                                                      (("2"
                                                                                                        (case-replace
                                                                                                         "V!1(I!1(n!1))")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "x_sum")
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "i!1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "comparison_test"
                                                                     ("b"
                                                                      "LAMBDA (i:nat): x_length(I!1(i))`2"
                                                                      "a"
                                                                      "LAMBDA (i:nat):
                                                 IF V!1(I!1(i)) THEN x_length(I!1(i))`2
                                                 ELSE 0
                                                 ENDIF"))
                                                                    (("2"
                                                                      (replace
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (typepred
                                                                             "x_length(I!1(n!1))`2")
                                                                            (("2"
                                                                              (expand
                                                                               "abs"
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (case-replace
                                                                                   "V!1(I!1(n!1))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (expand
                                                         "bounded_interval?")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (expand
                                                             "emptyset")
                                                            (("1"
                                                              (expand
                                                               "interval?")
                                                              (("1"
                                                                (skosimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "bounded?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (rewrite
                                                                 "emptyset_is_empty?")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (expand "o")
                                              (("2"
                                                (expand "x_length" 1 2)
                                                (("2"
                                                  (rewrite
                                                   "length_empty_rew")
                                                  (("2"
                                                    (case-replace
                                                     "bounded_interval?(emptyset[real])")
                                                    (("1"
                                                      (expand "x_sum")
                                                      (("1"
                                                        (expand "x_le")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (expand
                                                                 "x_length")
                                                                (("1"
                                                                  (case-replace
                                                                   "(LAMBDA (i:nat):
                                       IF V!1(I!1(i))
                                         THEN IF bounded_interval?(I!1(i))
                                                THEN length(I!1(i))
                                              ELSE 0
                                              ENDIF
                                       ELSE 0
                                       ENDIF)=lambda n: if V!1(I!1(n)) then length(I!1(n)) else 0 endif")
                                                                  (("1"
                                                                    (hide
                                                                     -1
                                                                     -2)
                                                                    (("1"
                                                                      (lemma
                                                                       "card_bij_inv[set[real]]"
                                                                       ("S"
                                                                        "V!1"
                                                                        "N"
                                                                        "card(V!1)"))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (lemma
                                                                             "nn_convegent_bounded"
                                                                             ("v"
                                                                              "LAMBDA n:
                                               IF V!1(I!1(n)) THEN length(I!1(n)) ELSE 0 ENDIF"))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "nn_limit_lub"
                                                                                 ("v"
                                                                                  "LAMBDA n:
                                                        IF V!1(I!1(n)) THEN length(I!1(n))
                                                        ELSE 0
                                                        ENDIF"))
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1
                                                                                       -4)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "lub(Im(series(LAMBDA n:
                                             IF V!1(I!1(n)) THEN length(I!1(n)) ELSE 0 ENDIF)))")
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "LUB"
                                                                                           "lub(Im(series(LAMBDA n:
                                             IF V!1(I!1(n)) THEN length(I!1(n)) ELSE 0 ENDIF)))")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "least_upper_bound?")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "upper_bound?")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "forall (m:nat): m < card(V!1) => exists n: forall (i:nat): i <= m => exists (j:nat): I!1(j) = f!1(i) & j <= n")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "card(V!1)-1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (skosimp)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -2
                                                                                                             "series(LAMBDA n:
                                                     IF V!1(I!1(n)) THEN length(I!1(n))
                                                     ELSE 0
                                                     ENDIF)(n!1)")
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "sigma(0,card(V!1)-1,lambda n: if n<card(V!1) then length(f!1(n)) else 0 endif) <= series(LAMBDA n: IF V!1(I!1(n)) THEN length(I!1(n)) ELSE 0 ENDIF)
                                           (n!1)")
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "forall (pn:posnat): forall (V:setofsets[real]): forall (a,b:real,f:(bijective?[below[pn],(V)])): a<=b&subset?({x|a<=x&x<=b}, Union(V))&is_finite(V)&card(V)=pn&subset?(V, image[nat, set[real]](I!1, fullset[nat]))=>b-a <= sigma(0,pn-1, LAMBDA n: IF n < pn THEN length(f(n)) ELSE 0 ENDIF)")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "card(V!1)")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "V!1")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "a!1"
                                                                                                                       "b!1"
                                                                                                                       "f!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (induct
                                                                                                                     "pn")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (skosimp*)
                                                                                                                      (("3"
                                                                                                                        (case-replace
                                                                                                                         "j!1=0")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "sigma")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "sigma")
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "card_one[set[real]]"
                                                                                                                                 ("S"
                                                                                                                                  "V!2"))
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (skosimp)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (typepred
                                                                                                                                         "f!2(0)")
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -2)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "subset?"
                                                                                                                                             -9)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -9
                                                                                                                                               "f!2(0)")
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "member")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "fullset")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "image")
                                                                                                                                                      (("1"
                                                                                                                                                        (skosimp)
                                                                                                                                                        (("1"
                                                                                                                                                          (typepred
                                                                                                                                                           "I!1(x!2)")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "singleton")
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "Union")
                                                                                                                                                              (("1"
                                                                                                                                                                (case-replace
                                                                                                                                                                 "{x: real | EXISTS (a: ({y: set[real] | y = x!1})): a(x)}=x!1")
                                                                                                                                                                (("1"
                                                                                                                                                                  (hide
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -2)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -10
                                                                                                                                                                       *
                                                                                                                                                                       rl)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "length")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (case-replace
                                                                                                                                                                           "empty?[real](x!1)")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             "empty?")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "subset?")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "member")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -8
                                                                                                                                                                                   "a!2")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -
                                                                                                                                                                                       "a!2")
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (typepred
                                                                                                                                                                               "sup(x!1)")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "inf(x!1)")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "greatest_lower_bound")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "least_upper_bound")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (flatten)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "lower_bound")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "upper_bound")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "subset?")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "member")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst-cp
                                                                                                                                                                                                 -11
                                                                                                                                                                                                 "a!2")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (inst
                                                                                                                                                                                                   -11
                                                                                                                                                                                                   "b!2")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (inst
                                                                                                                                                                                                       -
                                                                                                                                                                                                       "a!2")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (hide
                                                                                                                                                                                                         -2
                                                                                                                                                                                                         -4)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (inst
                                                                                                                                                                                                           -
                                                                                                                                                                                                           "b!2")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (apply-extensionality
                                                                                                                                                                     :hide?
                                                                                                                                                                     t)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (case-replace
                                                                                                                                                                       "x!1(x!3)")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst
                                                                                                                                                                         +
                                                                                                                                                                         "x!1")
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "j!1>=1")
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "exists (k:below[1+j!1]): f!2(k)(a!2)")
                                                                                                                                (("1"
                                                                                                                                  (skosimp)
                                                                                                                                  (("1"
                                                                                                                                    (typepred
                                                                                                                                     "k!1")
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "sigma_middle[nat]"
                                                                                                                                       ("low"
                                                                                                                                        "0"
                                                                                                                                        "high"
                                                                                                                                        "j!1"
                                                                                                                                        "i"
                                                                                                                                        "k!1"
                                                                                                                                        "F"
                                                                                                                                        "LAMBDA n: IF n < 1 + j!1 THEN length(f!2(n)) ELSE 0 ENDIF"))
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "f!2(k!1)(b!2)")
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "sigma_ge_0"
                                                                                                                                                 ("low"
                                                                                                                                                  "0"
                                                                                                                                                  "high"
                                                                                                                                                  "k!1-1"
                                                                                                                                                  "F"
                                                                                                                                                  "LAMBDA n: IF n < 1 + j!1 THEN length(f!2(n)) ELSE 0 ENDIF"))
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "sigma_ge_0"
                                                                                                                                                   ("low"
                                                                                                                                                    "1+k!1"
                                                                                                                                                    "high"
                                                                                                                                                    "j!1"
                                                                                                                                                    "F"
                                                                                                                                                    "LAMBDA n: IF n < 1 + j!1 THEN length(f!2(n)) ELSE 0 ENDIF"))
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "b!2 - a!2 <=
                                                 length(f!2(k!1))")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (split
                                                                                                                                                         -2)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -3)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide
                                                                                                                                                             2)
                                                                                                                                                            (("2"
                                                                                                                                                              (skosimp)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (skosimp)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide
                                                                                                                                                       -1
                                                                                                                                                       -2
                                                                                                                                                       2)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "length"
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (case-replace
                                                                                                                                                           "empty?[real](f!2(k!1))")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "empty?")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -
                                                                                                                                                               "a!2")
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "member")
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (typepred
                                                                                                                                                               "sup(f!2(k!1))")
                                                                                                                                                              (("2"
                                                                                                                                                                (typepred
                                                                                                                                                                 "inf(f!2(k!1))")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "greatest_lower_bound")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "least_upper_bound")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "lower_bound")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -
                                                                                                                                                                           "a!2")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "upper_bound")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (hide
                                                                                                                                                                               -2
                                                                                                                                                                               -4)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -
                                                                                                                                                                                 "b!2")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (case
                                                                                                                                                 "sup(f!2(k!1))<=b!2")
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "remove(f!2(k!1),V!2)")
                                                                                                                                                    (("1"
                                                                                                                                                      (rewrite
                                                                                                                                                       "finite_remove")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -
                                                                                                                                                         "sup(f!2(k!1))"
                                                                                                                                                         "b!2"
                                                                                                                                                         "_")
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (rewrite
                                                                                                                                                             "card_remove")
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -10)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case-replace
                                                                                                                                                                   "subset?({x | sup(f!2(k!1)) <= x & x <= b!2},
                                                            Union(remove(f!2(k!1), V!2)))")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (hide
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (case-replace
                                                                                                                                                                       "subset?(remove(f!2(k!1), V!2),
                                                              image[nat, set[real]](I!1, fullset[nat]))")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           -
                                                                                                                                                                           "lambda (n:below[j!1]): if n < k!1 then f!2(n) else f!2(n+1) endif")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (case
                                                                                                                                                                             "sup(f!2(k!1))-a!2<=length(f!2(k!1))")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (case-replace
                                                                                                                                                                               "(LAMBDA (n_1: nat):
                                                                   IF n_1 < j!1
                                                                     THEN length(IF n_1 < k!1 THEN f!2(n_1)
                                                                                 ELSE f!2(n_1 + 1)
                                                                                 ENDIF)
                                                                   ELSE 0
                                                                   ENDIF)=LAMBDA n: IF n < k!1 then length(f!2(n)) elsif n <j!1 then length(f!2(n+1)) else 0 endif")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (lemma
                                                                                                                                                                                   "sigma_split"
                                                                                                                                                                                   ("low"
                                                                                                                                                                                    "0"
                                                                                                                                                                                    "high"
                                                                                                                                                                                    "j!1-1"
                                                                                                                                                                                    "z"
                                                                                                                                                                                    "k!1-1"
                                                                                                                                                                                    "F"
                                                                                                                                                                                    "LAMBDA n:
                                                                      IF n < k!1 THEN length(f!2(n))
                                                                      ELSIF n < j!1 THEN length(f!2(n + 1))
                                                                      ELSE 0
                                                                      ENDIF"))
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (hide
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "sigma_eq"
                                                                                                                                                                                           ("low"
                                                                                                                                                                                            "0"
                                                                                                                                                                                            "high"
                                                                                                                                                                                            "k!1-1"
                                                                                                                                                                                            "F"
                                                                                                                                                                                            "LAMBDA n:
                                                                        IF n < k!1 THEN length(f!2(n))
                                                                        ELSIF n < j!1 THEN length(f!2(1 + n))
                                                                        ELSE 0
                                                                        ENDIF"
                                                                                                                                                                                            "G"
                                                                                                                                                                                            "LAMBDA n: IF n < 1 + j!1 THEN length(f!2(n)) ELSE 0 ENDIF"))
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (split
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -1)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (hide
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (name-replace
                                                                                                                                                                                                   "DRL1"
                                                                                                                                                                                                   "sigma(0, k!1 - 1,
                                                                       LAMBDA n: IF n < 1 + j!1 THEN length(f!2(n)) ELSE 0 ENDIF)")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                     "sigma_shift_T2[nat]"
                                                                                                                                                                                                     ("z"
                                                                                                                                                                                                      "1"
                                                                                                                                                                                                      "low"
                                                                                                                                                                                                      "k!1"
                                                                                                                                                                                                      "high"
                                                                                                                                                                                                      "j!1-1"
                                                                                                                                                                                                      "F"
                                                                                                                                                                                                      "LAMBDA n: IF n < 1 + j!1 THEN length(f!2(n)) ELSE 0 ENDIF"))
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (split
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (replace
                                                                                                                                                                                                         -1)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (hide
                                                                                                                                                                                                           -1)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (lemma
                                                                                                                                                                                                               "sigma_eq"
                                                                                                                                                                                                               ("low"
                                                                                                                                                                                                                "k!1"
                                                                                                                                                                                                                "high"
                                                                                                                                                                                                                "j!1-1"
                                                                                                                                                                                                                "F"
                                                                                                                                                                                                                "LAMBDA n:
                                                                            IF n < k!1 THEN length(f!2(n))
                                                                            ELSIF n < j!1 THEN length(f!2(1 + n))
                                                                            ELSE 0
                                                                            ENDIF"
                                                                                                                                                                                                                "G"
                                                                                                                                                                                                                "LAMBDA (i: nat):
                                                                             IF 1 + i < 1 + j!1 THEN length(f!2(1 + i)) ELSE 0 ENDIF"))
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (split
                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (hide
                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                  (hide
                                                                                                                                                                                                                   -6
                                                                                                                                                                                                                   2)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (case-replace
                                                                                                                                                                                                                       "n!2 < k!1")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil)
                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                (skosimp)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "subset?")
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (inst
                                                                                                                                                                                                                     -13
                                                                                                                                                                                                                     "f!2(1+i!1)")
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                         "fullset")
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                           "image")
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (skosimp)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (typepred
                                                                                                                                                                                                                               "I!1(x!1)")
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                 "bounded_open_interval?")
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("3"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (skosimp)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (case-replace
                                                                                                                                                                                                 "n!2 < k!1")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "subset?")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -13
                                                                                                                                                                                         "f!2(1+n!2)")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "fullset")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "image")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (skosimp)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (typepred
                                                                                                                                                                                                   "I!1(x!1)")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "bounded_open_interval?")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (flatten)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("3"
                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("4"
                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                    (("4"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "subset?")
                                                                                                                                                                                      (("4"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -13
                                                                                                                                                                                         "f!2(n!2)")
                                                                                                                                                                                        (("4"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "member")
                                                                                                                                                                                          (("4"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "fullset")
                                                                                                                                                                                            (("4"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "image")
                                                                                                                                                                                              (("4"
                                                                                                                                                                                                (skosimp)
                                                                                                                                                                                                (("4"
                                                                                                                                                                                                  (typepred
                                                                                                                                                                                                   "I!1(x!1)")
                                                                                                                                                                                                  (("4"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "bounded_open_interval?")
                                                                                                                                                                                                    (("4"
                                                                                                                                                                                                      (flatten)
                                                                                                                                                                                                      (("4"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("5"
                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                    (("5"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -6
                                                                                                                                                                                 2)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (apply-extensionality
                                                                                                                                                                                   :hide?
                                                                                                                                                                                   t)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (case-replace
                                                                                                                                                                                     "x!1 < k!1")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       3)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "subset?")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           -12
                                                                                                                                                                                           "f!2(1+n!2)")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "image")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (skosimp)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (typepred
                                                                                                                                                                                                   "I!1(x!1)")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "bounded_open_interval?")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (flatten)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (replace
                                                                                                                                                                                                         -14)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (propax)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("3"
                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("4"
                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                    (("4"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "subset?")
                                                                                                                                                                                      (("4"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -12
                                                                                                                                                                                         "f!2(n!2)")
                                                                                                                                                                                        (("4"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "member")
                                                                                                                                                                                          (("4"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "fullset")
                                                                                                                                                                                            (("4"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "image")
                                                                                                                                                                                              (("4"
                                                                                                                                                                                                (skosimp)
                                                                                                                                                                                                (("4"
                                                                                                                                                                                                  (typepred
                                                                                                                                                                                                   "I!1(x!1)")
                                                                                                                                                                                                  (("4"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "bounded_open_interval?")
                                                                                                                                                                                                    (("4"
                                                                                                                                                                                                      (flatten)
                                                                                                                                                                                                      (("4"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("5"
                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                    (("5"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("6"
                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                    (("6"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "subset?")
                                                                                                                                                                                      (("6"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -12
                                                                                                                                                                                         "f!2(1+n!2)")
                                                                                                                                                                                        (("6"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("6"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "fullset")
                                                                                                                                                                                            (("6"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "image")
                                                                                                                                                                                              (("6"
                                                                                                                                                                                                (skosimp)
                                                                                                                                                                                                (("6"
                                                                                                                                                                                                  (typepred
                                                                                                                                                                                                   "I!1(x!1)")
                                                                                                                                                                                                  (("6"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "bounded_open_interval?")
                                                                                                                                                                                                    (("6"
                                                                                                                                                                                                      (flatten)
                                                                                                                                                                                                      (("6"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("7"
                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                    (("7"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("8"
                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                    (("8"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "subset?")
                                                                                                                                                                                      (("8"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "member")
                                                                                                                                                                                        (("8"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           -13
                                                                                                                                                                                           "f!2(n!2)")
                                                                                                                                                                                          (("8"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("8"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "fullset")
                                                                                                                                                                                              (("8"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "image")
                                                                                                                                                                                                (("8"
                                                                                                                                                                                                  (skosimp)
                                                                                                                                                                                                  (("8"
                                                                                                                                                                                                    (typepred
                                                                                                                                                                                                     "I!1(x!1)")
                                                                                                                                                                                                    (("8"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "bounded_open_interval?")
                                                                                                                                                                                                      (("8"
                                                                                                                                                                                                        (flatten)
                                                                                                                                                                                                        (("8"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("9"
                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                    (("9"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("3"
                                                                                                                                                                                (skosimp)
                                                                                                                                                                                (("3"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "subset?")
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -13
                                                                                                                                                                                     "f!2(1+n!2)")
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "member")
                                                                                                                                                                                      (("3"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "fullset")
                                                                                                                                                                                        (("3"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "image")
                                                                                                                                                                                          (("3"
                                                                                                                                                                                            (skosimp)
                                                                                                                                                                                            (("3"
                                                                                                                                                                                              (typepred
                                                                                                                                                                                               "I!1(x!1)")
                                                                                                                                                                                              (("3"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "bounded_open_interval?")
                                                                                                                                                                                                (("3"
                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                  (("3"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("4"
                                                                                                                                                                                (skosimp)
                                                                                                                                                                                (("4"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("5"
                                                                                                                                                                                (skosimp)
                                                                                                                                                                                (("5"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "subset?")
                                                                                                                                                                                  (("5"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -13
                                                                                                                                                                                     "f!2(n!2)")
                                                                                                                                                                                    (("5"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "member")
                                                                                                                                                                                      (("5"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "fullset")
                                                                                                                                                                                        (("5"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "image")
                                                                                                                                                                                          (("5"
                                                                                                                                                                                            (skosimp)
                                                                                                                                                                                            (("5"
                                                                                                                                                                                              (typepred
                                                                                                                                                                                               "I!1(x!1)")
                                                                                                                                                                                              (("5"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "bounded_open_interval?")
                                                                                                                                                                                                (("5"
                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                  (("5"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("6"
                                                                                                                                                                                (skosimp)
                                                                                                                                                                                (("6"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("7"
                                                                                                                                                                                (skosimp)
                                                                                                                                                                                (("7"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "subset?")
                                                                                                                                                                                  (("7"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -13
                                                                                                                                                                                     "f!2(1+n!2)")
                                                                                                                                                                                    (("7"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "member")
                                                                                                                                                                                      (("7"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "fullset")
                                                                                                                                                                                        (("7"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "image")
                                                                                                                                                                                          (("7"
                                                                                                                                                                                            (skosimp)
                                                                                                                                                                                            (("7"
                                                                                                                                                                                              (typepred
                                                                                                                                                                                               "I!1(x!1)")
                                                                                                                                                                                              (("7"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "bounded_open_interval?")
                                                                                                                                                                                                (("7"
                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                  (("7"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("8"
                                                                                                                                                                                (skosimp)
                                                                                                                                                                                (("8"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("9"
                                                                                                                                                                                (skosimp)
                                                                                                                                                                                (("9"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "subset?")
                                                                                                                                                                                  (("9"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -14
                                                                                                                                                                                     "f!2(n!2)")
                                                                                                                                                                                    (("9"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("9"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "fullset")
                                                                                                                                                                                        (("9"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "image")
                                                                                                                                                                                          (("9"
                                                                                                                                                                                            (skosimp)
                                                                                                                                                                                            (("9"
                                                                                                                                                                                              (typepred
                                                                                                                                                                                               "I!1(x!1)")
                                                                                                                                                                                              (("9"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "bounded_open_interval?")
                                                                                                                                                                                                (("9"
                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                  (("9"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("10"
                                                                                                                                                                                (skosimp)
                                                                                                                                                                                (("10"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (hide
                                                                                                                                                                               -5
                                                                                                                                                                               2)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "length")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (case-replace
                                                                                                                                                                                   "empty?[real](f!2(k!1))")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "empty?")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -
                                                                                                                                                                                       "a!2")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (typepred
                                                                                                                                                                                       "inf(f!2(k!1))")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "greatest_lower_bound")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (flatten)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "lower_bound")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               -
                                                                                                                                                                                               "a!2")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (hide
                                                                                                                                                                             2)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (hide-all-but
                                                                                                                                                                               1)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "f!2")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "bijective?")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (flatten)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (split)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "injective?")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (skosimp)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (case-replace
                                                                                                                                                                                             "x1!1 < k!1")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (case-replace
                                                                                                                                                                                               "x2!1 < k!1")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -
                                                                                                                                                                                                 "x1!1"
                                                                                                                                                                                                 "x2!1")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (inst
                                                                                                                                                                                                   -
                                                                                                                                                                                                   "x1!1"
                                                                                                                                                                                                   "1+x2!1")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (case-replace
                                                                                                                                                                                               "x2!1 < k!1")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (inst
                                                                                                                                                                                                   -
                                                                                                                                                                                                   "1+x1!1"
                                                                                                                                                                                                   "x2!1")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (inst
                                                                                                                                                                                                   -
                                                                                                                                                                                                   "1+x1!1"
                                                                                                                                                                                                   "1+x2!1")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "surjective?")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (skosimp)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (typepred
                                                                                                                                                                                             "y!1")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "remove")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (flatten)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "member")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (inst
                                                                                                                                                                                                     -
                                                                                                                                                                                                     "y!1")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (skosimp)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (case
                                                                                                                                                                                                         "x!1<k!1")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (typepred
                                                                                                                                                                                                           "k!1")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (inst
                                                                                                                                                                                                             +
                                                                                                                                                                                                             "x!1")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil)
                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (case
                                                                                                                                                                                                           "k!1<x!1")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (typepred
                                                                                                                                                                                                             "k!1")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (inst
                                                                                                                                                                                                               +
                                                                                                                                                                                                               "x!1-1")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                nil
                                                                                                                                                                                                                nil)
                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                nil
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil)
                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("3"
                                                                                                                                                                            (hide
                                                                                                                                                                             2)
                                                                                                                                                                            (("3"
                                                                                                                                                                              (skosimp)
                                                                                                                                                                              (("3"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "remove")
                                                                                                                                                                                (("3"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "member")
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (typepred
                                                                                                                                                                                     "f!2")
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "bijective?")
                                                                                                                                                                                      (("3"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "injective?")
                                                                                                                                                                                        (("3"
                                                                                                                                                                                          (flatten)
                                                                                                                                                                                          (("3"
                                                                                                                                                                                            (inst
                                                                                                                                                                                             -
                                                                                                                                                                                             "k!1"
                                                                                                                                                                                             "1+n!2")
                                                                                                                                                                                            (("3"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("4"
                                                                                                                                                                            (hide
                                                                                                                                                                             2)
                                                                                                                                                                            (("4"
                                                                                                                                                                              (skosimp)
                                                                                                                                                                              (("4"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "remove")
                                                                                                                                                                                (("4"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "member")
                                                                                                                                                                                  (("4"
                                                                                                                                                                                    (typepred
                                                                                                                                                                                     "f!2")
                                                                                                                                                                                    (("4"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "bijective?")
                                                                                                                                                                                      (("4"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "injective?")
                                                                                                                                                                                        (("4"
                                                                                                                                                                                          (flatten)
                                                                                                                                                                                          (("4"
                                                                                                                                                                                            (inst
                                                                                                                                                                                             -
                                                                                                                                                                                             "k!1"
                                                                                                                                                                                             "n!2")
                                                                                                                                                                                            (("4"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (hide
                                                                                                                                                                         2
                                                                                                                                                                         -5)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "subset?")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (skosimp)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "member")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "remove")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "member")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (flatten)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -11
                                                                                                                                                                                       "x!1")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide
                                                                                                                                                                     2
                                                                                                                                                                     -5)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "subset?")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "remove")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "Union")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "member")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (skosimp)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -
                                                                                                                                                                                 "x!1")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (typepred
                                                                                                                                                                                     "sup(f!2(k!1))")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "least_upper_bound")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "upper_bound")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst-cp
                                                                                                                                                                                             -
                                                                                                                                                                                             "a!2")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (skosimp)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (inst
                                                                                                                                                                                                   +
                                                                                                                                                                                                   "a!3")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "/=")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (replace
                                                                                                                                                                                                       -1
                                                                                                                                                                                                       *
                                                                                                                                                                                                       rl)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (inst
                                                                                                                                                                                                         -
                                                                                                                                                                                                         "x!1")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (case-replace
                                                                                                                                                                                                           "x!1=sup(f!2(k!1))")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (hide
                                                                                                                                                                                                             -3
                                                                                                                                                                                                             -6
                                                                                                                                                                                                             -1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (inst
                                                                                                                                                                                                               -14
                                                                                                                                                                                                               "f!2(k!1)")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "fullset")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                     "image")
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (skosimp)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (typepred
                                                                                                                                                                                                                         "I!1(x!2)")
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                           "bounded_open_interval?")
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (flatten)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               "metric_open?")
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                 -
                                                                                                                                                                                                                                 "sup(f!2(k!1))")
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                       "subset?"
                                                                                                                                                                                                                                       -2)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (inst
                                                                                                                                                                                                                                         -
                                                                                                                                                                                                                                         "sup(f!2(k!1))+r!1/2")
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                           "member")
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                             "ball")
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (split
                                                                                                                                                                                                                                               -2)
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (typepred
                                                                                                                                                                                                                                                 "sup(f!2(k!1))")
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                                                   "least_upper_bound")
                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                     "upper_bound")
                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                      (flatten)
                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                        (inst
                                                                                                                                                                                                                                                         -
                                                                                                                                                                                                                                                         "sup(f!2(k!1)) + r!1 / 2")
                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil)
                                                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                                                                                 1)
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (grind)
                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil)
                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide
                                                                                                                                                   3)
                                                                                                                                                  (("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "sup(f!2(k!1))")
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "least_upper_bound")
                                                                                                                                                      (("2"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "upper_bound")
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             -2
                                                                                                                                                             "b!2")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (skosimp)
                                                                                                                                                                (("2"
                                                                                                                                                                  (typepred
                                                                                                                                                                   "z!1")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (case
                                                                                                                                                                     "b!2<z!1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (hide
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "subset?"
                                                                                                                                                                         -13)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           -13
                                                                                                                                                                           "f!2(k!1)")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "fullset")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "image")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (skosimp)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (typepred
                                                                                                                                                                                     "I!1(x!1)")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "bounded_open_interval?")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "bounded_interval?")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (flatten)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "interval?")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               -
                                                                                                                                                                                               "a!2"
                                                                                                                                                                                               "z!1"
                                                                                                                                                                                               "b!2")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("3"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("3"
                                                                                                                                                  (hide
                                                                                                                                                   2
                                                                                                                                                   3)
                                                                                                                                                  (("3"
                                                                                                                                                    (split
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "nonempty?")
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "empty?")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -
                                                                                                                                                           "a!2")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "f!2(k!1)")
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "subset?"
                                                                                                                                                         -11)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -11
                                                                                                                                                           "f!2(k!1)")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "fullset")
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "image")
                                                                                                                                                                (("2"
                                                                                                                                                                  (skosimp)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (typepred
                                                                                                                                                                     "I!1(x!1)")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "bounded_open_interval?")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "bounded_interval?")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (replace
                                                                                                                                                                             -14
                                                                                                                                                                             *
                                                                                                                                                                             rl)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "bounded?")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "empty?")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -
                                                                                                                                                                                   "a!2")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (skosimp)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "subset?"
                                                                                                                                           -11)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -11
                                                                                                                                             "f!2(n!2)")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "fullset")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "image")
                                                                                                                                                  (("2"
                                                                                                                                                    (skosimp)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "I!1(x!1)")
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "bounded_open_interval?")
                                                                                                                                                        (("2"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "subset?"
                                                                                                                                     -5)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -5
                                                                                                                                       "a!2")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "member")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "Union"
                                                                                                                                           -5)
                                                                                                                                          (("2"
                                                                                                                                            (skosimp)
                                                                                                                                            (("2"
                                                                                                                                              (typepred
                                                                                                                                               "a!3")
                                                                                                                                              (("2"
                                                                                                                                                (typepred
                                                                                                                                                 "f!2")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "bijective?")
                                                                                                                                                  (("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "surjective?")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -
                                                                                                                                                         "a!3")
                                                                                                                                                        (("2"
                                                                                                                                                          (skosimp)
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             +
                                                                                                                                                             "x!1")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("4"
                                                                                                                        (skosimp*)
                                                                                                                        (("4"
                                                                                                                          (typepred
                                                                                                                           "f!2(n!2)")
                                                                                                                          (("4"
                                                                                                                            (expand
                                                                                                                             "subset?")
                                                                                                                            (("4"
                                                                                                                              (inst
                                                                                                                               -7
                                                                                                                               "f!2(n!2)")
                                                                                                                              (("4"
                                                                                                                                (expand
                                                                                                                                 "member")
                                                                                                                                (("4"
                                                                                                                                  (expand
                                                                                                                                   "fullset")
                                                                                                                                  (("4"
                                                                                                                                    (expand
                                                                                                                                     "image")
                                                                                                                                    (("4"
                                                                                                                                      (skosimp)
                                                                                                                                      (("4"
                                                                                                                                        (typepred
                                                                                                                                         "I!1(x!1)")
                                                                                                                                        (("4"
                                                                                                                                          (expand
                                                                                                                                           "bounded_open_interval?")
                                                                                                                                          (("4"
                                                                                                                                            (flatten)
                                                                                                                                            (("4"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("3"
                                                                                                                    (skosimp*)
                                                                                                                    (("3"
                                                                                                                      (typepred
                                                                                                                       "f!2(n!2)")
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "subset?")
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -6
                                                                                                                           "f!2(n!2)")
                                                                                                                          (("3"
                                                                                                                            (assert)
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "fullset")
                                                                                                                              (("3"
                                                                                                                                (expand
                                                                                                                                 "image")
                                                                                                                                (("3"
                                                                                                                                  (skosimp)
                                                                                                                                  (("3"
                                                                                                                                    (typepred
                                                                                                                                     "I!1(x!1)")
                                                                                                                                    (("3"
                                                                                                                                      (expand
                                                                                                                                       "bounded_open_interval?")
                                                                                                                                      (("3"
                                                                                                                                        (flatten)
                                                                                                                                        (("3"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (case
                                                                                                                 "FORALL (V: setofsets[real], k, n: nat,
                                               f: (bijective?[below[k], (V)])): is_finite(V)&
                                         card(V) = k &
                                          (FORALL (a: (V)): bounded_open_interval?(a)) &
                                           subset?(V, image[nat, set[real]](I!1, fullset[nat])) &
                                            (FORALL (i: nat):
                                               i <= card(V) - 1 =>
                                                (EXISTS (j: nat): I!1(j) = f(i) & j <= n))
                                          =>
                                          sigma(0, k - 1, LAMBDA n: IF n < k THEN length(f(n)) ELSE 0 ENDIF)
                                           <=
                                           series(LAMBDA n: IF V(I!1(n)) THEN length(I!1(n)) ELSE 0 ENDIF)
                                                 (n)")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "V!1"
                                                                                                                   "card(V!1)"
                                                                                                                   "n!1"
                                                                                                                   "f!1")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (hide-all-but
                                                                                                                         (1
                                                                                                                          -8))
                                                                                                                        (("1"
                                                                                                                          (skosimp)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "subset?")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "a!2")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "member")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "fullset")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "image")
                                                                                                                                    (("1"
                                                                                                                                      (skosimp)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (induct
                                                                                                                     "k")
                                                                                                                    (("1"
                                                                                                                      (skosimp*)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "sigma"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "series")
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "sigma_ge_0"
                                                                                                                             ("low"
                                                                                                                              "0"
                                                                                                                              "high"
                                                                                                                              "n!2"
                                                                                                                              "F"
                                                                                                                              "LAMBDA n: IF V!2(I!1(n)) THEN length(I!1(n)) ELSE 0 ENDIF"))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (skosimp)
                                                                                                                                (("1"
                                                                                                                                  (case-replace
                                                                                                                                   "V!2(I!1(n!3))")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "sigma"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "remove(f!2(j!1),V!2)"
                                                                                                                             "n!2"
                                                                                                                             "lambda (n:below[j!1]): f!2(n)")
                                                                                                                            (("1"
                                                                                                                              (typepred
                                                                                                                               "f!2(j!1)")
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "card_remove[set[real]]"
                                                                                                                                 ("x"
                                                                                                                                  "f!2(j!1)"
                                                                                                                                  "S"
                                                                                                                                  "V!2"))
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -5)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "finite_remove"
                                                                                                                                         -3)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -3)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "sigma_eq"
                                                                                                                                             ("low"
                                                                                                                                              "0"
                                                                                                                                              "high"
                                                                                                                                              "j!1-1"
                                                                                                                                              "F"
                                                                                                                                              "LAMBDA (n_1: nat):
                                                   IF n_1 < j!1 THEN length(f!2(n_1)) ELSE 0 ENDIF"
                                                                                                                                              "G"
                                                                                                                                              "LAMBDA n: IF n < 1 + j!1 THEN length(f!2(n)) ELSE 0 ENDIF"))
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (name-replace
                                                                                                                                                     "SUM1"
                                                                                                                                                     "sigma(0, j!1 - 1,
                                                    LAMBDA n: IF n < 1 + j!1 THEN length(f!2(n)) ELSE 0 ENDIF)")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "series")
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "remove")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "member")
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "sigma_sum"
                                                                                                                                                             ("low"
                                                                                                                                                              "0"
                                                                                                                                                              "high"
                                                                                                                                                              "n!2"
                                                                                                                                                              "F"
                                                                                                                                                              "LAMBDA (n_1: nat):
                                                        IF f!2(j!1) /= I!1(n_1) AND V!2(I!1(n_1))
                                                          THEN length(I!1(n_1))
                                                        ELSE 0
                                                        ENDIF"
                                                                                                                                                              "G"
                                                                                                                                                              "LAMBDA (n_1: nat):
                                                        IF f!2(j!1) = I!1(n_1)
                                                          THEN length(I!1(n_1))
                                                        ELSE 0
                                                        ENDIF"))
                                                                                                                                                            (("1"
                                                                                                                                                              (name-replace
                                                                                                                                                               "SUM2"
                                                                                                                                                               "sigma(0, n!2,
                                                       LAMBDA (n_1: nat):
                                                         IF f!2(j!1) /= I!1(n_1) AND V!2(I!1(n_1))
                                                           THEN length(I!1(n_1))
                                                         ELSE 0
                                                         ENDIF)")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case-replace
                                                                                                                                                                   "(LAMBDA (i: nat):
                                                         IF f!2(j!1) /= I!1(i) AND V!2(I!1(i)) THEN length(I!1(i))
                                                         ELSE 0
                                                         ENDIF
                                                          + IF f!2(j!1) = I!1(i) THEN length(I!1(i)) ELSE 0 ENDIF)=(LAMBDA n: IF V!2(I!1(n)) THEN length(I!1(n)) ELSE 0 ENDIF)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (hide
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (name-replace
                                                                                                                                                                       "RHS"
                                                                                                                                                                       "sigma(0, n!2,
                                                         LAMBDA n: IF V!2(I!1(n)) THEN length(I!1(n)) ELSE 0 ENDIF)")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst
                                                                                                                                                                         -9
                                                                                                                                                                         "j!1")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (skosimp)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "sigma_middle[nat]"
                                                                                                                                                                               ("low"
                                                                                                                                                                                "0"
                                                                                                                                                                                "high"
                                                                                                                                                                                "n!2"
                                                                                                                                                                                "i"
                                                                                                                                                                                "j!2"
                                                                                                                                                                                "F"
                                                                                                                                                                                "LAMBDA (n_1: nat):
                                                             IF f!2(j!1) = I!1(n_1) THEN length(I!1(n_1)) ELSE 0 ENDIF"))
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (lemma
                                                                                                                                                                                   "sigma_ge_0"
                                                                                                                                                                                   ("low"
                                                                                                                                                                                    "0"
                                                                                                                                                                                    "high"
                                                                                                                                                                                    "j!2-1"
                                                                                                                                                                                    "F"
                                                                                                                                                                                    "LAMBDA (n_1: nat):
                                                               IF f!2(j!1) = I!1(n_1) THEN length(I!1(n_1)) ELSE 0 ENDIF"))
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (split
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (lemma
                                                                                                                                                                                       "sigma_ge_0"
                                                                                                                                                                                       ("low"
                                                                                                                                                                                        "1+j!2"
                                                                                                                                                                                        "high"
                                                                                                                                                                                        "n!2"
                                                                                                                                                                                        "F"
                                                                                                                                                                                        "LAMBDA (n_1: nat):
                                                                 IF f!2(j!1) = I!1(n_1) THEN length(I!1(n_1)) ELSE 0 ENDIF"))
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (split
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (skosimp)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (case-replace
                                                                                                                                                                                             "f!2(j!1) = I!1(n!3)")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (skosimp)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (case-replace
                                                                                                                                                                                         "f!2(j!1) = I!1(n!3)")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide
                                                                                                                                                                     2)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (apply-extensionality
                                                                                                                                                                       1
                                                                                                                                                                       :hide?
                                                                                                                                                                       t)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (case-replace
                                                                                                                                                                         "V!2(I!1(x!1))")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (case-replace
                                                                                                                                                                           "f!2(j!1) = I!1(x!1)")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide
                                                                                                                                                 2)
                                                                                                                                                (("2"
                                                                                                                                                  (skosimp)
                                                                                                                                                  (("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "n!3")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (skosimp)
                                                                                                                                              (("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 (-7
                                                                                                                                                  1))
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -
                                                                                                                                                   "f!2(n!3)")
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "bounded_open_interval?")
                                                                                                                                                    (("2"
                                                                                                                                                      (flatten)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("3"
                                                                                                                                              (skosimp)
                                                                                                                                              (("3"
                                                                                                                                                (inst
                                                                                                                                                 -7
                                                                                                                                                 "f!2(n!3)")
                                                                                                                                                (("3"
                                                                                                                                                  (expand
                                                                                                                                                   "bounded_open_interval?")
                                                                                                                                                  (("3"
                                                                                                                                                    (flatten)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("4"
                                                                                                                                              (skosimp)
                                                                                                                                              (("4"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("2"
                                                                                                                                              (skosimp)
                                                                                                                                              (("2"
                                                                                                                                                (typepred
                                                                                                                                                 "a!2")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "remove")
                                                                                                                                                  (("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "member")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -6
                                                                                                                                                         "a!2")
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (hide-all-but
                                                                                                                                             (-6
                                                                                                                                              1))
                                                                                                                                            (("3"
                                                                                                                                              (expand
                                                                                                                                               "remove")
                                                                                                                                              (("3"
                                                                                                                                                (expand
                                                                                                                                                 "subset?")
                                                                                                                                                (("3"
                                                                                                                                                  (expand
                                                                                                                                                   "member")
                                                                                                                                                  (("3"
                                                                                                                                                    (skosimp)
                                                                                                                                                    (("3"
                                                                                                                                                      (inst
                                                                                                                                                       -
                                                                                                                                                       "x!1")
                                                                                                                                                      (("3"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("4"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("4"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("4"
                                                                                                                                                (skosimp)
                                                                                                                                                (("4"
                                                                                                                                                  (inst
                                                                                                                                                   -8
                                                                                                                                                   "i!1")
                                                                                                                                                  (("4"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "f!2")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "bijective?")
                                                                                                                                  (("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (split)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "injective?")
                                                                                                                                        (("1"
                                                                                                                                          (skosimp)
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "x1!1"
                                                                                                                                             "x2!1")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (expand
                                                                                                                                         "surjective?")
                                                                                                                                        (("2"
                                                                                                                                          (skosimp)
                                                                                                                                          (("2"
                                                                                                                                            (typepred
                                                                                                                                             "y!1")
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "remove")
                                                                                                                                              (("2"
                                                                                                                                                (flatten)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "member")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "y!1")
                                                                                                                                                    (("2"
                                                                                                                                                      (skosimp)
                                                                                                                                                      (("2"
                                                                                                                                                        (case-replace
                                                                                                                                                         "x!1=j!1")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           +
                                                                                                                                                           "x!1")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("3"
                                                                                                                                (skosimp)
                                                                                                                                (("3"
                                                                                                                                  (expand
                                                                                                                                   "remove")
                                                                                                                                  (("3"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("3"
                                                                                                                                      (typepred
                                                                                                                                       "n!3")
                                                                                                                                      (("3"
                                                                                                                                        (expand
                                                                                                                                         "/=")
                                                                                                                                        (("3"
                                                                                                                                          (hide-all-but
                                                                                                                                           (-1
                                                                                                                                            -2))
                                                                                                                                          (("3"
                                                                                                                                            (typepred
                                                                                                                                             "f!2")
                                                                                                                                            (("3"
                                                                                                                                              (expand
                                                                                                                                               "bijective?")
                                                                                                                                              (("3"
                                                                                                                                                (flatten)
                                                                                                                                                (("3"
                                                                                                                                                  (expand
                                                                                                                                                   "injective?")
                                                                                                                                                  (("3"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "n!3"
                                                                                                                                                     "j!1")
                                                                                                                                                    (("3"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("3"
                                                                                                                        (skosimp*)
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "f!2(n1!1)")
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "bounded_open_interval?")
                                                                                                                            (("3"
                                                                                                                              (flatten)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("4"
                                                                                                                        (skosimp*)
                                                                                                                        (("4"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("3"
                                                                                                                    (skosimp*)
                                                                                                                    (("3"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "f!2(n1!1)")
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "bounded_open_interval?")
                                                                                                                        (("3"
                                                                                                                          (flatten)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("4"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("4"
                                                                                                                    (skosimp*)
                                                                                                                    (("4"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (skosimp)
                                                                                                                (("3"
                                                                                                                  (typepred
                                                                                                                   "f!1(n!2)")
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "subset?"
                                                                                                                     -10)
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "member")
                                                                                                                      (("3"
                                                                                                                        (inst
                                                                                                                         -10
                                                                                                                         "f!1(n!2)")
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "fullset")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "image")
                                                                                                                              (("3"
                                                                                                                                (skosimp)
                                                                                                                                (("3"
                                                                                                                                  (typepred
                                                                                                                                   "I!1(x!1)")
                                                                                                                                  (("3"
                                                                                                                                    (expand
                                                                                                                                     "bounded_open_interval?")
                                                                                                                                    (("3"
                                                                                                                                      (flatten)
                                                                                                                                      (("3"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "Im")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 +
                                                                                                                 "n!1")
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       (-7
                                                                                                        -3
                                                                                                        -5
                                                                                                        1))
                                                                                                      (("2"
                                                                                                        (induct
                                                                                                         "m")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "subset?")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "member")
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "f!1(0)")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "f!1(0)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "fullset")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "image")
                                                                                                                        (("1"
                                                                                                                          (skosimp)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             +
                                                                                                                             "x!1")
                                                                                                                            (("1"
                                                                                                                              (skosimp)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 +
                                                                                                                                 "x!1")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (skosimp)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "subset?")
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "f!1(1+j!1)")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -6
                                                                                                                     "f!1(1 + j!1)")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "member")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "fullset")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "image")
                                                                                                                          (("2"
                                                                                                                            (skosimp)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               +
                                                                                                                               "n!1+x!1")
                                                                                                                              (("2"
                                                                                                                                (skosimp)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "<="
                                                                                                                                   -4)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     -4)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "i!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp)
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             +
                                                                                                                                             "j!2")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         +
                                                                                                                                         "x!1")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (skosimp)
                                                                                                          (("3"
                                                                                                            (skosimp)
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (skosimp)
                                                                                                      (("3"
                                                                                                        (skosimp)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply-extensionality
                                                                     1
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (case-replace
                                                                       "V!1(I!1(x!1))")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (expand
                                                         "bounded_interval?")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (expand
                                                             "emptyset")
                                                            (("1"
                                                              (expand
                                                               "interval?")
                                                              (("1"
                                                                (skosimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "bounded?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (rewrite
                                                                 "emptyset_is_empty?")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skosimp)
                                            (("3"
                                              (hide-all-but 2)
                                              (("3"
                                                (expand "emptyset")
                                                (("3"
                                                  (expand "interval?")
                                                  (("3"
                                                    (skosimp)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (expand "nonempty?" 1)
                                      (("2"
                                        (rewrite "emptyset_is_empty?")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (hide-all-but (-4 -5))
                                            (("2"
                                              (rewrite
                                               "Union_emptyset_rew")
                                              (("2"
                                                (expand "subset?")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (inst - "a!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "emptyset")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "fullset")
                              (("2"
                                (expand "image")
                                (("2"
                                  (expand "open_cover?")
                                  (("2"
                                    (split)
                                    (("1"
                                      (expand "IUnion")
                                      (("1"
                                        (expand "subset?")
                                        (("1"
                                          (expand "member")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (typepred "I!1(x!2)")
                                                (("1"
                                                  (expand
                                                   "bounded_open_interval?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "metric_induced_topology")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "cover?")
                                      (("2"
                                        (expand "IUnion")
                                        (("2"
                                          (expand "Union")
                                          (("2"
                                            (expand "subset?")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst - "x!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst
                                                         +
                                                         "I!1(i!1)")
                                                        (("2"
                                                          (inst
                                                           +
                                                           "i!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skosimp*) (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp)
        (("2" (case "nonempty?[real](b!1)")
          (("1" (lemma "lebesgue_outer_measure_open" ("b" "b!1"))
            (("1" (assert)
              (("1" (lemma "length_open" ("b" "b!1"))
                (("1" (assert)
                  (("1" (typepred "b!1")
                    (("1" (expand "bounded_interval?")
                      (("1" (expand "bounded?")
                        (("1" (expand "nonempty?")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (typepred "inf(b!1)")
                                (("1"
                                  (name-replace "AA" "inf(b!1)")
                                  (("1"
                                    (typepred "sup(b!1)")
                                    (("1"
                                      (name-replace "BB" "sup(b!1)")
                                      (("1"
                                        (case
                                         "x_le(lebesgue_outer_measure({x | AA < x AND x < BB}), x_length({x | AA < x AND x < BB}))")
                                        (("1"
                                          (name-replace
                                           "LHS"
                                           "lebesgue_outer_measure(b!1)")
                                          (("1"
                                            (name-replace
                                             "LHS1"
                                             "lebesgue_outer_measure({x | AA < x AND x < BB})")
                                            (("1"
                                              (expand "x_length")
                                              (("1"
                                                (replace -7 * rl)
                                                (("1"
                                                  (case-replace
                                                   "bounded_interval?({x | AA < x AND x < BB})")
                                                  (("1"
                                                    (hide-all-but
                                                     (-2 -9 2))
                                                    (("1"
                                                      (expand "x_le")
                                                      (("1"
                                                        (expand "x_eq")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 3 -8 -7)
                                                    (("2"
                                                      (expand
                                                       "bounded_interval?")
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (expand
                                                           "interval?")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "bounded?")
                                                          (("2"
                                                            (expand
                                                             "nonempty?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "above_bounded")
                                                                    (("1"
                                                                      (skosimp)
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "n!1")
                                                                        (("1"
                                                                          (expand
                                                                           "upper_bound")
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (typepred
                                                                               "z!1")
                                                                              (("1"
                                                                                (expand
                                                                                 "interval?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "least_upper_bound")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "upper_bound")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -4
                                                                                         "z!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "z!2")
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "greatest_lower_bound")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "z!1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -4)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "lower_bound")
                                                                                                            (("1"
                                                                                                              (skosimp)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "z!3"
                                                                                                                 "z!2"
                                                                                                                 "z!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "z!1")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "below_bounded")
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "n!1")
                                                                        (("2"
                                                                          (expand
                                                                           "lower_bound")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (typepred
                                                                               "z!1")
                                                                              (("2"
                                                                                (expand
                                                                                 "least_upper_bound")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "z!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -3)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "upper_bound")
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "greatest_lower_bound")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "z!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "lower_bound")
                                                                                                        (("2"
                                                                                                          (skosimp)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "interval?")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "z!3"
                                                                                                               "z!2"
                                                                                                               "z!1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "z!1")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 3 -7)
                                          (("2"
                                            (expand "x_length")
                                            (("2"
                                              (case-replace
                                               "bounded_interval?({x | AA < x AND x < BB})")
                                              (("1"
                                                (expand "x_le")
                                                (("1"
                                                  (expand
                                                   "lebesgue_outer_measure")
                                                  (("1"
                                                    (expand "o ")
                                                    (("1"
                                                      (expand "x_inf")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "(TRUE,length({x | AA < x AND x < BB}))")
                                                          (("1"
                                                            (inst
                                                             +
                                                             "lambda (i:nat): if i=0 then {x | AA < x AND x < BB} else emptyset[real] endif")
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (expand
                                                                 "x_le")
                                                                (("1"
                                                                  (expand
                                                                   "x_sum")
                                                                  (("1"
                                                                    (expand
                                                                     "x_length")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (case-replace
                                                                         "bounded_interval?(emptyset[real])")
                                                                        (("1"
                                                                          (case-replace
                                                                           "length(emptyset[real])=0")
                                                                          (("1"
                                                                            (case-replace
                                                                             "FORALL (i:nat): IF i = 0 THEN TRUE ELSE TRUE ENDIF")
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "zero_tail_series_conv"
                                                                                 ("a"
                                                                                  "LAMBDA (i:nat):
                                                         IF i = 0 THEN length({x | AA < x AND x < BB})
                                                         ELSE 0
                                                         ENDIF"
                                                                                  "n"
                                                                                  "0"))
                                                                                (("1"
                                                                                  (lemma
                                                                                   "zero_tail_series_limit"
                                                                                   ("a"
                                                                                    "LAMBDA (i:nat):
                                                           IF i = 0 THEN length({x | AA < x AND x < BB})
                                                           ELSE 0
                                                           ENDIF"
                                                                                    "n"
                                                                                    "0"))
                                                                                  (("1"
                                                                                    (case-replace
                                                                                     "(FORALL (m:nat):
                                     0 < m =>
                                      (LAMBDA (i: nat):
                                         IF i = 0 THEN length({x | AA < x AND x < BB}) ELSE 0 ENDIF)
                                          (m)
                                       = 0)")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "series")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "sigma")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       -1
                                                                                       -2
                                                                                       2)
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (hide
                                                                                       -1
                                                                                       -2
                                                                                       2)
                                                                                      (("3"
                                                                                        (skosimp)
                                                                                        (("3"
                                                                                          (skosimp)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (rewrite
                                                                               "length_empty_rew")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "bounded_interval?"
                                                                             1)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (expand
                                                                                   "emptyset")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "interval?")
                                                                                    (("1"
                                                                                      (skosimp)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "bounded?")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "emptyset_is_empty?")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "subset?")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (expand
                                                                       "IUnion")
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "0")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (hide-all-but
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "bounded_open_interval?")
                                                                  (("2"
                                                                    (expand
                                                                     "bounded_interval?")
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (expand
                                                                         "emptyset")
                                                                        (("1"
                                                                          (expand
                                                                           "interval?")
                                                                          (("1"
                                                                            (skosimp)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "bounded?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (rewrite
                                                                             "emptyset_is_empty?")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (rewrite
                                                                         "metric_open_def")
                                                                        (("3"
                                                                          (rewrite
                                                                           "open_emptyset")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (skosimp)
                                                              (("3"
                                                                (expand
                                                                 "bounded_open_interval?")
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (case
                                                                     "AA<BB")
                                                                    (("1"
                                                                      (lemma
                                                                       "metric_open_ball"
                                                                       ("x"
                                                                        "(BB+AA)/2"
                                                                        "r"
                                                                        "(BB-AA)/2"))
                                                                      (("1"
                                                                        (case-replace
                                                                         "ball((BB + AA) / 2, (BB - AA) / 2)={x | AA < x AND x < BB}")
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (apply-extensionality
                                                                             1
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (expand
                                                                               "ball")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  1))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "bounded_interval?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "interval?")
                                                                          (("2"
                                                                            (expand
                                                                             "empty?")
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (expand
                                                                                   "least_upper_bound")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "upper_bound")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -4
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "greatest_lower_bound")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "lower_bound")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -6
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (case-replace
                                                                                                   "BB=AA")
                                                                                                  (("1"
                                                                                                    (case-replace
                                                                                                     "{x | AA < x AND x < AA}=emptyset[real]")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "metric_open_def")
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "open_emptyset")
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (apply-extensionality
                                                                                                       1
                                                                                                       :hide?
                                                                                                       t)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "emptyset")
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case-replace
                                                           "FORALL (x_1:
                                   ({z:extended_nnreal |
                                       EXISTS I:
                                         x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), z)
                                          AND
                                          subset?[real]
                                              ({x | AA < x AND x < BB}, IUnion(I))})):
                           NOT x_1`1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             1
                                                             2)
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (case
                                                                 "nonempty?({z_1: real |
                                    EXISTS (x_1: extended_nnreal):
                                      (EXISTS I:
                                         x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                                          subset?[real]({x | AA < x AND x < BB}, IUnion(I)))
                                       AND x_1`1 AND x_1`2 = z_1})")
                                                                (("1"
                                                                  (case
                                                                   "bounded_below?({z_1: real |
                                                  EXISTS (x_1: extended_nnreal):
                                                    (EXISTS I:
                                                       x_le(x_sum(LAMBDA (x: nat): x_length(I(x))),
                                                            x_1)
                                                        AND
                                                        subset?[real]
                                                            ({x | AA < x AND x < BB},
                                                             IUnion[nat, real](I)))
                                                     AND x_1`1 AND x_1`2 = z_1})")
                                                                  (("1"
                                                                    (typepred
                                                                     "glb({z_1: real |
                                   EXISTS (x_1: extended_nnreal):
                                     (EXISTS I:
                                        x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                                         subset?[real]({x | AA < x AND x < BB}, IUnion(I)))
                                      AND x_1`1 AND x_1`2 = z_1})")
                                                                    (("1"
                                                                      (name-replace
                                                                       "GLB"
                                                                       "glb({z_1: real |
                                     EXISTS (x_1: extended_nnreal):
                                       (EXISTS I:
                                          x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), x_1) AND
                                           subset?[real]({x | AA < x AND x < BB}, IUnion(I)))
                                        AND x_1`1 AND x_1`2 = z_1})")
                                                                      (("1"
                                                                        (hide
                                                                         -2
                                                                         -3)
                                                                        (("1"
                                                                          (expand
                                                                           "greatest_lower_bound?"
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (expand
                                                                               "lower_bound?")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "length({x | AA < x AND x < BB})")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "(TRUE,length({x | AA < x AND x < BB}))")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1
                                                                                     2)
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "lambda (i:nat): if i=0 then {x | AA < x AND x < BB} else emptyset[real] endif")
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "x_sum")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "x_le")
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "x_length(emptyset[real])=(TRUE,0)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "x_length")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "FORALL (i:nat): IF i = 0 THEN TRUE ELSE TRUE ENDIF")
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "zero_tail_series_conv"
                                                                                                           ("a"
                                                                                                            "LAMBDA (i:nat):
                                                               IF i = 0 THEN length(b!1) ELSE 0 ENDIF"
                                                                                                            "n"
                                                                                                            "0"))
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "zero_tail_series_limit"
                                                                                                             ("a"
                                                                                                              "LAMBDA (i:nat):
                                                               IF i = 0 THEN length(b!1) ELSE 0 ENDIF"
                                                                                                              "n"
                                                                                                              "0"))
                                                                                                            (("1"
                                                                                                              (case-replace
                                                                                                               "FORALL (m:nat):
                                         0 < m =>
                                          (LAMBDA (i: nat): IF i = 0 THEN length(b!1) ELSE 0 ENDIF)(m) = 0")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -12
                                                                                                                 *
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "series")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "sigma")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "sigma")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 -2
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "x_length")
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "length_empty_rew")
                                                                                                    (("2"
                                                                                                      (lift-if)
                                                                                                      (("2"
                                                                                                        (prop)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "bounded_interval?")
                                                                                                            (("2"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "emptyset")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "interval?")
                                                                                                                  (("1"
                                                                                                                    (skosimp)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "bounded?")
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "emptyset_is_empty?")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "emptyset")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "interval?")
                                                                                                    (("3"
                                                                                                      (skosimp)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "subset?")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "IUnion")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "0")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (hide-all-but
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "bounded_open_interval?")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "bounded_interval?")
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "emptyset")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "interval?")
                                                                                                    (("1"
                                                                                                      (skosimp)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "bounded?")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "emptyset_is_empty?")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (rewrite
                                                                                                   "metric_open_def")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "open_emptyset")
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (skosimp)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "bounded_open_interval?")
                                                                                          (("3"
                                                                                            (replace
                                                                                             -3)
                                                                                            (("3"
                                                                                              (case
                                                                                               "AA<BB")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "ball_is_metric_open"
                                                                                                 ("x"
                                                                                                  "(AA+BB)/2"
                                                                                                  "r"
                                                                                                  "(BB-AA)/2"))
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "ball[real, (LAMBDA (x, y: real): abs(x - y))]
                                             ((AA + BB) / 2, (BB - AA) / 2)={x | AA < x AND x < BB}")
                                                                                                  (("1"
                                                                                                    (apply-extensionality
                                                                                                     1
                                                                                                     :hide?
                                                                                                     t)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (-2
                                                                                                        1))
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "ball")
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "empty?"
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (skosimp)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "least_upper_bound")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "greatest_lower_bound")
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "upper_bound")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -4
                                                                                                               "x!2")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "lower_bound")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -6
                                                                                                                   "x!2")
                                                                                                                  (("2"
                                                                                                                    (case-replace
                                                                                                                     "BB=AA")
                                                                                                                    (("1"
                                                                                                                      (case-replace
                                                                                                                       "{x | AA < x AND x < AA}=emptyset[real]")
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "metric_open_def")
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "open_emptyset")
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (apply-extensionality
                                                                                                                         1
                                                                                                                         :hide?
                                                                                                                         t)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "emptyset")
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "bounded_below?")
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "0")
                                                                        (("2"
                                                                          (expand
                                                                           "lower_bound?")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (typepred
                                                                               "s!1")
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "nonempty?")
                                                                    (("2"
                                                                      (expand
                                                                       "empty?"
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (typepred
                                                                           "x!1")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "x!1`2")
                                                                              (("2"
                                                                                (inst
                                                                                 +
                                                                                 "x!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2 -6)
                                                (("2"
                                                  (expand
                                                   "bounded_interval?")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       "interval?")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "bounded?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "nonempty?")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split 2)
                                                              (("1"
                                                                (expand
                                                                 "above_bounded")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "BB")
                                                                    (("1"
                                                                      (expand
                                                                       "upper_bound")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "below_bounded")
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "AA")
                                                                  (("2"
                                                                    (expand
                                                                     "lower_bound")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "interval?")
                                          (("3"
                                            (skosimp)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "x_length")
            (("2" (expand "length")
              (("2" (expand "nonempty?")
                (("2" (assert)
                  (("2" (expand "lebesgue_outer_measure")
                    (("2" (expand "o ")
                      (("2" (expand "x_inf")
                        (("2" (expand "x_le")
                          (("2"
                            (case-replace "FORALL (x_1:
                          ({z |
                              EXISTS I:
                                x_le(x_sum(LAMBDA (x: nat): x_length(I(x))), z)
                                 AND subset?[real](b!1, IUnion(I))})):
                  NOT x_1`1")
                            (("1" (inst - "(TRUE,0)")
                              (("1"
                                (inst + "lambda n: emptyset[real]")
                                (("1"
                                  (split)
                                  (("1"
                                    (expand "x_le")
                                    (("1"
                                      (expand "x_length")
                                      (("1"
                                        (case-replace
                                         "bounded_interval?(emptyset[real])")
                                        (("1"
                                          (rewrite "length_empty_rew")
                                          (("1"
                                            (expand "x_sum")
                                            (("1"
                                              (rewrite
                                               "zero_series_conv")
                                              (("1"
                                                (rewrite
                                                 "zero_series_limit")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand
                                             "bounded_interval?")
                                            (("2"
                                              (split)
                                              (("1"
                                                (expand "emptyset")
                                                (("1"
                                                  (expand "interval?")
                                                  (("1"
                                                    (skosimp)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "bounded?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (rewrite
                                                     "emptyset_is_empty?")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "emptyset_is_empty?")
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (expand "emptyset")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "bounded_open_interval?")
                                  (("2"
                                    (expand "bounded_interval?")
                                    (("2"
                                      (split)
                                      (("1"
                                        (expand "emptyset")
                                        (("1"
                                          (expand "interval?")
                                          (("1" (skosimp) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "bounded?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (rewrite
                                             "emptyset_is_empty?")
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (rewrite "metric_open_def")
                                        (("1"
                                          (rewrite "open_emptyset")
                                          nil
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace 1 2)
                              (("2"
                                (skosimp)
                                (("2"
                                  (typepred "x!1")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (typepred
                                       "glb({z_1: real |
                     EXISTS (x_1: extended_nnreal):
                       (EXISTS I:
                          ((x_sum(LAMBDA (x: nat): x_length(I(x)))`1 AND
                             x_1`1 AND
                              x_sum(LAMBDA (x: nat): x_length(I(x)))`2 <= x_1`2)
                            OR (NOT x_1`1))
                           AND subset?[real](b!1, IUnion(I)))
                        AND x_1`1 AND x_1`2 = z_1})")
                                      (("1"
                                        (name-replace
                                         "GLB"
                                         "glb({z_1: real |
                       EXISTS (x_1: extended_nnreal):
                         (EXISTS I:
                            ((x_sum(LAMBDA (x: nat): x_length(I(x)))`1 AND
                               x_1`1 AND
                                x_sum(LAMBDA (x: nat): x_length(I(x)))`2 <= x_1`2)
                              OR (NOT x_1`1))
                             AND subset?[real](b!1, IUnion(I)))
                          AND x_1`1 AND x_1`2 = z_1})")
                                        (("1"
                                          (expand
                                           "greatest_lower_bound?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "lower_bound?")
                                              (("1"
                                                (inst - "0")
                                                (("1"
                                                  (inst + "(TRUE,0)")
                                                  (("1"
                                                    (hide-all-but
                                                     (-5 1))
                                                    (("1"
                                                      (inst
                                                       +
                                                       "lambda n: emptyset[real]")
                                                      (("1"
                                                        (rewrite
                                                         "emptyset_is_empty?")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (expand
                                                             "subset?")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (expand
                                                                 "emptyset"
                                                                 1
                                                                 3)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "x_length")
                                                                    (("1"
                                                                      (case-replace
                                                                       "bounded_interval?(emptyset[real])")
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_empty_rew")
                                                                        (("1"
                                                                          (expand
                                                                           "x_sum")
                                                                          (("1"
                                                                            (rewrite
                                                                             "zero_series_conv")
                                                                            (("1"
                                                                              (rewrite
                                                                               "zero_series_limit")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "bounded_interval?")
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (expand
                                                                               "emptyset")
                                                                              (("1"
                                                                                (expand
                                                                                 "interval?")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "bounded?")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "emptyset_is_empty?")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1)
                                                        (("2"
                                                          (expand
                                                           "bounded_open_interval?")
                                                          (("2"
                                                            (expand
                                                             "bounded_interval?")
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (expand
                                                                 "emptyset")
                                                                (("1"
                                                                  (expand
                                                                   "interval?")
                                                                  (("1"
                                                                    (skosimp)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "bounded?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (rewrite
                                                                     "emptyset_is_empty?")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (rewrite
                                                                 "metric_open_def")
                                                                (("1"
                                                                  (rewrite
                                                                   "open_emptyset")
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (split)
                                          (("1"
                                            (expand "nonempty?")
                                            (("1"
                                              (expand "empty?" -1)
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (inst - "x!1`2")
                                                  (("1"
                                                    (inst + "x!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst + "I!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "x_le")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "bounded_below?")
                                            (("2"
                                              (inst + "0")
                                              (("2"
                                                (expand "lower_bound?")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (typepred "s!1")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((x_length const-decl "extended_nnreal" real_lebesgue_scaf nil)
    (interval nonempty-type-eq-decl nil real_topology "metric_space/")
    (interval? const-decl "bool" real_topology "metric_space/")
    (lebesgue_outer_measure const-decl "outer_measure"
     real_lebesgue_scaf nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def
     "measure_integration/")
    (outer_measure? const-decl "bool" outer_measure_def
     "measure_integration/")
    (x_le const-decl "bool" extended_nnreal "extended_nnreal/")
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bounded_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (bounded_interval? const-decl "bool" real_topology "metric_space/")
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_heine_borel formula-decl nil heine_borel "metric_space/")
    (compact? const-decl "bool" topology "topology/")
    (fullset const-decl "set" sets nil)
    (image const-decl "set[R]" function_image nil)
    (setofsets type-eq-decl nil sets nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (i!1 skolem-const-decl "nat" real_lebesgue_scaf nil)
    (open_cover? const-decl "bool" topology_prelim "topology/")
    (cover? const-decl "bool" topology_prelim "topology/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (nn_convegent_bounded formula-decl nil double_nn_sequence
     "extended_nnreal/")
    (nn_limit_lub formula-decl nil double_nn_sequence
     "extended_nnreal/")
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs
     nil)
    (Im const-decl "setof[real]" real_fun_props "reals/")
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (V!1 skolem-const-decl "setofsets[real]" real_lebesgue_scaf nil)
    (I!1 skolem-const-decl "sequence[bounded_open_interval]"
     real_lebesgue_scaf nil)
    (n!1 skolem-const-decl "nat" real_lebesgue_scaf nil)
    (j!1 skolem-const-decl "nat" real_lebesgue_scaf nil)
    (V!2 skolem-const-decl "setofsets[real]" real_lebesgue_scaf nil)
    (f!2 skolem-const-decl "(bijective?[below[1 + j!1], (V!2)])"
     real_lebesgue_scaf nil)
    (a!2 skolem-const-decl "(remove(f!2(j!1), V!2))" real_lebesgue_scaf
     nil)
    (sigma_sum formula-decl nil sigma "reals/")
    (y!1 skolem-const-decl "(remove(f!2(j!1), V!2))" real_lebesgue_scaf
     nil)
    (x!1 skolem-const-decl "below[1 + j!1]" real_lebesgue_scaf nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (bijective? const-decl "bool" functions nil)
    (Union const-decl "set" sets nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (card_one formula-decl nil finite_sets nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[T]" sigma_countable "sigma_set/")
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (remove const-decl "set" sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (x!1 skolem-const-decl "real" real_lebesgue_scaf nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (ball const-decl "set[T]" metric_space_def "metric_space/")
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (metric_space_is_hausdorff name-judgement "hausdorff" real_topology
     "metric_space/")
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology "metric_space/")
    (r!1 skolem-const-decl "posreal" real_lebesgue_scaf nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (metric_open? const-decl "bool" metric_space_def "metric_space/")
    (a!3 skolem-const-decl "(V!2)" real_lebesgue_scaf nil)
    (/= const-decl "boolean" notequal nil)
    (surjective? const-decl "bool" functions nil)
    (y!1 skolem-const-decl "(remove(f!2(k!1), V!2))" real_lebesgue_scaf
     nil)
    (x!1 skolem-const-decl "below[1 + j!1]" real_lebesgue_scaf nil)
    (injective? const-decl "bool" functions nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (sigma_shift_T2 formula-decl nil sigma "reals/")
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (sigma_split formula-decl nil sigma "reals/")
    (f!2 skolem-const-decl "(bijective?[below[1 + j!1], (V!2)])"
     real_lebesgue_scaf nil)
    (V!2 skolem-const-decl "setofsets[real]" real_lebesgue_scaf nil)
    (k!1 skolem-const-decl "below[1 + j!1]" real_lebesgue_scaf nil)
    (j!1 skolem-const-decl "nat" real_lebesgue_scaf nil)
    (finite_remove judgement-tcc nil finite_sets nil)
    (z!1 skolem-const-decl "(f!2(k!1))" real_lebesgue_scaf nil)
    (a!2 skolem-const-decl "real" real_lebesgue_scaf nil)
    (x!1 skolem-const-decl "nat" real_lebesgue_scaf nil)
    (sigma_middle formula-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty_image application-judgement "(nonempty?[real])"
     double_nn_sequence "extended_nnreal/")
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card_bij_inv formula-decl nil finite_sets nil)
    (convergent_diff formula-decl nil convergence_ops "analysis/")
    (series const-decl "sequence[real]" series "series/")
    (limit_diff formula-decl nil convergence_ops "analysis/")
    (convergent? const-decl "bool" convergence_sequences "analysis/")
    (- const-decl "[T -> real]" real_fun_ops "reals/")
    (limit const-decl "real" convergence_sequences "analysis/")
    (limit_nonneg formula-decl nil series_aux "series/")
    (subrange type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_ge_0 formula-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (series_diff formula-decl nil series "series/")
    (comparison_test formula-decl nil series "series/")
    (abs_nat formula-decl nil abs_lems "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (length_empty_rew formula-decl nil real_intervals_aux nil)
    (emptyset const-decl "set" sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (emptyset_is_compact name-judgement "compact" real_topology
     "metric_space/")
    (emptyset_is_clopen name-judgement "clopen" real_topology
     "metric_space/")
    (outer_negligible_emptyset name-judgement "outer_negligible"
     real_lebesgue_scaf nil)
    (subset_algebra_emptyset name-judgement "(S)" real_lebesgue_scaf
     nil)
    (finite_emptyset name-judgement "finite_set" sigma_countable
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set[T]" bounded_nats
     "orders/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     "sets_aux/")
    (Union_emptyset_rew formula-decl nil sets_lemmas nil)
    (finite_cover? const-decl "bool" topology_prelim "topology/")
    (compact_subset? const-decl "bool" topology_prelim "topology/")
    (lebesgue_outer_measure_closed formula-decl nil real_lebesgue_scaf
     nil)
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (length const-decl "nnreal" real_intervals_aux nil)
    (upper_bound const-decl "bool" bound_defs "reals/")
    (b!1 skolem-const-decl "bounded_interval" real_lebesgue_scaf nil)
    (x!1 skolem-const-decl "real" real_lebesgue_scaf nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x_inf const-decl "extended_nnreal" extended_nnreal
     "extended_nnreal/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bounded? const-decl "bool" real_topology "metric_space/")
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (setof type-eq-decl nil defined_types nil)
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (pred type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_closed formula-decl nil real_intervals_aux nil)
    (nonempty? const-decl "bool" sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bounded_open_interval? const-decl "bool" real_topology
     "metric_space/")
    (bounded_open_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (sequence type-eq-decl nil sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (subset? const-decl "bool" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (TRUE const-decl "bool" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x_sum const-decl "extended_nnreal" extended_nnreal
     "extended_nnreal/")
    (O const-decl "T3" function_props nil)
    (x_eq const-decl "bool" extended_nnreal "extended_nnreal/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_series_limit formula-decl nil series "series/")
    (zero_series_conv formula-decl nil series "series/")
    (lebesgue_outer_measure_open formula-decl nil real_lebesgue_scaf
     nil)
    (length_open formula-decl nil real_intervals_aux nil)
    (zero_tail_series_conv formula-decl nil series_aux "series/")
    (zero_tail_series_limit formula-decl nil series_aux "series/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (metric_open_def formula-decl nil metric_space "metric_space/")
    (open_emptyset formula-decl nil topology "topology/")
    (ball_is_metric_open application-judgement "metric_open"
     real_topology "metric_space/")
    (minus_real_is_real application-judgement "real" reals nil)
    (metric_open_ball formula-decl nil metric_space "metric_space/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (x!1 skolem-const-decl "real" real_lebesgue_scaf nil)
    (metric_triangle? const-decl "bool" metric_def "metric_space/")
    (metric_symmetric? const-decl "bool" metric_def "metric_space/")
    (metric_zero? const-decl "bool" metric_def "metric_space/")
    (metric? const-decl "bool" metric_def "metric_space/")
    (BB skolem-const-decl "{x | least_upper_bound(<=)(x, b!1)}"
     real_lebesgue_scaf nil)
    (AA skolem-const-decl "{x | greatest_lower_bound(<=)(x, b!1)}"
     real_lebesgue_scaf nil)
    (b!1 skolem-const-decl "bounded_interval" real_lebesgue_scaf nil)
    (x!2 skolem-const-decl "real" real_lebesgue_scaf nil)
    (ball_is_metric_open judgement-tcc nil metric_space
     "metric_space/"))
   nil))
 (lebesgue_outer_measure_bounded_interval 0
  (lebesgue_outer_measure_bounded_interval-1 nil 3397455680
   ("" (skosimp)
    (("" (lemma "lebesgue_outer_measure_eq_length" ("b" "b!1"))
      (("" (expand "x_eq")
        (("" (flatten)
          (("" (expand "x_length")
            (("" (assert) (("" (decompose-equality) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (bounded_interval? const-decl "bool" real_topology "metric_space/")
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lebesgue_outer_measure_eq_length formula-decl nil
     real_lebesgue_scaf nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (outer_measure? const-decl "bool" outer_measure_def
     "measure_integration/")
    (outer_measure nonempty-type-eq-decl nil outer_measure_def
     "measure_integration/")
    (lebesgue_outer_measure const-decl "outer_measure"
     real_lebesgue_scaf nil)
    (TRUE const-decl "bool" booleans nil)
    (length const-decl "nnreal" real_intervals_aux nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (x_length const-decl "extended_nnreal" real_lebesgue_scaf nil) nil)
   shostak))
 (lebesgue_outer_measure_unbounded_interval 0
  (lebesgue_outer_measure_unbounded_interval-1 nil 3397365576
   ("" (skosimp)
    (("" (typepred "u!1")
      (("" (expand "unbounded_interval?")
        (("" (expand "unbounded?")
          (("" (flatten)
            (("" (expand "bounded?")
              (("" (flatten)
                (("" (case-replace "nonempty?[real](u!1)")
                  (("1" (hide 1)
                    (("1" (expand "nonempty?")
                      (("1" (expand "empty?")
                        (("1" (skosimp)
                          (("1" (expand "member")
                            (("1"
                              (name "M"
                                    "lebesgue_outer_measure(u!1)`2")
                              (("1"
                                (typepred
                                 "lebesgue_outer_measure(u!1)`2")
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (typepred "lebesgue_outer_measure")
                                    (("1"
                                      (expand "outer_measure?")
                                      (("1"
                                        (name-replace
                                         "L"
                                         "lebesgue_outer_measure")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split)
                                            (("1"
                                              (expand "above_bounded")
                                              (("1"
                                                (inst + "x!1+M")
                                                (("1"
                                                  (expand
                                                   "upper_bound")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (typepred "z!1")
                                                      (("1"
                                                        (case
                                                         "x!1<z!1")
                                                        (("1"
                                                          (expand
                                                           "om_increasing?")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{x:real| x!1<=x&x<=z!1}"
                                                             "u!1")
                                                            (("1"
                                                              (split
                                                               -4)
                                                              (("1"
                                                                (expand
                                                                 "x_le")
                                                                (("1"
                                                                  (replace
                                                                   -10)
                                                                  (("1"
                                                                    (replace
                                                                     -7)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (lemma
                                                                         "lebesgue_outer_measure_bounded_interval"
                                                                         ("b"
                                                                          "{x: real | x!1 <= x & x <= z!1}"))
                                                                        (("1"
                                                                          (expand
                                                                           "L"
                                                                           (-2
                                                                            -3))
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 -2)
                                                                                (("1"
                                                                                  (expand
                                                                                   "length")
                                                                                  (("1"
                                                                                    (case-replace
                                                                                     "empty?[real]({x: real | x!1 <= x & x <= z!1})")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "empty?")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "x!1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "<="
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       1
                                                                                       -1)
                                                                                      (("2"
                                                                                        (case-replace
                                                                                         "sup({x_1: real | x!1 <= x_1 & x_1 <= z!1})=z!1")
                                                                                        (("1"
                                                                                          (case-replace
                                                                                           "inf({x_2: real | x!1 <= x_2 & x_2 <= z!1})=x!1")
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             (-3
                                                                                              2))
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "le_plus_le"
                                                                                                 ("x"
                                                                                                  "z!1 - x!1"
                                                                                                  "y"
                                                                                                  "M"
                                                                                                  "z"
                                                                                                  "x!1"
                                                                                                  "w"
                                                                                                  "x!1"))
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -2
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (simplify
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "<=")
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (-3
                                                                                              1
                                                                                              2))
                                                                                            (("2"
                                                                                              (case
                                                                                               "nonempty?[real]({x_2: real | x!1 <= x_2 & x_2 <= z!1}) AND
       below_bounded[real]({x_2: real | x!1 <= x_2 & x_2 <= z!1})")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "inf({x_2: real | x!1 <= x_2 & x_2 <= z!1})")
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "LIMIT"
                                                                                                   "inf({x_2: real | x!1 <= x_2 & x_2 <= z!1})")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "greatest_lower_bound")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "lower_bound")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "x!1")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "x!1")
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 (-1
                                                                                                                  -2
                                                                                                                  1))
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "reals.<=")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "total_order?")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "partial_order?")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "antisymmetric?")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "LIMIT"
                                                                                                                             "x!1")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -4)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -5)
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (hide-all-but
                                                                                                                 (-4
                                                                                                                  1))
                                                                                                                (("3"
                                                                                                                  (skosimp)
                                                                                                                  (("3"
                                                                                                                    (typepred
                                                                                                                     "z!2")
                                                                                                                    (("3"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (-4
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "<=")
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "nonempty?")
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   3
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "below_bounded")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         +
                                                                                                         "x!1")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "lower_bound")
                                                                                                          (("2"
                                                                                                            (skosimp)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "z!2")
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (expand
                                                                                             "nonempty?")
                                                                                            (("3"
                                                                                              (replace
                                                                                               2
                                                                                               1)
                                                                                              (("3"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "below_bounded")
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "x!1")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "lower_bound")
                                                                                                      (("3"
                                                                                                        (skosimp)
                                                                                                        (("3"
                                                                                                          (typepred
                                                                                                           "z!2")
                                                                                                          (("3"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "nonempty?[real]({x_1: real | x!1 <= x_1 & x_1 <= z!1}) AND
       above_bounded[real]({x_1: real | x!1 <= x_1 & x_1 <= z!1})")
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "sup({x_1: real | x!1 <= x_1 & x_1 <= z!1})")
                                                                                            (("1"
                                                                                              (name-replace
                                                                                               "LIMIT"
                                                                                               "sup({x_1: real | x!1 <= x_1 & x_1 <= z!1})")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "least_upper_bound")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "upper_bound")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "z!1")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "z!1")
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (typepred
                                                                                                             "reals.<=")
                                                                                                            (("1"
                                                                                                              (hide-all-but
                                                                                                               (-1
                                                                                                                -2
                                                                                                                -3
                                                                                                                1))
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "total_order?")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "partial_order?")
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "antisymmetric?")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "LIMIT"
                                                                                                                         "z!1")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -4)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -5)
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("3"
                                                                                                              (skosimp)
                                                                                                              (("3"
                                                                                                                (typepred
                                                                                                                 "z!2")
                                                                                                                (("3"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         (-5
                                                                                                          1))
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "<=")
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "nonempty?")
                                                                                            (("2"
                                                                                              (replace
                                                                                               3
                                                                                               1)
                                                                                              (("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "above_bounded")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "z!1")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "upper_bound")
                                                                                                      (("2"
                                                                                                        (skosimp)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "z!2")
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (expand
                                                                                           "nonempty?")
                                                                                          (("3"
                                                                                            (replace
                                                                                             2
                                                                                             1)
                                                                                            (("3"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "above_bounded")
                                                                                                (("3"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "z!1")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "upper_bound")
                                                                                                    (("3"
                                                                                                      (skosimp)
                                                                                                      (("3"
                                                                                                        (typepred
                                                                                                         "z!2")
                                                                                                        (("3"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-3
                                                                            1))
                                                                          (("2"
                                                                            (expand
                                                                             "bounded_interval?")
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (expand
                                                                                 "interval?")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "x!2")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "y!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "bounded?")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "nonempty?")
                                                                                    (("2"
                                                                                      (replace
                                                                                       1
                                                                                       2)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "above_bounded")
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "z!1")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "upper_bound")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "below_bounded")
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "x!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "lower_bound")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  -2
                                                                  -7
                                                                  -8
                                                                  1))
                                                                (("2"
                                                                  (expand
                                                                   "subset?")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "interval?")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "x!1"
                                                                             "z!1"
                                                                             "x!2")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "below_bounded")
                                              (("2"
                                                (inst + "x!1-M")
                                                (("2"
                                                  (expand
                                                   "lower_bound")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (typepred "z!1")
                                                      (("2"
                                                        (case
                                                         "z!1<x!1")
                                                        (("1"
                                                          (expand
                                                           "om_increasing?")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "{x:real| z!1<=x&x<=x!1}"
                                                             "u!1")
                                                            (("1"
                                                              (split
                                                               -4)
                                                              (("1"
                                                                (expand
                                                                 "x_le")
                                                                (("1"
                                                                  (replace
                                                                   -10)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (replace
                                                                       -8)
                                                                      (("1"
                                                                        (lemma
                                                                         "lebesgue_outer_measure_bounded_interval"
                                                                         ("b"
                                                                          "{x: real | z!1 <= x & x <= x!1}"))
                                                                        (("1"
                                                                          (expand
                                                                           "L"
                                                                           -3)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 -6
                                                                                 -7
                                                                                 -9
                                                                                 -12)
                                                                                (("1"
                                                                                  (expand
                                                                                   "length")
                                                                                  (("1"
                                                                                    (case-replace
                                                                                     "empty?[real]({x: real | z!1 <= x & x <= x!1})")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "empty?")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "x!1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "<="
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       1
                                                                                       -1)
                                                                                      (("2"
                                                                                        (case
                                                                                         "nonempty?[real]({x: real | z!1 <= x & x <= x!1})")
                                                                                        (("1"
                                                                                          (hide
                                                                                           1)
                                                                                          (("1"
                                                                                            (case
                                                                                             "above_bounded[real]({x_1: real | z!1 <= x_1 & x_1 <= x!1})")
                                                                                            (("1"
                                                                                              (case
                                                                                               "below_bounded[real]({x_1: real | z!1 <= x_1 & x_1 <= x!1})")
                                                                                              (("1"
                                                                                                (case-replace
                                                                                                 "sup({x_1: real | z!1 <= x_1 & x_1 <= x!1})=x!1")
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "inf({x_2: real | z!1 <= x_2 & x_2 <= x!1})=z!1")
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-6
                                                                                                      1
                                                                                                      -7))
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "le_plus_le"
                                                                                                         ("x"
                                                                                                          "x!1 - z!1"
                                                                                                          "y"
                                                                                                          "M"
                                                                                                          "z"
                                                                                                          "z!1-M"
                                                                                                          "w"
                                                                                                          "z!1-M"))
                                                                                                        (("1"
                                                                                                          (simplify
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "<=")
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     -1
                                                                                                     -3
                                                                                                     -5
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "inf({x_2: real | z!1 <= x_2 & x_2 <= x!1})")
                                                                                                      (("1"
                                                                                                        (name-replace
                                                                                                         "LIMIT"
                                                                                                         "inf({x_2: real | z!1 <= x_2 & x_2 <= x!1})")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "greatest_lower_bound")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "lower_bound")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "z!1")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "z!1")
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "reals.<=")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "total_order?")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "partial_order?")
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "antisymmetric?")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "LIMIT"
                                                                                                                                 "z!1")
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -4)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -5)
                                                                                                                                    (("1"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (skosimp)
                                                                                                                      (("3"
                                                                                                                        (typepred
                                                                                                                         "z!2")
                                                                                                                        (("3"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "<=")
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (replace
                                                                                                     -2)
                                                                                                    (("3"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   -1
                                                                                                   -4
                                                                                                   2
                                                                                                   -6
                                                                                                   -8
                                                                                                   -9)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "sup({x_1: real | z!1 <= x_1 & x_1 <= x!1})")
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "LIMIT"
                                                                                                       "sup({x_1: real | z!1 <= x_1 & x_1 <= x!1})")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "least_upper_bound")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "upper_bound")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "x!1")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!1")
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "reals.<=")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "total_order?")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "partial_order?")
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "antisymmetric?")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "LIMIT"
                                                                                                                               "x!1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -3)
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (skosimp)
                                                                                                                    (("3"
                                                                                                                      (typepred
                                                                                                                       "z!2")
                                                                                                                      (("3"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "<=")
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (replace
                                                                                                   -3)
                                                                                                  (("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "below_bounded")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "z!1")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "lower_bound")
                                                                                                    (("2"
                                                                                                      (skosimp)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "z!2")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "above_bounded")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "upper_bound")
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "z!2")
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "nonempty?")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "bounded_interval?")
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (expand
                                                                                 "interval?")
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "bounded?")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "nonempty?")
                                                                                    (("2"
                                                                                      (replace
                                                                                       1
                                                                                       2)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "above_bounded")
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "x!1")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "upper_bound")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "below_bounded")
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "z!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "lower_bound")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-2
                                                                  -7
                                                                  -8
                                                                  1))
                                                                (("2"
                                                                  (expand
                                                                   "interval?")
                                                                  (("2"
                                                                    (expand
                                                                     "subset?")
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "z!1"
                                                                             "x!1"
                                                                             "x!2")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "nonempty?") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unbounded_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (unbounded_interval? const-decl "bool" real_topology
     "metric_space/")
    (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (unbounded? const-decl "bool" real_topology "metric_space/")
    (bounded? const-decl "bool" real_topology "metric_space/")
    (nonempty? const-decl "bool" sets nil)
    (lebesgue_outer_measure const-decl "outer_measure"
     real_lebesgue_scaf nil)
    (outer_measure nonempty-type-eq-decl nil outer_measure_def
     "measure_integration/")
    (outer_measure? const-decl "bool" outer_measure_def
     "measure_integration/")
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (upper_bound const-decl "bool" bound_defs "reals/")
    (om_increasing? const-decl "bool" outer_measure_def
     "measure_integration/")
    (interval? const-decl "bool" real_topology "metric_space/") nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "nnreal" real_intervals_aux nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (le_plus_le formula-decl nil real_props nil) nil nil nil
    (total_order? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (pred type-eq-decl nil defined_types nil)
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (setof type-eq-decl nil defined_types nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (bounded_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (bounded_interval? const-decl "bool" real_topology "metric_space/")
    (lebesgue_outer_measure_bounded_interval formula-decl nil
     real_lebesgue_scaf nil)
    (x_le const-decl "bool" extended_nnreal "extended_nnreal/")
    (subset? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   shostak))
 (outer_measurable_open_semi_infinite 0
  (outer_measurable_open_semi_infinite-1 nil 3409409313
   (""
    (case "FORALL (c:real,y: set[real]):
(exists (a,b:real): y={x| a<x&x<b})=>        x_le(x_add(lebesgue_outer_measure(intersection(y, {x | x < c})),
                   lebesgue_outer_measure(intersection
                                          (y, complement({x | x < c})))),
             lebesgue_outer_measure(y))")
    (("1" (skolem + ("c!1"))
      (("1" (inst - "c!1" "_")
        (("1" (rewrite "outer_measurable_def")
          (("1" (skolem + "A!1")
            (("1"
              (case "forall I: subset?(A!1,IUnion(I)) => x_le(x_add(lebesgue_outer_measure(intersection(A!1, {x | x < c!1})),
                 lebesgue_outer_measure(intersection
                                        (A!1, complement({x | x < c!1})))),
           x_sum(x_length o I))")
              (("1" (name "RHS" "lebesgue_outer_measure(A!1)")
                (("1" (replace -1)
                  (("1" (expand "lebesgue_outer_measure" -1)
                    (("1" (expand "x_inf" -1)
                      (("1" (lift-if -1)
                        (("1" (prop)
                          (("1" (expand "x_le" 1)
                            (("1" (assert) nil nil)) nil)
                           ("2" (skosimp)
                            (("2"
                              (typepred "glb({z_1: real |
              EXISTS (x:extended_nnreal):
                (EXISTS I:
                   x_le(x_sum(x_length o I), x) AND
                    subset?[real](A!1, IUnion(I)))
                 AND x`1 AND x`2 = z_1})")
                              (("1"
                                (name-replace
                                 "GLB"
                                 "glb({z_1: real |
              EXISTS (x:extended_nnreal):
                (EXISTS I:
                   x_le(x_sum(x_length o I), x) AND
                    subset?[real](A!1, IUnion(I)))
                 AND x`1 AND x`2 = z_1})")
                                (("1"
                                  (expand "greatest_lower_bound?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide -6)
                                      (("1"
                                        (name-replace
                                         "LHS"
                                         "x_add(lebesgue_outer_measure(intersection(A!1, {x | x < c!1})),
                 lebesgue_outer_measure(intersection
                                        (A!1, complement({x | x < c!1}))))")
                                        (("1"
                                          (expand "x_le" 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -4 * rl)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "lower_bound?")
                                                    (("1"
                                                      (inst -2 "LHS`2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (typepred
                                                                 "x!1")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (inst
                                                                     -7
                                                                     "I!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "x_le")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (typepred
                                                               "s!1")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     -8
                                                                     "I!1")
                                                                    (("2"
                                                                      (replace
                                                                       -2)
                                                                      (("2"
                                                                        (expand
                                                                         "x_le")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -4)
                                                                            (("2"
                                                                              (replace
                                                                               -3)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "o ")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (name-replace
                                                                                             "DRL2"
                                                                                             "x_sum(LAMBDA (x: nat): x_length(I!1(x)))`2")
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-2
                                                                                                -10
                                                                                                1))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "reals.<=")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "total_order?")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "partial_order?")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "preorder?")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "transitive?")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "LHS`2"
                                                                                                               "DRL2"
                                                                                                               "s!1")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -5)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -6)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "I!1(x!3)")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "bounded_open_interval?")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "bounded_interval?")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (split 1)
                                  (("1"
                                    (expand "nonempty?")
                                    (("1"
                                      (expand "empty?")
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (inst - "x!1`2")
                                          (("1"
                                            (inst + "x!1")
                                            (("1"
                                              (typepred "x!1")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (expand "o")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (inst + "I!1")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "bounded_below?")
                                    (("2"
                                      (inst + "0")
                                      (("2"
                                        (expand "lower_bound?")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (typepred "s!1")
                                            (("2"
                                              (skosimp)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3"
                                  (skosimp)
                                  (("3"
                                    (skosimp)
                                    (("3"
                                      (typepred "I!1(x1!1)")
                                      (("3"
                                        (expand
                                         "bounded_open_interval?")
                                        (("3"
                                          (expand "bounded_interval?")
                                          (("3" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skosimp)
                  (("2" (name-replace "E" "{x | x < c!1}")
                    (("2"
                      (case "forall n: bounded_interval?(intersection[real](I!1(n), E))")
                      (("1"
                        (case "forall n: bounded_interval?(intersection[real](I!1(n), complement(E)))")
                        (("1"
                          (case "x_le(lebesgue_outer_measure(intersection(A!1, E)),x_sum(lambda n: x_length(intersection[real](I!1(n),E))))")
                          (("1"
                            (case "x_le(lebesgue_outer_measure(intersection(A!1, complement(E))),x_sum(LAMBDA n: x_length(intersection[real](I!1(n), complement(E)))))")
                            (("1"
                              (name-replace "LHS1"
                               "lebesgue_outer_measure(intersection(A!1, E))")
                              (("1"
                                (name-replace
                                 "LHS2"
                                 "lebesgue_outer_measure(intersection(A!1, complement(E)))")
                                (("1"
                                  (case
                                   "forall (x,y:extended_nnreal,X,Y:[nat->extended_nnreal]): x_le(x,x_sum(X))&x_le(y,x_sum(Y))=>x_le(x_add(x,y),x_sum(lambda n: x_add(X(n),Y(n))))")
                                  (("1"
                                    (inst
                                     -
                                     "LHS1"
                                     "LHS2"
                                     "LAMBDA n: x_length(intersection[real](I!1(n), E))"
                                     "LAMBDA n:
                   x_length(intersection[real](I!1(n), complement(E)))")
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (hide -2 -3)
                                          (("1"
                                            (name-replace
                                             "LHS"
                                             "x_add(LHS1, LHS2)")
                                            (("1"
                                              (case-replace
                                               "(LAMBDA (n_1: nat):
                   x_add(x_length(intersection[real](I!1(n_1), E)),
                         x_length(intersection[real]
                                      (I!1(n_1), complement(E)))))=(x_length o I!1)")
                                              (("1"
                                                (apply-extensionality
                                                 :hide?
                                                 t)
                                                (("1"
                                                  (hide -1 2)
                                                  (("1"
                                                    (hide -4)
                                                    (("1"
                                                      (expand "o ")
                                                      (("1"
                                                        (expand
                                                         "x_length")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "x!1")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (typepred
                                                                   "I!1(x!1)")
                                                                  (("1"
                                                                    (expand
                                                                     "bounded_open_interval?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "x_add")
                                                                          (("1"
                                                                            (hide
                                                                             -3
                                                                             -4
                                                                             -5)
                                                                            (("1"
                                                                              (case
                                                                               "forall (a,b:real): length(intersection[real]({x|a<x&x<b}, complement(E))) +
       length(intersection[real]({x|a<x&x<b}, E))
       = length({x|a<x&x<b})")
                                                                              (("1"
                                                                                (case
                                                                                 "nonempty?[real](I!1(x!1))")
                                                                                (("1"
                                                                                  (case
                                                                                   "exists (a,b:real): I!1(x!1)={x | a < x & x < b}")
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "a!1"
                                                                                       "b!1")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -2
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "bounded_interval?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "bounded?")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (split
                                                                                               -3)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nonempty?")
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "inf(I!1(x!1))")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "sup(I!1(x!1))")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "inf(I!1(x!1))"
                                                                                                       "sup(I!1(x!1))")
                                                                                                      (("1"
                                                                                                        (apply-extensionality
                                                                                                         :hide?
                                                                                                         t)
                                                                                                        (("1"
                                                                                                          (name-replace
                                                                                                           "OPEN"
                                                                                                           "I!1(x!1)")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "metric_open?")
                                                                                                            (("1"
                                                                                                              (case-replace
                                                                                                               "OPEN(x!2)")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -8
                                                                                                                 "x!2")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skosimp)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "subset?")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "member")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "ball")
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -2)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "greatest_lower_bound")
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "lower_bound")
                                                                                                                                    (("1"
                                                                                                                                      (inst-cp
                                                                                                                                       -
                                                                                                                                       "x!2")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -9
                                                                                                                                         "x!2-r!1/2")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "abs")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "x!2 - r!1 / 2")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (expand
                                                                                                                               "least_upper_bound")
                                                                                                                              (("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "upper_bound")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -9
                                                                                                                                     "x!2+r!1/2")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "abs")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "r!1 / 2 + x!2")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "least_upper_bound")
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "x!2")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "upper_bound"
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (skosimp)
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "z!1")
                                                                                                                                (("2"
                                                                                                                                  (case
                                                                                                                                   "x!2<z!1")
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "greatest_lower_bound")
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "x!2")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "lower_bound"
                                                                                                                                               2)
                                                                                                                                              (("1"
                                                                                                                                                (skosimp)
                                                                                                                                                (("1"
                                                                                                                                                  (typepred
                                                                                                                                                   "z!2")
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "x!2>z!2")
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "interval?")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -12
                                                                                                                                                           "z!2"
                                                                                                                                                           "z!1"
                                                                                                                                                           "x!2")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "nonempty?")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "length")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (case-replace
                                                                                           "empty?[real](intersection[real](I!1(x!1), complement(E)))")
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "empty?[real](intersection[real](I!1(x!1), E))")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (-2
                                                                                                1))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "E")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "intersection")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "empty?")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("2"
                                                                                                        (skosimp)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "x!2")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              1))
                                                                                            (("2"
                                                                                              (expand
                                                                                               "intersection")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "empty?")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "member")
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "x!2")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "E")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "complement")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("2"
                                                                                          (case
                                                                                           "a!1<b!1")
                                                                                          (("1"
                                                                                            (case
                                                                                             "{x | a!1 < x & x < b!1}(c!1)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "intersection[real]({x | a!1 < x & x < b!1}, {x | x < c!1})={x | a!1 < x & x < c!1}")
                                                                                                  (("1"
                                                                                                    (case-replace
                                                                                                     "intersection[real]
                  ({x | a!1 < x & x < b!1}, {x_1: real | NOT x_1 < c!1})={x | c!1 <= x & x < b!1}")
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "length_open_rew")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "length_open_rew")
                                                                                                          (("1"
                                                                                                            (case-replace
                                                                                                             "length({x | c!1 <= x & x < b!1})=b!1-c!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 -3)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "length")
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "nonempty?[real]({x | c!1 <= x & x < b!1})")
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "sup({x | c!1 <= x & x < b!1})")
                                                                                                                      (("1"
                                                                                                                        (case-replace
                                                                                                                         "sup({x | c!1 <= x & x < b!1})=b!1")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "inf({x | c!1 <= x & x < b!1})")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "greatest_lower_bound")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "c!1")
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "lower_bound")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "c!1")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "nonempty?")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (expand
                                                                                                                                       "nonempty?")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("3"
                                                                                                                                      (expand
                                                                                                                                       "lower_bound")
                                                                                                                                      (("3"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "below_bounded")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   +
                                                                                                                                   "c!1")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "lower_bound")
                                                                                                                                    (("2"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "least_upper_bound")
                                                                                                                            (("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "upper_bound")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -2
                                                                                                                                   "b!1")
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (split
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "<="
                                                                                                                                         -1
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (inst-cp
                                                                                                                                             -
                                                                                                                                             "c!1")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "(sup({x | c!1 <= x & x < b!1})+ b!1)/2")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("3"
                                                                                                                                                (assert)
                                                                                                                                                (("3"
                                                                                                                                                  (expand
                                                                                                                                                   "above_bounded")
                                                                                                                                                  (("3"
                                                                                                                                                    (inst
                                                                                                                                                     +
                                                                                                                                                     "b!1")
                                                                                                                                                    (("3"
                                                                                                                                                      (expand
                                                                                                                                                       "upper_bound")
                                                                                                                                                      (("3"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (skosimp)
                                                                                                                                        (("2"
                                                                                                                                          (typepred
                                                                                                                                           "z!1")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "above_bounded")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             +
                                                                                                                             "b!1")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "upper_bound")
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "nonempty?")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "empty?")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "(b!1+c!1)/2")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "member")
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "bounded_interval?")
                                                                                                                (("3"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "interval?")
                                                                                                                    (("1"
                                                                                                                      (skosimp)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "bounded?")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "nonempty?")
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "above_bounded")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 +
                                                                                                                                 "b!1")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "upper_bound")
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (expand
                                                                                                                               "below_bounded")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 +
                                                                                                                                 "c!1")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "lower_bound")
                                                                                                                                  (("2"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (apply-extensionality
                                                                                                         :hide?
                                                                                                         t)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "intersection")
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (apply-extensionality
                                                                                                       :hide?
                                                                                                       t)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "c!1<=a!1")
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "intersection[real]({x | a!1 < x & x < b!1}, {x | x < c!1})=emptyset[real]")
                                                                                                  (("1"
                                                                                                    (case-replace
                                                                                                     "intersection[real]
                  ({x | a!1 < x & x < b!1}, {x_1: real | NOT x_1 < c!1})={x | a!1 < x & x < b!1}")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "length_empty_rew")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       -1
                                                                                                       3)
                                                                                                      (("2"
                                                                                                        (apply-extensionality
                                                                                                         :hide?
                                                                                                         t)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     3)
                                                                                                    (("2"
                                                                                                      (apply-extensionality
                                                                                                       :hide?
                                                                                                       t)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "b!1<=c!1")
                                                                                                  (("1"
                                                                                                    (case-replace
                                                                                                     "intersection[real]({x | a!1 < x & x < b!1}, {x | x < c!1})={x | a!1 < x & x < b!1}")
                                                                                                    (("1"
                                                                                                      (case-replace
                                                                                                       "intersection[real]
                  ({x | a!1 < x & x < b!1}, {x_1: real | NOT x_1 < c!1})=emptyset[real]")
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "length_empty_rew")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         -1
                                                                                                         4)
                                                                                                        (("2"
                                                                                                          (apply-extensionality
                                                                                                           1
                                                                                                           :hide?
                                                                                                           t)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       4)
                                                                                                      (("2"
                                                                                                        (apply-extensionality
                                                                                                         1
                                                                                                         :hide?
                                                                                                         t)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (case-replace
                                                                                             "{x | a!1 < x & x < b!1}=emptyset[real]")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "intersection_commutative")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "intersection_empty")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "intersection_commutative")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "intersection_empty")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "length_empty_rew")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               3)
                                                                                              (("2"
                                                                                                (apply-extensionality
                                                                                                 :hide?
                                                                                                 t)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "emptyset")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("3"
                                                                                  (skosimp)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "bounded_interval?")
                                                                                    (("3"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "interval?")
                                                                                        (("1"
                                                                                          (skosimp)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "bounded?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "nonempty?")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "above_bounded")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "b!1")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "upper_bound")
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "below_bounded")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "a!1")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "lower_bound")
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("4"
                                                                                  (skosimp)
                                                                                  (("4"
                                                                                    (expand
                                                                                     "bounded_interval?")
                                                                                    (("4"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "E")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "intersection")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "interval?")
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "E")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "intersection")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "bounded?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "nonempty?")
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "above_bounded")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           +
                                                                                                           "max(b!1,c!1)")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "upper_bound")
                                                                                                            (("1"
                                                                                                              (skosimp)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "z!1")
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "below_bounded")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           +
                                                                                                           "a!1")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "lower_bound")
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("5"
                                                                                  (skosimp)
                                                                                  (("5"
                                                                                    (expand
                                                                                     "E")
                                                                                    (("5"
                                                                                      (expand
                                                                                       "complement")
                                                                                      (("5"
                                                                                        (expand
                                                                                         "intersection")
                                                                                        (("5"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("5"
                                                                                            (expand
                                                                                             "bounded_interval?")
                                                                                            (("5"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "interval?")
                                                                                                (("1"
                                                                                                  (skosimp)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "bounded?")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "nonempty?")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "above_bounded")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             +
                                                                                                             "b!1")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "upper_bound")
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "below_bounded")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             +
                                                                                                             "a!1")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "lower_bound")
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst -2 "n!1")
                                                    (("2"
                                                      (expand
                                                       "bounded_interval?")
                                                      (("2"
                                                        (flatten)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skosimp)
                                                  (("3"
                                                    (inst -3 "n!1")
                                                    (("3"
                                                      (expand
                                                       "bounded_interval?")
                                                      (("3"
                                                        (flatten)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp)
                                      (("2"
                                        (inst -3 "n!1")
                                        (("2"
                                          (expand "bounded_interval?")
                                          (("2" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skosimp)
                                      (("3"
                                        (inst -4 "n!1")
                                        (("3"
                                          (expand "bounded_interval?")
                                          (("3" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (expand "x_add")
                                        (("2"
                                          (expand "x_sum")
                                          (("2"
                                            (expand "x_le")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (case-replace
                                                 "(FORALL (i:nat): IF X!1(i)`1 AND Y!1(i)`1 THEN TRUE ELSE FALSE ENDIF)")
                                                (("1"
                                                  (case
                                                   "forall (i:nat): X!1(i)`1")
                                                  (("1"
                                                    (case
                                                     "forall (i:nat): Y!1(i)`1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (case-replace
                                                             "(LAMBDA (i:nat):
                               IF X!1(i)`1 AND Y!1(i)`1
                                 THEN X!1(i)`2 + Y!1(i)`2
                               ELSE 0
                               ENDIF)=LAMBDA (i:nat):X!1(i)`2 + Y!1(i)`2")
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (case-replace
                                                                 "convergent(series(LAMBDA (i: nat): X!1(i)`2 + Y!1(i)`2))")
                                                                (("1"
                                                                  (hide
                                                                   -4)
                                                                  (("1"
                                                                    (lemma
                                                                     "comparison_test"
                                                                     ("b"
                                                                      "LAMBDA (i: nat): X!1(i)`2 + Y!1(i)`2"
                                                                      "a"
                                                                      "LAMBDA (i: nat): X!1(i)`2"))
                                                                    (("1"
                                                                      (lemma
                                                                       "comparison_test"
                                                                       ("b"
                                                                        "LAMBDA (i: nat): X!1(i)`2 + Y!1(i)`2"
                                                                        "a"
                                                                        "LAMBDA (i: nat): Y!1(i)`2"))
                                                                      (("1"
                                                                        (replace
                                                                         -3)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (split
                                                                             -2)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "limit_sum"
                                                                                       ("v1"
                                                                                        "series(LAMBDA (i: nat): X!1(i)`2)"
                                                                                        "v2"
                                                                                        "series(LAMBDA (i: nat): Y!1(i)`2)"))
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "series_sum"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "+"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "Y!1(n!1)`2")
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "X!1(n!1)`2")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (typepred
                                                                                 "X!1(n!1)`2")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "Y!1(n!1)`2")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "abs")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-6
                                                                    1))
                                                                  (("2"
                                                                    (prop)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1
                                                                -2
                                                                1))
                                                              (("2"
                                                                (apply-extensionality
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!2")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "x!2")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-2 1))
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst
                                                           -
                                                           "i!1")
                                                          (("2"
                                                            (prop)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-1 1))
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst - "i!1")
                                                        (("2"
                                                          (prop)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 -3))
                                                  (("2"
                                                    (prop)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2 -1 -5)
                              (("2"
                                (typepred "lebesgue_outer_measure")
                                (("2"
                                  (expand "outer_measure?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "om_increasing?")
                                      (("2"
                                        (inst
                                         -
                                         "intersection(A!1, complement(E))"
                                         "IUnion(LAMBDA n:intersection[real](I!1(n), complement(E)))")
                                        (("2"
                                          (split -2)
                                          (("1"
                                            (name-replace
                                             "LHS"
                                             "lebesgue_outer_measure(intersection(A!1, complement(E)))")
                                            (("1"
                                              (expand
                                               "om_countably_subadditive?")
                                              (("1"
                                                (inst
                                                 -
                                                 "LAMBDA
                                         n:
                                         intersection[real]
                                         (I!1(n), complement(E))")
                                                (("1"
                                                  (name-replace
                                                   "DRL2"
                                                   "lebesgue_outer_measure(IUnion(LAMBDA
                                         n:
                                         intersection[real]
                                         (I!1(n), complement(E))))")
                                                  (("1"
                                                    (expand "o" -3)
                                                    (("1"
                                                      (case-replace
                                                       "(LAMBDA (x: nat):
                   lebesgue_outer_measure(intersection[real]
                                          (I!1(x), complement(E))))=(LAMBDA n:
                   x_length(intersection[real](I!1(n), complement(E))))")
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (name-replace
                                                           "RHS"
                                                           "x_sum(LAMBDA n:
                   x_length(intersection[real](I!1(n), complement(E))))")
                                                          (("1"
                                                            (hide-all-but
                                                             (-1 -3 1))
                                                            (("1"
                                                              (expand
                                                               "x_le")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (hide
                                                             -3
                                                             -2
                                                             -1
                                                             -6
                                                             -5)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("1"
                                                                (lemma
                                                                 "lebesgue_outer_measure_eq_length"
                                                                 ("b"
                                                                  "intersection[real](I!1(x!1), complement(E))"))
                                                                (("1"
                                                                  (expand
                                                                   "x_eq")
                                                                  (("1"
                                                                    (expand
                                                                     "x_length")
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "n!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "bounded_interval?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-5 1))
                                            (("2"
                                              (expand "intersection")
                                              (("2"
                                                (expand "IUnion")
                                                (("2"
                                                  (expand "subset?")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst - "x!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skosimp)
                              (("3"
                                (inst - "n!1")
                                (("3"
                                  (expand "bounded_interval?")
                                  (("3" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 2)
                            (("2" (typepred "lebesgue_outer_measure")
                              (("2"
                                (expand "outer_measure?" -1)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "om_increasing?")
                                    (("2"
                                      (inst
                                       -
                                       "intersection(A!1, E)"
                                       "IUnion(LAMBDA n: intersection[real](I!1(n), E))")
                                      (("2"
                                        (name-replace
                                         "LHS"
                                         "lebesgue_outer_measure(intersection(A!1, E))")
                                        (("2"
                                          (expand
                                           "om_countably_subadditive?")
                                          (("2"
                                            (inst
                                             -3
                                             "LAMBDA
                                          n:
                                          intersection[real](I!1(n), E)")
                                            (("2"
                                              (name-replace
                                               "DRL2"
                                               "lebesgue_outer_measure(IUnion(LAMBDA
                                          n:
                                          intersection[real](I!1(n), E)))")
                                              (("2"
                                                (expand "o" -3)
                                                (("2"
                                                  (case-replace
                                                   "(LAMBDA (x: nat):
                   lebesgue_outer_measure(intersection[real](I!1(x), E)))=(LAMBDA n: x_length(intersection[real](I!1(n), E)))")
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (name-replace
                                                       "RHS"
                                                       "x_sum(LAMBDA n: x_length(intersection[real](I!1(n), E)))")
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 -3 1))
                                                          (("1"
                                                            (expand
                                                             "x_le")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand
                                                             "subset?")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (expand
                                                                 "intersection")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (expand
                                                                       "IUnion")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -6
                                                                           "x!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (apply-extensionality
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (hide-all-but
                                                         (-4 1))
                                                        (("1"
                                                          (inst
                                                           -
                                                           "x!1")
                                                          (("1"
                                                            (lemma
                                                             "lebesgue_outer_measure_eq_length"
                                                             ("b"
                                                              "intersection[real](I!1(x!1), E)"))
                                                            (("1"
                                                              (expand
                                                               "x_eq")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "x_length")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-4 1))
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "n!1")
                                                            (("2"
                                                              (expand
                                                               "bounded_interval?")
                                                              (("2"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp)
                            (("3" (inst -2 "n!1")
                              (("3"
                                (expand "bounded_interval?")
                                (("3" (flatten) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-2 1))
                          (("2" (skosimp)
                            (("2" (typepred "I!1(n!1)")
                              (("2"
                                (expand "bounded_open_interval?")
                                (("2"
                                  (expand "bounded_interval?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (split)
                                      (("1"
                                        (hide -2 -3 -4)
                                        (("1"
                                          (expand "E")
                                          (("1"
                                            (expand "complement")
                                            (("1"
                                              (expand "intersection")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (expand "interval?")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (typepred "x!1")
                                                      (("1"
                                                        (typepred
                                                         "y!1")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "x!1"
                                                           "y!1"
                                                           "z!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "bounded?")
                                        (("2"
                                          (split -2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (expand "E")
                                                (("1"
                                                  (expand "complement")
                                                  (("1"
                                                    (expand
                                                     "intersection")
                                                    (("1"
                                                      (expand "empty?")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "x!1")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "nonempty?" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (expand
                                                     "above_bounded")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (inst + "n!2")
                                                        (("1"
                                                          (hide-all-but
                                                           (-2 1))
                                                          (("1"
                                                            (expand
                                                             "E")
                                                            (("1"
                                                              (expand
                                                               "upper_bound")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (typepred
                                                                   "z!1")
                                                                  (("1"
                                                                    (expand
                                                                     "complement")
                                                                    (("1"
                                                                      (expand
                                                                       "intersection")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "z!1")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "below_bounded")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst + "n!2")
                                                        (("2"
                                                          (hide-all-but
                                                           (-3 1))
                                                          (("2"
                                                            (expand
                                                             "lower_bound")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (typepred
                                                                 "z!1")
                                                                (("2"
                                                                  (expand
                                                                   "E")
                                                                  (("2"
                                                                    (expand
                                                                     "intersection")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "z!1")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (skosimp)
                          (("2" (typepred "I!1(n!1)")
                            (("2" (expand "bounded_open_interval?")
                              (("2"
                                (expand "bounded_interval?")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (hide -3)
                                    (("2"
                                      (split)
                                      (("1"
                                        (expand "interval?")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (typepred "x!1")
                                            (("1"
                                              (typepred "y!1")
                                              (("1"
                                                (expand "intersection")
                                                (("1"
                                                  (expand "member")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand "E")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "x!1"
                                                         "y!1"
                                                         "z!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "bounded?")
                                        (("2"
                                          (split -2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide -2 2)
                                              (("1"
                                                (expand "E")
                                                (("1"
                                                  (expand
                                                   "intersection")
                                                  (("1"
                                                    (expand "empty?")
                                                    (("1"
                                                      (expand "member")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "x!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "nonempty?")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 1))
                                                    (("1"
                                                      (expand "E")
                                                      (("1"
                                                        (expand
                                                         "intersection")
                                                        (("1"
                                                          (expand
                                                           "member")
                                                          (("1"
                                                            (expand
                                                             "above_bounded")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "n!2")
                                                                (("1"
                                                                  (expand
                                                                   "upper_bound")
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "z!1")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-2 1))
                                                    (("2"
                                                      (expand
                                                       "intersection")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (expand
                                                           "below_bounded")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               +
                                                               "n!2")
                                                              (("2"
                                                                (expand
                                                                 "lower_bound")
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "z!1")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but 1)
                (("3" (skosimp)
                  (("3" (skosimp)
                    (("3" (typepred "I!1(x1!1)")
                      (("3" (expand "bounded_open_interval?")
                        (("3" (expand "bounded_interval?")
                          (("3" (flatten) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp*)
        (("2" (case "y!1(c!1)")
          (("1" (replace -2 -1)
            (("1" (assert)
              (("1" (flatten)
                (("1"
                  (case-replace
                   "intersection(y!1, {x | x < c!1})={x|a!1<x&x<c!1}")
                  (("1"
                    (case-replace "intersection
                                        (y!1, complement({x | x < c!1}))={x| c!1<=x&x<b!1}")
                    (("1" (hide -1 -2)
                      (("1" (replace -3 1)
                        (("1" (hide -3)
                          (("1"
                            (rewrite
                             "lebesgue_outer_measure_bounded_interval")
                            (("1"
                              (rewrite
                               "lebesgue_outer_measure_bounded_interval")
                              (("1"
                                (rewrite
                                 "lebesgue_outer_measure_bounded_interval")
                                (("1"
                                  (expand "x_add")
                                  (("1"
                                    (expand "x_le")
                                    (("1"
                                      (rewrite "length_open_rew")
                                      (("1"
                                        (rewrite "length_open_rew")
                                        (("1"
                                          (expand "length")
                                          (("1"
                                            (case-replace
                                             "empty?[real]({x | c!1 <= x & x < b!1})")
                                            (("1"
                                              (expand "empty?")
                                              (("1"
                                                (inst - "(b!1-c!1)/2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred
                                                 "sup({x | c!1 <= x & x < b!1})")
                                                (("1"
                                                  (name-replace
                                                   "BB"
                                                   "sup({x | c!1 <= x & x < b!1})")
                                                  (("1"
                                                    (typepred
                                                     "inf({x | c!1 <= x & x < b!1})")
                                                    (("1"
                                                      (name-replace
                                                       "CC"
                                                       "inf({x | c!1 <= x & x < b!1})")
                                                      (("1"
                                                        (expand
                                                         "greatest_lower_bound")
                                                        (("1"
                                                          (expand
                                                           "least_upper_bound")
                                                          (("1"
                                                            (case-replace
                                                             "CC=c!1")
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -2)
                                                              (("1"
                                                                (case-replace
                                                                 "BB=b!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     "upper_bound")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "b!1")
                                                                        (("2"
                                                                          (replace
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "<="
                                                                             -2
                                                                             2)
                                                                            (("2"
                                                                              (replace
                                                                               1)
                                                                              (("2"
                                                                                (inst-cp
                                                                                 -
                                                                                 "c!1")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "(b!1+BB)/2")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               3
                                                               -2)
                                                              (("2"
                                                                (expand
                                                                 "lower_bound")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "c!1")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "c!1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "nonempty?")
                                                      (("2"
                                                        (expand
                                                         "below_bounded")
                                                        (("2"
                                                          (inst
                                                           +
                                                           "c!1")
                                                          (("2"
                                                            (expand
                                                             "lower_bound")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "nonempty?")
                                                  (("2"
                                                    (expand
                                                     "above_bounded")
                                                    (("2"
                                                      (inst + "b!1")
                                                      (("2"
                                                        (expand
                                                         "upper_bound")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand "bounded_interval?")
                                    (("2"
                                      (split)
                                      (("1"
                                        (expand "interval?")
                                        (("1"
                                          (skosimp)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "bounded?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "nonempty?")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (expand
                                                   "above_bounded")
                                                  (("1"
                                                    (inst + "b!1")
                                                    (("1"
                                                      (expand
                                                       "upper_bound")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "below_bounded")
                                                  (("2"
                                                    (inst + "a!1")
                                                    (("2"
                                                      (expand
                                                       "lower_bound")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand "bounded_interval?")
                                  (("2"
                                    (split)
                                    (("1"
                                      (expand "interval?")
                                      (("1"
                                        (skosimp)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "bounded?")
                                      (("2"
                                        (expand "nonempty?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split)
                                              (("1"
                                                (expand
                                                 "above_bounded")
                                                (("1"
                                                  (inst + "b!1")
                                                  (("1"
                                                    (expand
                                                     "upper_bound")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "below_bounded")
                                                (("2"
                                                  (inst + "c!1")
                                                  (("2"
                                                    (expand
                                                     "lower_bound")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (expand "bounded_interval?")
                                (("2"
                                  (split)
                                  (("1"
                                    (expand "interval?")
                                    (("1"
                                      (skosimp)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "bounded?")
                                    (("2"
                                      (expand "nonempty?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split)
                                            (("1"
                                              (expand "above_bounded")
                                              (("1"
                                                (inst + "c!1")
                                                (("1"
                                                  (expand
                                                   "upper_bound")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "below_bounded")
                                              (("2"
                                                (inst + "a!1")
                                                (("2"
                                                  (expand
                                                   "lower_bound")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 2)
                      (("2" (apply-extensionality :hide? t)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (apply-extensionality :hide? t)
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace -1 1)
            (("2" (assert)
              (("2" (case "c!1<=a!1")
                (("1" (hide 1)
                  (("1"
                    (case-replace
                     "intersection(y!1, {x | x < c!1})=emptyset[real]")
                    (("1"
                      (case-replace "intersection
                                        (y!1, complement({x | x < c!1}))=y!1")
                      (("1" (hide -1 -2)
                        (("1"
                          (rewrite
                           "lebesgue_outer_measure_bounded_interval" 1)
                          (("1" (rewrite "length_empty_rew")
                            (("1" (expand "x_add")
                              (("1"
                                (expand "x_le")
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "bounded_interval?")
                              (("2"
                                (split)
                                (("1"
                                  (expand "emptyset")
                                  (("1"
                                    (expand "interval?")
                                    (("1" (skosimp) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "bounded?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (rewrite "emptyset_is_empty?")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 2)
                        (("2" (apply-extensionality :hide? t)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (apply-extensionality :hide? t)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "c!1>=b!1")
                  (("1"
                    (case-replace
                     "intersection(y!1, {x | x < c!1})=y!1")
                    (("1"
                      (case-replace "intersection
                                        (y!1, complement({x | x < c!1}))=emptyset[real]")
                      (("1" (hide -1 -2)
                        (("1"
                          (name-replace "DRL1"
                           "lebesgue_outer_measure(y!1)")
                          (("1"
                            (rewrite
                             "lebesgue_outer_measure_bounded_interval")
                            (("1" (rewrite "length_empty_rew")
                              (("1"
                                (expand "x_add")
                                (("1"
                                  (expand "x_le")
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (expand "bounded_interval?")
                                (("2"
                                  (split)
                                  (("1"
                                    (expand "emptyset")
                                    (("1"
                                      (expand "interval?")
                                      (("1" (skosimp) nil nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 4)
                        (("2" (apply-extensionality 1 :hide? t)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (hide 4)
                      (("2" (apply-extensionality 1 :hide? t)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    nil nil nil
    (lebesgue_outer_measure_bounded_interval formula-decl nil
     real_lebesgue_scaf nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (outer_measurable_def formula-decl nil outer_measure_props
     "measure_integration/")
    (x_length const-decl "extended_nnreal" real_lebesgue_scaf nil)
    (O const-decl "T3" function_props nil)
    (interval nonempty-type-eq-decl nil real_topology "metric_space/")
    (interval? const-decl "bool" real_topology "metric_space/") nil
    (IUnion const-decl "set[T]" indexed_sets nil)
    (subset? const-decl "bool" sets nil)
    (sequence type-eq-decl nil sequences nil)
    (bounded_open_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (bounded_open_interval? const-decl "bool" real_topology
     "metric_space/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil) nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil) nil
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (pred type-eq-decl nil defined_types nil)
    (total_order? const-decl "bool" orders nil)
    (<= const-decl "bool" reals nil)
    (partial_order? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil) nil
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (bounded_interval? const-decl "bool" real_topology "metric_space/")
    nil nil nil
    (om_increasing? const-decl "bool" outer_measure_def
     "measure_integration/")
    (om_countably_subadditive? const-decl "bool" outer_measure_def
     "measure_integration/")
    nil
    (lebesgue_outer_measure_eq_length formula-decl nil
     real_lebesgue_scaf nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bounded_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (length const-decl "nnreal" real_intervals_aux nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (setof type-eq-decl nil defined_types nil)
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ball const-decl "set[T]" metric_space_def "metric_space/")
    (upper_bound const-decl "bool" bound_defs "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    nil nil nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (metric_open? const-decl "bool" metric_space_def "metric_space/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (bounded? const-decl "bool" real_topology "metric_space/")
    (emptyset const-decl "set" sets nil)
    (length_empty_rew formula-decl nil real_intervals_aux nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil) nil
    nil nil nil nil nil nil nil nil
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    nil nil (length_open_rew formula-decl nil real_intervals_aux nil)
    (intersection_commutative formula-decl nil sets_lemmas nil) nil
    (intersection_empty formula-decl nil sets_lemmas nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) nil
    nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (limit_sum formula-decl nil convergence_ops "analysis/")
    (+ const-decl "[T -> real]" real_fun_ops "reals/")
    (series_sum formula-decl nil series "series/")
    (comparison_test formula-decl nil series "series/")
    (convergent? const-decl "bool" convergence_sequences "analysis/")
    nil (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil) nil nil nil
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (x_le const-decl "bool" extended_nnreal "extended_nnreal/") nil
    (outer_measure? const-decl "bool" outer_measure_def
     "measure_integration/")
    (outer_measure nonempty-type-eq-decl nil outer_measure_def
     "measure_integration/")
    (lebesgue_outer_measure const-decl "outer_measure"
     real_lebesgue_scaf nil)
    (intersection const-decl "set" sets nil)
    (complement const-decl "set" sets nil))
   shostak))
 (lebesgue_measurable_TCC1 0
  (lebesgue_measurable_TCC1-1 nil 3431861758
   ("" (lemma "outer_measurable_is_sigma_algebra")
    (("" (propax) nil nil)) nil)
   ((outer_measurable_is_sigma_algebra formula-decl nil
     outer_measure_props "measure_integration/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (outer_measure? const-decl "bool" outer_measure_def
     "measure_integration/")
    (outer_measure nonempty-type-eq-decl nil outer_measure_def
     "measure_integration/")
    (lebesgue_outer_measure const-decl "outer_measure"
     real_lebesgue_scaf nil))
   nil
   (lebesgue_measurable subtype
    "extend[setof[real], (outer_measure_props[real, real_lebesgue_scaf.lebesgue_outer_measure].outer_measurable?), booleans.bool, booleans.FALSE].extend(sets[(outer_measure_props[real, real_lebesgue_scaf.lebesgue_outer_measure].outer_measurable?)].fullset)"
    "sigma_algebra[real]")))
 (open_interval_is_lebesgue_measurable 0
  (open_interval_is_lebesgue_measurable-1 nil 3409408254
   ("" (skolem + ("i!1"))
    (("" (typepred "i!1")
      (("" (skosimp)
        ((""
          (lemma "outer_measurable_open_semi_infinite" ("a" "x!1-r!1"))
          ((""
            (lemma "outer_measurable_open_semi_infinite"
             ("a" "x!1+r!1"))
            ((""
              (lemma "outer_measurable_difference"
               ("a" "{x | x < x!1 + r!1}" "b" "{x | x < x!1 - r!1}"))
              (("1"
                (case "outer_measurable?(singleton[real](x!1 - r!1))")
                (("1"
                  (lemma "outer_measurable_difference"
                   ("a" "difference[real]
                            ({x | x < x!1 + r!1}, {x | x < x!1 - r!1})"
                    "b" "singleton[real](x!1 - r!1)"))
                  (("1"
                    (case-replace "difference[real]
                            (difference[real]
                                 ({x | x < x!1 + r!1},
                                  {x | x < x!1 - r!1}),singleton[real](x!1 - r!1))=i!1")
                    (("1" (replace -6)
                      (("1" (hide-all-but 1)
                        (("1" (apply-extensionality :hide? t)
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil) ("3" (assert) nil nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2"
                    (case "outer_negligible?(singleton[real](x!1 - r!1))")
                    (("1"
                      (rewrite "outer_negligible_is_outer_measurable")
                      nil nil)
                     ("2" (hide 2)
                      (("2" (expand "outer_negligible?")
                        (("2"
                          (lemma "lebesgue_outer_measure_singleton"
                           ("x" "x!1-r!1"))
                          (("2" (expand "x_eq")
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2" (decompose-equality) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil) ("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((open_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (ball const-decl "set[T]" metric_space_def "metric_space/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (outer_measurable_open_semi_infinite formula-decl nil
     real_lebesgue_scaf nil)
    (outer_measurable_difference judgement-tcc nil outer_measure_props
     "measure_integration/")
    (outer_measurable? const-decl "bool" outer_measure_props
     "measure_integration/")
    (outer_measurable nonempty-type-eq-decl nil outer_measure_props
     "measure_integration/")
    (< const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (outer_measure? const-decl "bool" outer_measure_def
     "measure_integration/")
    (outer_measure nonempty-type-eq-decl nil outer_measure_def
     "measure_integration/")
    (lebesgue_outer_measure const-decl "outer_measure"
     real_lebesgue_scaf nil)
    (lebesgue_outer_measure_singleton formula-decl nil
     real_lebesgue_scaf nil)
    (TRUE const-decl "bool" booleans nil) nil
    (outer_negligible nonempty-type-eq-decl nil outer_measure_props
     "measure_integration/")
    (outer_negligible_is_outer_measurable judgement-tcc nil
     outer_measure_props "measure_integration/")
    (outer_negligible? const-decl "bool" outer_measure_props
     "measure_integration/")
    nil nil nil (difference const-decl "set" sets nil) nil
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (open_interval_is_lebesgue_measurable subtype "real_lebesgue_scaf.x"
    "outer_measurable[real, lebesgue_outer_measure]")))
 (borel_is_lebesgue_measurable 0
  (borel_is_lebesgue_measurable-1 nil 3409406987
   ("" (skolem + "B")
    (("" (typepred "B")
      (("" (rewrite "borel_generated_by_open_interval")
        (("" (lemma "outer_measurable_is_sigma_algebra")
          ((""
            (lemma "generated_sigma_algebra_subset2"
             ("X" "extend
                                  [setof[real], open_interval, bool, FALSE]
                                  (fullset[open_interval])" "Y" "extend
                         [setof[real],
                          outer_measurable[real, lebesgue_outer_measure],
                          bool, FALSE]
                         (fullset
                              [outer_measurable
                                   [real, lebesgue_outer_measure]])"))
            (("" (replace -2)
              ((""
                (name-replace "MEASURABLE"
                 "generated_sigma_algebra(extend
                                  [setof[real], open_interval, bool, FALSE]
                                  (fullset[open_interval]))")
                (("" (split -1)
                  (("1" (expand "subset?")
                    (("1" (inst - "B")
                      (("1" (expand "member")
                        (("1" (assert)
                          (("1" (expand "fullset")
                            (("1" (expand "extend")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "fullset")
                      (("2" (expand "extend")
                        (("2" (expand "subset?")
                          (("2" (expand "member")
                            (("2" (skosimp)
                              (("2"
                                (prop)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (rewrite
                                     "open_interval_is_lebesgue_measurable")
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (inst + "x!2" "r!1")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((borel nonempty-type-eq-decl nil borel "measure_integration/")
    (borel? const-decl "sigma_algebra" borel "measure_integration/")
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (outer_measurable_is_sigma_algebra formula-decl nil
     outer_measure_props "measure_integration/")
    (set type-eq-decl nil sets nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (outer_measure? const-decl "bool" outer_measure_def
     "measure_integration/")
    (outer_measure nonempty-type-eq-decl nil outer_measure_def
     "measure_integration/")
    (lebesgue_outer_measure const-decl "outer_measure"
     real_lebesgue_scaf nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil) nil
    (open_interval_is_lebesgue_measurable judgement-tcc nil
     real_lebesgue_scaf nil)
    (generated_sigma_algebra const-decl "sigma_algebra"
     subset_algebra_def "measure_integration/")
    (generated_sigma_algebra_subset2 formula-decl nil
     subset_algebra_def "measure_integration/")
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ball const-decl "set[T]" metric_space_def "metric_space/")
    (open_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (fullset const-decl "set" sets nil)
    (outer_measurable? const-decl "bool" outer_measure_props
     "measure_integration/")
    (outer_measurable nonempty-type-eq-decl nil outer_measure_props
     "measure_integration/")
    (borel_generated_by_open_interval formula-decl nil real_borel
     "measure_integration/"))
   nil
   (borel_is_lebesgue_measurable subtype "real_lebesgue_scaf.x"
    "outer_measurable[real, lebesgue_outer_measure]")))
 (lebesgue_measure_TCC1 0
  (lebesgue_measure_TCC1-1 nil 3397470171
   ("" (split)
    (("1" (skosimp)
      (("1" (expand "lebesgue_measurable")
        (("1" (expand "fullset")
          (("1" (expand "extend")
            (("1" (split)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (prop)
                    (("1" (expand "induced_sigma_algebra")
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (prop)
                (("2" (expand "induced_sigma_algebra")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "complete_sigma_finite?")
      (("2" (typepred "induced_measure[real, lebesgue_outer_measure]")
        (("2" (expand "complete_measure?")
          (("2" (flatten)
            (("2" (split)
              (("1" (expand "measure?")
                (("1" (flatten)
                  (("1" (split)
                    (("1" (expand "measure_empty?")
                      (("1" (propax) nil nil)) nil)
                     ("2" (hide -1 -3)
                      (("2" (expand "measure_countably_additive?")
                        (("2" (skosimp)
                          (("2" (inst - "X!1")
                            (("1" (expand "o")
                              (("1"
                                (expand "lebesgue_measurable")
                                (("1"
                                  (expand "fullset")
                                  (("1"
                                    (expand "extend")
                                    (("1"
                                      (expand "induced_sigma_algebra")
                                      (("1" (prop) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (split)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (typepred "X!1(x1!1)")
                                    (("1"
                                      (expand "lebesgue_measurable")
                                      (("1"
                                        (expand "fullset")
                                        (("1"
                                          (expand "extend")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (expand
                                               "induced_sigma_algebra")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand
                                   "disjoint_indexed_measurable?")
                                  (("2"
                                    (typepred "X!1")
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (expand
                                         "disjoint_indexed_measurable?")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1)
                (("2" (expand "measure_complete?")
                  (("2" (skosimp)
                    (("2" (inst - "x!1" "a!1")
                      (("2" (assert)
                        (("2" (replace -1 -3)
                          (("2" (replace -2 -3)
                            (("2" (hide -1 -2)
                              (("2"
                                (expand "lebesgue_measurable")
                                (("2"
                                  (expand "fullset")
                                  (("2"
                                    (expand "extend")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (prop)
                                        (("2"
                                          (expand
                                           "induced_sigma_algebra")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -1 -2)
                (("3" (expand "measure_sigma_finite?")
                  (("3"
                    (name "RING"
                          "lambda n: {x | (-(n+1) < x & x <= -n) OR (n<= x & x < n+1)}")
                    (("3" (case "forall n: outer_measurable?(RING(n))")
                      (("1" (inst + "RING")
                        (("1" (split)
                          (("1" (apply-extensionality :hide? t)
                            (("1" (expand "fullset")
                              (("1"
                                (expand "IUnion")
                                (("1"
                                  (expand "RING")
                                  (("1"
                                    (hide-all-but 1)
                                    (("1"
                                      (lemma "trichotomy" ("x" "x!1"))
                                      (("1"
                                        (split)
                                        (("1"
                                          (inst + "floor(x!1)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst + "0")
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (inst + "-ceiling(x!1)")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (typepred "ceiling(x!1)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp)
                            (("2" (expand "induced_measure")
                              (("2"
                                (expand "restrict")
                                (("2"
                                  (lemma
                                   "m_outer_increasing"
                                   ("x"
                                    "RING(i!1)"
                                    "y"
                                    "{x | -(i!1+1) < x AND x < i!1+1}"))
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (lemma
                                       "lebesgue_outer_measure_le_length"
                                       ("b"
                                        "{x | -(i!1 + 1) < x AND x < i!1 + 1}"))
                                      (("1"
                                        (name-replace
                                         "LHS"
                                         "lebesgue_outer_measure(RING(i!1))")
                                        (("1"
                                          (name-replace
                                           "MID"
                                           "lebesgue_outer_measure({x | -(i!1 + 1) < x AND x < i!1 + 1})")
                                          (("1"
                                            (expand "x_length")
                                            (("1"
                                              (case-replace
                                               "bounded_interval?({x | -(1 + i!1) < x AND x < 1 + i!1})")
                                              (("1"
                                                (expand "x_le")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (expand
                                                   "bounded_interval?")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "bounded?")
                                                      (("2"
                                                        (expand
                                                         "nonempty?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (expand
                                                                 "above_bounded")
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "1+i!1")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "below_bounded")
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "-(1+i!1)")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (expand "bounded_interval?")
                                          (("2"
                                            (split)
                                            (("1"
                                              (ground)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (expand "bounded?")
                                              (("2"
                                                (expand "nonempty?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (expand
                                                         "above_bounded")
                                                        (("1"
                                                          (inst
                                                           +
                                                           "1+i!1")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "below_bounded")
                                                        (("2"
                                                          (inst
                                                           +
                                                           "-(1+i!1)")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (expand "RING")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (split)
                          (("1" (skosimp)
                            (("1" (inst - "x1!1")
                              (("1"
                                (expand "lebesgue_measurable")
                                (("1"
                                  (expand "fullset")
                                  (("1"
                                    (expand "extend")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -2)
                            (("2"
                              (expand "disjoint_indexed_measurable?")
                              (("2"
                                (expand "disjoint?")
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (expand "disjoint?")
                                    (("2"
                                      (expand "RING")
                                      (("2"
                                        (expand "intersection")
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (lemma
                                                 "trichotomy"
                                                 ("x" "x!1"))
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (expand "<=")
                                                    (("1"
                                                      (lemma
                                                       "trich_lt"
                                                       ("x"
                                                        "i!1"
                                                        "y"
                                                        "j!1"))
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (lemma
                                                     "trich_lt"
                                                     ("x"
                                                      "i!1"
                                                      "y"
                                                      "j!1"))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 2)
                        (("2"
                          (lemma
                           "open_interval_is_lebesgue_measurable")
                          (("2" (expand "RING")
                            (("2" (skosimp)
                              (("2"
                                (case-replace "n!1=0")
                                (("1"
                                  (inst - "{x | -1 < x & x < 1}")
                                  (("1"
                                    (case-replace
                                     "{x | (-1 < x & x <= -0) OR (0 <= x & x < 1)}={x | -1 < x & x < 1}")
                                    (("1"
                                      (apply-extensionality :hide? t)
                                      (("1"
                                        (hide -2 2)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst + "0" "1")
                                    (("2"
                                      (apply-extensionality :hide? t)
                                      (("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst-cp
                                   -
                                   "{x | -(1+n!1) < x & x < (1+n!1)}")
                                  (("1"
                                    (inst - "{x | -n!1 < x & x < n!1}")
                                    (("1"
                                      (lemma
                                       "outer_measurable_difference"
                                       ("a"
                                        "{x | -(1 + n!1) < x & x < (1 + n!1)}"
                                        "b"
                                        "{x | -n!1 < x & x < n!1}"))
                                      (("1"
                                        (case-replace
                                         "(difference[real]
               ({x | -(1 + n!1) < x & x < (1 + n!1)},
                {x | -n!1 < x & x < n!1}))={x |
                           (-(1 + n!1) < x & x <= -n!1) OR
                            (n!1 <= x & x < 1 + n!1)}")
                                        (("1"
                                          (hide-all-but (1 2))
                                          (("1"
                                            (apply-extensionality
                                             :hide?
                                             t)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil)
                                       ("3" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (inst + "0" "n!1")
                                      (("1"
                                        (apply-extensionality :hide? t)
                                        (("1"
                                          (hide-all-but (1 2))
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst + "0" "n!1+1")
                                    (("2"
                                      (apply-extensionality :hide? t)
                                      (("2"
                                        (hide-all-but (1 2))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (O const-decl "T3" function_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (disjoint_indexed_measurable? const-decl "bool"
     generalized_measure_def "measure_integration/")
    (disjoint_indexed_measurable nonempty-type-eq-decl nil
     generalized_measure_def "measure_integration/")
    nil
    (measure_countably_additive? const-decl "bool"
     generalized_measure_def "measure_integration/")
    (measure_empty? const-decl "bool" generalized_measure_def
     "measure_integration/")
    (measure? const-decl "bool" generalized_measure_def
     "measure_integration/")
    (measure_complete? const-decl "bool" generalized_measure_def
     "measure_integration/")
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (measure_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (outer_measurable? const-decl "bool" outer_measure_props
     "measure_integration/")
    (empty? const-decl "bool" sets nil)
    (trich_lt formula-decl nil real_props nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" indexed_sets_aux "sets_aux/")
    (trichotomy formula-decl nil real_axioms nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_is_complete name-judgement "metric_complete" real_topology
     "metric_space/")
    nil nil nil nil nil (IUnion const-decl "set[T]" indexed_sets nil)
    (m_outer_increasing formula-decl nil outer_measure_props
     "measure_integration/")
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (lebesgue_outer_measure_le_length formula-decl nil
     real_lebesgue_scaf nil)
    (bounded_interval? const-decl "bool" real_topology "metric_space/")
    (bounded_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (x_le const-decl "bool" extended_nnreal "extended_nnreal/")
    (bounded? const-decl "bool" real_topology "metric_space/")
    (upper_bound const-decl "bool" bound_defs "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (lower_bound const-decl "bool" bound_defs "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (nonempty? const-decl "bool" sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (interval? const-decl "bool" real_topology "metric_space/")
    (x_length const-decl "extended_nnreal" real_lebesgue_scaf nil)
    (restrict const-decl "R" restrict nil) nil
    (open_interval_is_lebesgue_measurable judgement-tcc nil
     real_lebesgue_scaf nil)
    nil
    (outer_measurable_difference judgement-tcc nil outer_measure_props
     "measure_integration/")
    (outer_measurable nonempty-type-eq-decl nil outer_measure_props
     "measure_integration/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (difference const-decl "set" sets nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ball const-decl "set[T]" metric_space_def "metric_space/")
    (open_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    nil
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (set type-eq-decl nil sets nil) (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (outer_measure? const-decl "bool" outer_measure_def
     "measure_integration/")
    (outer_measure nonempty-type-eq-decl nil outer_measure_def
     "measure_integration/")
    (lebesgue_outer_measure const-decl "outer_measure"
     real_lebesgue_scaf nil)
    (complete_measure? const-decl "bool" generalized_measure_def
     "measure_integration/")
    (complete_measure nonempty-type-eq-decl nil generalized_measure_def
     "measure_integration/")
    (induced_measure const-decl "complete_measure" outer_measure_props
     "measure_integration/")
    (fullset const-decl "set" sets nil)
    (induced_sigma_algebra const-decl "sigma_algebra[T]"
     outer_measure_props "measure_integration/")
    (extend const-decl "R" extend nil)
    (lebesgue_measurable const-decl "sigma_algebra[real]"
     real_lebesgue_scaf nil))
   nil
   (lebesgue_measure subtype
    "outer_measure_props[real, real_lebesgue_scaf.lebesgue_outer_measure].induced_measure"
    "complete_sigma_finite[real, lebesgue_measurable]"))))

